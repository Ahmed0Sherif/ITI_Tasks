
D16_Task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  000020c4  00002158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800168  00800168  00002260  2**0
                  ALLOC
  3 .stab         00001590  00000000  00000000  00002260  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ed6  00000000  00000000  000037f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000046c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d4  00000000  00000000  00004846  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000218c  00000000  00000000  00004a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000122c  00000000  00000000  00006ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001103  00000000  00000000  00007dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00008ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ee  00000000  00000000  00009078  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000932  00000000  00000000  00009366  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009c98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 50 0f 	jmp	0x1ea0	; 0x1ea0 <__vector_1>
       8:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <__vector_2>
       c:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__vector_3>
      10:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__vector_4>
      14:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a6 38       	cpi	r26, 0x86	; 134
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 ec       	ldi	r30, 0xC4	; 196
      78:	f0 e2       	ldi	r31, 0x20	; 32
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <main>
      8a:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 25 04 	call	0x84a	; 0x84a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 25 04 	call	0x84a	; 0x84a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 45 10 	jmp	0x208a	; 0x208a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 35 10 	jmp	0x206a	; 0x206a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 35 10 	jmp	0x206a	; 0x206a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 45 10 	jmp	0x208a	; 0x208a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 31 10 	jmp	0x2062	; 0x2062 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 4d 10 	jmp	0x209a	; 0x209a <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 35 10 	jmp	0x206a	; 0x206a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <__epilogue_restores__+0x18>

000007ea <__lesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 35 10 	jmp	0x206a	; 0x206a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__lesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__lesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__lesf2+0x58>
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <__epilogue_restores__+0x18>

0000084a <__fixsfsi>:
     84a:	ac e0       	ldi	r26, 0x0C	; 12
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 39 10 	jmp	0x2072	; 0x2072 <__prologue_saves__+0x20>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	ce 01       	movw	r24, r28
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	be 01       	movw	r22, r28
     864:	6b 5f       	subi	r22, 0xFB	; 251
     866:	7f 4f       	sbci	r23, 0xFF	; 255
     868:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     86c:	8d 81       	ldd	r24, Y+5	; 0x05
     86e:	82 30       	cpi	r24, 0x02	; 2
     870:	61 f1       	breq	.+88     	; 0x8ca <__stack+0x6b>
     872:	82 30       	cpi	r24, 0x02	; 2
     874:	50 f1       	brcs	.+84     	; 0x8ca <__stack+0x6b>
     876:	84 30       	cpi	r24, 0x04	; 4
     878:	21 f4       	brne	.+8      	; 0x882 <__stack+0x23>
     87a:	8e 81       	ldd	r24, Y+6	; 0x06
     87c:	88 23       	and	r24, r24
     87e:	51 f1       	breq	.+84     	; 0x8d4 <__stack+0x75>
     880:	2e c0       	rjmp	.+92     	; 0x8de <__stack+0x7f>
     882:	2f 81       	ldd	r18, Y+7	; 0x07
     884:	38 85       	ldd	r19, Y+8	; 0x08
     886:	37 fd       	sbrc	r19, 7
     888:	20 c0       	rjmp	.+64     	; 0x8ca <__stack+0x6b>
     88a:	6e 81       	ldd	r22, Y+6	; 0x06
     88c:	2f 31       	cpi	r18, 0x1F	; 31
     88e:	31 05       	cpc	r19, r1
     890:	1c f0       	brlt	.+6      	; 0x898 <__stack+0x39>
     892:	66 23       	and	r22, r22
     894:	f9 f0       	breq	.+62     	; 0x8d4 <__stack+0x75>
     896:	23 c0       	rjmp	.+70     	; 0x8de <__stack+0x7f>
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	82 1b       	sub	r24, r18
     89e:	93 0b       	sbc	r25, r19
     8a0:	29 85       	ldd	r18, Y+9	; 0x09
     8a2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8a4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8a6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <__stack+0x53>
     8aa:	56 95       	lsr	r21
     8ac:	47 95       	ror	r20
     8ae:	37 95       	ror	r19
     8b0:	27 95       	ror	r18
     8b2:	8a 95       	dec	r24
     8b4:	d2 f7       	brpl	.-12     	; 0x8aa <__stack+0x4b>
     8b6:	66 23       	and	r22, r22
     8b8:	b1 f0       	breq	.+44     	; 0x8e6 <__stack+0x87>
     8ba:	50 95       	com	r21
     8bc:	40 95       	com	r20
     8be:	30 95       	com	r19
     8c0:	21 95       	neg	r18
     8c2:	3f 4f       	sbci	r19, 0xFF	; 255
     8c4:	4f 4f       	sbci	r20, 0xFF	; 255
     8c6:	5f 4f       	sbci	r21, 0xFF	; 255
     8c8:	0e c0       	rjmp	.+28     	; 0x8e6 <__stack+0x87>
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	09 c0       	rjmp	.+18     	; 0x8e6 <__stack+0x87>
     8d4:	2f ef       	ldi	r18, 0xFF	; 255
     8d6:	3f ef       	ldi	r19, 0xFF	; 255
     8d8:	4f ef       	ldi	r20, 0xFF	; 255
     8da:	5f e7       	ldi	r21, 0x7F	; 127
     8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <__stack+0x87>
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	50 e8       	ldi	r21, 0x80	; 128
     8e6:	b9 01       	movw	r22, r18
     8e8:	ca 01       	movw	r24, r20
     8ea:	2c 96       	adiw	r28, 0x0c	; 12
     8ec:	e2 e0       	ldi	r30, 0x02	; 2
     8ee:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <__epilogue_restores__+0x20>

000008f2 <__floatunsisf>:
     8f2:	a8 e0       	ldi	r26, 0x08	; 8
     8f4:	b0 e0       	ldi	r27, 0x00	; 0
     8f6:	ef e7       	ldi	r30, 0x7F	; 127
     8f8:	f4 e0       	ldi	r31, 0x04	; 4
     8fa:	0c 94 31 10 	jmp	0x2062	; 0x2062 <__prologue_saves__+0x10>
     8fe:	7b 01       	movw	r14, r22
     900:	8c 01       	movw	r16, r24
     902:	61 15       	cp	r22, r1
     904:	71 05       	cpc	r23, r1
     906:	81 05       	cpc	r24, r1
     908:	91 05       	cpc	r25, r1
     90a:	19 f4       	brne	.+6      	; 0x912 <__floatunsisf+0x20>
     90c:	82 e0       	ldi	r24, 0x02	; 2
     90e:	89 83       	std	Y+1, r24	; 0x01
     910:	60 c0       	rjmp	.+192    	; 0x9d2 <__floatunsisf+0xe0>
     912:	83 e0       	ldi	r24, 0x03	; 3
     914:	89 83       	std	Y+1, r24	; 0x01
     916:	8e e1       	ldi	r24, 0x1E	; 30
     918:	c8 2e       	mov	r12, r24
     91a:	d1 2c       	mov	r13, r1
     91c:	dc 82       	std	Y+4, r13	; 0x04
     91e:	cb 82       	std	Y+3, r12	; 0x03
     920:	ed 82       	std	Y+5, r14	; 0x05
     922:	fe 82       	std	Y+6, r15	; 0x06
     924:	0f 83       	std	Y+7, r16	; 0x07
     926:	18 87       	std	Y+8, r17	; 0x08
     928:	c8 01       	movw	r24, r16
     92a:	b7 01       	movw	r22, r14
     92c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__clzsi2>
     930:	fc 01       	movw	r30, r24
     932:	31 97       	sbiw	r30, 0x01	; 1
     934:	f7 ff       	sbrs	r31, 7
     936:	3b c0       	rjmp	.+118    	; 0x9ae <__floatunsisf+0xbc>
     938:	22 27       	eor	r18, r18
     93a:	33 27       	eor	r19, r19
     93c:	2e 1b       	sub	r18, r30
     93e:	3f 0b       	sbc	r19, r31
     940:	57 01       	movw	r10, r14
     942:	68 01       	movw	r12, r16
     944:	02 2e       	mov	r0, r18
     946:	04 c0       	rjmp	.+8      	; 0x950 <__floatunsisf+0x5e>
     948:	d6 94       	lsr	r13
     94a:	c7 94       	ror	r12
     94c:	b7 94       	ror	r11
     94e:	a7 94       	ror	r10
     950:	0a 94       	dec	r0
     952:	d2 f7       	brpl	.-12     	; 0x948 <__floatunsisf+0x56>
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	a0 e0       	ldi	r26, 0x00	; 0
     962:	b0 e0       	ldi	r27, 0x00	; 0
     964:	04 c0       	rjmp	.+8      	; 0x96e <__floatunsisf+0x7c>
     966:	88 0f       	add	r24, r24
     968:	99 1f       	adc	r25, r25
     96a:	aa 1f       	adc	r26, r26
     96c:	bb 1f       	adc	r27, r27
     96e:	2a 95       	dec	r18
     970:	d2 f7       	brpl	.-12     	; 0x966 <__floatunsisf+0x74>
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	a1 09       	sbc	r26, r1
     976:	b1 09       	sbc	r27, r1
     978:	8e 21       	and	r24, r14
     97a:	9f 21       	and	r25, r15
     97c:	a0 23       	and	r26, r16
     97e:	b1 23       	and	r27, r17
     980:	00 97       	sbiw	r24, 0x00	; 0
     982:	a1 05       	cpc	r26, r1
     984:	b1 05       	cpc	r27, r1
     986:	21 f0       	breq	.+8      	; 0x990 <__floatunsisf+0x9e>
     988:	41 e0       	ldi	r20, 0x01	; 1
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	60 e0       	ldi	r22, 0x00	; 0
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	4a 29       	or	r20, r10
     992:	5b 29       	or	r21, r11
     994:	6c 29       	or	r22, r12
     996:	7d 29       	or	r23, r13
     998:	4d 83       	std	Y+5, r20	; 0x05
     99a:	5e 83       	std	Y+6, r21	; 0x06
     99c:	6f 83       	std	Y+7, r22	; 0x07
     99e:	78 87       	std	Y+8, r23	; 0x08
     9a0:	8e e1       	ldi	r24, 0x1E	; 30
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	8e 1b       	sub	r24, r30
     9a6:	9f 0b       	sbc	r25, r31
     9a8:	9c 83       	std	Y+4, r25	; 0x04
     9aa:	8b 83       	std	Y+3, r24	; 0x03
     9ac:	12 c0       	rjmp	.+36     	; 0x9d2 <__floatunsisf+0xe0>
     9ae:	30 97       	sbiw	r30, 0x00	; 0
     9b0:	81 f0       	breq	.+32     	; 0x9d2 <__floatunsisf+0xe0>
     9b2:	0e 2e       	mov	r0, r30
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0xcc>
     9b6:	ee 0c       	add	r14, r14
     9b8:	ff 1c       	adc	r15, r15
     9ba:	00 1f       	adc	r16, r16
     9bc:	11 1f       	adc	r17, r17
     9be:	0a 94       	dec	r0
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0xc4>
     9c2:	ed 82       	std	Y+5, r14	; 0x05
     9c4:	fe 82       	std	Y+6, r15	; 0x06
     9c6:	0f 83       	std	Y+7, r16	; 0x07
     9c8:	18 87       	std	Y+8, r17	; 0x08
     9ca:	ce 1a       	sub	r12, r30
     9cc:	df 0a       	sbc	r13, r31
     9ce:	dc 82       	std	Y+4, r13	; 0x04
     9d0:	cb 82       	std	Y+3, r12	; 0x03
     9d2:	1a 82       	std	Y+2, r1	; 0x02
     9d4:	ce 01       	movw	r24, r28
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     9dc:	28 96       	adiw	r28, 0x08	; 8
     9de:	ea e0       	ldi	r30, 0x0A	; 10
     9e0:	0c 94 4d 10 	jmp	0x209a	; 0x209a <__epilogue_restores__+0x10>

000009e4 <__clzsi2>:
     9e4:	ef 92       	push	r14
     9e6:	ff 92       	push	r15
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	7b 01       	movw	r14, r22
     9ee:	8c 01       	movw	r16, r24
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	e8 16       	cp	r14, r24
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	f8 06       	cpc	r15, r24
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	08 07       	cpc	r16, r24
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	18 07       	cpc	r17, r24
     a00:	88 f4       	brcc	.+34     	; 0xa24 <__clzsi2+0x40>
     a02:	8f ef       	ldi	r24, 0xFF	; 255
     a04:	e8 16       	cp	r14, r24
     a06:	f1 04       	cpc	r15, r1
     a08:	01 05       	cpc	r16, r1
     a0a:	11 05       	cpc	r17, r1
     a0c:	31 f0       	breq	.+12     	; 0xa1a <__clzsi2+0x36>
     a0e:	28 f0       	brcs	.+10     	; 0xa1a <__clzsi2+0x36>
     a10:	88 e0       	ldi	r24, 0x08	; 8
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	a0 e0       	ldi	r26, 0x00	; 0
     a16:	b0 e0       	ldi	r27, 0x00	; 0
     a18:	17 c0       	rjmp	.+46     	; 0xa48 <__clzsi2+0x64>
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	a0 e0       	ldi	r26, 0x00	; 0
     a20:	b0 e0       	ldi	r27, 0x00	; 0
     a22:	12 c0       	rjmp	.+36     	; 0xa48 <__clzsi2+0x64>
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	e8 16       	cp	r14, r24
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	f8 06       	cpc	r15, r24
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	08 07       	cpc	r16, r24
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	18 07       	cpc	r17, r24
     a34:	28 f0       	brcs	.+10     	; 0xa40 <__clzsi2+0x5c>
     a36:	88 e1       	ldi	r24, 0x18	; 24
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	a0 e0       	ldi	r26, 0x00	; 0
     a3c:	b0 e0       	ldi	r27, 0x00	; 0
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__clzsi2+0x64>
     a40:	80 e1       	ldi	r24, 0x10	; 16
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	20 e2       	ldi	r18, 0x20	; 32
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	28 1b       	sub	r18, r24
     a52:	39 0b       	sbc	r19, r25
     a54:	4a 0b       	sbc	r20, r26
     a56:	5b 0b       	sbc	r21, r27
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__clzsi2+0x7e>
     a5a:	16 95       	lsr	r17
     a5c:	07 95       	ror	r16
     a5e:	f7 94       	ror	r15
     a60:	e7 94       	ror	r14
     a62:	8a 95       	dec	r24
     a64:	d2 f7       	brpl	.-12     	; 0xa5a <__clzsi2+0x76>
     a66:	f7 01       	movw	r30, r14
     a68:	e8 59       	subi	r30, 0x98	; 152
     a6a:	ff 4f       	sbci	r31, 0xFF	; 255
     a6c:	80 81       	ld	r24, Z
     a6e:	28 1b       	sub	r18, r24
     a70:	31 09       	sbc	r19, r1
     a72:	41 09       	sbc	r20, r1
     a74:	51 09       	sbc	r21, r1
     a76:	c9 01       	movw	r24, r18
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	ff 90       	pop	r15
     a7e:	ef 90       	pop	r14
     a80:	08 95       	ret

00000a82 <__pack_f>:
     a82:	df 92       	push	r13
     a84:	ef 92       	push	r14
     a86:	ff 92       	push	r15
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	fc 01       	movw	r30, r24
     a8e:	e4 80       	ldd	r14, Z+4	; 0x04
     a90:	f5 80       	ldd	r15, Z+5	; 0x05
     a92:	06 81       	ldd	r16, Z+6	; 0x06
     a94:	17 81       	ldd	r17, Z+7	; 0x07
     a96:	d1 80       	ldd	r13, Z+1	; 0x01
     a98:	80 81       	ld	r24, Z
     a9a:	82 30       	cpi	r24, 0x02	; 2
     a9c:	48 f4       	brcc	.+18     	; 0xab0 <__pack_f+0x2e>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	a0 e1       	ldi	r26, 0x10	; 16
     aa4:	b0 e0       	ldi	r27, 0x00	; 0
     aa6:	e8 2a       	or	r14, r24
     aa8:	f9 2a       	or	r15, r25
     aaa:	0a 2b       	or	r16, r26
     aac:	1b 2b       	or	r17, r27
     aae:	a5 c0       	rjmp	.+330    	; 0xbfa <__pack_f+0x178>
     ab0:	84 30       	cpi	r24, 0x04	; 4
     ab2:	09 f4       	brne	.+2      	; 0xab6 <__pack_f+0x34>
     ab4:	9f c0       	rjmp	.+318    	; 0xbf4 <__pack_f+0x172>
     ab6:	82 30       	cpi	r24, 0x02	; 2
     ab8:	21 f4       	brne	.+8      	; 0xac2 <__pack_f+0x40>
     aba:	ee 24       	eor	r14, r14
     abc:	ff 24       	eor	r15, r15
     abe:	87 01       	movw	r16, r14
     ac0:	05 c0       	rjmp	.+10     	; 0xacc <__pack_f+0x4a>
     ac2:	e1 14       	cp	r14, r1
     ac4:	f1 04       	cpc	r15, r1
     ac6:	01 05       	cpc	r16, r1
     ac8:	11 05       	cpc	r17, r1
     aca:	19 f4       	brne	.+6      	; 0xad2 <__pack_f+0x50>
     acc:	e0 e0       	ldi	r30, 0x00	; 0
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	96 c0       	rjmp	.+300    	; 0xbfe <__pack_f+0x17c>
     ad2:	62 81       	ldd	r22, Z+2	; 0x02
     ad4:	73 81       	ldd	r23, Z+3	; 0x03
     ad6:	9f ef       	ldi	r25, 0xFF	; 255
     ad8:	62 38       	cpi	r22, 0x82	; 130
     ada:	79 07       	cpc	r23, r25
     adc:	0c f0       	brlt	.+2      	; 0xae0 <__pack_f+0x5e>
     ade:	5b c0       	rjmp	.+182    	; 0xb96 <__pack_f+0x114>
     ae0:	22 e8       	ldi	r18, 0x82	; 130
     ae2:	3f ef       	ldi	r19, 0xFF	; 255
     ae4:	26 1b       	sub	r18, r22
     ae6:	37 0b       	sbc	r19, r23
     ae8:	2a 31       	cpi	r18, 0x1A	; 26
     aea:	31 05       	cpc	r19, r1
     aec:	2c f0       	brlt	.+10     	; 0xaf8 <__pack_f+0x76>
     aee:	20 e0       	ldi	r18, 0x00	; 0
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	40 e0       	ldi	r20, 0x00	; 0
     af4:	50 e0       	ldi	r21, 0x00	; 0
     af6:	2a c0       	rjmp	.+84     	; 0xb4c <__pack_f+0xca>
     af8:	b8 01       	movw	r22, r16
     afa:	a7 01       	movw	r20, r14
     afc:	02 2e       	mov	r0, r18
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__pack_f+0x86>
     b00:	76 95       	lsr	r23
     b02:	67 95       	ror	r22
     b04:	57 95       	ror	r21
     b06:	47 95       	ror	r20
     b08:	0a 94       	dec	r0
     b0a:	d2 f7       	brpl	.-12     	; 0xb00 <__pack_f+0x7e>
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	a0 e0       	ldi	r26, 0x00	; 0
     b12:	b0 e0       	ldi	r27, 0x00	; 0
     b14:	04 c0       	rjmp	.+8      	; 0xb1e <__pack_f+0x9c>
     b16:	88 0f       	add	r24, r24
     b18:	99 1f       	adc	r25, r25
     b1a:	aa 1f       	adc	r26, r26
     b1c:	bb 1f       	adc	r27, r27
     b1e:	2a 95       	dec	r18
     b20:	d2 f7       	brpl	.-12     	; 0xb16 <__pack_f+0x94>
     b22:	01 97       	sbiw	r24, 0x01	; 1
     b24:	a1 09       	sbc	r26, r1
     b26:	b1 09       	sbc	r27, r1
     b28:	8e 21       	and	r24, r14
     b2a:	9f 21       	and	r25, r15
     b2c:	a0 23       	and	r26, r16
     b2e:	b1 23       	and	r27, r17
     b30:	00 97       	sbiw	r24, 0x00	; 0
     b32:	a1 05       	cpc	r26, r1
     b34:	b1 05       	cpc	r27, r1
     b36:	21 f0       	breq	.+8      	; 0xb40 <__pack_f+0xbe>
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	a0 e0       	ldi	r26, 0x00	; 0
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	9a 01       	movw	r18, r20
     b42:	ab 01       	movw	r20, r22
     b44:	28 2b       	or	r18, r24
     b46:	39 2b       	or	r19, r25
     b48:	4a 2b       	or	r20, r26
     b4a:	5b 2b       	or	r21, r27
     b4c:	da 01       	movw	r26, r20
     b4e:	c9 01       	movw	r24, r18
     b50:	8f 77       	andi	r24, 0x7F	; 127
     b52:	90 70       	andi	r25, 0x00	; 0
     b54:	a0 70       	andi	r26, 0x00	; 0
     b56:	b0 70       	andi	r27, 0x00	; 0
     b58:	80 34       	cpi	r24, 0x40	; 64
     b5a:	91 05       	cpc	r25, r1
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	39 f4       	brne	.+14     	; 0xb70 <__pack_f+0xee>
     b62:	27 ff       	sbrs	r18, 7
     b64:	09 c0       	rjmp	.+18     	; 0xb78 <__pack_f+0xf6>
     b66:	20 5c       	subi	r18, 0xC0	; 192
     b68:	3f 4f       	sbci	r19, 0xFF	; 255
     b6a:	4f 4f       	sbci	r20, 0xFF	; 255
     b6c:	5f 4f       	sbci	r21, 0xFF	; 255
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <__pack_f+0xf6>
     b70:	21 5c       	subi	r18, 0xC1	; 193
     b72:	3f 4f       	sbci	r19, 0xFF	; 255
     b74:	4f 4f       	sbci	r20, 0xFF	; 255
     b76:	5f 4f       	sbci	r21, 0xFF	; 255
     b78:	e0 e0       	ldi	r30, 0x00	; 0
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	a0 e0       	ldi	r26, 0x00	; 0
     b80:	3a 07       	cpc	r19, r26
     b82:	a0 e0       	ldi	r26, 0x00	; 0
     b84:	4a 07       	cpc	r20, r26
     b86:	a0 e4       	ldi	r26, 0x40	; 64
     b88:	5a 07       	cpc	r21, r26
     b8a:	10 f0       	brcs	.+4      	; 0xb90 <__pack_f+0x10e>
     b8c:	e1 e0       	ldi	r30, 0x01	; 1
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	79 01       	movw	r14, r18
     b92:	8a 01       	movw	r16, r20
     b94:	27 c0       	rjmp	.+78     	; 0xbe4 <__pack_f+0x162>
     b96:	60 38       	cpi	r22, 0x80	; 128
     b98:	71 05       	cpc	r23, r1
     b9a:	64 f5       	brge	.+88     	; 0xbf4 <__pack_f+0x172>
     b9c:	fb 01       	movw	r30, r22
     b9e:	e1 58       	subi	r30, 0x81	; 129
     ba0:	ff 4f       	sbci	r31, 0xFF	; 255
     ba2:	d8 01       	movw	r26, r16
     ba4:	c7 01       	movw	r24, r14
     ba6:	8f 77       	andi	r24, 0x7F	; 127
     ba8:	90 70       	andi	r25, 0x00	; 0
     baa:	a0 70       	andi	r26, 0x00	; 0
     bac:	b0 70       	andi	r27, 0x00	; 0
     bae:	80 34       	cpi	r24, 0x40	; 64
     bb0:	91 05       	cpc	r25, r1
     bb2:	a1 05       	cpc	r26, r1
     bb4:	b1 05       	cpc	r27, r1
     bb6:	39 f4       	brne	.+14     	; 0xbc6 <__pack_f+0x144>
     bb8:	e7 fe       	sbrs	r14, 7
     bba:	0d c0       	rjmp	.+26     	; 0xbd6 <__pack_f+0x154>
     bbc:	80 e4       	ldi	r24, 0x40	; 64
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	04 c0       	rjmp	.+8      	; 0xbce <__pack_f+0x14c>
     bc6:	8f e3       	ldi	r24, 0x3F	; 63
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	a0 e0       	ldi	r26, 0x00	; 0
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e8 0e       	add	r14, r24
     bd0:	f9 1e       	adc	r15, r25
     bd2:	0a 1f       	adc	r16, r26
     bd4:	1b 1f       	adc	r17, r27
     bd6:	17 ff       	sbrs	r17, 7
     bd8:	05 c0       	rjmp	.+10     	; 0xbe4 <__pack_f+0x162>
     bda:	16 95       	lsr	r17
     bdc:	07 95       	ror	r16
     bde:	f7 94       	ror	r15
     be0:	e7 94       	ror	r14
     be2:	31 96       	adiw	r30, 0x01	; 1
     be4:	87 e0       	ldi	r24, 0x07	; 7
     be6:	16 95       	lsr	r17
     be8:	07 95       	ror	r16
     bea:	f7 94       	ror	r15
     bec:	e7 94       	ror	r14
     bee:	8a 95       	dec	r24
     bf0:	d1 f7       	brne	.-12     	; 0xbe6 <__pack_f+0x164>
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <__pack_f+0x17c>
     bf4:	ee 24       	eor	r14, r14
     bf6:	ff 24       	eor	r15, r15
     bf8:	87 01       	movw	r16, r14
     bfa:	ef ef       	ldi	r30, 0xFF	; 255
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	6e 2f       	mov	r22, r30
     c00:	67 95       	ror	r22
     c02:	66 27       	eor	r22, r22
     c04:	67 95       	ror	r22
     c06:	90 2f       	mov	r25, r16
     c08:	9f 77       	andi	r25, 0x7F	; 127
     c0a:	d7 94       	ror	r13
     c0c:	dd 24       	eor	r13, r13
     c0e:	d7 94       	ror	r13
     c10:	8e 2f       	mov	r24, r30
     c12:	86 95       	lsr	r24
     c14:	49 2f       	mov	r20, r25
     c16:	46 2b       	or	r20, r22
     c18:	58 2f       	mov	r21, r24
     c1a:	5d 29       	or	r21, r13
     c1c:	b7 01       	movw	r22, r14
     c1e:	ca 01       	movw	r24, r20
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	ff 90       	pop	r15
     c26:	ef 90       	pop	r14
     c28:	df 90       	pop	r13
     c2a:	08 95       	ret

00000c2c <__unpack_f>:
     c2c:	fc 01       	movw	r30, r24
     c2e:	db 01       	movw	r26, r22
     c30:	40 81       	ld	r20, Z
     c32:	51 81       	ldd	r21, Z+1	; 0x01
     c34:	22 81       	ldd	r18, Z+2	; 0x02
     c36:	62 2f       	mov	r22, r18
     c38:	6f 77       	andi	r22, 0x7F	; 127
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	22 1f       	adc	r18, r18
     c3e:	22 27       	eor	r18, r18
     c40:	22 1f       	adc	r18, r18
     c42:	93 81       	ldd	r25, Z+3	; 0x03
     c44:	89 2f       	mov	r24, r25
     c46:	88 0f       	add	r24, r24
     c48:	82 2b       	or	r24, r18
     c4a:	28 2f       	mov	r18, r24
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	99 1f       	adc	r25, r25
     c50:	99 27       	eor	r25, r25
     c52:	99 1f       	adc	r25, r25
     c54:	11 96       	adiw	r26, 0x01	; 1
     c56:	9c 93       	st	X, r25
     c58:	11 97       	sbiw	r26, 0x01	; 1
     c5a:	21 15       	cp	r18, r1
     c5c:	31 05       	cpc	r19, r1
     c5e:	a9 f5       	brne	.+106    	; 0xcca <__unpack_f+0x9e>
     c60:	41 15       	cp	r20, r1
     c62:	51 05       	cpc	r21, r1
     c64:	61 05       	cpc	r22, r1
     c66:	71 05       	cpc	r23, r1
     c68:	11 f4       	brne	.+4      	; 0xc6e <__unpack_f+0x42>
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	37 c0       	rjmp	.+110    	; 0xcdc <__unpack_f+0xb0>
     c6e:	82 e8       	ldi	r24, 0x82	; 130
     c70:	9f ef       	ldi	r25, 0xFF	; 255
     c72:	13 96       	adiw	r26, 0x03	; 3
     c74:	9c 93       	st	X, r25
     c76:	8e 93       	st	-X, r24
     c78:	12 97       	sbiw	r26, 0x02	; 2
     c7a:	9a 01       	movw	r18, r20
     c7c:	ab 01       	movw	r20, r22
     c7e:	67 e0       	ldi	r22, 0x07	; 7
     c80:	22 0f       	add	r18, r18
     c82:	33 1f       	adc	r19, r19
     c84:	44 1f       	adc	r20, r20
     c86:	55 1f       	adc	r21, r21
     c88:	6a 95       	dec	r22
     c8a:	d1 f7       	brne	.-12     	; 0xc80 <__unpack_f+0x54>
     c8c:	83 e0       	ldi	r24, 0x03	; 3
     c8e:	8c 93       	st	X, r24
     c90:	0d c0       	rjmp	.+26     	; 0xcac <__unpack_f+0x80>
     c92:	22 0f       	add	r18, r18
     c94:	33 1f       	adc	r19, r19
     c96:	44 1f       	adc	r20, r20
     c98:	55 1f       	adc	r21, r21
     c9a:	12 96       	adiw	r26, 0x02	; 2
     c9c:	8d 91       	ld	r24, X+
     c9e:	9c 91       	ld	r25, X
     ca0:	13 97       	sbiw	r26, 0x03	; 3
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	13 96       	adiw	r26, 0x03	; 3
     ca6:	9c 93       	st	X, r25
     ca8:	8e 93       	st	-X, r24
     caa:	12 97       	sbiw	r26, 0x02	; 2
     cac:	20 30       	cpi	r18, 0x00	; 0
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	38 07       	cpc	r19, r24
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	48 07       	cpc	r20, r24
     cb6:	80 e4       	ldi	r24, 0x40	; 64
     cb8:	58 07       	cpc	r21, r24
     cba:	58 f3       	brcs	.-42     	; 0xc92 <__unpack_f+0x66>
     cbc:	14 96       	adiw	r26, 0x04	; 4
     cbe:	2d 93       	st	X+, r18
     cc0:	3d 93       	st	X+, r19
     cc2:	4d 93       	st	X+, r20
     cc4:	5c 93       	st	X, r21
     cc6:	17 97       	sbiw	r26, 0x07	; 7
     cc8:	08 95       	ret
     cca:	2f 3f       	cpi	r18, 0xFF	; 255
     ccc:	31 05       	cpc	r19, r1
     cce:	79 f4       	brne	.+30     	; 0xcee <__unpack_f+0xc2>
     cd0:	41 15       	cp	r20, r1
     cd2:	51 05       	cpc	r21, r1
     cd4:	61 05       	cpc	r22, r1
     cd6:	71 05       	cpc	r23, r1
     cd8:	19 f4       	brne	.+6      	; 0xce0 <__unpack_f+0xb4>
     cda:	84 e0       	ldi	r24, 0x04	; 4
     cdc:	8c 93       	st	X, r24
     cde:	08 95       	ret
     ce0:	64 ff       	sbrs	r22, 4
     ce2:	03 c0       	rjmp	.+6      	; 0xcea <__unpack_f+0xbe>
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	8c 93       	st	X, r24
     ce8:	12 c0       	rjmp	.+36     	; 0xd0e <__unpack_f+0xe2>
     cea:	1c 92       	st	X, r1
     cec:	10 c0       	rjmp	.+32     	; 0xd0e <__unpack_f+0xe2>
     cee:	2f 57       	subi	r18, 0x7F	; 127
     cf0:	30 40       	sbci	r19, 0x00	; 0
     cf2:	13 96       	adiw	r26, 0x03	; 3
     cf4:	3c 93       	st	X, r19
     cf6:	2e 93       	st	-X, r18
     cf8:	12 97       	sbiw	r26, 0x02	; 2
     cfa:	83 e0       	ldi	r24, 0x03	; 3
     cfc:	8c 93       	st	X, r24
     cfe:	87 e0       	ldi	r24, 0x07	; 7
     d00:	44 0f       	add	r20, r20
     d02:	55 1f       	adc	r21, r21
     d04:	66 1f       	adc	r22, r22
     d06:	77 1f       	adc	r23, r23
     d08:	8a 95       	dec	r24
     d0a:	d1 f7       	brne	.-12     	; 0xd00 <__unpack_f+0xd4>
     d0c:	70 64       	ori	r23, 0x40	; 64
     d0e:	14 96       	adiw	r26, 0x04	; 4
     d10:	4d 93       	st	X+, r20
     d12:	5d 93       	st	X+, r21
     d14:	6d 93       	st	X+, r22
     d16:	7c 93       	st	X, r23
     d18:	17 97       	sbiw	r26, 0x07	; 7
     d1a:	08 95       	ret

00000d1c <__fpcmp_parts_f>:
     d1c:	1f 93       	push	r17
     d1e:	dc 01       	movw	r26, r24
     d20:	fb 01       	movw	r30, r22
     d22:	9c 91       	ld	r25, X
     d24:	92 30       	cpi	r25, 0x02	; 2
     d26:	08 f4       	brcc	.+2      	; 0xd2a <__fpcmp_parts_f+0xe>
     d28:	47 c0       	rjmp	.+142    	; 0xdb8 <__fpcmp_parts_f+0x9c>
     d2a:	80 81       	ld	r24, Z
     d2c:	82 30       	cpi	r24, 0x02	; 2
     d2e:	08 f4       	brcc	.+2      	; 0xd32 <__fpcmp_parts_f+0x16>
     d30:	43 c0       	rjmp	.+134    	; 0xdb8 <__fpcmp_parts_f+0x9c>
     d32:	94 30       	cpi	r25, 0x04	; 4
     d34:	51 f4       	brne	.+20     	; 0xd4a <__fpcmp_parts_f+0x2e>
     d36:	11 96       	adiw	r26, 0x01	; 1
     d38:	1c 91       	ld	r17, X
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	99 f5       	brne	.+102    	; 0xda4 <__fpcmp_parts_f+0x88>
     d3e:	81 81       	ldd	r24, Z+1	; 0x01
     d40:	68 2f       	mov	r22, r24
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	61 1b       	sub	r22, r17
     d46:	71 09       	sbc	r23, r1
     d48:	3f c0       	rjmp	.+126    	; 0xdc8 <__fpcmp_parts_f+0xac>
     d4a:	84 30       	cpi	r24, 0x04	; 4
     d4c:	21 f0       	breq	.+8      	; 0xd56 <__fpcmp_parts_f+0x3a>
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	31 f4       	brne	.+12     	; 0xd5e <__fpcmp_parts_f+0x42>
     d52:	82 30       	cpi	r24, 0x02	; 2
     d54:	b9 f1       	breq	.+110    	; 0xdc4 <__fpcmp_parts_f+0xa8>
     d56:	81 81       	ldd	r24, Z+1	; 0x01
     d58:	88 23       	and	r24, r24
     d5a:	89 f1       	breq	.+98     	; 0xdbe <__fpcmp_parts_f+0xa2>
     d5c:	2d c0       	rjmp	.+90     	; 0xdb8 <__fpcmp_parts_f+0x9c>
     d5e:	11 96       	adiw	r26, 0x01	; 1
     d60:	1c 91       	ld	r17, X
     d62:	11 97       	sbiw	r26, 0x01	; 1
     d64:	82 30       	cpi	r24, 0x02	; 2
     d66:	f1 f0       	breq	.+60     	; 0xda4 <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	18 17       	cp	r17, r24
     d6c:	d9 f4       	brne	.+54     	; 0xda4 <__fpcmp_parts_f+0x88>
     d6e:	12 96       	adiw	r26, 0x02	; 2
     d70:	2d 91       	ld	r18, X+
     d72:	3c 91       	ld	r19, X
     d74:	13 97       	sbiw	r26, 0x03	; 3
     d76:	82 81       	ldd	r24, Z+2	; 0x02
     d78:	93 81       	ldd	r25, Z+3	; 0x03
     d7a:	82 17       	cp	r24, r18
     d7c:	93 07       	cpc	r25, r19
     d7e:	94 f0       	brlt	.+36     	; 0xda4 <__fpcmp_parts_f+0x88>
     d80:	28 17       	cp	r18, r24
     d82:	39 07       	cpc	r19, r25
     d84:	bc f0       	brlt	.+46     	; 0xdb4 <__fpcmp_parts_f+0x98>
     d86:	14 96       	adiw	r26, 0x04	; 4
     d88:	8d 91       	ld	r24, X+
     d8a:	9d 91       	ld	r25, X+
     d8c:	0d 90       	ld	r0, X+
     d8e:	bc 91       	ld	r27, X
     d90:	a0 2d       	mov	r26, r0
     d92:	24 81       	ldd	r18, Z+4	; 0x04
     d94:	35 81       	ldd	r19, Z+5	; 0x05
     d96:	46 81       	ldd	r20, Z+6	; 0x06
     d98:	57 81       	ldd	r21, Z+7	; 0x07
     d9a:	28 17       	cp	r18, r24
     d9c:	39 07       	cpc	r19, r25
     d9e:	4a 07       	cpc	r20, r26
     da0:	5b 07       	cpc	r21, r27
     da2:	18 f4       	brcc	.+6      	; 0xdaa <__fpcmp_parts_f+0x8e>
     da4:	11 23       	and	r17, r17
     da6:	41 f0       	breq	.+16     	; 0xdb8 <__fpcmp_parts_f+0x9c>
     da8:	0a c0       	rjmp	.+20     	; 0xdbe <__fpcmp_parts_f+0xa2>
     daa:	82 17       	cp	r24, r18
     dac:	93 07       	cpc	r25, r19
     dae:	a4 07       	cpc	r26, r20
     db0:	b5 07       	cpc	r27, r21
     db2:	40 f4       	brcc	.+16     	; 0xdc4 <__fpcmp_parts_f+0xa8>
     db4:	11 23       	and	r17, r17
     db6:	19 f0       	breq	.+6      	; 0xdbe <__fpcmp_parts_f+0xa2>
     db8:	61 e0       	ldi	r22, 0x01	; 1
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	05 c0       	rjmp	.+10     	; 0xdc8 <__fpcmp_parts_f+0xac>
     dbe:	6f ef       	ldi	r22, 0xFF	; 255
     dc0:	7f ef       	ldi	r23, 0xFF	; 255
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <__fpcmp_parts_f+0xac>
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	cb 01       	movw	r24, r22
     dca:	1f 91       	pop	r17
     dcc:	08 95       	ret

00000dce <MTIMER_voidTimer0OVFInit>:
////////////////////////////////////////////////////////////////////////////////////////



void MTIMER_voidTimer0OVFInit(void)
{
     dce:	df 93       	push	r29
     dd0:	cf 93       	push	r28
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE NORMAL MODE*/
		CLR_BIT(TCCR0, WGM00);
     dd6:	a3 e5       	ldi	r26, 0x53	; 83
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e3 e5       	ldi	r30, 0x53	; 83
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	8f 7b       	andi	r24, 0xBF	; 191
     de2:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, WGM01);
     de4:	a3 e5       	ldi	r26, 0x53	; 83
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e3 e5       	ldi	r30, 0x53	; 83
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	87 7f       	andi	r24, 0xF7	; 247
     df0:	8c 93       	st	X, r24

		SET_BIT(TIMSK, TOIE0);
     df2:	a9 e5       	ldi	r26, 0x59	; 89
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e9 e5       	ldi	r30, 0x59	; 89
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	81 60       	ori	r24, 0x01	; 1
     dfe:	8c 93       	st	X, r24
#elif 	CLK == EIGHT
		TCCR0 = (TCCR0 & 0xf8) | 0x02;
#elif 	CLK == SIXTYFOUR
		TCCR0 = (TCCR0 & 0xf8) | 0x03;
#elif 	CLK == TWOFIFTYSIX
		TCCR0 = (TCCR0 & 0xf8) | 0x04;
     e00:	a3 e5       	ldi	r26, 0x53	; 83
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e3 e5       	ldi	r30, 0x53	; 83
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	88 7f       	andi	r24, 0xF8	; 248
     e0c:	84 60       	ori	r24, 0x04	; 4
     e0e:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xf8) | 0x06;
#elif 	CLK == EXTERN_RISING
		TCCR0 = (TCCR0 & 0xf8) | 0x07;
#endif

}
     e10:	cf 91       	pop	r28
     e12:	df 91       	pop	r29
     e14:	08 95       	ret

00000e16 <MTIMER_voidTimer0OVFDelay>:

void MTIMER_voidTimer0OVFDelay(u32 copy_u32Delay_ms)
{
     e16:	ef 92       	push	r14
     e18:	ff 92       	push	r15
     e1a:	0f 93       	push	r16
     e1c:	1f 93       	push	r17
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	61 97       	sbiw	r28, 0x11	; 17
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
     e32:	6e 87       	std	Y+14, r22	; 0x0e
     e34:	7f 87       	std	Y+15, r23	; 0x0f
     e36:	88 8b       	std	Y+16, r24	; 0x10
     e38:	99 8b       	std	Y+17, r25	; 0x11
	f32 L_f32MaxCompare;
	f32 L_f32OverFlowCount;
	u32 L_u32Carry;
	u8 L_u8Offset;

	G_u8Check = 0;
     e3a:	10 92 7f 01 	sts	0x017F, r1
	MTIMER_voidTimer0OVFInit();
     e3e:	0e 94 e7 06 	call	0xdce	; 0xdce <MTIMER_voidTimer0OVFInit>
		L_f32MaxCompare = L_f32MaxCompare * 256 * 8;
#elif 	CLK == SIXTYFOUR
		L_f32MaxCompare = (1000000.0) / F_CPU;
		L_f32MaxCompare = L_f32MaxCompare * 256 * 64;
#elif 	CLK == TWOFIFTYSIX
		L_f32MaxCompare = (1000000.0) / F_CPU;
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	a0 e0       	ldi	r26, 0x00	; 0
     e48:	be e3       	ldi	r27, 0x3E	; 62
     e4a:	8a 87       	std	Y+10, r24	; 0x0a
     e4c:	9b 87       	std	Y+11, r25	; 0x0b
     e4e:	ac 87       	std	Y+12, r26	; 0x0c
     e50:	bd 87       	std	Y+13, r27	; 0x0d
		L_f32MaxCompare = L_f32MaxCompare * 256 * 256;
     e52:	6a 85       	ldd	r22, Y+10	; 0x0a
     e54:	7b 85       	ldd	r23, Y+11	; 0x0b
     e56:	8c 85       	ldd	r24, Y+12	; 0x0c
     e58:	9d 85       	ldd	r25, Y+13	; 0x0d
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	40 e8       	ldi	r20, 0x80	; 128
     e60:	53 e4       	ldi	r21, 0x43	; 67
     e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e66:	dc 01       	movw	r26, r24
     e68:	cb 01       	movw	r24, r22
     e6a:	bc 01       	movw	r22, r24
     e6c:	cd 01       	movw	r24, r26
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	40 e8       	ldi	r20, 0x80	; 128
     e74:	53 e4       	ldi	r21, 0x43	; 67
     e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	8a 87       	std	Y+10, r24	; 0x0a
     e80:	9b 87       	std	Y+11, r25	; 0x0b
     e82:	ac 87       	std	Y+12, r26	; 0x0c
     e84:	bd 87       	std	Y+13, r27	; 0x0d
		L_f32MaxCompare = L_f32MaxCompare * 256 * 1024;

#endif


	if (copy_u32Delay_ms * 1000  <= L_f32MaxCompare)
     e86:	8e 85       	ldd	r24, Y+14	; 0x0e
     e88:	9f 85       	ldd	r25, Y+15	; 0x0f
     e8a:	a8 89       	ldd	r26, Y+16	; 0x10
     e8c:	b9 89       	ldd	r27, Y+17	; 0x11
     e8e:	28 ee       	ldi	r18, 0xE8	; 232
     e90:	33 e0       	ldi	r19, 0x03	; 3
     e92:	40 e0       	ldi	r20, 0x00	; 0
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	bc 01       	movw	r22, r24
     e98:	cd 01       	movw	r24, r26
     e9a:	0e 94 0a 10 	call	0x2014	; 0x2014 <__mulsi3>
     e9e:	dc 01       	movw	r26, r24
     ea0:	cb 01       	movw	r24, r22
     ea2:	bc 01       	movw	r22, r24
     ea4:	cd 01       	movw	r24, r26
     ea6:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
     eaa:	dc 01       	movw	r26, r24
     eac:	cb 01       	movw	r24, r22
     eae:	bc 01       	movw	r22, r24
     eb0:	cd 01       	movw	r24, r26
     eb2:	2a 85       	ldd	r18, Y+10	; 0x0a
     eb4:	3b 85       	ldd	r19, Y+11	; 0x0b
     eb6:	4c 85       	ldd	r20, Y+12	; 0x0c
     eb8:	5d 85       	ldd	r21, Y+13	; 0x0d
     eba:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__lesf2>
     ebe:	18 16       	cp	r1, r24
     ec0:	0c f4       	brge	.+2      	; 0xec4 <MTIMER_voidTimer0OVFDelay+0xae>
     ec2:	49 c0       	rjmp	.+146    	; 0xf56 <MTIMER_voidTimer0OVFDelay+0x140>
		{
			L_f32OverFlowCount = (copy_u32Delay_ms / (L_f32MaxCompare/1000.0));
     ec4:	6e 85       	ldd	r22, Y+14	; 0x0e
     ec6:	7f 85       	ldd	r23, Y+15	; 0x0f
     ec8:	88 89       	ldd	r24, Y+16	; 0x10
     eca:	99 89       	ldd	r25, Y+17	; 0x11
     ecc:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
     ed0:	7b 01       	movw	r14, r22
     ed2:	8c 01       	movw	r16, r24
     ed4:	6a 85       	ldd	r22, Y+10	; 0x0a
     ed6:	7b 85       	ldd	r23, Y+11	; 0x0b
     ed8:	8c 85       	ldd	r24, Y+12	; 0x0c
     eda:	9d 85       	ldd	r25, Y+13	; 0x0d
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	4a e7       	ldi	r20, 0x7A	; 122
     ee2:	54 e4       	ldi	r21, 0x44	; 68
     ee4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     ee8:	dc 01       	movw	r26, r24
     eea:	cb 01       	movw	r24, r22
     eec:	9c 01       	movw	r18, r24
     eee:	ad 01       	movw	r20, r26
     ef0:	c8 01       	movw	r24, r16
     ef2:	b7 01       	movw	r22, r14
     ef4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     ef8:	dc 01       	movw	r26, r24
     efa:	cb 01       	movw	r24, r22
     efc:	8e 83       	std	Y+6, r24	; 0x06
     efe:	9f 83       	std	Y+7, r25	; 0x07
     f00:	a8 87       	std	Y+8, r26	; 0x08
     f02:	b9 87       	std	Y+9, r27	; 0x09
			L_u8Offset = L_f32OverFlowCount * 256.0;
     f04:	6e 81       	ldd	r22, Y+6	; 0x06
     f06:	7f 81       	ldd	r23, Y+7	; 0x07
     f08:	88 85       	ldd	r24, Y+8	; 0x08
     f0a:	99 85       	ldd	r25, Y+9	; 0x09
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	40 e8       	ldi	r20, 0x80	; 128
     f12:	53 e4       	ldi	r21, 0x43	; 67
     f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	bc 01       	movw	r22, r24
     f1e:	cd 01       	movw	r24, r26
     f20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f24:	dc 01       	movw	r26, r24
     f26:	cb 01       	movw	r24, r22
     f28:	89 83       	std	Y+1, r24	; 0x01
			G_u32Overflows = 1;
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	a0 e0       	ldi	r26, 0x00	; 0
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	80 93 7b 01 	sts	0x017B, r24
     f36:	90 93 7c 01 	sts	0x017C, r25
     f3a:	a0 93 7d 01 	sts	0x017D, r26
     f3e:	b0 93 7e 01 	sts	0x017E, r27
			L_u8Reg = 256 - L_u8Offset;
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	81 95       	neg	r24
     f46:	80 93 7a 01 	sts	0x017A, r24
			TCNT0 = L_u8Reg;
     f4a:	e2 e5       	ldi	r30, 0x52	; 82
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 91 7a 01 	lds	r24, 0x017A
     f52:	80 83       	st	Z, r24
     f54:	7f c0       	rjmp	.+254    	; 0x1054 <MTIMER_voidTimer0OVFDelay+0x23e>
		}
	else
		{
			L_f32OverFlowCount = (copy_u32Delay_ms / (L_f32MaxCompare/1000.0));
     f56:	6e 85       	ldd	r22, Y+14	; 0x0e
     f58:	7f 85       	ldd	r23, Y+15	; 0x0f
     f5a:	88 89       	ldd	r24, Y+16	; 0x10
     f5c:	99 89       	ldd	r25, Y+17	; 0x11
     f5e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
     f62:	7b 01       	movw	r14, r22
     f64:	8c 01       	movw	r16, r24
     f66:	6a 85       	ldd	r22, Y+10	; 0x0a
     f68:	7b 85       	ldd	r23, Y+11	; 0x0b
     f6a:	8c 85       	ldd	r24, Y+12	; 0x0c
     f6c:	9d 85       	ldd	r25, Y+13	; 0x0d
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	4a e7       	ldi	r20, 0x7A	; 122
     f74:	54 e4       	ldi	r21, 0x44	; 68
     f76:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	9c 01       	movw	r18, r24
     f80:	ad 01       	movw	r20, r26
     f82:	c8 01       	movw	r24, r16
     f84:	b7 01       	movw	r22, r14
     f86:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	8e 83       	std	Y+6, r24	; 0x06
     f90:	9f 83       	std	Y+7, r25	; 0x07
     f92:	a8 87       	std	Y+8, r26	; 0x08
     f94:	b9 87       	std	Y+9, r27	; 0x09
			L_u32Carry = (copy_u32Delay_ms / (L_f32MaxCompare/1000));
     f96:	6e 85       	ldd	r22, Y+14	; 0x0e
     f98:	7f 85       	ldd	r23, Y+15	; 0x0f
     f9a:	88 89       	ldd	r24, Y+16	; 0x10
     f9c:	99 89       	ldd	r25, Y+17	; 0x11
     f9e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
     fa2:	7b 01       	movw	r14, r22
     fa4:	8c 01       	movw	r16, r24
     fa6:	6a 85       	ldd	r22, Y+10	; 0x0a
     fa8:	7b 85       	ldd	r23, Y+11	; 0x0b
     faa:	8c 85       	ldd	r24, Y+12	; 0x0c
     fac:	9d 85       	ldd	r25, Y+13	; 0x0d
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	4a e7       	ldi	r20, 0x7A	; 122
     fb4:	54 e4       	ldi	r21, 0x44	; 68
     fb6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	9c 01       	movw	r18, r24
     fc0:	ad 01       	movw	r20, r26
     fc2:	c8 01       	movw	r24, r16
     fc4:	b7 01       	movw	r22, r14
     fc6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	bc 01       	movw	r22, r24
     fd0:	cd 01       	movw	r24, r26
     fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	8a 83       	std	Y+2, r24	; 0x02
     fdc:	9b 83       	std	Y+3, r25	; 0x03
     fde:	ac 83       	std	Y+4, r26	; 0x04
     fe0:	bd 83       	std	Y+5, r27	; 0x05

			L_u8Offset = (L_f32OverFlowCount - L_u32Carry) * 256.0;
     fe2:	6a 81       	ldd	r22, Y+2	; 0x02
     fe4:	7b 81       	ldd	r23, Y+3	; 0x03
     fe6:	8c 81       	ldd	r24, Y+4	; 0x04
     fe8:	9d 81       	ldd	r25, Y+5	; 0x05
     fea:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
     fee:	9b 01       	movw	r18, r22
     ff0:	ac 01       	movw	r20, r24
     ff2:	6e 81       	ldd	r22, Y+6	; 0x06
     ff4:	7f 81       	ldd	r23, Y+7	; 0x07
     ff6:	88 85       	ldd	r24, Y+8	; 0x08
     ff8:	99 85       	ldd	r25, Y+9	; 0x09
     ffa:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	bc 01       	movw	r22, r24
    1004:	cd 01       	movw	r24, r26
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	40 e8       	ldi	r20, 0x80	; 128
    100c:	53 e4       	ldi	r21, 0x43	; 67
    100e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	bc 01       	movw	r22, r24
    1018:	cd 01       	movw	r24, r26
    101a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    101e:	dc 01       	movw	r26, r24
    1020:	cb 01       	movw	r24, r22
    1022:	89 83       	std	Y+1, r24	; 0x01
			G_u32Overflows = L_u32Carry +1 ;
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	9b 81       	ldd	r25, Y+3	; 0x03
    1028:	ac 81       	ldd	r26, Y+4	; 0x04
    102a:	bd 81       	ldd	r27, Y+5	; 0x05
    102c:	01 96       	adiw	r24, 0x01	; 1
    102e:	a1 1d       	adc	r26, r1
    1030:	b1 1d       	adc	r27, r1
    1032:	80 93 7b 01 	sts	0x017B, r24
    1036:	90 93 7c 01 	sts	0x017C, r25
    103a:	a0 93 7d 01 	sts	0x017D, r26
    103e:	b0 93 7e 01 	sts	0x017E, r27
			L_u8Reg = 256 - L_u8Offset;
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	81 95       	neg	r24
    1046:	80 93 7a 01 	sts	0x017A, r24
			TCNT0 = L_u8Reg;
    104a:	e2 e5       	ldi	r30, 0x52	; 82
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 91 7a 01 	lds	r24, 0x017A
    1052:	80 83       	st	Z, r24
		}

		while (GET_BIT(TIFR, TOV0) == 0 && G_u8Check == 0);
    1054:	e8 e5       	ldi	r30, 0x58	; 88
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	88 2f       	mov	r24, r24
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	81 70       	andi	r24, 0x01	; 1
    1060:	90 70       	andi	r25, 0x00	; 0
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	21 f4       	brne	.+8      	; 0x106e <MTIMER_voidTimer0OVFDelay+0x258>
    1066:	80 91 7f 01 	lds	r24, 0x017F
    106a:	88 23       	and	r24, r24
    106c:	99 f3       	breq	.-26     	; 0x1054 <MTIMER_voidTimer0OVFDelay+0x23e>
}
    106e:	61 96       	adiw	r28, 0x11	; 17
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	de bf       	out	0x3e, r29	; 62
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	cd bf       	out	0x3d, r28	; 61
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	1f 91       	pop	r17
    1080:	0f 91       	pop	r16
    1082:	ff 90       	pop	r15
    1084:	ef 90       	pop	r14
    1086:	08 95       	ret

00001088 <MTIMER_voidTimer0OVFSetCallBack>:

void MTIMER_voidTimer0OVFSetCallBack ( void (*copy_PFvoidTimer0OVF) (void))
{
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	00 d0       	rcall	.+0      	; 0x108e <MTIMER_voidTimer0OVFSetCallBack+0x6>
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	9a 83       	std	Y+2, r25	; 0x02
    1094:	89 83       	std	Y+1, r24	; 0x01
	TIMER_PFTIMER0OVF = copy_PFvoidTimer0OVF ;
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	9a 81       	ldd	r25, Y+2	; 0x02
    109a:	90 93 75 01 	sts	0x0175, r25
    109e:	80 93 74 01 	sts	0x0174, r24
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <__vector_11>:

ISR (TIMER0_OVF_vect)
{
    10ac:	1f 92       	push	r1
    10ae:	0f 92       	push	r0
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	0f 92       	push	r0
    10b4:	11 24       	eor	r1, r1
    10b6:	2f 93       	push	r18
    10b8:	3f 93       	push	r19
    10ba:	4f 93       	push	r20
    10bc:	5f 93       	push	r21
    10be:	6f 93       	push	r22
    10c0:	7f 93       	push	r23
    10c2:	8f 93       	push	r24
    10c4:	9f 93       	push	r25
    10c6:	af 93       	push	r26
    10c8:	bf 93       	push	r27
    10ca:	ef 93       	push	r30
    10cc:	ff 93       	push	r31
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
	static u32 L_u32OVFCounter = 0 ;
	L_u32OVFCounter ++ ;
    10d6:	80 91 68 01 	lds	r24, 0x0168
    10da:	90 91 69 01 	lds	r25, 0x0169
    10de:	a0 91 6a 01 	lds	r26, 0x016A
    10e2:	b0 91 6b 01 	lds	r27, 0x016B
    10e6:	01 96       	adiw	r24, 0x01	; 1
    10e8:	a1 1d       	adc	r26, r1
    10ea:	b1 1d       	adc	r27, r1
    10ec:	80 93 68 01 	sts	0x0168, r24
    10f0:	90 93 69 01 	sts	0x0169, r25
    10f4:	a0 93 6a 01 	sts	0x016A, r26
    10f8:	b0 93 6b 01 	sts	0x016B, r27
	if (L_u32OVFCounter == G_u32Overflows)
    10fc:	20 91 68 01 	lds	r18, 0x0168
    1100:	30 91 69 01 	lds	r19, 0x0169
    1104:	40 91 6a 01 	lds	r20, 0x016A
    1108:	50 91 6b 01 	lds	r21, 0x016B
    110c:	80 91 7b 01 	lds	r24, 0x017B
    1110:	90 91 7c 01 	lds	r25, 0x017C
    1114:	a0 91 7d 01 	lds	r26, 0x017D
    1118:	b0 91 7e 01 	lds	r27, 0x017E
    111c:	28 17       	cp	r18, r24
    111e:	39 07       	cpc	r19, r25
    1120:	4a 07       	cpc	r20, r26
    1122:	5b 07       	cpc	r21, r27
    1124:	a9 f4       	brne	.+42     	; 0x1150 <__vector_11+0xa4>
	{
		L_u32OVFCounter = 0 ;
    1126:	10 92 68 01 	sts	0x0168, r1
    112a:	10 92 69 01 	sts	0x0169, r1
    112e:	10 92 6a 01 	sts	0x016A, r1
    1132:	10 92 6b 01 	sts	0x016B, r1
		TCNT0 = L_u8Reg;
    1136:	e2 e5       	ldi	r30, 0x52	; 82
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 91 7a 01 	lds	r24, 0x017A
    113e:	80 83       	st	Z, r24
		TIMER_PFTIMER0OVF() ;
    1140:	e0 91 74 01 	lds	r30, 0x0174
    1144:	f0 91 75 01 	lds	r31, 0x0175
    1148:	09 95       	icall
		G_u8Check = 1;
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	80 93 7f 01 	sts	0x017F, r24
	}
}
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	ff 91       	pop	r31
    1156:	ef 91       	pop	r30
    1158:	bf 91       	pop	r27
    115a:	af 91       	pop	r26
    115c:	9f 91       	pop	r25
    115e:	8f 91       	pop	r24
    1160:	7f 91       	pop	r23
    1162:	6f 91       	pop	r22
    1164:	5f 91       	pop	r21
    1166:	4f 91       	pop	r20
    1168:	3f 91       	pop	r19
    116a:	2f 91       	pop	r18
    116c:	0f 90       	pop	r0
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	0f 90       	pop	r0
    1172:	1f 90       	pop	r1
    1174:	18 95       	reti

00001176 <MTIMER_voidTimer2COMPInit>:

////////////////////////////////////////////////////////////////////////////////////////

void MTIMER_voidTimer2COMPInit(void)

{
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE CTC MODE*/
		CLR_BIT(TCCR2, WGM20);
    117e:	a5 e4       	ldi	r26, 0x45	; 69
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e5 e4       	ldi	r30, 0x45	; 69
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	8f 7b       	andi	r24, 0xBF	; 191
    118a:	8c 93       	st	X, r24
		SET_BIT(TCCR2, WGM21);
    118c:	a5 e4       	ldi	r26, 0x45	; 69
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e5 e4       	ldi	r30, 0x45	; 69
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	88 60       	ori	r24, 0x08	; 8
    1198:	8c 93       	st	X, r24

		SET_BIT(TIMSK, OCIE2);
    119a:	a9 e5       	ldi	r26, 0x59	; 89
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e9 e5       	ldi	r30, 0x59	; 89
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	80 68       	ori	r24, 0x80	; 128
    11a6:	8c 93       	st	X, r24
		TCCR2 |= (1<<2);
		//TCCR2 = (TCCR2 & 0xf8) | 0x04;
#elif 	CLK == ONETWENTYEIGHT
		TCCR2 = (TCCR2 & 0xf8) | 0x05;
#elif 	CLK == TWOFIFTYSIX
		TCCR2 = (TCCR2 & 0xf8) | 0x06;
    11a8:	a5 e4       	ldi	r26, 0x45	; 69
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e5 e4       	ldi	r30, 0x45	; 69
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	88 7f       	andi	r24, 0xF8	; 248
    11b4:	86 60       	ori	r24, 0x06	; 6
    11b6:	8c 93       	st	X, r24
#elif 	CLK == TENTWENTYFOUR
		TCCR2 = (TCCR2 & 0xf8) | 0x07;
#endif

}
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <MTIMER_voidTimer2COMPDelay>:

void MTIMER_voidTimer2COMPDelay(u8 copy_u8Offset, u32 copy_u32Counts)
{
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <MTIMER_voidTimer2COMPDelay+0x6>
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <MTIMER_voidTimer2COMPDelay+0x8>
    11c6:	0f 92       	push	r0
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	89 83       	std	Y+1, r24	; 0x01
    11ce:	4a 83       	std	Y+2, r20	; 0x02
    11d0:	5b 83       	std	Y+3, r21	; 0x03
    11d2:	6c 83       	std	Y+4, r22	; 0x04
    11d4:	7d 83       	std	Y+5, r23	; 0x05
	MDIO_voidDioSetPortDirection(DIO_PORTB,0xff);
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	6f ef       	ldi	r22, 0xFF	; 255
    11da:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <MDIO_voidDioSetPortDirection>

	G_u8Check = 0;
    11de:	10 92 7f 01 	sts	0x017F, r1

	G_u32Overflows = copy_u32Counts;
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	9b 81       	ldd	r25, Y+3	; 0x03
    11e6:	ac 81       	ldd	r26, Y+4	; 0x04
    11e8:	bd 81       	ldd	r27, Y+5	; 0x05
    11ea:	80 93 7b 01 	sts	0x017B, r24
    11ee:	90 93 7c 01 	sts	0x017C, r25
    11f2:	a0 93 7d 01 	sts	0x017D, r26
    11f6:	b0 93 7e 01 	sts	0x017E, r27
	OCR2 = copy_u8Offset;
    11fa:	e3 e4       	ldi	r30, 0x43	; 67
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	80 83       	st	Z, r24

	MTIMER_voidTimer2COMPInit();
    1202:	0e 94 bb 08 	call	0x1176	; 0x1176 <MTIMER_voidTimer2COMPInit>
	while (GET_BIT(TIFR, OCF2) == 0  &&  G_u8Check == 0);
    1206:	e8 e5       	ldi	r30, 0x58	; 88
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	88 23       	and	r24, r24
    120e:	24 f0       	brlt	.+8      	; 0x1218 <MTIMER_voidTimer2COMPDelay+0x5a>
    1210:	80 91 7f 01 	lds	r24, 0x017F
    1214:	88 23       	and	r24, r24
    1216:	b9 f3       	breq	.-18     	; 0x1206 <MTIMER_voidTimer2COMPDelay+0x48>
	SET_BIT(TIFR, OCF2);
    1218:	a8 e5       	ldi	r26, 0x58	; 88
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e8 e5       	ldi	r30, 0x58	; 88
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	80 68       	ori	r24, 0x80	; 128
    1224:	8c 93       	st	X, r24
	TCCR2 =0;
    1226:	e5 e4       	ldi	r30, 0x45	; 69
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	10 82       	st	Z, r1

	}
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	cf 91       	pop	r28
    1238:	df 91       	pop	r29
    123a:	08 95       	ret

0000123c <MTIMER_voidTimer2COMPSetCallBack>:

void MTIMER_voidTimer2COMPSetCallBack ( void (*copy_PFvoidTimer2CTC) (void))
{
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	00 d0       	rcall	.+0      	; 0x1242 <MTIMER_voidTimer2COMPSetCallBack+0x6>
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	9a 83       	std	Y+2, r25	; 0x02
    1248:	89 83       	std	Y+1, r24	; 0x01
	TIMER_PFTIMER2COMP = copy_PFvoidTimer2CTC ;
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	9a 81       	ldd	r25, Y+2	; 0x02
    124e:	90 93 79 01 	sts	0x0179, r25
    1252:	80 93 78 01 	sts	0x0178, r24
}
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <MTIMER_voidTimer2OVFInit>:


void MTIMER_voidTimer2OVFInit(void)

{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE NORMAL MODE*/
		CLR_BIT(TCCR2, WGM20);
    1268:	a5 e4       	ldi	r26, 0x45	; 69
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e5 e4       	ldi	r30, 0x45	; 69
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	8f 7b       	andi	r24, 0xBF	; 191
    1274:	8c 93       	st	X, r24
		CLR_BIT(TCCR2, WGM21);
    1276:	a5 e4       	ldi	r26, 0x45	; 69
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e5 e4       	ldi	r30, 0x45	; 69
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	87 7f       	andi	r24, 0xF7	; 247
    1282:	8c 93       	st	X, r24

		SET_BIT(TIMSK, TOIE2);
    1284:	a9 e5       	ldi	r26, 0x59	; 89
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e9 e5       	ldi	r30, 0x59	; 89
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	80 64       	ori	r24, 0x40	; 64
    1290:	8c 93       	st	X, r24
		TCCR2 |= (1<<2);
		//TCCR2 = (TCCR2 & 0xf8) | 0x04;
#elif 	CLK == ONETWENTYEIGHT
		TCCR2 = (TCCR2 & 0xf8) | 0x05;
#elif 	CLK == TWOFIFTYSIX
		TCCR2 = (TCCR2 & 0xf8) | 0x06;
    1292:	a5 e4       	ldi	r26, 0x45	; 69
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e5 e4       	ldi	r30, 0x45	; 69
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	88 7f       	andi	r24, 0xF8	; 248
    129e:	86 60       	ori	r24, 0x06	; 6
    12a0:	8c 93       	st	X, r24
#elif 	CLK == TENTWENTYFOUR
		TCCR2 = (TCCR2 & 0xf8) | 0x07;
#endif

}
    12a2:	cf 91       	pop	r28
    12a4:	df 91       	pop	r29
    12a6:	08 95       	ret

000012a8 <MTIMER_voidTimer2OVFDelay>:

void MTIMER_voidTimer2OVFDelay(u32 copy_u32Delay_ms)
{
    12a8:	ef 92       	push	r14
    12aa:	ff 92       	push	r15
    12ac:	0f 93       	push	r16
    12ae:	1f 93       	push	r17
    12b0:	df 93       	push	r29
    12b2:	cf 93       	push	r28
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	61 97       	sbiw	r28, 0x11	; 17
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61
    12c4:	6e 87       	std	Y+14, r22	; 0x0e
    12c6:	7f 87       	std	Y+15, r23	; 0x0f
    12c8:	88 8b       	std	Y+16, r24	; 0x10
    12ca:	99 8b       	std	Y+17, r25	; 0x11
	f32 L_f32MaxCompare;
	f32 L_f32OverFlowCount;
	u32 L_u32Carry;
	u8 L_u8Offset;

	G_u8Check = 0;
    12cc:	10 92 7f 01 	sts	0x017F, r1

	MTIMER_voidTimer2OVFInit();
    12d0:	0e 94 30 09 	call	0x1260	; 0x1260 <MTIMER_voidTimer2OVFInit>
		L_f32MaxCompare = L_f32MaxCompare * 256 * 64;
#elif 	CLK == ONETWENTYEIGHT
		L_f32MaxCompare = (1000000.0) / F_CPU;
		L_f32MaxCompare = L_f32MaxCompare * 256 * 128;
#elif 	CLK == TWOFIFTYSIX
		L_f32MaxCompare = (1000000.0) / F_CPU;
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	a0 e0       	ldi	r26, 0x00	; 0
    12da:	be e3       	ldi	r27, 0x3E	; 62
    12dc:	8a 87       	std	Y+10, r24	; 0x0a
    12de:	9b 87       	std	Y+11, r25	; 0x0b
    12e0:	ac 87       	std	Y+12, r26	; 0x0c
    12e2:	bd 87       	std	Y+13, r27	; 0x0d
		L_f32MaxCompare = L_f32MaxCompare * 256 * 256;
    12e4:	6a 85       	ldd	r22, Y+10	; 0x0a
    12e6:	7b 85       	ldd	r23, Y+11	; 0x0b
    12e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    12ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	40 e8       	ldi	r20, 0x80	; 128
    12f2:	53 e4       	ldi	r21, 0x43	; 67
    12f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	bc 01       	movw	r22, r24
    12fe:	cd 01       	movw	r24, r26
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	40 e8       	ldi	r20, 0x80	; 128
    1306:	53 e4       	ldi	r21, 0x43	; 67
    1308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	8a 87       	std	Y+10, r24	; 0x0a
    1312:	9b 87       	std	Y+11, r25	; 0x0b
    1314:	ac 87       	std	Y+12, r26	; 0x0c
    1316:	bd 87       	std	Y+13, r27	; 0x0d
		MDIO_voidDioSetPinValue(DIO_PORTB, DIO_PIN_1, HIGH);
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	61 e0       	ldi	r22, 0x01	; 1
    131c:	41 e0       	ldi	r20, 0x01	; 1
    131e:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <MDIO_voidDioSetPinValue>
		L_f32MaxCompare = L_f32MaxCompare * 256 * 1024;

#endif


	if (copy_u32Delay_ms * 1000  <= L_f32MaxCompare)
    1322:	8e 85       	ldd	r24, Y+14	; 0x0e
    1324:	9f 85       	ldd	r25, Y+15	; 0x0f
    1326:	a8 89       	ldd	r26, Y+16	; 0x10
    1328:	b9 89       	ldd	r27, Y+17	; 0x11
    132a:	28 ee       	ldi	r18, 0xE8	; 232
    132c:	33 e0       	ldi	r19, 0x03	; 3
    132e:	40 e0       	ldi	r20, 0x00	; 0
    1330:	50 e0       	ldi	r21, 0x00	; 0
    1332:	bc 01       	movw	r22, r24
    1334:	cd 01       	movw	r24, r26
    1336:	0e 94 0a 10 	call	0x2014	; 0x2014 <__mulsi3>
    133a:	dc 01       	movw	r26, r24
    133c:	cb 01       	movw	r24, r22
    133e:	bc 01       	movw	r22, r24
    1340:	cd 01       	movw	r24, r26
    1342:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	bc 01       	movw	r22, r24
    134c:	cd 01       	movw	r24, r26
    134e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1350:	3b 85       	ldd	r19, Y+11	; 0x0b
    1352:	4c 85       	ldd	r20, Y+12	; 0x0c
    1354:	5d 85       	ldd	r21, Y+13	; 0x0d
    1356:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__lesf2>
    135a:	18 16       	cp	r1, r24
    135c:	0c f4       	brge	.+2      	; 0x1360 <MTIMER_voidTimer2OVFDelay+0xb8>
    135e:	4e c0       	rjmp	.+156    	; 0x13fc <MTIMER_voidTimer2OVFDelay+0x154>
		{
			MDIO_voidDioSetPinValue(DIO_PORTB, DIO_PIN_7, HIGH);
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	67 e0       	ldi	r22, 0x07	; 7
    1364:	41 e0       	ldi	r20, 0x01	; 1
    1366:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <MDIO_voidDioSetPinValue>

			L_f32OverFlowCount = (copy_u32Delay_ms / (L_f32MaxCompare/1000.0));
    136a:	6e 85       	ldd	r22, Y+14	; 0x0e
    136c:	7f 85       	ldd	r23, Y+15	; 0x0f
    136e:	88 89       	ldd	r24, Y+16	; 0x10
    1370:	99 89       	ldd	r25, Y+17	; 0x11
    1372:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    1376:	7b 01       	movw	r14, r22
    1378:	8c 01       	movw	r16, r24
    137a:	6a 85       	ldd	r22, Y+10	; 0x0a
    137c:	7b 85       	ldd	r23, Y+11	; 0x0b
    137e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1380:	9d 85       	ldd	r25, Y+13	; 0x0d
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	4a e7       	ldi	r20, 0x7A	; 122
    1388:	54 e4       	ldi	r21, 0x44	; 68
    138a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	9c 01       	movw	r18, r24
    1394:	ad 01       	movw	r20, r26
    1396:	c8 01       	movw	r24, r16
    1398:	b7 01       	movw	r22, r14
    139a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	8e 83       	std	Y+6, r24	; 0x06
    13a4:	9f 83       	std	Y+7, r25	; 0x07
    13a6:	a8 87       	std	Y+8, r26	; 0x08
    13a8:	b9 87       	std	Y+9, r27	; 0x09
			L_u8Offset = L_f32OverFlowCount * 256.0;
    13aa:	6e 81       	ldd	r22, Y+6	; 0x06
    13ac:	7f 81       	ldd	r23, Y+7	; 0x07
    13ae:	88 85       	ldd	r24, Y+8	; 0x08
    13b0:	99 85       	ldd	r25, Y+9	; 0x09
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	40 e8       	ldi	r20, 0x80	; 128
    13b8:	53 e4       	ldi	r21, 0x43	; 67
    13ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	bc 01       	movw	r22, r24
    13c4:	cd 01       	movw	r24, r26
    13c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
    13ce:	89 83       	std	Y+1, r24	; 0x01
			G_u32Overflows = 1;
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	a0 e0       	ldi	r26, 0x00	; 0
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	80 93 7b 01 	sts	0x017B, r24
    13dc:	90 93 7c 01 	sts	0x017C, r25
    13e0:	a0 93 7d 01 	sts	0x017D, r26
    13e4:	b0 93 7e 01 	sts	0x017E, r27
			L_u8Reg = 256 - L_u8Offset;
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	81 95       	neg	r24
    13ec:	80 93 7a 01 	sts	0x017A, r24
			TCNT2 = L_u8Reg;
    13f0:	e4 e4       	ldi	r30, 0x44	; 68
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 91 7a 01 	lds	r24, 0x017A
    13f8:	80 83       	st	Z, r24
    13fa:	84 c0       	rjmp	.+264    	; 0x1504 <MTIMER_voidTimer2OVFDelay+0x25c>
		}
	else
	{
		MDIO_voidDioSetPinValue(DIO_PORTB, DIO_PIN_6, HIGH);
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	66 e0       	ldi	r22, 0x06	; 6
    1400:	41 e0       	ldi	r20, 0x01	; 1
    1402:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <MDIO_voidDioSetPinValue>
		L_f32OverFlowCount = (copy_u32Delay_ms / (L_f32MaxCompare/1000.0));
    1406:	6e 85       	ldd	r22, Y+14	; 0x0e
    1408:	7f 85       	ldd	r23, Y+15	; 0x0f
    140a:	88 89       	ldd	r24, Y+16	; 0x10
    140c:	99 89       	ldd	r25, Y+17	; 0x11
    140e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    1412:	7b 01       	movw	r14, r22
    1414:	8c 01       	movw	r16, r24
    1416:	6a 85       	ldd	r22, Y+10	; 0x0a
    1418:	7b 85       	ldd	r23, Y+11	; 0x0b
    141a:	8c 85       	ldd	r24, Y+12	; 0x0c
    141c:	9d 85       	ldd	r25, Y+13	; 0x0d
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	4a e7       	ldi	r20, 0x7A	; 122
    1424:	54 e4       	ldi	r21, 0x44	; 68
    1426:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	9c 01       	movw	r18, r24
    1430:	ad 01       	movw	r20, r26
    1432:	c8 01       	movw	r24, r16
    1434:	b7 01       	movw	r22, r14
    1436:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	8e 83       	std	Y+6, r24	; 0x06
    1440:	9f 83       	std	Y+7, r25	; 0x07
    1442:	a8 87       	std	Y+8, r26	; 0x08
    1444:	b9 87       	std	Y+9, r27	; 0x09
		L_u32Carry = (copy_u32Delay_ms / (L_f32MaxCompare/1000));
    1446:	6e 85       	ldd	r22, Y+14	; 0x0e
    1448:	7f 85       	ldd	r23, Y+15	; 0x0f
    144a:	88 89       	ldd	r24, Y+16	; 0x10
    144c:	99 89       	ldd	r25, Y+17	; 0x11
    144e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    1452:	7b 01       	movw	r14, r22
    1454:	8c 01       	movw	r16, r24
    1456:	6a 85       	ldd	r22, Y+10	; 0x0a
    1458:	7b 85       	ldd	r23, Y+11	; 0x0b
    145a:	8c 85       	ldd	r24, Y+12	; 0x0c
    145c:	9d 85       	ldd	r25, Y+13	; 0x0d
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	4a e7       	ldi	r20, 0x7A	; 122
    1464:	54 e4       	ldi	r21, 0x44	; 68
    1466:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    146a:	dc 01       	movw	r26, r24
    146c:	cb 01       	movw	r24, r22
    146e:	9c 01       	movw	r18, r24
    1470:	ad 01       	movw	r20, r26
    1472:	c8 01       	movw	r24, r16
    1474:	b7 01       	movw	r22, r14
    1476:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    147a:	dc 01       	movw	r26, r24
    147c:	cb 01       	movw	r24, r22
    147e:	bc 01       	movw	r22, r24
    1480:	cd 01       	movw	r24, r26
    1482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	8a 83       	std	Y+2, r24	; 0x02
    148c:	9b 83       	std	Y+3, r25	; 0x03
    148e:	ac 83       	std	Y+4, r26	; 0x04
    1490:	bd 83       	std	Y+5, r27	; 0x05

		L_u8Offset = (L_f32OverFlowCount - L_u32Carry) * 256.0;
    1492:	6a 81       	ldd	r22, Y+2	; 0x02
    1494:	7b 81       	ldd	r23, Y+3	; 0x03
    1496:	8c 81       	ldd	r24, Y+4	; 0x04
    1498:	9d 81       	ldd	r25, Y+5	; 0x05
    149a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    149e:	9b 01       	movw	r18, r22
    14a0:	ac 01       	movw	r20, r24
    14a2:	6e 81       	ldd	r22, Y+6	; 0x06
    14a4:	7f 81       	ldd	r23, Y+7	; 0x07
    14a6:	88 85       	ldd	r24, Y+8	; 0x08
    14a8:	99 85       	ldd	r25, Y+9	; 0x09
    14aa:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	bc 01       	movw	r22, r24
    14b4:	cd 01       	movw	r24, r26
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	40 e8       	ldi	r20, 0x80	; 128
    14bc:	53 e4       	ldi	r21, 0x43	; 67
    14be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	bc 01       	movw	r22, r24
    14c8:	cd 01       	movw	r24, r26
    14ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	89 83       	std	Y+1, r24	; 0x01
		G_u32Overflows = L_u32Carry +1 ;
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	9b 81       	ldd	r25, Y+3	; 0x03
    14d8:	ac 81       	ldd	r26, Y+4	; 0x04
    14da:	bd 81       	ldd	r27, Y+5	; 0x05
    14dc:	01 96       	adiw	r24, 0x01	; 1
    14de:	a1 1d       	adc	r26, r1
    14e0:	b1 1d       	adc	r27, r1
    14e2:	80 93 7b 01 	sts	0x017B, r24
    14e6:	90 93 7c 01 	sts	0x017C, r25
    14ea:	a0 93 7d 01 	sts	0x017D, r26
    14ee:	b0 93 7e 01 	sts	0x017E, r27
		L_u8Reg = 256 - L_u8Offset;
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	81 95       	neg	r24
    14f6:	80 93 7a 01 	sts	0x017A, r24
		TCNT2 = L_u8Reg;
    14fa:	e4 e4       	ldi	r30, 0x44	; 68
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 91 7a 01 	lds	r24, 0x017A
    1502:	80 83       	st	Z, r24

	}

	while (GET_BIT(TIFR, TOV2) == 0 && G_u8Check == 0);
    1504:	e8 e5       	ldi	r30, 0x58	; 88
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	82 95       	swap	r24
    150c:	86 95       	lsr	r24
    150e:	86 95       	lsr	r24
    1510:	83 70       	andi	r24, 0x03	; 3
    1512:	88 2f       	mov	r24, r24
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	81 70       	andi	r24, 0x01	; 1
    1518:	90 70       	andi	r25, 0x00	; 0
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	21 f4       	brne	.+8      	; 0x1526 <MTIMER_voidTimer2OVFDelay+0x27e>
    151e:	80 91 7f 01 	lds	r24, 0x017F
    1522:	88 23       	and	r24, r24
    1524:	79 f3       	breq	.-34     	; 0x1504 <MTIMER_voidTimer2OVFDelay+0x25c>
}
    1526:	61 96       	adiw	r28, 0x11	; 17
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	de bf       	out	0x3e, r29	; 62
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	cd bf       	out	0x3d, r28	; 61
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	1f 91       	pop	r17
    1538:	0f 91       	pop	r16
    153a:	ff 90       	pop	r15
    153c:	ef 90       	pop	r14
    153e:	08 95       	ret

00001540 <MTIMER_voidTimer2OVFSetCallBack>:

void MTIMER_voidTimer2OVFSetCallBack ( void (*copy_PFvoidTimer2OVF) (void))
{
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	00 d0       	rcall	.+0      	; 0x1546 <MTIMER_voidTimer2OVFSetCallBack+0x6>
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	9a 83       	std	Y+2, r25	; 0x02
    154c:	89 83       	std	Y+1, r24	; 0x01
	TIMER_PFTIMER2OVF = copy_PFvoidTimer2OVF ;
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	9a 81       	ldd	r25, Y+2	; 0x02
    1552:	90 93 77 01 	sts	0x0177, r25
    1556:	80 93 76 01 	sts	0x0176, r24
}
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	08 95       	ret

00001564 <__vector_5>:



ISR (TIMER2_OVF_vect)
{
    1564:	1f 92       	push	r1
    1566:	0f 92       	push	r0
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	0f 92       	push	r0
    156c:	11 24       	eor	r1, r1
    156e:	2f 93       	push	r18
    1570:	3f 93       	push	r19
    1572:	4f 93       	push	r20
    1574:	5f 93       	push	r21
    1576:	6f 93       	push	r22
    1578:	7f 93       	push	r23
    157a:	8f 93       	push	r24
    157c:	9f 93       	push	r25
    157e:	af 93       	push	r26
    1580:	bf 93       	push	r27
    1582:	ef 93       	push	r30
    1584:	ff 93       	push	r31
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
	static u32 L_u32OVFCounter = 0 ;
	L_u32OVFCounter ++ ;
    158e:	80 91 6c 01 	lds	r24, 0x016C
    1592:	90 91 6d 01 	lds	r25, 0x016D
    1596:	a0 91 6e 01 	lds	r26, 0x016E
    159a:	b0 91 6f 01 	lds	r27, 0x016F
    159e:	01 96       	adiw	r24, 0x01	; 1
    15a0:	a1 1d       	adc	r26, r1
    15a2:	b1 1d       	adc	r27, r1
    15a4:	80 93 6c 01 	sts	0x016C, r24
    15a8:	90 93 6d 01 	sts	0x016D, r25
    15ac:	a0 93 6e 01 	sts	0x016E, r26
    15b0:	b0 93 6f 01 	sts	0x016F, r27
	if (L_u32OVFCounter == G_u32Overflows)
    15b4:	20 91 6c 01 	lds	r18, 0x016C
    15b8:	30 91 6d 01 	lds	r19, 0x016D
    15bc:	40 91 6e 01 	lds	r20, 0x016E
    15c0:	50 91 6f 01 	lds	r21, 0x016F
    15c4:	80 91 7b 01 	lds	r24, 0x017B
    15c8:	90 91 7c 01 	lds	r25, 0x017C
    15cc:	a0 91 7d 01 	lds	r26, 0x017D
    15d0:	b0 91 7e 01 	lds	r27, 0x017E
    15d4:	28 17       	cp	r18, r24
    15d6:	39 07       	cpc	r19, r25
    15d8:	4a 07       	cpc	r20, r26
    15da:	5b 07       	cpc	r21, r27
    15dc:	a9 f4       	brne	.+42     	; 0x1608 <__vector_5+0xa4>
	{
		L_u32OVFCounter = 0 ;
    15de:	10 92 6c 01 	sts	0x016C, r1
    15e2:	10 92 6d 01 	sts	0x016D, r1
    15e6:	10 92 6e 01 	sts	0x016E, r1
    15ea:	10 92 6f 01 	sts	0x016F, r1
		TCNT2 = L_u8Reg;
    15ee:	e4 e4       	ldi	r30, 0x44	; 68
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 91 7a 01 	lds	r24, 0x017A
    15f6:	80 83       	st	Z, r24
		TIMER_PFTIMER2OVF() ;
    15f8:	e0 91 76 01 	lds	r30, 0x0176
    15fc:	f0 91 77 01 	lds	r31, 0x0177
    1600:	09 95       	icall
		G_u8Check = 1;
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	80 93 7f 01 	sts	0x017F, r24
	}
}
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	ff 91       	pop	r31
    160e:	ef 91       	pop	r30
    1610:	bf 91       	pop	r27
    1612:	af 91       	pop	r26
    1614:	9f 91       	pop	r25
    1616:	8f 91       	pop	r24
    1618:	7f 91       	pop	r23
    161a:	6f 91       	pop	r22
    161c:	5f 91       	pop	r21
    161e:	4f 91       	pop	r20
    1620:	3f 91       	pop	r19
    1622:	2f 91       	pop	r18
    1624:	0f 90       	pop	r0
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	0f 90       	pop	r0
    162a:	1f 90       	pop	r1
    162c:	18 95       	reti

0000162e <__vector_4>:


ISR (TIMER2_COMP_vect)
{
    162e:	1f 92       	push	r1
    1630:	0f 92       	push	r0
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	0f 92       	push	r0
    1636:	11 24       	eor	r1, r1
    1638:	2f 93       	push	r18
    163a:	3f 93       	push	r19
    163c:	4f 93       	push	r20
    163e:	5f 93       	push	r21
    1640:	6f 93       	push	r22
    1642:	7f 93       	push	r23
    1644:	8f 93       	push	r24
    1646:	9f 93       	push	r25
    1648:	af 93       	push	r26
    164a:	bf 93       	push	r27
    164c:	ef 93       	push	r30
    164e:	ff 93       	push	r31
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
	static u32 G_u32CompCounter = 0;
	G_u32CompCounter ++ ;
    1658:	80 91 70 01 	lds	r24, 0x0170
    165c:	90 91 71 01 	lds	r25, 0x0171
    1660:	a0 91 72 01 	lds	r26, 0x0172
    1664:	b0 91 73 01 	lds	r27, 0x0173
    1668:	01 96       	adiw	r24, 0x01	; 1
    166a:	a1 1d       	adc	r26, r1
    166c:	b1 1d       	adc	r27, r1
    166e:	80 93 70 01 	sts	0x0170, r24
    1672:	90 93 71 01 	sts	0x0171, r25
    1676:	a0 93 72 01 	sts	0x0172, r26
    167a:	b0 93 73 01 	sts	0x0173, r27

	if ( G_u32Overflows == G_u32CompCounter)
    167e:	20 91 7b 01 	lds	r18, 0x017B
    1682:	30 91 7c 01 	lds	r19, 0x017C
    1686:	40 91 7d 01 	lds	r20, 0x017D
    168a:	50 91 7e 01 	lds	r21, 0x017E
    168e:	80 91 70 01 	lds	r24, 0x0170
    1692:	90 91 71 01 	lds	r25, 0x0171
    1696:	a0 91 72 01 	lds	r26, 0x0172
    169a:	b0 91 73 01 	lds	r27, 0x0173
    169e:	28 17       	cp	r18, r24
    16a0:	39 07       	cpc	r19, r25
    16a2:	4a 07       	cpc	r20, r26
    16a4:	5b 07       	cpc	r21, r27
    16a6:	b9 f4       	brne	.+46     	; 0x16d6 <__vector_4+0xa8>
	{
		TIMER_PFTIMER2COMP() ;
    16a8:	e0 91 78 01 	lds	r30, 0x0178
    16ac:	f0 91 79 01 	lds	r31, 0x0179
    16b0:	09 95       	icall
		G_u32CompCounter = 0 ;
    16b2:	10 92 70 01 	sts	0x0170, r1
    16b6:	10 92 71 01 	sts	0x0171, r1
    16ba:	10 92 72 01 	sts	0x0172, r1
    16be:	10 92 73 01 	sts	0x0173, r1
		SET_BIT(TIFR, OCF2);
    16c2:	a8 e5       	ldi	r26, 0x58	; 88
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e8 e5       	ldi	r30, 0x58	; 88
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	80 68       	ori	r24, 0x80	; 128
    16ce:	8c 93       	st	X, r24
		G_u8Check = 1;
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	80 93 7f 01 	sts	0x017F, r24
	}

}
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	ff 91       	pop	r31
    16dc:	ef 91       	pop	r30
    16de:	bf 91       	pop	r27
    16e0:	af 91       	pop	r26
    16e2:	9f 91       	pop	r25
    16e4:	8f 91       	pop	r24
    16e6:	7f 91       	pop	r23
    16e8:	6f 91       	pop	r22
    16ea:	5f 91       	pop	r21
    16ec:	4f 91       	pop	r20
    16ee:	3f 91       	pop	r19
    16f0:	2f 91       	pop	r18
    16f2:	0f 90       	pop	r0
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	0f 90       	pop	r0
    16f8:	1f 90       	pop	r1
    16fa:	18 95       	reti

000016fc <MDIO_voidDioSetPinDirection>:




void MDIO_voidDioSetPinDirection(u8 copy_u8Port, u8 copy_u8Pin, u8 copy_u8Direction)
{
    16fc:	df 93       	push	r29
    16fe:	cf 93       	push	r28
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
    1704:	27 97       	sbiw	r28, 0x07	; 7
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	de bf       	out	0x3e, r29	; 62
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	cd bf       	out	0x3d, r28	; 61
    1710:	89 83       	std	Y+1, r24	; 0x01
    1712:	6a 83       	std	Y+2, r22	; 0x02
    1714:	4b 83       	std	Y+3, r20	; 0x03
	if (copy_u8Direction == DIO_OUT)
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	81 30       	cpi	r24, 0x01	; 1
    171a:	09 f0       	breq	.+2      	; 0x171e <MDIO_voidDioSetPinDirection+0x22>
    171c:	6f c0       	rjmp	.+222    	; 0x17fc <MDIO_voidDioSetPinDirection+0x100>
	{
		switch (copy_u8Port)
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	3f 83       	std	Y+7, r19	; 0x07
    1726:	2e 83       	std	Y+6, r18	; 0x06
    1728:	8e 81       	ldd	r24, Y+6	; 0x06
    172a:	9f 81       	ldd	r25, Y+7	; 0x07
    172c:	81 30       	cpi	r24, 0x01	; 1
    172e:	91 05       	cpc	r25, r1
    1730:	49 f1       	breq	.+82     	; 0x1784 <MDIO_voidDioSetPinDirection+0x88>
    1732:	2e 81       	ldd	r18, Y+6	; 0x06
    1734:	3f 81       	ldd	r19, Y+7	; 0x07
    1736:	22 30       	cpi	r18, 0x02	; 2
    1738:	31 05       	cpc	r19, r1
    173a:	2c f4       	brge	.+10     	; 0x1746 <MDIO_voidDioSetPinDirection+0x4a>
    173c:	8e 81       	ldd	r24, Y+6	; 0x06
    173e:	9f 81       	ldd	r25, Y+7	; 0x07
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	61 f0       	breq	.+24     	; 0x175c <MDIO_voidDioSetPinDirection+0x60>
    1744:	d2 c0       	rjmp	.+420    	; 0x18ea <MDIO_voidDioSetPinDirection+0x1ee>
    1746:	2e 81       	ldd	r18, Y+6	; 0x06
    1748:	3f 81       	ldd	r19, Y+7	; 0x07
    174a:	22 30       	cpi	r18, 0x02	; 2
    174c:	31 05       	cpc	r19, r1
    174e:	71 f1       	breq	.+92     	; 0x17ac <MDIO_voidDioSetPinDirection+0xb0>
    1750:	8e 81       	ldd	r24, Y+6	; 0x06
    1752:	9f 81       	ldd	r25, Y+7	; 0x07
    1754:	83 30       	cpi	r24, 0x03	; 3
    1756:	91 05       	cpc	r25, r1
    1758:	e9 f1       	breq	.+122    	; 0x17d4 <MDIO_voidDioSetPinDirection+0xd8>
    175a:	c7 c0       	rjmp	.+398    	; 0x18ea <MDIO_voidDioSetPinDirection+0x1ee>
		{
			case DIO_PORTA:SET_BIT(DDRA, copy_u8Pin); break;
    175c:	aa e3       	ldi	r26, 0x3A	; 58
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	ea e3       	ldi	r30, 0x3A	; 58
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	48 2f       	mov	r20, r24
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	02 2e       	mov	r0, r18
    1774:	02 c0       	rjmp	.+4      	; 0x177a <MDIO_voidDioSetPinDirection+0x7e>
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	0a 94       	dec	r0
    177c:	e2 f7       	brpl	.-8      	; 0x1776 <MDIO_voidDioSetPinDirection+0x7a>
    177e:	84 2b       	or	r24, r20
    1780:	8c 93       	st	X, r24
    1782:	b3 c0       	rjmp	.+358    	; 0x18ea <MDIO_voidDioSetPinDirection+0x1ee>
			case DIO_PORTB:SET_BIT(DDRB, copy_u8Pin); break;
    1784:	a7 e3       	ldi	r26, 0x37	; 55
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e7 e3       	ldi	r30, 0x37	; 55
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	48 2f       	mov	r20, r24
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	02 2e       	mov	r0, r18
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <MDIO_voidDioSetPinDirection+0xa6>
    179e:	88 0f       	add	r24, r24
    17a0:	99 1f       	adc	r25, r25
    17a2:	0a 94       	dec	r0
    17a4:	e2 f7       	brpl	.-8      	; 0x179e <MDIO_voidDioSetPinDirection+0xa2>
    17a6:	84 2b       	or	r24, r20
    17a8:	8c 93       	st	X, r24
    17aa:	9f c0       	rjmp	.+318    	; 0x18ea <MDIO_voidDioSetPinDirection+0x1ee>
			case DIO_PORTC:SET_BIT(DDRC, copy_u8Pin); break;
    17ac:	a4 e3       	ldi	r26, 0x34	; 52
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e4 e3       	ldi	r30, 0x34	; 52
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	48 2f       	mov	r20, r24
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	02 2e       	mov	r0, r18
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <MDIO_voidDioSetPinDirection+0xce>
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	0a 94       	dec	r0
    17cc:	e2 f7       	brpl	.-8      	; 0x17c6 <MDIO_voidDioSetPinDirection+0xca>
    17ce:	84 2b       	or	r24, r20
    17d0:	8c 93       	st	X, r24
    17d2:	8b c0       	rjmp	.+278    	; 0x18ea <MDIO_voidDioSetPinDirection+0x1ee>
			case DIO_PORTD:SET_BIT(DDRD, copy_u8Pin); break;
    17d4:	a1 e3       	ldi	r26, 0x31	; 49
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e1 e3       	ldi	r30, 0x31	; 49
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	48 2f       	mov	r20, r24
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	02 2e       	mov	r0, r18
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <MDIO_voidDioSetPinDirection+0xf6>
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	0a 94       	dec	r0
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <MDIO_voidDioSetPinDirection+0xf2>
    17f6:	84 2b       	or	r24, r20
    17f8:	8c 93       	st	X, r24
    17fa:	77 c0       	rjmp	.+238    	; 0x18ea <MDIO_voidDioSetPinDirection+0x1ee>
		}
	}
	else if(copy_u8Direction == DIO_IN)
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	88 23       	and	r24, r24
    1800:	09 f0       	breq	.+2      	; 0x1804 <MDIO_voidDioSetPinDirection+0x108>
    1802:	73 c0       	rjmp	.+230    	; 0x18ea <MDIO_voidDioSetPinDirection+0x1ee>
	{
		switch (copy_u8Port)
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	3d 83       	std	Y+5, r19	; 0x05
    180c:	2c 83       	std	Y+4, r18	; 0x04
    180e:	8c 81       	ldd	r24, Y+4	; 0x04
    1810:	9d 81       	ldd	r25, Y+5	; 0x05
    1812:	81 30       	cpi	r24, 0x01	; 1
    1814:	91 05       	cpc	r25, r1
    1816:	59 f1       	breq	.+86     	; 0x186e <MDIO_voidDioSetPinDirection+0x172>
    1818:	2c 81       	ldd	r18, Y+4	; 0x04
    181a:	3d 81       	ldd	r19, Y+5	; 0x05
    181c:	22 30       	cpi	r18, 0x02	; 2
    181e:	31 05       	cpc	r19, r1
    1820:	2c f4       	brge	.+10     	; 0x182c <MDIO_voidDioSetPinDirection+0x130>
    1822:	8c 81       	ldd	r24, Y+4	; 0x04
    1824:	9d 81       	ldd	r25, Y+5	; 0x05
    1826:	00 97       	sbiw	r24, 0x00	; 0
    1828:	69 f0       	breq	.+26     	; 0x1844 <MDIO_voidDioSetPinDirection+0x148>
    182a:	5f c0       	rjmp	.+190    	; 0x18ea <MDIO_voidDioSetPinDirection+0x1ee>
    182c:	2c 81       	ldd	r18, Y+4	; 0x04
    182e:	3d 81       	ldd	r19, Y+5	; 0x05
    1830:	22 30       	cpi	r18, 0x02	; 2
    1832:	31 05       	cpc	r19, r1
    1834:	89 f1       	breq	.+98     	; 0x1898 <MDIO_voidDioSetPinDirection+0x19c>
    1836:	8c 81       	ldd	r24, Y+4	; 0x04
    1838:	9d 81       	ldd	r25, Y+5	; 0x05
    183a:	83 30       	cpi	r24, 0x03	; 3
    183c:	91 05       	cpc	r25, r1
    183e:	09 f4       	brne	.+2      	; 0x1842 <MDIO_voidDioSetPinDirection+0x146>
    1840:	40 c0       	rjmp	.+128    	; 0x18c2 <MDIO_voidDioSetPinDirection+0x1c6>
    1842:	53 c0       	rjmp	.+166    	; 0x18ea <MDIO_voidDioSetPinDirection+0x1ee>
		{
			case DIO_PORTA:CLR_BIT(DDRA, copy_u8Pin); break;
    1844:	aa e3       	ldi	r26, 0x3A	; 58
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	ea e3       	ldi	r30, 0x3A	; 58
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	48 2f       	mov	r20, r24
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	28 2f       	mov	r18, r24
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	02 2e       	mov	r0, r18
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <MDIO_voidDioSetPinDirection+0x166>
    185e:	88 0f       	add	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	0a 94       	dec	r0
    1864:	e2 f7       	brpl	.-8      	; 0x185e <MDIO_voidDioSetPinDirection+0x162>
    1866:	80 95       	com	r24
    1868:	84 23       	and	r24, r20
    186a:	8c 93       	st	X, r24
    186c:	3e c0       	rjmp	.+124    	; 0x18ea <MDIO_voidDioSetPinDirection+0x1ee>
			case DIO_PORTB:CLR_BIT(DDRB, copy_u8Pin); break;
    186e:	a7 e3       	ldi	r26, 0x37	; 55
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e7 e3       	ldi	r30, 0x37	; 55
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	48 2f       	mov	r20, r24
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	02 2e       	mov	r0, r18
    1886:	02 c0       	rjmp	.+4      	; 0x188c <MDIO_voidDioSetPinDirection+0x190>
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	0a 94       	dec	r0
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <MDIO_voidDioSetPinDirection+0x18c>
    1890:	80 95       	com	r24
    1892:	84 23       	and	r24, r20
    1894:	8c 93       	st	X, r24
    1896:	29 c0       	rjmp	.+82     	; 0x18ea <MDIO_voidDioSetPinDirection+0x1ee>
			case DIO_PORTC:CLR_BIT(DDRC, copy_u8Pin); break;
    1898:	a4 e3       	ldi	r26, 0x34	; 52
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e4 e3       	ldi	r30, 0x34	; 52
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	48 2f       	mov	r20, r24
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	02 2e       	mov	r0, r18
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <MDIO_voidDioSetPinDirection+0x1ba>
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	0a 94       	dec	r0
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <MDIO_voidDioSetPinDirection+0x1b6>
    18ba:	80 95       	com	r24
    18bc:	84 23       	and	r24, r20
    18be:	8c 93       	st	X, r24
    18c0:	14 c0       	rjmp	.+40     	; 0x18ea <MDIO_voidDioSetPinDirection+0x1ee>
			case DIO_PORTD:CLR_BIT(DDRD, copy_u8Pin); break;
    18c2:	a1 e3       	ldi	r26, 0x31	; 49
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e1 e3       	ldi	r30, 0x31	; 49
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	48 2f       	mov	r20, r24
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	02 2e       	mov	r0, r18
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <MDIO_voidDioSetPinDirection+0x1e4>
    18dc:	88 0f       	add	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	0a 94       	dec	r0
    18e2:	e2 f7       	brpl	.-8      	; 0x18dc <MDIO_voidDioSetPinDirection+0x1e0>
    18e4:	80 95       	com	r24
    18e6:	84 23       	and	r24, r20
    18e8:	8c 93       	st	X, r24
		}
	}
}
    18ea:	27 96       	adiw	r28, 0x07	; 7
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	f8 94       	cli
    18f0:	de bf       	out	0x3e, r29	; 62
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	cd bf       	out	0x3d, r28	; 61
    18f6:	cf 91       	pop	r28
    18f8:	df 91       	pop	r29
    18fa:	08 95       	ret

000018fc <MDIO_voidDioSetPinValue>:

void MDIO_voidDioSetPinValue (u8 copy_u8Port, u8 copy_u8Pin, u8 copy_u8Value)
{
    18fc:	df 93       	push	r29
    18fe:	cf 93       	push	r28
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
    1904:	27 97       	sbiw	r28, 0x07	; 7
    1906:	0f b6       	in	r0, 0x3f	; 63
    1908:	f8 94       	cli
    190a:	de bf       	out	0x3e, r29	; 62
    190c:	0f be       	out	0x3f, r0	; 63
    190e:	cd bf       	out	0x3d, r28	; 61
    1910:	89 83       	std	Y+1, r24	; 0x01
    1912:	6a 83       	std	Y+2, r22	; 0x02
    1914:	4b 83       	std	Y+3, r20	; 0x03
	if (copy_u8Value == HIGH)
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	81 30       	cpi	r24, 0x01	; 1
    191a:	09 f0       	breq	.+2      	; 0x191e <MDIO_voidDioSetPinValue+0x22>
    191c:	6f c0       	rjmp	.+222    	; 0x19fc <MDIO_voidDioSetPinValue+0x100>
	{
		switch(copy_u8Port)
    191e:	89 81       	ldd	r24, Y+1	; 0x01
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	3f 83       	std	Y+7, r19	; 0x07
    1926:	2e 83       	std	Y+6, r18	; 0x06
    1928:	8e 81       	ldd	r24, Y+6	; 0x06
    192a:	9f 81       	ldd	r25, Y+7	; 0x07
    192c:	81 30       	cpi	r24, 0x01	; 1
    192e:	91 05       	cpc	r25, r1
    1930:	49 f1       	breq	.+82     	; 0x1984 <MDIO_voidDioSetPinValue+0x88>
    1932:	2e 81       	ldd	r18, Y+6	; 0x06
    1934:	3f 81       	ldd	r19, Y+7	; 0x07
    1936:	22 30       	cpi	r18, 0x02	; 2
    1938:	31 05       	cpc	r19, r1
    193a:	2c f4       	brge	.+10     	; 0x1946 <MDIO_voidDioSetPinValue+0x4a>
    193c:	8e 81       	ldd	r24, Y+6	; 0x06
    193e:	9f 81       	ldd	r25, Y+7	; 0x07
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	61 f0       	breq	.+24     	; 0x195c <MDIO_voidDioSetPinValue+0x60>
    1944:	d2 c0       	rjmp	.+420    	; 0x1aea <MDIO_voidDioSetPinValue+0x1ee>
    1946:	2e 81       	ldd	r18, Y+6	; 0x06
    1948:	3f 81       	ldd	r19, Y+7	; 0x07
    194a:	22 30       	cpi	r18, 0x02	; 2
    194c:	31 05       	cpc	r19, r1
    194e:	71 f1       	breq	.+92     	; 0x19ac <MDIO_voidDioSetPinValue+0xb0>
    1950:	8e 81       	ldd	r24, Y+6	; 0x06
    1952:	9f 81       	ldd	r25, Y+7	; 0x07
    1954:	83 30       	cpi	r24, 0x03	; 3
    1956:	91 05       	cpc	r25, r1
    1958:	e9 f1       	breq	.+122    	; 0x19d4 <MDIO_voidDioSetPinValue+0xd8>
    195a:	c7 c0       	rjmp	.+398    	; 0x1aea <MDIO_voidDioSetPinValue+0x1ee>
		{
			case DIO_PORTA: SET_BIT(PORTA, copy_u8Pin); break;
    195c:	ab e3       	ldi	r26, 0x3B	; 59
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	eb e3       	ldi	r30, 0x3B	; 59
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	48 2f       	mov	r20, r24
    1968:	8a 81       	ldd	r24, Y+2	; 0x02
    196a:	28 2f       	mov	r18, r24
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	02 2e       	mov	r0, r18
    1974:	02 c0       	rjmp	.+4      	; 0x197a <MDIO_voidDioSetPinValue+0x7e>
    1976:	88 0f       	add	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	0a 94       	dec	r0
    197c:	e2 f7       	brpl	.-8      	; 0x1976 <MDIO_voidDioSetPinValue+0x7a>
    197e:	84 2b       	or	r24, r20
    1980:	8c 93       	st	X, r24
    1982:	b3 c0       	rjmp	.+358    	; 0x1aea <MDIO_voidDioSetPinValue+0x1ee>
			case DIO_PORTB: SET_BIT(PORTB, copy_u8Pin); break;
    1984:	a8 e3       	ldi	r26, 0x38	; 56
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	e8 e3       	ldi	r30, 0x38	; 56
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	48 2f       	mov	r20, r24
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	28 2f       	mov	r18, r24
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	02 2e       	mov	r0, r18
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <MDIO_voidDioSetPinValue+0xa6>
    199e:	88 0f       	add	r24, r24
    19a0:	99 1f       	adc	r25, r25
    19a2:	0a 94       	dec	r0
    19a4:	e2 f7       	brpl	.-8      	; 0x199e <MDIO_voidDioSetPinValue+0xa2>
    19a6:	84 2b       	or	r24, r20
    19a8:	8c 93       	st	X, r24
    19aa:	9f c0       	rjmp	.+318    	; 0x1aea <MDIO_voidDioSetPinValue+0x1ee>
			case DIO_PORTC: SET_BIT(PORTC, copy_u8Pin); break;
    19ac:	a5 e3       	ldi	r26, 0x35	; 53
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	e5 e3       	ldi	r30, 0x35	; 53
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	48 2f       	mov	r20, r24
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	28 2f       	mov	r18, r24
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	02 2e       	mov	r0, r18
    19c4:	02 c0       	rjmp	.+4      	; 0x19ca <MDIO_voidDioSetPinValue+0xce>
    19c6:	88 0f       	add	r24, r24
    19c8:	99 1f       	adc	r25, r25
    19ca:	0a 94       	dec	r0
    19cc:	e2 f7       	brpl	.-8      	; 0x19c6 <MDIO_voidDioSetPinValue+0xca>
    19ce:	84 2b       	or	r24, r20
    19d0:	8c 93       	st	X, r24
    19d2:	8b c0       	rjmp	.+278    	; 0x1aea <MDIO_voidDioSetPinValue+0x1ee>
			case DIO_PORTD: SET_BIT(PORTD, copy_u8Pin); break;
    19d4:	a2 e3       	ldi	r26, 0x32	; 50
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e2 e3       	ldi	r30, 0x32	; 50
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	48 2f       	mov	r20, r24
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	02 2e       	mov	r0, r18
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <MDIO_voidDioSetPinValue+0xf6>
    19ee:	88 0f       	add	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	0a 94       	dec	r0
    19f4:	e2 f7       	brpl	.-8      	; 0x19ee <MDIO_voidDioSetPinValue+0xf2>
    19f6:	84 2b       	or	r24, r20
    19f8:	8c 93       	st	X, r24
    19fa:	77 c0       	rjmp	.+238    	; 0x1aea <MDIO_voidDioSetPinValue+0x1ee>
		}
	}
	else if (copy_u8Value == LOW)
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	88 23       	and	r24, r24
    1a00:	09 f0       	breq	.+2      	; 0x1a04 <MDIO_voidDioSetPinValue+0x108>
    1a02:	73 c0       	rjmp	.+230    	; 0x1aea <MDIO_voidDioSetPinValue+0x1ee>
	{
		switch(copy_u8Port)
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	3d 83       	std	Y+5, r19	; 0x05
    1a0c:	2c 83       	std	Y+4, r18	; 0x04
    1a0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a10:	9d 81       	ldd	r25, Y+5	; 0x05
    1a12:	81 30       	cpi	r24, 0x01	; 1
    1a14:	91 05       	cpc	r25, r1
    1a16:	59 f1       	breq	.+86     	; 0x1a6e <MDIO_voidDioSetPinValue+0x172>
    1a18:	2c 81       	ldd	r18, Y+4	; 0x04
    1a1a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a1c:	22 30       	cpi	r18, 0x02	; 2
    1a1e:	31 05       	cpc	r19, r1
    1a20:	2c f4       	brge	.+10     	; 0x1a2c <MDIO_voidDioSetPinValue+0x130>
    1a22:	8c 81       	ldd	r24, Y+4	; 0x04
    1a24:	9d 81       	ldd	r25, Y+5	; 0x05
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	69 f0       	breq	.+26     	; 0x1a44 <MDIO_voidDioSetPinValue+0x148>
    1a2a:	5f c0       	rjmp	.+190    	; 0x1aea <MDIO_voidDioSetPinValue+0x1ee>
    1a2c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a2e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a30:	22 30       	cpi	r18, 0x02	; 2
    1a32:	31 05       	cpc	r19, r1
    1a34:	89 f1       	breq	.+98     	; 0x1a98 <MDIO_voidDioSetPinValue+0x19c>
    1a36:	8c 81       	ldd	r24, Y+4	; 0x04
    1a38:	9d 81       	ldd	r25, Y+5	; 0x05
    1a3a:	83 30       	cpi	r24, 0x03	; 3
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	09 f4       	brne	.+2      	; 0x1a42 <MDIO_voidDioSetPinValue+0x146>
    1a40:	40 c0       	rjmp	.+128    	; 0x1ac2 <MDIO_voidDioSetPinValue+0x1c6>
    1a42:	53 c0       	rjmp	.+166    	; 0x1aea <MDIO_voidDioSetPinValue+0x1ee>
		{
			case DIO_PORTA: CLR_BIT(PORTA, copy_u8Pin); break;
    1a44:	ab e3       	ldi	r26, 0x3B	; 59
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	eb e3       	ldi	r30, 0x3B	; 59
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	48 2f       	mov	r20, r24
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	28 2f       	mov	r18, r24
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	02 2e       	mov	r0, r18
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <MDIO_voidDioSetPinValue+0x166>
    1a5e:	88 0f       	add	r24, r24
    1a60:	99 1f       	adc	r25, r25
    1a62:	0a 94       	dec	r0
    1a64:	e2 f7       	brpl	.-8      	; 0x1a5e <MDIO_voidDioSetPinValue+0x162>
    1a66:	80 95       	com	r24
    1a68:	84 23       	and	r24, r20
    1a6a:	8c 93       	st	X, r24
    1a6c:	3e c0       	rjmp	.+124    	; 0x1aea <MDIO_voidDioSetPinValue+0x1ee>
			case DIO_PORTB: CLR_BIT(PORTB, copy_u8Pin); break;
    1a6e:	a8 e3       	ldi	r26, 0x38	; 56
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	e8 e3       	ldi	r30, 0x38	; 56
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	48 2f       	mov	r20, r24
    1a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	02 2e       	mov	r0, r18
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <MDIO_voidDioSetPinValue+0x190>
    1a88:	88 0f       	add	r24, r24
    1a8a:	99 1f       	adc	r25, r25
    1a8c:	0a 94       	dec	r0
    1a8e:	e2 f7       	brpl	.-8      	; 0x1a88 <MDIO_voidDioSetPinValue+0x18c>
    1a90:	80 95       	com	r24
    1a92:	84 23       	and	r24, r20
    1a94:	8c 93       	st	X, r24
    1a96:	29 c0       	rjmp	.+82     	; 0x1aea <MDIO_voidDioSetPinValue+0x1ee>
			case DIO_PORTC: CLR_BIT(PORTC, copy_u8Pin); break;
    1a98:	a5 e3       	ldi	r26, 0x35	; 53
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e5 e3       	ldi	r30, 0x35	; 53
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	48 2f       	mov	r20, r24
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	02 2e       	mov	r0, r18
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <MDIO_voidDioSetPinValue+0x1ba>
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	0a 94       	dec	r0
    1ab8:	e2 f7       	brpl	.-8      	; 0x1ab2 <MDIO_voidDioSetPinValue+0x1b6>
    1aba:	80 95       	com	r24
    1abc:	84 23       	and	r24, r20
    1abe:	8c 93       	st	X, r24
    1ac0:	14 c0       	rjmp	.+40     	; 0x1aea <MDIO_voidDioSetPinValue+0x1ee>
			case DIO_PORTD: CLR_BIT(PORTD, copy_u8Pin); break;
    1ac2:	a2 e3       	ldi	r26, 0x32	; 50
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e2 e3       	ldi	r30, 0x32	; 50
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	48 2f       	mov	r20, r24
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad0:	28 2f       	mov	r18, r24
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	02 2e       	mov	r0, r18
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <MDIO_voidDioSetPinValue+0x1e4>
    1adc:	88 0f       	add	r24, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	0a 94       	dec	r0
    1ae2:	e2 f7       	brpl	.-8      	; 0x1adc <MDIO_voidDioSetPinValue+0x1e0>
    1ae4:	80 95       	com	r24
    1ae6:	84 23       	and	r24, r20
    1ae8:	8c 93       	st	X, r24
		}
	}
}
    1aea:	27 96       	adiw	r28, 0x07	; 7
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
    1af6:	cf 91       	pop	r28
    1af8:	df 91       	pop	r29
    1afa:	08 95       	ret

00001afc <MDIO_u8DioGetPinValue>:

u8 MDIO_u8DioGetPinValue (u8 copy_u8Port, u8 copy_u8Pin)
{
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	00 d0       	rcall	.+0      	; 0x1b02 <MDIO_u8DioGetPinValue+0x6>
    1b02:	00 d0       	rcall	.+0      	; 0x1b04 <MDIO_u8DioGetPinValue+0x8>
    1b04:	0f 92       	push	r0
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    1b0a:	8a 83       	std	Y+2, r24	; 0x02
    1b0c:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8Value;
	switch(copy_u8Port)
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	28 2f       	mov	r18, r24
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	3d 83       	std	Y+5, r19	; 0x05
    1b16:	2c 83       	std	Y+4, r18	; 0x04
    1b18:	4c 81       	ldd	r20, Y+4	; 0x04
    1b1a:	5d 81       	ldd	r21, Y+5	; 0x05
    1b1c:	41 30       	cpi	r20, 0x01	; 1
    1b1e:	51 05       	cpc	r21, r1
    1b20:	41 f1       	breq	.+80     	; 0x1b72 <MDIO_u8DioGetPinValue+0x76>
    1b22:	8c 81       	ldd	r24, Y+4	; 0x04
    1b24:	9d 81       	ldd	r25, Y+5	; 0x05
    1b26:	82 30       	cpi	r24, 0x02	; 2
    1b28:	91 05       	cpc	r25, r1
    1b2a:	34 f4       	brge	.+12     	; 0x1b38 <MDIO_u8DioGetPinValue+0x3c>
    1b2c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b2e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b30:	21 15       	cp	r18, r1
    1b32:	31 05       	cpc	r19, r1
    1b34:	61 f0       	breq	.+24     	; 0x1b4e <MDIO_u8DioGetPinValue+0x52>
    1b36:	52 c0       	rjmp	.+164    	; 0x1bdc <MDIO_u8DioGetPinValue+0xe0>
    1b38:	4c 81       	ldd	r20, Y+4	; 0x04
    1b3a:	5d 81       	ldd	r21, Y+5	; 0x05
    1b3c:	42 30       	cpi	r20, 0x02	; 2
    1b3e:	51 05       	cpc	r21, r1
    1b40:	51 f1       	breq	.+84     	; 0x1b96 <MDIO_u8DioGetPinValue+0x9a>
    1b42:	8c 81       	ldd	r24, Y+4	; 0x04
    1b44:	9d 81       	ldd	r25, Y+5	; 0x05
    1b46:	83 30       	cpi	r24, 0x03	; 3
    1b48:	91 05       	cpc	r25, r1
    1b4a:	b9 f1       	breq	.+110    	; 0x1bba <MDIO_u8DioGetPinValue+0xbe>
    1b4c:	47 c0       	rjmp	.+142    	; 0x1bdc <MDIO_u8DioGetPinValue+0xe0>
		{
			case DIO_PORTA: L_u8Value = GET_BIT(PINA, copy_u8Pin); break;
    1b4e:	e9 e3       	ldi	r30, 0x39	; 57
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	28 2f       	mov	r18, r24
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	88 2f       	mov	r24, r24
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	a9 01       	movw	r20, r18
    1b60:	02 c0       	rjmp	.+4      	; 0x1b66 <MDIO_u8DioGetPinValue+0x6a>
    1b62:	55 95       	asr	r21
    1b64:	47 95       	ror	r20
    1b66:	8a 95       	dec	r24
    1b68:	e2 f7       	brpl	.-8      	; 0x1b62 <MDIO_u8DioGetPinValue+0x66>
    1b6a:	ca 01       	movw	r24, r20
    1b6c:	81 70       	andi	r24, 0x01	; 1
    1b6e:	89 83       	std	Y+1, r24	; 0x01
    1b70:	35 c0       	rjmp	.+106    	; 0x1bdc <MDIO_u8DioGetPinValue+0xe0>
			case DIO_PORTB: L_u8Value = GET_BIT(PINB, copy_u8Pin); break;
    1b72:	e6 e3       	ldi	r30, 0x36	; 54
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	88 2f       	mov	r24, r24
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	a9 01       	movw	r20, r18
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <MDIO_u8DioGetPinValue+0x8e>
    1b86:	55 95       	asr	r21
    1b88:	47 95       	ror	r20
    1b8a:	8a 95       	dec	r24
    1b8c:	e2 f7       	brpl	.-8      	; 0x1b86 <MDIO_u8DioGetPinValue+0x8a>
    1b8e:	ca 01       	movw	r24, r20
    1b90:	81 70       	andi	r24, 0x01	; 1
    1b92:	89 83       	std	Y+1, r24	; 0x01
    1b94:	23 c0       	rjmp	.+70     	; 0x1bdc <MDIO_u8DioGetPinValue+0xe0>
			case DIO_PORTC: L_u8Value = GET_BIT(PINC, copy_u8Pin); break;
    1b96:	e3 e3       	ldi	r30, 0x33	; 51
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	28 2f       	mov	r18, r24
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba2:	88 2f       	mov	r24, r24
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	a9 01       	movw	r20, r18
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <MDIO_u8DioGetPinValue+0xb2>
    1baa:	55 95       	asr	r21
    1bac:	47 95       	ror	r20
    1bae:	8a 95       	dec	r24
    1bb0:	e2 f7       	brpl	.-8      	; 0x1baa <MDIO_u8DioGetPinValue+0xae>
    1bb2:	ca 01       	movw	r24, r20
    1bb4:	81 70       	andi	r24, 0x01	; 1
    1bb6:	89 83       	std	Y+1, r24	; 0x01
    1bb8:	11 c0       	rjmp	.+34     	; 0x1bdc <MDIO_u8DioGetPinValue+0xe0>
			case DIO_PORTD: L_u8Value = GET_BIT(PIND, copy_u8Pin); break;
    1bba:	e0 e3       	ldi	r30, 0x30	; 48
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	88 2f       	mov	r24, r24
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	a9 01       	movw	r20, r18
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <MDIO_u8DioGetPinValue+0xd6>
    1bce:	55 95       	asr	r21
    1bd0:	47 95       	ror	r20
    1bd2:	8a 95       	dec	r24
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <MDIO_u8DioGetPinValue+0xd2>
    1bd6:	ca 01       	movw	r24, r20
    1bd8:	81 70       	andi	r24, 0x01	; 1
    1bda:	89 83       	std	Y+1, r24	; 0x01
		}
	return L_u8Value;
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	08 95       	ret

00001bee <MDIO_voidDioTogglePin>:

void MDIO_voidDioTogglePin (u8 copy_u8Port, u8 copy_u8Pin)
{
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	00 d0       	rcall	.+0      	; 0x1bf4 <MDIO_voidDioTogglePin+0x6>
    1bf4:	00 d0       	rcall	.+0      	; 0x1bf6 <MDIO_voidDioTogglePin+0x8>
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
    1bfa:	89 83       	std	Y+1, r24	; 0x01
    1bfc:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8Port)
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	28 2f       	mov	r18, r24
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	3c 83       	std	Y+4, r19	; 0x04
    1c06:	2b 83       	std	Y+3, r18	; 0x03
    1c08:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0c:	81 30       	cpi	r24, 0x01	; 1
    1c0e:	91 05       	cpc	r25, r1
    1c10:	49 f1       	breq	.+82     	; 0x1c64 <MDIO_voidDioTogglePin+0x76>
    1c12:	2b 81       	ldd	r18, Y+3	; 0x03
    1c14:	3c 81       	ldd	r19, Y+4	; 0x04
    1c16:	22 30       	cpi	r18, 0x02	; 2
    1c18:	31 05       	cpc	r19, r1
    1c1a:	2c f4       	brge	.+10     	; 0x1c26 <MDIO_voidDioTogglePin+0x38>
    1c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	61 f0       	breq	.+24     	; 0x1c3c <MDIO_voidDioTogglePin+0x4e>
    1c24:	5a c0       	rjmp	.+180    	; 0x1cda <MDIO_voidDioTogglePin+0xec>
    1c26:	2b 81       	ldd	r18, Y+3	; 0x03
    1c28:	3c 81       	ldd	r19, Y+4	; 0x04
    1c2a:	22 30       	cpi	r18, 0x02	; 2
    1c2c:	31 05       	cpc	r19, r1
    1c2e:	71 f1       	breq	.+92     	; 0x1c8c <MDIO_voidDioTogglePin+0x9e>
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	9c 81       	ldd	r25, Y+4	; 0x04
    1c34:	83 30       	cpi	r24, 0x03	; 3
    1c36:	91 05       	cpc	r25, r1
    1c38:	e9 f1       	breq	.+122    	; 0x1cb4 <MDIO_voidDioTogglePin+0xc6>
    1c3a:	4f c0       	rjmp	.+158    	; 0x1cda <MDIO_voidDioTogglePin+0xec>
		{
			case DIO_PORTA: TOG_BIT(PORTA, copy_u8Pin); break;
    1c3c:	ab e3       	ldi	r26, 0x3B	; 59
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	eb e3       	ldi	r30, 0x3B	; 59
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	48 2f       	mov	r20, r24
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	02 2e       	mov	r0, r18
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <MDIO_voidDioTogglePin+0x6c>
    1c56:	88 0f       	add	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	0a 94       	dec	r0
    1c5c:	e2 f7       	brpl	.-8      	; 0x1c56 <MDIO_voidDioTogglePin+0x68>
    1c5e:	84 27       	eor	r24, r20
    1c60:	8c 93       	st	X, r24
    1c62:	3b c0       	rjmp	.+118    	; 0x1cda <MDIO_voidDioTogglePin+0xec>
			case DIO_PORTB: TOG_BIT(PORTB, copy_u8Pin); break;
    1c64:	a8 e3       	ldi	r26, 0x38	; 56
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e8 e3       	ldi	r30, 0x38	; 56
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	48 2f       	mov	r20, r24
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	02 2e       	mov	r0, r18
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <MDIO_voidDioTogglePin+0x94>
    1c7e:	88 0f       	add	r24, r24
    1c80:	99 1f       	adc	r25, r25
    1c82:	0a 94       	dec	r0
    1c84:	e2 f7       	brpl	.-8      	; 0x1c7e <MDIO_voidDioTogglePin+0x90>
    1c86:	84 27       	eor	r24, r20
    1c88:	8c 93       	st	X, r24
    1c8a:	27 c0       	rjmp	.+78     	; 0x1cda <MDIO_voidDioTogglePin+0xec>
			case DIO_PORTC: TOG_BIT(PORTC, copy_u8Pin); break;
    1c8c:	a5 e3       	ldi	r26, 0x35	; 53
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	e5 e3       	ldi	r30, 0x35	; 53
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	48 2f       	mov	r20, r24
    1c98:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9a:	28 2f       	mov	r18, r24
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	02 2e       	mov	r0, r18
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <MDIO_voidDioTogglePin+0xbc>
    1ca6:	88 0f       	add	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	0a 94       	dec	r0
    1cac:	e2 f7       	brpl	.-8      	; 0x1ca6 <MDIO_voidDioTogglePin+0xb8>
    1cae:	84 27       	eor	r24, r20
    1cb0:	8c 93       	st	X, r24
    1cb2:	13 c0       	rjmp	.+38     	; 0x1cda <MDIO_voidDioTogglePin+0xec>
			case DIO_PORTD: TOG_BIT(PORTD, copy_u8Pin); break;
    1cb4:	a2 e3       	ldi	r26, 0x32	; 50
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e2 e3       	ldi	r30, 0x32	; 50
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	48 2f       	mov	r20, r24
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	02 2e       	mov	r0, r18
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <MDIO_voidDioTogglePin+0xe4>
    1cce:	88 0f       	add	r24, r24
    1cd0:	99 1f       	adc	r25, r25
    1cd2:	0a 94       	dec	r0
    1cd4:	e2 f7       	brpl	.-8      	; 0x1cce <MDIO_voidDioTogglePin+0xe0>
    1cd6:	84 27       	eor	r24, r20
    1cd8:	8c 93       	st	X, r24
		}
}
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <MDIO_voidDioSetPortDirection>:

void MDIO_voidDioSetPortDirection (u8 copy_u8Port, u8 copy_u8Direction)
{
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	00 d0       	rcall	.+0      	; 0x1cee <MDIO_voidDioSetPortDirection+0x6>
    1cee:	00 d0       	rcall	.+0      	; 0x1cf0 <MDIO_voidDioSetPortDirection+0x8>
    1cf0:	cd b7       	in	r28, 0x3d	; 61
    1cf2:	de b7       	in	r29, 0x3e	; 62
    1cf4:	89 83       	std	Y+1, r24	; 0x01
    1cf6:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8Port)
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	3c 83       	std	Y+4, r19	; 0x04
    1d00:	2b 83       	std	Y+3, r18	; 0x03
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	9c 81       	ldd	r25, Y+4	; 0x04
    1d06:	81 30       	cpi	r24, 0x01	; 1
    1d08:	91 05       	cpc	r25, r1
    1d0a:	d1 f0       	breq	.+52     	; 0x1d40 <MDIO_voidDioSetPortDirection+0x58>
    1d0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d10:	22 30       	cpi	r18, 0x02	; 2
    1d12:	31 05       	cpc	r19, r1
    1d14:	2c f4       	brge	.+10     	; 0x1d20 <MDIO_voidDioSetPortDirection+0x38>
    1d16:	8b 81       	ldd	r24, Y+3	; 0x03
    1d18:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	61 f0       	breq	.+24     	; 0x1d36 <MDIO_voidDioSetPortDirection+0x4e>
    1d1e:	1e c0       	rjmp	.+60     	; 0x1d5c <MDIO_voidDioSetPortDirection+0x74>
    1d20:	2b 81       	ldd	r18, Y+3	; 0x03
    1d22:	3c 81       	ldd	r19, Y+4	; 0x04
    1d24:	22 30       	cpi	r18, 0x02	; 2
    1d26:	31 05       	cpc	r19, r1
    1d28:	81 f0       	breq	.+32     	; 0x1d4a <MDIO_voidDioSetPortDirection+0x62>
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2e:	83 30       	cpi	r24, 0x03	; 3
    1d30:	91 05       	cpc	r25, r1
    1d32:	81 f0       	breq	.+32     	; 0x1d54 <MDIO_voidDioSetPortDirection+0x6c>
    1d34:	13 c0       	rjmp	.+38     	; 0x1d5c <MDIO_voidDioSetPortDirection+0x74>
		{
			case DIO_PORTA: DDRA = copy_u8Direction; break;
    1d36:	ea e3       	ldi	r30, 0x3A	; 58
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	80 83       	st	Z, r24
    1d3e:	0e c0       	rjmp	.+28     	; 0x1d5c <MDIO_voidDioSetPortDirection+0x74>
			case DIO_PORTB: DDRB = copy_u8Direction; break;
    1d40:	e7 e3       	ldi	r30, 0x37	; 55
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	80 83       	st	Z, r24
    1d48:	09 c0       	rjmp	.+18     	; 0x1d5c <MDIO_voidDioSetPortDirection+0x74>
			case DIO_PORTC: DDRC = copy_u8Direction; break;
    1d4a:	e4 e3       	ldi	r30, 0x34	; 52
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	80 83       	st	Z, r24
    1d52:	04 c0       	rjmp	.+8      	; 0x1d5c <MDIO_voidDioSetPortDirection+0x74>
			case DIO_PORTD: DDRD = copy_u8Direction; break;
    1d54:	e1 e3       	ldi	r30, 0x31	; 49
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5a:	80 83       	st	Z, r24
		}
}
    1d5c:	0f 90       	pop	r0
    1d5e:	0f 90       	pop	r0
    1d60:	0f 90       	pop	r0
    1d62:	0f 90       	pop	r0
    1d64:	cf 91       	pop	r28
    1d66:	df 91       	pop	r29
    1d68:	08 95       	ret

00001d6a <MDIO_voidDioSetPortValue>:

void MDIO_voidDioSetPortValue (u8 copy_u8Port, u8 copy_u8Value)
{
    1d6a:	df 93       	push	r29
    1d6c:	cf 93       	push	r28
    1d6e:	00 d0       	rcall	.+0      	; 0x1d70 <MDIO_voidDioSetPortValue+0x6>
    1d70:	00 d0       	rcall	.+0      	; 0x1d72 <MDIO_voidDioSetPortValue+0x8>
    1d72:	cd b7       	in	r28, 0x3d	; 61
    1d74:	de b7       	in	r29, 0x3e	; 62
    1d76:	89 83       	std	Y+1, r24	; 0x01
    1d78:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8Port)
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	3c 83       	std	Y+4, r19	; 0x04
    1d82:	2b 83       	std	Y+3, r18	; 0x03
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	9c 81       	ldd	r25, Y+4	; 0x04
    1d88:	81 30       	cpi	r24, 0x01	; 1
    1d8a:	91 05       	cpc	r25, r1
    1d8c:	d1 f0       	breq	.+52     	; 0x1dc2 <MDIO_voidDioSetPortValue+0x58>
    1d8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d90:	3c 81       	ldd	r19, Y+4	; 0x04
    1d92:	22 30       	cpi	r18, 0x02	; 2
    1d94:	31 05       	cpc	r19, r1
    1d96:	2c f4       	brge	.+10     	; 0x1da2 <MDIO_voidDioSetPortValue+0x38>
    1d98:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9c:	00 97       	sbiw	r24, 0x00	; 0
    1d9e:	61 f0       	breq	.+24     	; 0x1db8 <MDIO_voidDioSetPortValue+0x4e>
    1da0:	1e c0       	rjmp	.+60     	; 0x1dde <MDIO_voidDioSetPortValue+0x74>
    1da2:	2b 81       	ldd	r18, Y+3	; 0x03
    1da4:	3c 81       	ldd	r19, Y+4	; 0x04
    1da6:	22 30       	cpi	r18, 0x02	; 2
    1da8:	31 05       	cpc	r19, r1
    1daa:	81 f0       	breq	.+32     	; 0x1dcc <MDIO_voidDioSetPortValue+0x62>
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	9c 81       	ldd	r25, Y+4	; 0x04
    1db0:	83 30       	cpi	r24, 0x03	; 3
    1db2:	91 05       	cpc	r25, r1
    1db4:	81 f0       	breq	.+32     	; 0x1dd6 <MDIO_voidDioSetPortValue+0x6c>
    1db6:	13 c0       	rjmp	.+38     	; 0x1dde <MDIO_voidDioSetPortValue+0x74>
		{
			case DIO_PORTA: PORTA = copy_u8Value;  break;
    1db8:	eb e3       	ldi	r30, 0x3B	; 59
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	80 83       	st	Z, r24
    1dc0:	0e c0       	rjmp	.+28     	; 0x1dde <MDIO_voidDioSetPortValue+0x74>
			case DIO_PORTB: PORTB = copy_u8Value;  break;
    1dc2:	e8 e3       	ldi	r30, 0x38	; 56
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	80 83       	st	Z, r24
    1dca:	09 c0       	rjmp	.+18     	; 0x1dde <MDIO_voidDioSetPortValue+0x74>
			case DIO_PORTC: PORTC = copy_u8Value;  break;
    1dcc:	e5 e3       	ldi	r30, 0x35	; 53
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	80 83       	st	Z, r24
    1dd4:	04 c0       	rjmp	.+8      	; 0x1dde <MDIO_voidDioSetPortValue+0x74>
			case DIO_PORTD: PORTD = copy_u8Value;  break;
    1dd6:	e2 e3       	ldi	r30, 0x32	; 50
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	8a 81       	ldd	r24, Y+2	; 0x02
    1ddc:	80 83       	st	Z, r24
		}
}
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	cf 91       	pop	r28
    1de8:	df 91       	pop	r29
    1dea:	08 95       	ret

00001dec <EXTI_voidInit>:

#define NULL ((void *)0)
static void (*EXTI_pf_EXTI[3])(void) = {NULL, NULL, NULL};

void EXTI_voidInit(void)
{
    1dec:	df 93       	push	r29
    1dee:	cf 93       	push	r28
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
#if EXTI_INDEX_0 == INT0
	SET_BIT(GICR, GICR_INT0);
    1df4:	ab e5       	ldi	r26, 0x5B	; 91
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	eb e5       	ldi	r30, 0x5B	; 91
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	80 64       	ori	r24, 0x40	; 64
    1e00:	8c 93       	st	X, r24
//CHOOSE CLOCK
#if EXTI_CLOCK_0 == LOW_LEVEL
	CLR_BIT(MCUCR,MCUCR_ISC00);
	CLR_BIT(MCUCR,MCUCR_ISC01);
#elif EXTI_CLOCK_0 == ANY_LOGICAL
	SET_BIT(MCUCR,MCUCR_ISC00);
    1e02:	a5 e5       	ldi	r26, 0x55	; 85
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	e5 e5       	ldi	r30, 0x55	; 85
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	81 60       	ori	r24, 0x01	; 1
    1e0e:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC01);
    1e10:	a5 e5       	ldi	r26, 0x55	; 85
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	e5 e5       	ldi	r30, 0x55	; 85
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	8d 7f       	andi	r24, 0xFD	; 253
    1e1c:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
#endif
#endif

#if EXIT_INDEX_1== INT1
	SET_BIT(GICR, GICR_INT1);
    1e1e:	ab e5       	ldi	r26, 0x5B	; 91
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	eb e5       	ldi	r30, 0x5B	; 91
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	80 68       	ori	r24, 0x80	; 128
    1e2a:	8c 93       	st	X, r24
//CHOOSE CLOCK
#if EXTI_CLOCK_1 == LOW_LEVEL
	CLR_BIT(MCUCR,MCUCR_ISC10);
	CLR_BIT(MCUCR,MCUCR_ISC11);
#elif EXTI_CLOCK_1 == ANY_LOGICAL
	SET_BIT(MCUCR,MCUCR_ISC10);
    1e2c:	a5 e5       	ldi	r26, 0x55	; 85
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e5 e5       	ldi	r30, 0x55	; 85
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	84 60       	ori	r24, 0x04	; 4
    1e38:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC11);
    1e3a:	a5 e5       	ldi	r26, 0x55	; 85
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	e5 e5       	ldi	r30, 0x55	; 85
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	87 7f       	andi	r24, 0xF7	; 247
    1e46:	8c 93       	st	X, r24
	CLR_BIT(MCUCSR, MCUCSR_ISC2);
#elif EXTI_CLOCK_2 == RAISING
	SET_BIT(MCUCSR, MCUCSR_ISC2);
#endif
#endif
}
    1e48:	cf 91       	pop	r28
    1e4a:	df 91       	pop	r29
    1e4c:	08 95       	ret

00001e4e <EXTI_voidGIE>:


void EXTI_voidGIE(void)
{
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
#if GIE == ENABLE
	SET_BIT(SREG, SREG_PIN);
    1e56:	af e5       	ldi	r26, 0x5F	; 95
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	ef e5       	ldi	r30, 0x5F	; 95
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	80 68       	ori	r24, 0x80	; 128
    1e62:	8c 93       	st	X, r24
#elif GIE == DISABLE
	CLR_BIT(SREG, SREG_PIN);
#endif
}
    1e64:	cf 91       	pop	r28
    1e66:	df 91       	pop	r29
    1e68:	08 95       	ret

00001e6a <EXTI_voidEXTISetCallBack>:

void EXTI_voidEXTISetCallBack(u8 copy_u8EXTIIndex, void (*copy_pf)(void))
{
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	00 d0       	rcall	.+0      	; 0x1e70 <EXTI_voidEXTISetCallBack+0x6>
    1e70:	0f 92       	push	r0
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
    1e76:	89 83       	std	Y+1, r24	; 0x01
    1e78:	7b 83       	std	Y+3, r23	; 0x03
    1e7a:	6a 83       	std	Y+2, r22	; 0x02
	EXTI_pf_EXTI[copy_u8EXTIIndex] = copy_pf;
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	88 2f       	mov	r24, r24
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	88 0f       	add	r24, r24
    1e84:	99 1f       	adc	r25, r25
    1e86:	fc 01       	movw	r30, r24
    1e88:	e0 58       	subi	r30, 0x80	; 128
    1e8a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e90:	91 83       	std	Z+1, r25	; 0x01
    1e92:	80 83       	st	Z, r24
}
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	08 95       	ret

00001ea0 <__vector_1>:

ISR(INT0_vect)
{
    1ea0:	1f 92       	push	r1
    1ea2:	0f 92       	push	r0
    1ea4:	0f b6       	in	r0, 0x3f	; 63
    1ea6:	0f 92       	push	r0
    1ea8:	11 24       	eor	r1, r1
    1eaa:	2f 93       	push	r18
    1eac:	3f 93       	push	r19
    1eae:	4f 93       	push	r20
    1eb0:	5f 93       	push	r21
    1eb2:	6f 93       	push	r22
    1eb4:	7f 93       	push	r23
    1eb6:	8f 93       	push	r24
    1eb8:	9f 93       	push	r25
    1eba:	af 93       	push	r26
    1ebc:	bf 93       	push	r27
    1ebe:	ef 93       	push	r30
    1ec0:	ff 93       	push	r31
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
	if ( EXTI_pf_EXTI[0] != NULL )
    1eca:	80 91 80 01 	lds	r24, 0x0180
    1ece:	90 91 81 01 	lds	r25, 0x0181
    1ed2:	00 97       	sbiw	r24, 0x00	; 0
    1ed4:	29 f0       	breq	.+10     	; 0x1ee0 <__vector_1+0x40>
	{
		EXTI_pf_EXTI[0]();
    1ed6:	e0 91 80 01 	lds	r30, 0x0180
    1eda:	f0 91 81 01 	lds	r31, 0x0181
    1ede:	09 95       	icall
	}
}
    1ee0:	cf 91       	pop	r28
    1ee2:	df 91       	pop	r29
    1ee4:	ff 91       	pop	r31
    1ee6:	ef 91       	pop	r30
    1ee8:	bf 91       	pop	r27
    1eea:	af 91       	pop	r26
    1eec:	9f 91       	pop	r25
    1eee:	8f 91       	pop	r24
    1ef0:	7f 91       	pop	r23
    1ef2:	6f 91       	pop	r22
    1ef4:	5f 91       	pop	r21
    1ef6:	4f 91       	pop	r20
    1ef8:	3f 91       	pop	r19
    1efa:	2f 91       	pop	r18
    1efc:	0f 90       	pop	r0
    1efe:	0f be       	out	0x3f, r0	; 63
    1f00:	0f 90       	pop	r0
    1f02:	1f 90       	pop	r1
    1f04:	18 95       	reti

00001f06 <__vector_2>:

ISR(INT1_vect)
{
    1f06:	1f 92       	push	r1
    1f08:	0f 92       	push	r0
    1f0a:	0f b6       	in	r0, 0x3f	; 63
    1f0c:	0f 92       	push	r0
    1f0e:	11 24       	eor	r1, r1
    1f10:	2f 93       	push	r18
    1f12:	3f 93       	push	r19
    1f14:	4f 93       	push	r20
    1f16:	5f 93       	push	r21
    1f18:	6f 93       	push	r22
    1f1a:	7f 93       	push	r23
    1f1c:	8f 93       	push	r24
    1f1e:	9f 93       	push	r25
    1f20:	af 93       	push	r26
    1f22:	bf 93       	push	r27
    1f24:	ef 93       	push	r30
    1f26:	ff 93       	push	r31
    1f28:	df 93       	push	r29
    1f2a:	cf 93       	push	r28
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62
	if ( EXTI_pf_EXTI[1] != NULL )
    1f30:	80 91 82 01 	lds	r24, 0x0182
    1f34:	90 91 83 01 	lds	r25, 0x0183
    1f38:	00 97       	sbiw	r24, 0x00	; 0
    1f3a:	29 f0       	breq	.+10     	; 0x1f46 <__vector_2+0x40>
	{
		EXTI_pf_EXTI[1]();
    1f3c:	e0 91 82 01 	lds	r30, 0x0182
    1f40:	f0 91 83 01 	lds	r31, 0x0183
    1f44:	09 95       	icall
	}
}
    1f46:	cf 91       	pop	r28
    1f48:	df 91       	pop	r29
    1f4a:	ff 91       	pop	r31
    1f4c:	ef 91       	pop	r30
    1f4e:	bf 91       	pop	r27
    1f50:	af 91       	pop	r26
    1f52:	9f 91       	pop	r25
    1f54:	8f 91       	pop	r24
    1f56:	7f 91       	pop	r23
    1f58:	6f 91       	pop	r22
    1f5a:	5f 91       	pop	r21
    1f5c:	4f 91       	pop	r20
    1f5e:	3f 91       	pop	r19
    1f60:	2f 91       	pop	r18
    1f62:	0f 90       	pop	r0
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	0f 90       	pop	r0
    1f68:	1f 90       	pop	r1
    1f6a:	18 95       	reti

00001f6c <__vector_3>:

ISR(INT2_vect)
{
    1f6c:	1f 92       	push	r1
    1f6e:	0f 92       	push	r0
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	0f 92       	push	r0
    1f74:	11 24       	eor	r1, r1
    1f76:	2f 93       	push	r18
    1f78:	3f 93       	push	r19
    1f7a:	4f 93       	push	r20
    1f7c:	5f 93       	push	r21
    1f7e:	6f 93       	push	r22
    1f80:	7f 93       	push	r23
    1f82:	8f 93       	push	r24
    1f84:	9f 93       	push	r25
    1f86:	af 93       	push	r26
    1f88:	bf 93       	push	r27
    1f8a:	ef 93       	push	r30
    1f8c:	ff 93       	push	r31
    1f8e:	df 93       	push	r29
    1f90:	cf 93       	push	r28
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
	if ( EXTI_pf_EXTI[2] != NULL )
    1f96:	80 91 84 01 	lds	r24, 0x0184
    1f9a:	90 91 85 01 	lds	r25, 0x0185
    1f9e:	00 97       	sbiw	r24, 0x00	; 0
    1fa0:	29 f0       	breq	.+10     	; 0x1fac <__vector_3+0x40>
	{
		EXTI_pf_EXTI[2]();
    1fa2:	e0 91 84 01 	lds	r30, 0x0184
    1fa6:	f0 91 85 01 	lds	r31, 0x0185
    1faa:	09 95       	icall
	}
}
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	ff 91       	pop	r31
    1fb2:	ef 91       	pop	r30
    1fb4:	bf 91       	pop	r27
    1fb6:	af 91       	pop	r26
    1fb8:	9f 91       	pop	r25
    1fba:	8f 91       	pop	r24
    1fbc:	7f 91       	pop	r23
    1fbe:	6f 91       	pop	r22
    1fc0:	5f 91       	pop	r21
    1fc2:	4f 91       	pop	r20
    1fc4:	3f 91       	pop	r19
    1fc6:	2f 91       	pop	r18
    1fc8:	0f 90       	pop	r0
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	0f 90       	pop	r0
    1fce:	1f 90       	pop	r1
    1fd0:	18 95       	reti

00001fd2 <main>:
#include "MCAL/M_TMR/TIME_Interface.h"

void toggleLED(void);

int main (void)
{
    1fd2:	df 93       	push	r29
    1fd4:	cf 93       	push	r28
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidDioSetPinDirection(DIO_PORTA, DIO_PIN_0, DIO_OUT);
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	60 e0       	ldi	r22, 0x00	; 0
    1fde:	41 e0       	ldi	r20, 0x01	; 1
    1fe0:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MDIO_voidDioSetPinDirection>

	EXTI_voidGIE();
    1fe4:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <EXTI_voidGIE>

	MTIMER_voidTimer2OVFSetCallBack(toggleLED);
    1fe8:	8f ef       	ldi	r24, 0xFF	; 255
    1fea:	9f e0       	ldi	r25, 0x0F	; 15
    1fec:	0e 94 a0 0a 	call	0x1540	; 0x1540 <MTIMER_voidTimer2OVFSetCallBack>
	while (1)
	{
		MTIMER_voidTimer2OVFDelay(1000);
    1ff0:	68 ee       	ldi	r22, 0xE8	; 232
    1ff2:	73 e0       	ldi	r23, 0x03	; 3
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	0e 94 54 09 	call	0x12a8	; 0x12a8 <MTIMER_voidTimer2OVFDelay>
    1ffc:	f9 cf       	rjmp	.-14     	; 0x1ff0 <main+0x1e>

00001ffe <toggleLED>:
	}
	return 0;
}

void toggleLED(void)
{
    1ffe:	df 93       	push	r29
    2000:	cf 93       	push	r28
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidDioTogglePin(DIO_PORTA, DIO_PIN_0);
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	60 e0       	ldi	r22, 0x00	; 0
    200a:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <MDIO_voidDioTogglePin>

}
    200e:	cf 91       	pop	r28
    2010:	df 91       	pop	r29
    2012:	08 95       	ret

00002014 <__mulsi3>:
    2014:	62 9f       	mul	r22, r18
    2016:	d0 01       	movw	r26, r0
    2018:	73 9f       	mul	r23, r19
    201a:	f0 01       	movw	r30, r0
    201c:	82 9f       	mul	r24, r18
    201e:	e0 0d       	add	r30, r0
    2020:	f1 1d       	adc	r31, r1
    2022:	64 9f       	mul	r22, r20
    2024:	e0 0d       	add	r30, r0
    2026:	f1 1d       	adc	r31, r1
    2028:	92 9f       	mul	r25, r18
    202a:	f0 0d       	add	r31, r0
    202c:	83 9f       	mul	r24, r19
    202e:	f0 0d       	add	r31, r0
    2030:	74 9f       	mul	r23, r20
    2032:	f0 0d       	add	r31, r0
    2034:	65 9f       	mul	r22, r21
    2036:	f0 0d       	add	r31, r0
    2038:	99 27       	eor	r25, r25
    203a:	72 9f       	mul	r23, r18
    203c:	b0 0d       	add	r27, r0
    203e:	e1 1d       	adc	r30, r1
    2040:	f9 1f       	adc	r31, r25
    2042:	63 9f       	mul	r22, r19
    2044:	b0 0d       	add	r27, r0
    2046:	e1 1d       	adc	r30, r1
    2048:	f9 1f       	adc	r31, r25
    204a:	bd 01       	movw	r22, r26
    204c:	cf 01       	movw	r24, r30
    204e:	11 24       	eor	r1, r1
    2050:	08 95       	ret

00002052 <__prologue_saves__>:
    2052:	2f 92       	push	r2
    2054:	3f 92       	push	r3
    2056:	4f 92       	push	r4
    2058:	5f 92       	push	r5
    205a:	6f 92       	push	r6
    205c:	7f 92       	push	r7
    205e:	8f 92       	push	r8
    2060:	9f 92       	push	r9
    2062:	af 92       	push	r10
    2064:	bf 92       	push	r11
    2066:	cf 92       	push	r12
    2068:	df 92       	push	r13
    206a:	ef 92       	push	r14
    206c:	ff 92       	push	r15
    206e:	0f 93       	push	r16
    2070:	1f 93       	push	r17
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
    207a:	ca 1b       	sub	r28, r26
    207c:	db 0b       	sbc	r29, r27
    207e:	0f b6       	in	r0, 0x3f	; 63
    2080:	f8 94       	cli
    2082:	de bf       	out	0x3e, r29	; 62
    2084:	0f be       	out	0x3f, r0	; 63
    2086:	cd bf       	out	0x3d, r28	; 61
    2088:	09 94       	ijmp

0000208a <__epilogue_restores__>:
    208a:	2a 88       	ldd	r2, Y+18	; 0x12
    208c:	39 88       	ldd	r3, Y+17	; 0x11
    208e:	48 88       	ldd	r4, Y+16	; 0x10
    2090:	5f 84       	ldd	r5, Y+15	; 0x0f
    2092:	6e 84       	ldd	r6, Y+14	; 0x0e
    2094:	7d 84       	ldd	r7, Y+13	; 0x0d
    2096:	8c 84       	ldd	r8, Y+12	; 0x0c
    2098:	9b 84       	ldd	r9, Y+11	; 0x0b
    209a:	aa 84       	ldd	r10, Y+10	; 0x0a
    209c:	b9 84       	ldd	r11, Y+9	; 0x09
    209e:	c8 84       	ldd	r12, Y+8	; 0x08
    20a0:	df 80       	ldd	r13, Y+7	; 0x07
    20a2:	ee 80       	ldd	r14, Y+6	; 0x06
    20a4:	fd 80       	ldd	r15, Y+5	; 0x05
    20a6:	0c 81       	ldd	r16, Y+4	; 0x04
    20a8:	1b 81       	ldd	r17, Y+3	; 0x03
    20aa:	aa 81       	ldd	r26, Y+2	; 0x02
    20ac:	b9 81       	ldd	r27, Y+1	; 0x01
    20ae:	ce 0f       	add	r28, r30
    20b0:	d1 1d       	adc	r29, r1
    20b2:	0f b6       	in	r0, 0x3f	; 63
    20b4:	f8 94       	cli
    20b6:	de bf       	out	0x3e, r29	; 62
    20b8:	0f be       	out	0x3f, r0	; 63
    20ba:	cd bf       	out	0x3d, r28	; 61
    20bc:	ed 01       	movw	r28, r26
    20be:	08 95       	ret

000020c0 <_exit>:
    20c0:	f8 94       	cli

000020c2 <__stop_program>:
    20c2:	ff cf       	rjmp	.-2      	; 0x20c2 <__stop_program>
