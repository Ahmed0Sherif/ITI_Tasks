
D16_Task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000235a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  0000235a  000023ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  00800168  00800168  000024f6  2**0
                  ALLOC
  3 .stab         00001794  00000000  00000000  000024f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fae  00000000  00000000  00003c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00004c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d4  00000000  00000000  00004dba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000218c  00000000  00000000  00004f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000122c  00000000  00000000  0000711a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001103  00000000  00000000  00008346  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000944c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ee  00000000  00000000  000095ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000932  00000000  00000000  000098da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a20c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 9a 10 	jmp	0x2134	; 0x2134 <__vector_1>
       8:	0c 94 cd 10 	jmp	0x219a	; 0x219a <__vector_2>
       c:	0c 94 00 11 	jmp	0x2200	; 0x2200 <__vector_3>
      10:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__vector_4>
      14:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 3d 09 	jmp	0x127a	; 0x127a <__vector_10>
      2c:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ae 38       	cpi	r26, 0x8E	; 142
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ea e5       	ldi	r30, 0x5A	; 90
      78:	f3 e2       	ldi	r31, 0x23	; 35
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 33 11 	call	0x2266	; 0x2266 <main>
      8a:	0c 94 ab 11 	jmp	0x2356	; 0x2356 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 25 04 	call	0x84a	; 0x84a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 25 04 	call	0x84a	; 0x84a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 98 11 	jmp	0x2330	; 0x2330 <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__epilogue_restores__+0x18>

000007ea <__lesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__lesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__lesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__lesf2+0x58>
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__epilogue_restores__+0x18>

0000084a <__fixsfsi>:
     84a:	ac e0       	ldi	r26, 0x0C	; 12
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__prologue_saves__+0x20>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	ce 01       	movw	r24, r28
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	be 01       	movw	r22, r28
     864:	6b 5f       	subi	r22, 0xFB	; 251
     866:	7f 4f       	sbci	r23, 0xFF	; 255
     868:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     86c:	8d 81       	ldd	r24, Y+5	; 0x05
     86e:	82 30       	cpi	r24, 0x02	; 2
     870:	61 f1       	breq	.+88     	; 0x8ca <__stack+0x6b>
     872:	82 30       	cpi	r24, 0x02	; 2
     874:	50 f1       	brcs	.+84     	; 0x8ca <__stack+0x6b>
     876:	84 30       	cpi	r24, 0x04	; 4
     878:	21 f4       	brne	.+8      	; 0x882 <__stack+0x23>
     87a:	8e 81       	ldd	r24, Y+6	; 0x06
     87c:	88 23       	and	r24, r24
     87e:	51 f1       	breq	.+84     	; 0x8d4 <__stack+0x75>
     880:	2e c0       	rjmp	.+92     	; 0x8de <__stack+0x7f>
     882:	2f 81       	ldd	r18, Y+7	; 0x07
     884:	38 85       	ldd	r19, Y+8	; 0x08
     886:	37 fd       	sbrc	r19, 7
     888:	20 c0       	rjmp	.+64     	; 0x8ca <__stack+0x6b>
     88a:	6e 81       	ldd	r22, Y+6	; 0x06
     88c:	2f 31       	cpi	r18, 0x1F	; 31
     88e:	31 05       	cpc	r19, r1
     890:	1c f0       	brlt	.+6      	; 0x898 <__stack+0x39>
     892:	66 23       	and	r22, r22
     894:	f9 f0       	breq	.+62     	; 0x8d4 <__stack+0x75>
     896:	23 c0       	rjmp	.+70     	; 0x8de <__stack+0x7f>
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	82 1b       	sub	r24, r18
     89e:	93 0b       	sbc	r25, r19
     8a0:	29 85       	ldd	r18, Y+9	; 0x09
     8a2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8a4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8a6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <__stack+0x53>
     8aa:	56 95       	lsr	r21
     8ac:	47 95       	ror	r20
     8ae:	37 95       	ror	r19
     8b0:	27 95       	ror	r18
     8b2:	8a 95       	dec	r24
     8b4:	d2 f7       	brpl	.-12     	; 0x8aa <__stack+0x4b>
     8b6:	66 23       	and	r22, r22
     8b8:	b1 f0       	breq	.+44     	; 0x8e6 <__stack+0x87>
     8ba:	50 95       	com	r21
     8bc:	40 95       	com	r20
     8be:	30 95       	com	r19
     8c0:	21 95       	neg	r18
     8c2:	3f 4f       	sbci	r19, 0xFF	; 255
     8c4:	4f 4f       	sbci	r20, 0xFF	; 255
     8c6:	5f 4f       	sbci	r21, 0xFF	; 255
     8c8:	0e c0       	rjmp	.+28     	; 0x8e6 <__stack+0x87>
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	09 c0       	rjmp	.+18     	; 0x8e6 <__stack+0x87>
     8d4:	2f ef       	ldi	r18, 0xFF	; 255
     8d6:	3f ef       	ldi	r19, 0xFF	; 255
     8d8:	4f ef       	ldi	r20, 0xFF	; 255
     8da:	5f e7       	ldi	r21, 0x7F	; 127
     8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <__stack+0x87>
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	50 e8       	ldi	r21, 0x80	; 128
     8e6:	b9 01       	movw	r22, r18
     8e8:	ca 01       	movw	r24, r20
     8ea:	2c 96       	adiw	r28, 0x0c	; 12
     8ec:	e2 e0       	ldi	r30, 0x02	; 2
     8ee:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__epilogue_restores__+0x20>

000008f2 <__floatunsisf>:
     8f2:	a8 e0       	ldi	r26, 0x08	; 8
     8f4:	b0 e0       	ldi	r27, 0x00	; 0
     8f6:	ef e7       	ldi	r30, 0x7F	; 127
     8f8:	f4 e0       	ldi	r31, 0x04	; 4
     8fa:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <__prologue_saves__+0x10>
     8fe:	7b 01       	movw	r14, r22
     900:	8c 01       	movw	r16, r24
     902:	61 15       	cp	r22, r1
     904:	71 05       	cpc	r23, r1
     906:	81 05       	cpc	r24, r1
     908:	91 05       	cpc	r25, r1
     90a:	19 f4       	brne	.+6      	; 0x912 <__floatunsisf+0x20>
     90c:	82 e0       	ldi	r24, 0x02	; 2
     90e:	89 83       	std	Y+1, r24	; 0x01
     910:	60 c0       	rjmp	.+192    	; 0x9d2 <__floatunsisf+0xe0>
     912:	83 e0       	ldi	r24, 0x03	; 3
     914:	89 83       	std	Y+1, r24	; 0x01
     916:	8e e1       	ldi	r24, 0x1E	; 30
     918:	c8 2e       	mov	r12, r24
     91a:	d1 2c       	mov	r13, r1
     91c:	dc 82       	std	Y+4, r13	; 0x04
     91e:	cb 82       	std	Y+3, r12	; 0x03
     920:	ed 82       	std	Y+5, r14	; 0x05
     922:	fe 82       	std	Y+6, r15	; 0x06
     924:	0f 83       	std	Y+7, r16	; 0x07
     926:	18 87       	std	Y+8, r17	; 0x08
     928:	c8 01       	movw	r24, r16
     92a:	b7 01       	movw	r22, r14
     92c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__clzsi2>
     930:	fc 01       	movw	r30, r24
     932:	31 97       	sbiw	r30, 0x01	; 1
     934:	f7 ff       	sbrs	r31, 7
     936:	3b c0       	rjmp	.+118    	; 0x9ae <__floatunsisf+0xbc>
     938:	22 27       	eor	r18, r18
     93a:	33 27       	eor	r19, r19
     93c:	2e 1b       	sub	r18, r30
     93e:	3f 0b       	sbc	r19, r31
     940:	57 01       	movw	r10, r14
     942:	68 01       	movw	r12, r16
     944:	02 2e       	mov	r0, r18
     946:	04 c0       	rjmp	.+8      	; 0x950 <__floatunsisf+0x5e>
     948:	d6 94       	lsr	r13
     94a:	c7 94       	ror	r12
     94c:	b7 94       	ror	r11
     94e:	a7 94       	ror	r10
     950:	0a 94       	dec	r0
     952:	d2 f7       	brpl	.-12     	; 0x948 <__floatunsisf+0x56>
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	a0 e0       	ldi	r26, 0x00	; 0
     962:	b0 e0       	ldi	r27, 0x00	; 0
     964:	04 c0       	rjmp	.+8      	; 0x96e <__floatunsisf+0x7c>
     966:	88 0f       	add	r24, r24
     968:	99 1f       	adc	r25, r25
     96a:	aa 1f       	adc	r26, r26
     96c:	bb 1f       	adc	r27, r27
     96e:	2a 95       	dec	r18
     970:	d2 f7       	brpl	.-12     	; 0x966 <__floatunsisf+0x74>
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	a1 09       	sbc	r26, r1
     976:	b1 09       	sbc	r27, r1
     978:	8e 21       	and	r24, r14
     97a:	9f 21       	and	r25, r15
     97c:	a0 23       	and	r26, r16
     97e:	b1 23       	and	r27, r17
     980:	00 97       	sbiw	r24, 0x00	; 0
     982:	a1 05       	cpc	r26, r1
     984:	b1 05       	cpc	r27, r1
     986:	21 f0       	breq	.+8      	; 0x990 <__floatunsisf+0x9e>
     988:	41 e0       	ldi	r20, 0x01	; 1
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	60 e0       	ldi	r22, 0x00	; 0
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	4a 29       	or	r20, r10
     992:	5b 29       	or	r21, r11
     994:	6c 29       	or	r22, r12
     996:	7d 29       	or	r23, r13
     998:	4d 83       	std	Y+5, r20	; 0x05
     99a:	5e 83       	std	Y+6, r21	; 0x06
     99c:	6f 83       	std	Y+7, r22	; 0x07
     99e:	78 87       	std	Y+8, r23	; 0x08
     9a0:	8e e1       	ldi	r24, 0x1E	; 30
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	8e 1b       	sub	r24, r30
     9a6:	9f 0b       	sbc	r25, r31
     9a8:	9c 83       	std	Y+4, r25	; 0x04
     9aa:	8b 83       	std	Y+3, r24	; 0x03
     9ac:	12 c0       	rjmp	.+36     	; 0x9d2 <__floatunsisf+0xe0>
     9ae:	30 97       	sbiw	r30, 0x00	; 0
     9b0:	81 f0       	breq	.+32     	; 0x9d2 <__floatunsisf+0xe0>
     9b2:	0e 2e       	mov	r0, r30
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0xcc>
     9b6:	ee 0c       	add	r14, r14
     9b8:	ff 1c       	adc	r15, r15
     9ba:	00 1f       	adc	r16, r16
     9bc:	11 1f       	adc	r17, r17
     9be:	0a 94       	dec	r0
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0xc4>
     9c2:	ed 82       	std	Y+5, r14	; 0x05
     9c4:	fe 82       	std	Y+6, r15	; 0x06
     9c6:	0f 83       	std	Y+7, r16	; 0x07
     9c8:	18 87       	std	Y+8, r17	; 0x08
     9ca:	ce 1a       	sub	r12, r30
     9cc:	df 0a       	sbc	r13, r31
     9ce:	dc 82       	std	Y+4, r13	; 0x04
     9d0:	cb 82       	std	Y+3, r12	; 0x03
     9d2:	1a 82       	std	Y+2, r1	; 0x02
     9d4:	ce 01       	movw	r24, r28
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     9dc:	28 96       	adiw	r28, 0x08	; 8
     9de:	ea e0       	ldi	r30, 0x0A	; 10
     9e0:	0c 94 98 11 	jmp	0x2330	; 0x2330 <__epilogue_restores__+0x10>

000009e4 <__clzsi2>:
     9e4:	ef 92       	push	r14
     9e6:	ff 92       	push	r15
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	7b 01       	movw	r14, r22
     9ee:	8c 01       	movw	r16, r24
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	e8 16       	cp	r14, r24
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	f8 06       	cpc	r15, r24
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	08 07       	cpc	r16, r24
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	18 07       	cpc	r17, r24
     a00:	88 f4       	brcc	.+34     	; 0xa24 <__clzsi2+0x40>
     a02:	8f ef       	ldi	r24, 0xFF	; 255
     a04:	e8 16       	cp	r14, r24
     a06:	f1 04       	cpc	r15, r1
     a08:	01 05       	cpc	r16, r1
     a0a:	11 05       	cpc	r17, r1
     a0c:	31 f0       	breq	.+12     	; 0xa1a <__clzsi2+0x36>
     a0e:	28 f0       	brcs	.+10     	; 0xa1a <__clzsi2+0x36>
     a10:	88 e0       	ldi	r24, 0x08	; 8
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	a0 e0       	ldi	r26, 0x00	; 0
     a16:	b0 e0       	ldi	r27, 0x00	; 0
     a18:	17 c0       	rjmp	.+46     	; 0xa48 <__clzsi2+0x64>
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	a0 e0       	ldi	r26, 0x00	; 0
     a20:	b0 e0       	ldi	r27, 0x00	; 0
     a22:	12 c0       	rjmp	.+36     	; 0xa48 <__clzsi2+0x64>
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	e8 16       	cp	r14, r24
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	f8 06       	cpc	r15, r24
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	08 07       	cpc	r16, r24
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	18 07       	cpc	r17, r24
     a34:	28 f0       	brcs	.+10     	; 0xa40 <__clzsi2+0x5c>
     a36:	88 e1       	ldi	r24, 0x18	; 24
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	a0 e0       	ldi	r26, 0x00	; 0
     a3c:	b0 e0       	ldi	r27, 0x00	; 0
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__clzsi2+0x64>
     a40:	80 e1       	ldi	r24, 0x10	; 16
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	20 e2       	ldi	r18, 0x20	; 32
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	28 1b       	sub	r18, r24
     a52:	39 0b       	sbc	r19, r25
     a54:	4a 0b       	sbc	r20, r26
     a56:	5b 0b       	sbc	r21, r27
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__clzsi2+0x7e>
     a5a:	16 95       	lsr	r17
     a5c:	07 95       	ror	r16
     a5e:	f7 94       	ror	r15
     a60:	e7 94       	ror	r14
     a62:	8a 95       	dec	r24
     a64:	d2 f7       	brpl	.-12     	; 0xa5a <__clzsi2+0x76>
     a66:	f7 01       	movw	r30, r14
     a68:	e8 59       	subi	r30, 0x98	; 152
     a6a:	ff 4f       	sbci	r31, 0xFF	; 255
     a6c:	80 81       	ld	r24, Z
     a6e:	28 1b       	sub	r18, r24
     a70:	31 09       	sbc	r19, r1
     a72:	41 09       	sbc	r20, r1
     a74:	51 09       	sbc	r21, r1
     a76:	c9 01       	movw	r24, r18
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	ff 90       	pop	r15
     a7e:	ef 90       	pop	r14
     a80:	08 95       	ret

00000a82 <__pack_f>:
     a82:	df 92       	push	r13
     a84:	ef 92       	push	r14
     a86:	ff 92       	push	r15
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	fc 01       	movw	r30, r24
     a8e:	e4 80       	ldd	r14, Z+4	; 0x04
     a90:	f5 80       	ldd	r15, Z+5	; 0x05
     a92:	06 81       	ldd	r16, Z+6	; 0x06
     a94:	17 81       	ldd	r17, Z+7	; 0x07
     a96:	d1 80       	ldd	r13, Z+1	; 0x01
     a98:	80 81       	ld	r24, Z
     a9a:	82 30       	cpi	r24, 0x02	; 2
     a9c:	48 f4       	brcc	.+18     	; 0xab0 <__pack_f+0x2e>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	a0 e1       	ldi	r26, 0x10	; 16
     aa4:	b0 e0       	ldi	r27, 0x00	; 0
     aa6:	e8 2a       	or	r14, r24
     aa8:	f9 2a       	or	r15, r25
     aaa:	0a 2b       	or	r16, r26
     aac:	1b 2b       	or	r17, r27
     aae:	a5 c0       	rjmp	.+330    	; 0xbfa <__pack_f+0x178>
     ab0:	84 30       	cpi	r24, 0x04	; 4
     ab2:	09 f4       	brne	.+2      	; 0xab6 <__pack_f+0x34>
     ab4:	9f c0       	rjmp	.+318    	; 0xbf4 <__pack_f+0x172>
     ab6:	82 30       	cpi	r24, 0x02	; 2
     ab8:	21 f4       	brne	.+8      	; 0xac2 <__pack_f+0x40>
     aba:	ee 24       	eor	r14, r14
     abc:	ff 24       	eor	r15, r15
     abe:	87 01       	movw	r16, r14
     ac0:	05 c0       	rjmp	.+10     	; 0xacc <__pack_f+0x4a>
     ac2:	e1 14       	cp	r14, r1
     ac4:	f1 04       	cpc	r15, r1
     ac6:	01 05       	cpc	r16, r1
     ac8:	11 05       	cpc	r17, r1
     aca:	19 f4       	brne	.+6      	; 0xad2 <__pack_f+0x50>
     acc:	e0 e0       	ldi	r30, 0x00	; 0
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	96 c0       	rjmp	.+300    	; 0xbfe <__pack_f+0x17c>
     ad2:	62 81       	ldd	r22, Z+2	; 0x02
     ad4:	73 81       	ldd	r23, Z+3	; 0x03
     ad6:	9f ef       	ldi	r25, 0xFF	; 255
     ad8:	62 38       	cpi	r22, 0x82	; 130
     ada:	79 07       	cpc	r23, r25
     adc:	0c f0       	brlt	.+2      	; 0xae0 <__pack_f+0x5e>
     ade:	5b c0       	rjmp	.+182    	; 0xb96 <__pack_f+0x114>
     ae0:	22 e8       	ldi	r18, 0x82	; 130
     ae2:	3f ef       	ldi	r19, 0xFF	; 255
     ae4:	26 1b       	sub	r18, r22
     ae6:	37 0b       	sbc	r19, r23
     ae8:	2a 31       	cpi	r18, 0x1A	; 26
     aea:	31 05       	cpc	r19, r1
     aec:	2c f0       	brlt	.+10     	; 0xaf8 <__pack_f+0x76>
     aee:	20 e0       	ldi	r18, 0x00	; 0
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	40 e0       	ldi	r20, 0x00	; 0
     af4:	50 e0       	ldi	r21, 0x00	; 0
     af6:	2a c0       	rjmp	.+84     	; 0xb4c <__pack_f+0xca>
     af8:	b8 01       	movw	r22, r16
     afa:	a7 01       	movw	r20, r14
     afc:	02 2e       	mov	r0, r18
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__pack_f+0x86>
     b00:	76 95       	lsr	r23
     b02:	67 95       	ror	r22
     b04:	57 95       	ror	r21
     b06:	47 95       	ror	r20
     b08:	0a 94       	dec	r0
     b0a:	d2 f7       	brpl	.-12     	; 0xb00 <__pack_f+0x7e>
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	a0 e0       	ldi	r26, 0x00	; 0
     b12:	b0 e0       	ldi	r27, 0x00	; 0
     b14:	04 c0       	rjmp	.+8      	; 0xb1e <__pack_f+0x9c>
     b16:	88 0f       	add	r24, r24
     b18:	99 1f       	adc	r25, r25
     b1a:	aa 1f       	adc	r26, r26
     b1c:	bb 1f       	adc	r27, r27
     b1e:	2a 95       	dec	r18
     b20:	d2 f7       	brpl	.-12     	; 0xb16 <__pack_f+0x94>
     b22:	01 97       	sbiw	r24, 0x01	; 1
     b24:	a1 09       	sbc	r26, r1
     b26:	b1 09       	sbc	r27, r1
     b28:	8e 21       	and	r24, r14
     b2a:	9f 21       	and	r25, r15
     b2c:	a0 23       	and	r26, r16
     b2e:	b1 23       	and	r27, r17
     b30:	00 97       	sbiw	r24, 0x00	; 0
     b32:	a1 05       	cpc	r26, r1
     b34:	b1 05       	cpc	r27, r1
     b36:	21 f0       	breq	.+8      	; 0xb40 <__pack_f+0xbe>
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	a0 e0       	ldi	r26, 0x00	; 0
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	9a 01       	movw	r18, r20
     b42:	ab 01       	movw	r20, r22
     b44:	28 2b       	or	r18, r24
     b46:	39 2b       	or	r19, r25
     b48:	4a 2b       	or	r20, r26
     b4a:	5b 2b       	or	r21, r27
     b4c:	da 01       	movw	r26, r20
     b4e:	c9 01       	movw	r24, r18
     b50:	8f 77       	andi	r24, 0x7F	; 127
     b52:	90 70       	andi	r25, 0x00	; 0
     b54:	a0 70       	andi	r26, 0x00	; 0
     b56:	b0 70       	andi	r27, 0x00	; 0
     b58:	80 34       	cpi	r24, 0x40	; 64
     b5a:	91 05       	cpc	r25, r1
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	39 f4       	brne	.+14     	; 0xb70 <__pack_f+0xee>
     b62:	27 ff       	sbrs	r18, 7
     b64:	09 c0       	rjmp	.+18     	; 0xb78 <__pack_f+0xf6>
     b66:	20 5c       	subi	r18, 0xC0	; 192
     b68:	3f 4f       	sbci	r19, 0xFF	; 255
     b6a:	4f 4f       	sbci	r20, 0xFF	; 255
     b6c:	5f 4f       	sbci	r21, 0xFF	; 255
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <__pack_f+0xf6>
     b70:	21 5c       	subi	r18, 0xC1	; 193
     b72:	3f 4f       	sbci	r19, 0xFF	; 255
     b74:	4f 4f       	sbci	r20, 0xFF	; 255
     b76:	5f 4f       	sbci	r21, 0xFF	; 255
     b78:	e0 e0       	ldi	r30, 0x00	; 0
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	a0 e0       	ldi	r26, 0x00	; 0
     b80:	3a 07       	cpc	r19, r26
     b82:	a0 e0       	ldi	r26, 0x00	; 0
     b84:	4a 07       	cpc	r20, r26
     b86:	a0 e4       	ldi	r26, 0x40	; 64
     b88:	5a 07       	cpc	r21, r26
     b8a:	10 f0       	brcs	.+4      	; 0xb90 <__pack_f+0x10e>
     b8c:	e1 e0       	ldi	r30, 0x01	; 1
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	79 01       	movw	r14, r18
     b92:	8a 01       	movw	r16, r20
     b94:	27 c0       	rjmp	.+78     	; 0xbe4 <__pack_f+0x162>
     b96:	60 38       	cpi	r22, 0x80	; 128
     b98:	71 05       	cpc	r23, r1
     b9a:	64 f5       	brge	.+88     	; 0xbf4 <__pack_f+0x172>
     b9c:	fb 01       	movw	r30, r22
     b9e:	e1 58       	subi	r30, 0x81	; 129
     ba0:	ff 4f       	sbci	r31, 0xFF	; 255
     ba2:	d8 01       	movw	r26, r16
     ba4:	c7 01       	movw	r24, r14
     ba6:	8f 77       	andi	r24, 0x7F	; 127
     ba8:	90 70       	andi	r25, 0x00	; 0
     baa:	a0 70       	andi	r26, 0x00	; 0
     bac:	b0 70       	andi	r27, 0x00	; 0
     bae:	80 34       	cpi	r24, 0x40	; 64
     bb0:	91 05       	cpc	r25, r1
     bb2:	a1 05       	cpc	r26, r1
     bb4:	b1 05       	cpc	r27, r1
     bb6:	39 f4       	brne	.+14     	; 0xbc6 <__pack_f+0x144>
     bb8:	e7 fe       	sbrs	r14, 7
     bba:	0d c0       	rjmp	.+26     	; 0xbd6 <__pack_f+0x154>
     bbc:	80 e4       	ldi	r24, 0x40	; 64
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	04 c0       	rjmp	.+8      	; 0xbce <__pack_f+0x14c>
     bc6:	8f e3       	ldi	r24, 0x3F	; 63
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	a0 e0       	ldi	r26, 0x00	; 0
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e8 0e       	add	r14, r24
     bd0:	f9 1e       	adc	r15, r25
     bd2:	0a 1f       	adc	r16, r26
     bd4:	1b 1f       	adc	r17, r27
     bd6:	17 ff       	sbrs	r17, 7
     bd8:	05 c0       	rjmp	.+10     	; 0xbe4 <__pack_f+0x162>
     bda:	16 95       	lsr	r17
     bdc:	07 95       	ror	r16
     bde:	f7 94       	ror	r15
     be0:	e7 94       	ror	r14
     be2:	31 96       	adiw	r30, 0x01	; 1
     be4:	87 e0       	ldi	r24, 0x07	; 7
     be6:	16 95       	lsr	r17
     be8:	07 95       	ror	r16
     bea:	f7 94       	ror	r15
     bec:	e7 94       	ror	r14
     bee:	8a 95       	dec	r24
     bf0:	d1 f7       	brne	.-12     	; 0xbe6 <__pack_f+0x164>
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <__pack_f+0x17c>
     bf4:	ee 24       	eor	r14, r14
     bf6:	ff 24       	eor	r15, r15
     bf8:	87 01       	movw	r16, r14
     bfa:	ef ef       	ldi	r30, 0xFF	; 255
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	6e 2f       	mov	r22, r30
     c00:	67 95       	ror	r22
     c02:	66 27       	eor	r22, r22
     c04:	67 95       	ror	r22
     c06:	90 2f       	mov	r25, r16
     c08:	9f 77       	andi	r25, 0x7F	; 127
     c0a:	d7 94       	ror	r13
     c0c:	dd 24       	eor	r13, r13
     c0e:	d7 94       	ror	r13
     c10:	8e 2f       	mov	r24, r30
     c12:	86 95       	lsr	r24
     c14:	49 2f       	mov	r20, r25
     c16:	46 2b       	or	r20, r22
     c18:	58 2f       	mov	r21, r24
     c1a:	5d 29       	or	r21, r13
     c1c:	b7 01       	movw	r22, r14
     c1e:	ca 01       	movw	r24, r20
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	ff 90       	pop	r15
     c26:	ef 90       	pop	r14
     c28:	df 90       	pop	r13
     c2a:	08 95       	ret

00000c2c <__unpack_f>:
     c2c:	fc 01       	movw	r30, r24
     c2e:	db 01       	movw	r26, r22
     c30:	40 81       	ld	r20, Z
     c32:	51 81       	ldd	r21, Z+1	; 0x01
     c34:	22 81       	ldd	r18, Z+2	; 0x02
     c36:	62 2f       	mov	r22, r18
     c38:	6f 77       	andi	r22, 0x7F	; 127
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	22 1f       	adc	r18, r18
     c3e:	22 27       	eor	r18, r18
     c40:	22 1f       	adc	r18, r18
     c42:	93 81       	ldd	r25, Z+3	; 0x03
     c44:	89 2f       	mov	r24, r25
     c46:	88 0f       	add	r24, r24
     c48:	82 2b       	or	r24, r18
     c4a:	28 2f       	mov	r18, r24
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	99 1f       	adc	r25, r25
     c50:	99 27       	eor	r25, r25
     c52:	99 1f       	adc	r25, r25
     c54:	11 96       	adiw	r26, 0x01	; 1
     c56:	9c 93       	st	X, r25
     c58:	11 97       	sbiw	r26, 0x01	; 1
     c5a:	21 15       	cp	r18, r1
     c5c:	31 05       	cpc	r19, r1
     c5e:	a9 f5       	brne	.+106    	; 0xcca <__unpack_f+0x9e>
     c60:	41 15       	cp	r20, r1
     c62:	51 05       	cpc	r21, r1
     c64:	61 05       	cpc	r22, r1
     c66:	71 05       	cpc	r23, r1
     c68:	11 f4       	brne	.+4      	; 0xc6e <__unpack_f+0x42>
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	37 c0       	rjmp	.+110    	; 0xcdc <__unpack_f+0xb0>
     c6e:	82 e8       	ldi	r24, 0x82	; 130
     c70:	9f ef       	ldi	r25, 0xFF	; 255
     c72:	13 96       	adiw	r26, 0x03	; 3
     c74:	9c 93       	st	X, r25
     c76:	8e 93       	st	-X, r24
     c78:	12 97       	sbiw	r26, 0x02	; 2
     c7a:	9a 01       	movw	r18, r20
     c7c:	ab 01       	movw	r20, r22
     c7e:	67 e0       	ldi	r22, 0x07	; 7
     c80:	22 0f       	add	r18, r18
     c82:	33 1f       	adc	r19, r19
     c84:	44 1f       	adc	r20, r20
     c86:	55 1f       	adc	r21, r21
     c88:	6a 95       	dec	r22
     c8a:	d1 f7       	brne	.-12     	; 0xc80 <__unpack_f+0x54>
     c8c:	83 e0       	ldi	r24, 0x03	; 3
     c8e:	8c 93       	st	X, r24
     c90:	0d c0       	rjmp	.+26     	; 0xcac <__unpack_f+0x80>
     c92:	22 0f       	add	r18, r18
     c94:	33 1f       	adc	r19, r19
     c96:	44 1f       	adc	r20, r20
     c98:	55 1f       	adc	r21, r21
     c9a:	12 96       	adiw	r26, 0x02	; 2
     c9c:	8d 91       	ld	r24, X+
     c9e:	9c 91       	ld	r25, X
     ca0:	13 97       	sbiw	r26, 0x03	; 3
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	13 96       	adiw	r26, 0x03	; 3
     ca6:	9c 93       	st	X, r25
     ca8:	8e 93       	st	-X, r24
     caa:	12 97       	sbiw	r26, 0x02	; 2
     cac:	20 30       	cpi	r18, 0x00	; 0
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	38 07       	cpc	r19, r24
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	48 07       	cpc	r20, r24
     cb6:	80 e4       	ldi	r24, 0x40	; 64
     cb8:	58 07       	cpc	r21, r24
     cba:	58 f3       	brcs	.-42     	; 0xc92 <__unpack_f+0x66>
     cbc:	14 96       	adiw	r26, 0x04	; 4
     cbe:	2d 93       	st	X+, r18
     cc0:	3d 93       	st	X+, r19
     cc2:	4d 93       	st	X+, r20
     cc4:	5c 93       	st	X, r21
     cc6:	17 97       	sbiw	r26, 0x07	; 7
     cc8:	08 95       	ret
     cca:	2f 3f       	cpi	r18, 0xFF	; 255
     ccc:	31 05       	cpc	r19, r1
     cce:	79 f4       	brne	.+30     	; 0xcee <__unpack_f+0xc2>
     cd0:	41 15       	cp	r20, r1
     cd2:	51 05       	cpc	r21, r1
     cd4:	61 05       	cpc	r22, r1
     cd6:	71 05       	cpc	r23, r1
     cd8:	19 f4       	brne	.+6      	; 0xce0 <__unpack_f+0xb4>
     cda:	84 e0       	ldi	r24, 0x04	; 4
     cdc:	8c 93       	st	X, r24
     cde:	08 95       	ret
     ce0:	64 ff       	sbrs	r22, 4
     ce2:	03 c0       	rjmp	.+6      	; 0xcea <__unpack_f+0xbe>
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	8c 93       	st	X, r24
     ce8:	12 c0       	rjmp	.+36     	; 0xd0e <__unpack_f+0xe2>
     cea:	1c 92       	st	X, r1
     cec:	10 c0       	rjmp	.+32     	; 0xd0e <__unpack_f+0xe2>
     cee:	2f 57       	subi	r18, 0x7F	; 127
     cf0:	30 40       	sbci	r19, 0x00	; 0
     cf2:	13 96       	adiw	r26, 0x03	; 3
     cf4:	3c 93       	st	X, r19
     cf6:	2e 93       	st	-X, r18
     cf8:	12 97       	sbiw	r26, 0x02	; 2
     cfa:	83 e0       	ldi	r24, 0x03	; 3
     cfc:	8c 93       	st	X, r24
     cfe:	87 e0       	ldi	r24, 0x07	; 7
     d00:	44 0f       	add	r20, r20
     d02:	55 1f       	adc	r21, r21
     d04:	66 1f       	adc	r22, r22
     d06:	77 1f       	adc	r23, r23
     d08:	8a 95       	dec	r24
     d0a:	d1 f7       	brne	.-12     	; 0xd00 <__unpack_f+0xd4>
     d0c:	70 64       	ori	r23, 0x40	; 64
     d0e:	14 96       	adiw	r26, 0x04	; 4
     d10:	4d 93       	st	X+, r20
     d12:	5d 93       	st	X+, r21
     d14:	6d 93       	st	X+, r22
     d16:	7c 93       	st	X, r23
     d18:	17 97       	sbiw	r26, 0x07	; 7
     d1a:	08 95       	ret

00000d1c <__fpcmp_parts_f>:
     d1c:	1f 93       	push	r17
     d1e:	dc 01       	movw	r26, r24
     d20:	fb 01       	movw	r30, r22
     d22:	9c 91       	ld	r25, X
     d24:	92 30       	cpi	r25, 0x02	; 2
     d26:	08 f4       	brcc	.+2      	; 0xd2a <__fpcmp_parts_f+0xe>
     d28:	47 c0       	rjmp	.+142    	; 0xdb8 <__fpcmp_parts_f+0x9c>
     d2a:	80 81       	ld	r24, Z
     d2c:	82 30       	cpi	r24, 0x02	; 2
     d2e:	08 f4       	brcc	.+2      	; 0xd32 <__fpcmp_parts_f+0x16>
     d30:	43 c0       	rjmp	.+134    	; 0xdb8 <__fpcmp_parts_f+0x9c>
     d32:	94 30       	cpi	r25, 0x04	; 4
     d34:	51 f4       	brne	.+20     	; 0xd4a <__fpcmp_parts_f+0x2e>
     d36:	11 96       	adiw	r26, 0x01	; 1
     d38:	1c 91       	ld	r17, X
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	99 f5       	brne	.+102    	; 0xda4 <__fpcmp_parts_f+0x88>
     d3e:	81 81       	ldd	r24, Z+1	; 0x01
     d40:	68 2f       	mov	r22, r24
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	61 1b       	sub	r22, r17
     d46:	71 09       	sbc	r23, r1
     d48:	3f c0       	rjmp	.+126    	; 0xdc8 <__fpcmp_parts_f+0xac>
     d4a:	84 30       	cpi	r24, 0x04	; 4
     d4c:	21 f0       	breq	.+8      	; 0xd56 <__fpcmp_parts_f+0x3a>
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	31 f4       	brne	.+12     	; 0xd5e <__fpcmp_parts_f+0x42>
     d52:	82 30       	cpi	r24, 0x02	; 2
     d54:	b9 f1       	breq	.+110    	; 0xdc4 <__fpcmp_parts_f+0xa8>
     d56:	81 81       	ldd	r24, Z+1	; 0x01
     d58:	88 23       	and	r24, r24
     d5a:	89 f1       	breq	.+98     	; 0xdbe <__fpcmp_parts_f+0xa2>
     d5c:	2d c0       	rjmp	.+90     	; 0xdb8 <__fpcmp_parts_f+0x9c>
     d5e:	11 96       	adiw	r26, 0x01	; 1
     d60:	1c 91       	ld	r17, X
     d62:	11 97       	sbiw	r26, 0x01	; 1
     d64:	82 30       	cpi	r24, 0x02	; 2
     d66:	f1 f0       	breq	.+60     	; 0xda4 <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	18 17       	cp	r17, r24
     d6c:	d9 f4       	brne	.+54     	; 0xda4 <__fpcmp_parts_f+0x88>
     d6e:	12 96       	adiw	r26, 0x02	; 2
     d70:	2d 91       	ld	r18, X+
     d72:	3c 91       	ld	r19, X
     d74:	13 97       	sbiw	r26, 0x03	; 3
     d76:	82 81       	ldd	r24, Z+2	; 0x02
     d78:	93 81       	ldd	r25, Z+3	; 0x03
     d7a:	82 17       	cp	r24, r18
     d7c:	93 07       	cpc	r25, r19
     d7e:	94 f0       	brlt	.+36     	; 0xda4 <__fpcmp_parts_f+0x88>
     d80:	28 17       	cp	r18, r24
     d82:	39 07       	cpc	r19, r25
     d84:	bc f0       	brlt	.+46     	; 0xdb4 <__fpcmp_parts_f+0x98>
     d86:	14 96       	adiw	r26, 0x04	; 4
     d88:	8d 91       	ld	r24, X+
     d8a:	9d 91       	ld	r25, X+
     d8c:	0d 90       	ld	r0, X+
     d8e:	bc 91       	ld	r27, X
     d90:	a0 2d       	mov	r26, r0
     d92:	24 81       	ldd	r18, Z+4	; 0x04
     d94:	35 81       	ldd	r19, Z+5	; 0x05
     d96:	46 81       	ldd	r20, Z+6	; 0x06
     d98:	57 81       	ldd	r21, Z+7	; 0x07
     d9a:	28 17       	cp	r18, r24
     d9c:	39 07       	cpc	r19, r25
     d9e:	4a 07       	cpc	r20, r26
     da0:	5b 07       	cpc	r21, r27
     da2:	18 f4       	brcc	.+6      	; 0xdaa <__fpcmp_parts_f+0x8e>
     da4:	11 23       	and	r17, r17
     da6:	41 f0       	breq	.+16     	; 0xdb8 <__fpcmp_parts_f+0x9c>
     da8:	0a c0       	rjmp	.+20     	; 0xdbe <__fpcmp_parts_f+0xa2>
     daa:	82 17       	cp	r24, r18
     dac:	93 07       	cpc	r25, r19
     dae:	a4 07       	cpc	r26, r20
     db0:	b5 07       	cpc	r27, r21
     db2:	40 f4       	brcc	.+16     	; 0xdc4 <__fpcmp_parts_f+0xa8>
     db4:	11 23       	and	r17, r17
     db6:	19 f0       	breq	.+6      	; 0xdbe <__fpcmp_parts_f+0xa2>
     db8:	61 e0       	ldi	r22, 0x01	; 1
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	05 c0       	rjmp	.+10     	; 0xdc8 <__fpcmp_parts_f+0xac>
     dbe:	6f ef       	ldi	r22, 0xFF	; 255
     dc0:	7f ef       	ldi	r23, 0xFF	; 255
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <__fpcmp_parts_f+0xac>
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	cb 01       	movw	r24, r22
     dca:	1f 91       	pop	r17
     dcc:	08 95       	ret

00000dce <MTIMER_voidTimer0OVFInit>:
////////////////////////////////////////////////////////////////////////////////////////



void MTIMER_voidTimer0OVFInit(void)
{
     dce:	df 93       	push	r29
     dd0:	cf 93       	push	r28
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE NORMAL MODE*/
		CLR_BIT(TCCR0, WGM00);
     dd6:	a3 e5       	ldi	r26, 0x53	; 83
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e3 e5       	ldi	r30, 0x53	; 83
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	8f 7b       	andi	r24, 0xBF	; 191
     de2:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, WGM01);
     de4:	a3 e5       	ldi	r26, 0x53	; 83
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e3 e5       	ldi	r30, 0x53	; 83
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	87 7f       	andi	r24, 0xF7	; 247
     df0:	8c 93       	st	X, r24

		SET_BIT(TIMSK, TOIE0);
     df2:	a9 e5       	ldi	r26, 0x59	; 89
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e9 e5       	ldi	r30, 0x59	; 89
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	81 60       	ori	r24, 0x01	; 1
     dfe:	8c 93       	st	X, r24
#elif 	CLK == EIGHT
		TCCR0 = (TCCR0 & 0xf8) | 0x02;
#elif 	CLK == SIXTYFOUR
		TCCR0 = (TCCR0 & 0xf8) | 0x03;
#elif 	CLK == TWOFIFTYSIX
		TCCR0 = (TCCR0 & 0xf8) | 0x04;
     e00:	a3 e5       	ldi	r26, 0x53	; 83
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e3 e5       	ldi	r30, 0x53	; 83
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	88 7f       	andi	r24, 0xF8	; 248
     e0c:	84 60       	ori	r24, 0x04	; 4
     e0e:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xf8) | 0x06;
#elif 	CLK == EXTERN_RISING
		TCCR0 = (TCCR0 & 0xf8) | 0x07;
#endif

}
     e10:	cf 91       	pop	r28
     e12:	df 91       	pop	r29
     e14:	08 95       	ret

00000e16 <MTIMER_voidTimer0OVFDelay>:

void MTIMER_voidTimer0OVFDelay(u32 copy_u32Delay_ms)
{
     e16:	ef 92       	push	r14
     e18:	ff 92       	push	r15
     e1a:	0f 93       	push	r16
     e1c:	1f 93       	push	r17
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	61 97       	sbiw	r28, 0x11	; 17
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
     e32:	6e 87       	std	Y+14, r22	; 0x0e
     e34:	7f 87       	std	Y+15, r23	; 0x0f
     e36:	88 8b       	std	Y+16, r24	; 0x10
     e38:	99 8b       	std	Y+17, r25	; 0x11
	f32 L_f32MaxCompare;
	f32 L_f32OverFlowCount;
	u32 L_u32Carry;
	u8 L_u8Offset;

	G_u8Check = 0;
     e3a:	10 92 85 01 	sts	0x0185, r1
	MTIMER_voidTimer0OVFInit();
     e3e:	0e 94 e7 06 	call	0xdce	; 0xdce <MTIMER_voidTimer0OVFInit>
		L_f32MaxCompare = L_f32MaxCompare * 256 * 8;
#elif 	CLK == SIXTYFOUR
		L_f32MaxCompare = (1000000.0) / F_CPU;
		L_f32MaxCompare = L_f32MaxCompare * 256 * 64;
#elif 	CLK == TWOFIFTYSIX
		L_f32MaxCompare = (1000000.0) / F_CPU;
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	a0 e0       	ldi	r26, 0x00	; 0
     e48:	be e3       	ldi	r27, 0x3E	; 62
     e4a:	8a 87       	std	Y+10, r24	; 0x0a
     e4c:	9b 87       	std	Y+11, r25	; 0x0b
     e4e:	ac 87       	std	Y+12, r26	; 0x0c
     e50:	bd 87       	std	Y+13, r27	; 0x0d
		L_f32MaxCompare = L_f32MaxCompare * 256 * 256;
     e52:	6a 85       	ldd	r22, Y+10	; 0x0a
     e54:	7b 85       	ldd	r23, Y+11	; 0x0b
     e56:	8c 85       	ldd	r24, Y+12	; 0x0c
     e58:	9d 85       	ldd	r25, Y+13	; 0x0d
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	40 e8       	ldi	r20, 0x80	; 128
     e60:	53 e4       	ldi	r21, 0x43	; 67
     e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e66:	dc 01       	movw	r26, r24
     e68:	cb 01       	movw	r24, r22
     e6a:	bc 01       	movw	r22, r24
     e6c:	cd 01       	movw	r24, r26
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	40 e8       	ldi	r20, 0x80	; 128
     e74:	53 e4       	ldi	r21, 0x43	; 67
     e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	8a 87       	std	Y+10, r24	; 0x0a
     e80:	9b 87       	std	Y+11, r25	; 0x0b
     e82:	ac 87       	std	Y+12, r26	; 0x0c
     e84:	bd 87       	std	Y+13, r27	; 0x0d
		L_f32MaxCompare = L_f32MaxCompare * 256 * 1024;

#endif


	if (copy_u32Delay_ms * 1000  <= L_f32MaxCompare)
     e86:	8e 85       	ldd	r24, Y+14	; 0x0e
     e88:	9f 85       	ldd	r25, Y+15	; 0x0f
     e8a:	a8 89       	ldd	r26, Y+16	; 0x10
     e8c:	b9 89       	ldd	r27, Y+17	; 0x11
     e8e:	28 ee       	ldi	r18, 0xE8	; 232
     e90:	33 e0       	ldi	r19, 0x03	; 3
     e92:	40 e0       	ldi	r20, 0x00	; 0
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	bc 01       	movw	r22, r24
     e98:	cd 01       	movw	r24, r26
     e9a:	0e 94 55 11 	call	0x22aa	; 0x22aa <__mulsi3>
     e9e:	dc 01       	movw	r26, r24
     ea0:	cb 01       	movw	r24, r22
     ea2:	bc 01       	movw	r22, r24
     ea4:	cd 01       	movw	r24, r26
     ea6:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
     eaa:	dc 01       	movw	r26, r24
     eac:	cb 01       	movw	r24, r22
     eae:	bc 01       	movw	r22, r24
     eb0:	cd 01       	movw	r24, r26
     eb2:	2a 85       	ldd	r18, Y+10	; 0x0a
     eb4:	3b 85       	ldd	r19, Y+11	; 0x0b
     eb6:	4c 85       	ldd	r20, Y+12	; 0x0c
     eb8:	5d 85       	ldd	r21, Y+13	; 0x0d
     eba:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__lesf2>
     ebe:	18 16       	cp	r1, r24
     ec0:	0c f4       	brge	.+2      	; 0xec4 <MTIMER_voidTimer0OVFDelay+0xae>
     ec2:	49 c0       	rjmp	.+146    	; 0xf56 <MTIMER_voidTimer0OVFDelay+0x140>
		{
			L_f32OverFlowCount = (copy_u32Delay_ms / (L_f32MaxCompare/1000.0));
     ec4:	6e 85       	ldd	r22, Y+14	; 0x0e
     ec6:	7f 85       	ldd	r23, Y+15	; 0x0f
     ec8:	88 89       	ldd	r24, Y+16	; 0x10
     eca:	99 89       	ldd	r25, Y+17	; 0x11
     ecc:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
     ed0:	7b 01       	movw	r14, r22
     ed2:	8c 01       	movw	r16, r24
     ed4:	6a 85       	ldd	r22, Y+10	; 0x0a
     ed6:	7b 85       	ldd	r23, Y+11	; 0x0b
     ed8:	8c 85       	ldd	r24, Y+12	; 0x0c
     eda:	9d 85       	ldd	r25, Y+13	; 0x0d
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	4a e7       	ldi	r20, 0x7A	; 122
     ee2:	54 e4       	ldi	r21, 0x44	; 68
     ee4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     ee8:	dc 01       	movw	r26, r24
     eea:	cb 01       	movw	r24, r22
     eec:	9c 01       	movw	r18, r24
     eee:	ad 01       	movw	r20, r26
     ef0:	c8 01       	movw	r24, r16
     ef2:	b7 01       	movw	r22, r14
     ef4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     ef8:	dc 01       	movw	r26, r24
     efa:	cb 01       	movw	r24, r22
     efc:	8e 83       	std	Y+6, r24	; 0x06
     efe:	9f 83       	std	Y+7, r25	; 0x07
     f00:	a8 87       	std	Y+8, r26	; 0x08
     f02:	b9 87       	std	Y+9, r27	; 0x09
			L_u8Offset = L_f32OverFlowCount * 256.0;
     f04:	6e 81       	ldd	r22, Y+6	; 0x06
     f06:	7f 81       	ldd	r23, Y+7	; 0x07
     f08:	88 85       	ldd	r24, Y+8	; 0x08
     f0a:	99 85       	ldd	r25, Y+9	; 0x09
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	40 e8       	ldi	r20, 0x80	; 128
     f12:	53 e4       	ldi	r21, 0x43	; 67
     f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	bc 01       	movw	r22, r24
     f1e:	cd 01       	movw	r24, r26
     f20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f24:	dc 01       	movw	r26, r24
     f26:	cb 01       	movw	r24, r22
     f28:	89 83       	std	Y+1, r24	; 0x01
			G_u32Overflows = 1;
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	a0 e0       	ldi	r26, 0x00	; 0
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	80 93 81 01 	sts	0x0181, r24
     f36:	90 93 82 01 	sts	0x0182, r25
     f3a:	a0 93 83 01 	sts	0x0183, r26
     f3e:	b0 93 84 01 	sts	0x0184, r27
			G_u8Reg = 256 - L_u8Offset;
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	81 95       	neg	r24
     f46:	80 93 80 01 	sts	0x0180, r24
			TCNT0 = G_u8Reg;
     f4a:	e2 e5       	ldi	r30, 0x52	; 82
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 91 80 01 	lds	r24, 0x0180
     f52:	80 83       	st	Z, r24
     f54:	7f c0       	rjmp	.+254    	; 0x1054 <MTIMER_voidTimer0OVFDelay+0x23e>
		}
	else
		{
			L_f32OverFlowCount = (copy_u32Delay_ms / (L_f32MaxCompare/1000.0));
     f56:	6e 85       	ldd	r22, Y+14	; 0x0e
     f58:	7f 85       	ldd	r23, Y+15	; 0x0f
     f5a:	88 89       	ldd	r24, Y+16	; 0x10
     f5c:	99 89       	ldd	r25, Y+17	; 0x11
     f5e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
     f62:	7b 01       	movw	r14, r22
     f64:	8c 01       	movw	r16, r24
     f66:	6a 85       	ldd	r22, Y+10	; 0x0a
     f68:	7b 85       	ldd	r23, Y+11	; 0x0b
     f6a:	8c 85       	ldd	r24, Y+12	; 0x0c
     f6c:	9d 85       	ldd	r25, Y+13	; 0x0d
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	4a e7       	ldi	r20, 0x7A	; 122
     f74:	54 e4       	ldi	r21, 0x44	; 68
     f76:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	9c 01       	movw	r18, r24
     f80:	ad 01       	movw	r20, r26
     f82:	c8 01       	movw	r24, r16
     f84:	b7 01       	movw	r22, r14
     f86:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	8e 83       	std	Y+6, r24	; 0x06
     f90:	9f 83       	std	Y+7, r25	; 0x07
     f92:	a8 87       	std	Y+8, r26	; 0x08
     f94:	b9 87       	std	Y+9, r27	; 0x09
			L_u32Carry = (copy_u32Delay_ms / (L_f32MaxCompare/1000));
     f96:	6e 85       	ldd	r22, Y+14	; 0x0e
     f98:	7f 85       	ldd	r23, Y+15	; 0x0f
     f9a:	88 89       	ldd	r24, Y+16	; 0x10
     f9c:	99 89       	ldd	r25, Y+17	; 0x11
     f9e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
     fa2:	7b 01       	movw	r14, r22
     fa4:	8c 01       	movw	r16, r24
     fa6:	6a 85       	ldd	r22, Y+10	; 0x0a
     fa8:	7b 85       	ldd	r23, Y+11	; 0x0b
     faa:	8c 85       	ldd	r24, Y+12	; 0x0c
     fac:	9d 85       	ldd	r25, Y+13	; 0x0d
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	4a e7       	ldi	r20, 0x7A	; 122
     fb4:	54 e4       	ldi	r21, 0x44	; 68
     fb6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	9c 01       	movw	r18, r24
     fc0:	ad 01       	movw	r20, r26
     fc2:	c8 01       	movw	r24, r16
     fc4:	b7 01       	movw	r22, r14
     fc6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	bc 01       	movw	r22, r24
     fd0:	cd 01       	movw	r24, r26
     fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	8a 83       	std	Y+2, r24	; 0x02
     fdc:	9b 83       	std	Y+3, r25	; 0x03
     fde:	ac 83       	std	Y+4, r26	; 0x04
     fe0:	bd 83       	std	Y+5, r27	; 0x05

			L_u8Offset = (L_f32OverFlowCount - L_u32Carry) * 256.0;
     fe2:	6a 81       	ldd	r22, Y+2	; 0x02
     fe4:	7b 81       	ldd	r23, Y+3	; 0x03
     fe6:	8c 81       	ldd	r24, Y+4	; 0x04
     fe8:	9d 81       	ldd	r25, Y+5	; 0x05
     fea:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
     fee:	9b 01       	movw	r18, r22
     ff0:	ac 01       	movw	r20, r24
     ff2:	6e 81       	ldd	r22, Y+6	; 0x06
     ff4:	7f 81       	ldd	r23, Y+7	; 0x07
     ff6:	88 85       	ldd	r24, Y+8	; 0x08
     ff8:	99 85       	ldd	r25, Y+9	; 0x09
     ffa:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	bc 01       	movw	r22, r24
    1004:	cd 01       	movw	r24, r26
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	40 e8       	ldi	r20, 0x80	; 128
    100c:	53 e4       	ldi	r21, 0x43	; 67
    100e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	bc 01       	movw	r22, r24
    1018:	cd 01       	movw	r24, r26
    101a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    101e:	dc 01       	movw	r26, r24
    1020:	cb 01       	movw	r24, r22
    1022:	89 83       	std	Y+1, r24	; 0x01
			G_u32Overflows = L_u32Carry +1 ;
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	9b 81       	ldd	r25, Y+3	; 0x03
    1028:	ac 81       	ldd	r26, Y+4	; 0x04
    102a:	bd 81       	ldd	r27, Y+5	; 0x05
    102c:	01 96       	adiw	r24, 0x01	; 1
    102e:	a1 1d       	adc	r26, r1
    1030:	b1 1d       	adc	r27, r1
    1032:	80 93 81 01 	sts	0x0181, r24
    1036:	90 93 82 01 	sts	0x0182, r25
    103a:	a0 93 83 01 	sts	0x0183, r26
    103e:	b0 93 84 01 	sts	0x0184, r27
			G_u8Reg = 256 - L_u8Offset;
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	81 95       	neg	r24
    1046:	80 93 80 01 	sts	0x0180, r24
			TCNT0 = G_u8Reg;
    104a:	e2 e5       	ldi	r30, 0x52	; 82
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 91 80 01 	lds	r24, 0x0180
    1052:	80 83       	st	Z, r24
		}

		while (GET_BIT(TIFR, TOV0) == 0 && G_u8Check == 0);
    1054:	e8 e5       	ldi	r30, 0x58	; 88
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	88 2f       	mov	r24, r24
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	81 70       	andi	r24, 0x01	; 1
    1060:	90 70       	andi	r25, 0x00	; 0
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	21 f4       	brne	.+8      	; 0x106e <MTIMER_voidTimer0OVFDelay+0x258>
    1066:	80 91 85 01 	lds	r24, 0x0185
    106a:	88 23       	and	r24, r24
    106c:	99 f3       	breq	.-26     	; 0x1054 <MTIMER_voidTimer0OVFDelay+0x23e>
}
    106e:	61 96       	adiw	r28, 0x11	; 17
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	de bf       	out	0x3e, r29	; 62
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	cd bf       	out	0x3d, r28	; 61
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	1f 91       	pop	r17
    1080:	0f 91       	pop	r16
    1082:	ff 90       	pop	r15
    1084:	ef 90       	pop	r14
    1086:	08 95       	ret

00001088 <MTIMER_voidTimer0OVFSetCallBack>:

void MTIMER_voidTimer0OVFSetCallBack ( void (*copy_PFvoidTimer0OVF) (void))
{
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	00 d0       	rcall	.+0      	; 0x108e <MTIMER_voidTimer0OVFSetCallBack+0x6>
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	9a 83       	std	Y+2, r25	; 0x02
    1094:	89 83       	std	Y+1, r24	; 0x01
	TIMER_PFTIMER0OVF = copy_PFvoidTimer0OVF ;
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	9a 81       	ldd	r25, Y+2	; 0x02
    109a:	90 93 79 01 	sts	0x0179, r25
    109e:	80 93 78 01 	sts	0x0178, r24
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <MTIMER_voidTimer0COMPInit>:



void MTIMER_voidTimer0COMPInit(void)
{
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE CTC MODE*/
		CLR_BIT(TCCR0, WGM00);
    10b4:	a3 e5       	ldi	r26, 0x53	; 83
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e3 e5       	ldi	r30, 0x53	; 83
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	8f 7b       	andi	r24, 0xBF	; 191
    10c0:	8c 93       	st	X, r24
		SET_BIT(TCCR0, WGM01);
    10c2:	a3 e5       	ldi	r26, 0x53	; 83
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e3 e5       	ldi	r30, 0x53	; 83
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	88 60       	ori	r24, 0x08	; 8
    10ce:	8c 93       	st	X, r24

		SET_BIT(TIMSK, OCIE0);
    10d0:	a9 e5       	ldi	r26, 0x59	; 89
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e9 e5       	ldi	r30, 0x59	; 89
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	82 60       	ori	r24, 0x02	; 2
    10dc:	8c 93       	st	X, r24
#elif 	CLK == EIGHT
		TCCR0 = (TCCR0 & 0xf8) | 0x02;
#elif 	CLK == SIXTYFOUR
		TCCR0 = (TCCR0 & 0xf8) | 0x03;
#elif 	CLK == TWOFIFTYSIX
		TCCR0 = (TCCR0 & 0xf8) | 0x04;
    10de:	a3 e5       	ldi	r26, 0x53	; 83
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e3 e5       	ldi	r30, 0x53	; 83
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	88 7f       	andi	r24, 0xF8	; 248
    10ea:	84 60       	ori	r24, 0x04	; 4
    10ec:	8c 93       	st	X, r24
#elif 	CLK == EXTERN_FALLING
		TCCR0 = (TCCR0 & 0xf8) | 0x06;
#elif 	CLK == EXTERN_RISING
		TCCR0 = (TCCR0 & 0xf8) | 0x07;
#endif
}
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <MTIMER_voidTimer0COMPDelay>:


void MTIMER_voidTimer0COMPDelay(u8 copy_u8Offset, u32 copy_u32Counts)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <MTIMER_voidTimer0COMPDelay+0x6>
    10fa:	00 d0       	rcall	.+0      	; 0x10fc <MTIMER_voidTimer0COMPDelay+0x8>
    10fc:	0f 92       	push	r0
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	89 83       	std	Y+1, r24	; 0x01
    1104:	4a 83       	std	Y+2, r20	; 0x02
    1106:	5b 83       	std	Y+3, r21	; 0x03
    1108:	6c 83       	std	Y+4, r22	; 0x04
    110a:	7d 83       	std	Y+5, r23	; 0x05
	G_u8Check = 0;
    110c:	10 92 85 01 	sts	0x0185, r1
	G_u32Overflows = copy_u32Counts;
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	9b 81       	ldd	r25, Y+3	; 0x03
    1114:	ac 81       	ldd	r26, Y+4	; 0x04
    1116:	bd 81       	ldd	r27, Y+5	; 0x05
    1118:	80 93 81 01 	sts	0x0181, r24
    111c:	90 93 82 01 	sts	0x0182, r25
    1120:	a0 93 83 01 	sts	0x0183, r26
    1124:	b0 93 84 01 	sts	0x0184, r27
	if (copy_u32Counts == 1)
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	9b 81       	ldd	r25, Y+3	; 0x03
    112c:	ac 81       	ldd	r26, Y+4	; 0x04
    112e:	bd 81       	ldd	r27, Y+5	; 0x05
    1130:	81 30       	cpi	r24, 0x01	; 1
    1132:	91 05       	cpc	r25, r1
    1134:	a1 05       	cpc	r26, r1
    1136:	b1 05       	cpc	r27, r1
    1138:	29 f4       	brne	.+10     	; 0x1144 <MTIMER_voidTimer0COMPDelay+0x50>
	{
		OCR0 = copy_u8Offset;
    113a:	ec e5       	ldi	r30, 0x5C	; 92
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	80 83       	st	Z, r24
    1142:	0c c0       	rjmp	.+24     	; 0x115c <MTIMER_voidTimer0COMPDelay+0x68>
	}
	else if (copy_u32Counts > 1)
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	9b 81       	ldd	r25, Y+3	; 0x03
    1148:	ac 81       	ldd	r26, Y+4	; 0x04
    114a:	bd 81       	ldd	r27, Y+5	; 0x05
    114c:	82 30       	cpi	r24, 0x02	; 2
    114e:	91 05       	cpc	r25, r1
    1150:	a1 05       	cpc	r26, r1
    1152:	b1 05       	cpc	r27, r1
    1154:	18 f0       	brcs	.+6      	; 0x115c <MTIMER_voidTimer0COMPDelay+0x68>
	{
		G_u8Reg = copy_u8Offset;
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	80 93 80 01 	sts	0x0180, r24
	}
	MTIMER_voidTimer0COMPInit();
    115c:	0e 94 56 08 	call	0x10ac	; 0x10ac <MTIMER_voidTimer0COMPInit>
	while (GET_BIT(TIFR, OCF0) == 0  &&  G_u8Check == 0);
    1160:	e8 e5       	ldi	r30, 0x58	; 88
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	86 95       	lsr	r24
    1168:	88 2f       	mov	r24, r24
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	81 70       	andi	r24, 0x01	; 1
    116e:	90 70       	andi	r25, 0x00	; 0
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	21 f4       	brne	.+8      	; 0x117c <MTIMER_voidTimer0COMPDelay+0x88>
    1174:	80 91 85 01 	lds	r24, 0x0185
    1178:	88 23       	and	r24, r24
    117a:	91 f3       	breq	.-28     	; 0x1160 <MTIMER_voidTimer0COMPDelay+0x6c>
}
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	cf 91       	pop	r28
    1188:	df 91       	pop	r29
    118a:	08 95       	ret

0000118c <MTIMER_voidTimer0COMPSetCallBack>:




void MTIMER_voidTimer0COMPSetCallBack ( void (*copy_PFvoidTimer0COMP) (void))
{
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	00 d0       	rcall	.+0      	; 0x1192 <MTIMER_voidTimer0COMPSetCallBack+0x6>
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	9a 83       	std	Y+2, r25	; 0x02
    1198:	89 83       	std	Y+1, r24	; 0x01
	TIMER_PFTIMER0COMP = copy_PFvoidTimer0COMP ;
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	9a 81       	ldd	r25, Y+2	; 0x02
    119e:	90 93 7b 01 	sts	0x017B, r25
    11a2:	80 93 7a 01 	sts	0x017A, r24
}
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <__vector_11>:


ISR (TIMER0_OVF_vect)
{
    11b0:	1f 92       	push	r1
    11b2:	0f 92       	push	r0
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	0f 92       	push	r0
    11b8:	11 24       	eor	r1, r1
    11ba:	2f 93       	push	r18
    11bc:	3f 93       	push	r19
    11be:	4f 93       	push	r20
    11c0:	5f 93       	push	r21
    11c2:	6f 93       	push	r22
    11c4:	7f 93       	push	r23
    11c6:	8f 93       	push	r24
    11c8:	9f 93       	push	r25
    11ca:	af 93       	push	r26
    11cc:	bf 93       	push	r27
    11ce:	ef 93       	push	r30
    11d0:	ff 93       	push	r31
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
	static u32 L_u32OVFCounter = 0 ;
	L_u32OVFCounter ++ ;
    11da:	80 91 68 01 	lds	r24, 0x0168
    11de:	90 91 69 01 	lds	r25, 0x0169
    11e2:	a0 91 6a 01 	lds	r26, 0x016A
    11e6:	b0 91 6b 01 	lds	r27, 0x016B
    11ea:	01 96       	adiw	r24, 0x01	; 1
    11ec:	a1 1d       	adc	r26, r1
    11ee:	b1 1d       	adc	r27, r1
    11f0:	80 93 68 01 	sts	0x0168, r24
    11f4:	90 93 69 01 	sts	0x0169, r25
    11f8:	a0 93 6a 01 	sts	0x016A, r26
    11fc:	b0 93 6b 01 	sts	0x016B, r27
	if (L_u32OVFCounter == G_u32Overflows)
    1200:	20 91 68 01 	lds	r18, 0x0168
    1204:	30 91 69 01 	lds	r19, 0x0169
    1208:	40 91 6a 01 	lds	r20, 0x016A
    120c:	50 91 6b 01 	lds	r21, 0x016B
    1210:	80 91 81 01 	lds	r24, 0x0181
    1214:	90 91 82 01 	lds	r25, 0x0182
    1218:	a0 91 83 01 	lds	r26, 0x0183
    121c:	b0 91 84 01 	lds	r27, 0x0184
    1220:	28 17       	cp	r18, r24
    1222:	39 07       	cpc	r19, r25
    1224:	4a 07       	cpc	r20, r26
    1226:	5b 07       	cpc	r21, r27
    1228:	a9 f4       	brne	.+42     	; 0x1254 <__vector_11+0xa4>
	{
		L_u32OVFCounter = 0 ;
    122a:	10 92 68 01 	sts	0x0168, r1
    122e:	10 92 69 01 	sts	0x0169, r1
    1232:	10 92 6a 01 	sts	0x016A, r1
    1236:	10 92 6b 01 	sts	0x016B, r1
		TCNT0 = G_u8Reg;
    123a:	e2 e5       	ldi	r30, 0x52	; 82
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 91 80 01 	lds	r24, 0x0180
    1242:	80 83       	st	Z, r24
		TIMER_PFTIMER0OVF() ;
    1244:	e0 91 78 01 	lds	r30, 0x0178
    1248:	f0 91 79 01 	lds	r31, 0x0179
    124c:	09 95       	icall
		G_u8Check = 1;
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	80 93 85 01 	sts	0x0185, r24
	}
}
    1254:	cf 91       	pop	r28
    1256:	df 91       	pop	r29
    1258:	ff 91       	pop	r31
    125a:	ef 91       	pop	r30
    125c:	bf 91       	pop	r27
    125e:	af 91       	pop	r26
    1260:	9f 91       	pop	r25
    1262:	8f 91       	pop	r24
    1264:	7f 91       	pop	r23
    1266:	6f 91       	pop	r22
    1268:	5f 91       	pop	r21
    126a:	4f 91       	pop	r20
    126c:	3f 91       	pop	r19
    126e:	2f 91       	pop	r18
    1270:	0f 90       	pop	r0
    1272:	0f be       	out	0x3f, r0	; 63
    1274:	0f 90       	pop	r0
    1276:	1f 90       	pop	r1
    1278:	18 95       	reti

0000127a <__vector_10>:

ISR (TIMER0_COMP_vect)
{
    127a:	1f 92       	push	r1
    127c:	0f 92       	push	r0
    127e:	0f b6       	in	r0, 0x3f	; 63
    1280:	0f 92       	push	r0
    1282:	11 24       	eor	r1, r1
    1284:	2f 93       	push	r18
    1286:	3f 93       	push	r19
    1288:	4f 93       	push	r20
    128a:	5f 93       	push	r21
    128c:	6f 93       	push	r22
    128e:	7f 93       	push	r23
    1290:	8f 93       	push	r24
    1292:	9f 93       	push	r25
    1294:	af 93       	push	r26
    1296:	bf 93       	push	r27
    1298:	ef 93       	push	r30
    129a:	ff 93       	push	r31
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
	static u32 G_u32CompCounter = 0;
	G_u32CompCounter ++ ;
    12a4:	80 91 6c 01 	lds	r24, 0x016C
    12a8:	90 91 6d 01 	lds	r25, 0x016D
    12ac:	a0 91 6e 01 	lds	r26, 0x016E
    12b0:	b0 91 6f 01 	lds	r27, 0x016F
    12b4:	01 96       	adiw	r24, 0x01	; 1
    12b6:	a1 1d       	adc	r26, r1
    12b8:	b1 1d       	adc	r27, r1
    12ba:	80 93 6c 01 	sts	0x016C, r24
    12be:	90 93 6d 01 	sts	0x016D, r25
    12c2:	a0 93 6e 01 	sts	0x016E, r26
    12c6:	b0 93 6f 01 	sts	0x016F, r27
	if( G_u32CompCounter == G_u32Overflows )
    12ca:	20 91 6c 01 	lds	r18, 0x016C
    12ce:	30 91 6d 01 	lds	r19, 0x016D
    12d2:	40 91 6e 01 	lds	r20, 0x016E
    12d6:	50 91 6f 01 	lds	r21, 0x016F
    12da:	80 91 81 01 	lds	r24, 0x0181
    12de:	90 91 82 01 	lds	r25, 0x0182
    12e2:	a0 91 83 01 	lds	r26, 0x0183
    12e6:	b0 91 84 01 	lds	r27, 0x0184
    12ea:	28 17       	cp	r18, r24
    12ec:	39 07       	cpc	r19, r25
    12ee:	4a 07       	cpc	r20, r26
    12f0:	5b 07       	cpc	r21, r27
    12f2:	89 f4       	brne	.+34     	; 0x1316 <__vector_10+0x9c>
	{
		TIMER_PFTIMER0COMP() ;
    12f4:	e0 91 7a 01 	lds	r30, 0x017A
    12f8:	f0 91 7b 01 	lds	r31, 0x017B
    12fc:	09 95       	icall
		G_u32CompCounter = 0 ;
    12fe:	10 92 6c 01 	sts	0x016C, r1
    1302:	10 92 6d 01 	sts	0x016D, r1
    1306:	10 92 6e 01 	sts	0x016E, r1
    130a:	10 92 6f 01 	sts	0x016F, r1
		G_u8Check = 1;
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	80 93 85 01 	sts	0x0185, r24
    1314:	3a c0       	rjmp	.+116    	; 0x138a <__vector_10+0x110>
	}
	else if(G_u32CompCounter == G_u32Overflows - 1)
    1316:	80 91 81 01 	lds	r24, 0x0181
    131a:	90 91 82 01 	lds	r25, 0x0182
    131e:	a0 91 83 01 	lds	r26, 0x0183
    1322:	b0 91 84 01 	lds	r27, 0x0184
    1326:	9c 01       	movw	r18, r24
    1328:	ad 01       	movw	r20, r26
    132a:	21 50       	subi	r18, 0x01	; 1
    132c:	30 40       	sbci	r19, 0x00	; 0
    132e:	40 40       	sbci	r20, 0x00	; 0
    1330:	50 40       	sbci	r21, 0x00	; 0
    1332:	80 91 6c 01 	lds	r24, 0x016C
    1336:	90 91 6d 01 	lds	r25, 0x016D
    133a:	a0 91 6e 01 	lds	r26, 0x016E
    133e:	b0 91 6f 01 	lds	r27, 0x016F
    1342:	28 17       	cp	r18, r24
    1344:	39 07       	cpc	r19, r25
    1346:	4a 07       	cpc	r20, r26
    1348:	5b 07       	cpc	r21, r27
    134a:	31 f4       	brne	.+12     	; 0x1358 <__vector_10+0xde>
	{
		OCR0 = G_u8Reg;
    134c:	ec e5       	ldi	r30, 0x5C	; 92
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 91 80 01 	lds	r24, 0x0180
    1354:	80 83       	st	Z, r24
    1356:	19 c0       	rjmp	.+50     	; 0x138a <__vector_10+0x110>
	}
	else if (G_u32CompCounter != G_u32Overflows)
    1358:	20 91 6c 01 	lds	r18, 0x016C
    135c:	30 91 6d 01 	lds	r19, 0x016D
    1360:	40 91 6e 01 	lds	r20, 0x016E
    1364:	50 91 6f 01 	lds	r21, 0x016F
    1368:	80 91 81 01 	lds	r24, 0x0181
    136c:	90 91 82 01 	lds	r25, 0x0182
    1370:	a0 91 83 01 	lds	r26, 0x0183
    1374:	b0 91 84 01 	lds	r27, 0x0184
    1378:	28 17       	cp	r18, r24
    137a:	39 07       	cpc	r19, r25
    137c:	4a 07       	cpc	r20, r26
    137e:	5b 07       	cpc	r21, r27
    1380:	21 f0       	breq	.+8      	; 0x138a <__vector_10+0x110>
	{
		OCR0 = 255;
    1382:	ec e5       	ldi	r30, 0x5C	; 92
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	8f ef       	ldi	r24, 0xFF	; 255
    1388:	80 83       	st	Z, r24
	}

}
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	ff 91       	pop	r31
    1390:	ef 91       	pop	r30
    1392:	bf 91       	pop	r27
    1394:	af 91       	pop	r26
    1396:	9f 91       	pop	r25
    1398:	8f 91       	pop	r24
    139a:	7f 91       	pop	r23
    139c:	6f 91       	pop	r22
    139e:	5f 91       	pop	r21
    13a0:	4f 91       	pop	r20
    13a2:	3f 91       	pop	r19
    13a4:	2f 91       	pop	r18
    13a6:	0f 90       	pop	r0
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	0f 90       	pop	r0
    13ac:	1f 90       	pop	r1
    13ae:	18 95       	reti

000013b0 <MTIMER_voidTimer2COMPInit>:

////////////////////////////////////////////////////////////////////////////////////////

void MTIMER_voidTimer2COMPInit(void)

{
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE CTC MODE*/
		CLR_BIT(TCCR2, WGM20);
    13b8:	a5 e4       	ldi	r26, 0x45	; 69
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e5 e4       	ldi	r30, 0x45	; 69
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	8f 7b       	andi	r24, 0xBF	; 191
    13c4:	8c 93       	st	X, r24
		SET_BIT(TCCR2, WGM21);
    13c6:	a5 e4       	ldi	r26, 0x45	; 69
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e5 e4       	ldi	r30, 0x45	; 69
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	88 60       	ori	r24, 0x08	; 8
    13d2:	8c 93       	st	X, r24

		SET_BIT(TIMSK, OCIE2);
    13d4:	a9 e5       	ldi	r26, 0x59	; 89
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e9 e5       	ldi	r30, 0x59	; 89
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	80 68       	ori	r24, 0x80	; 128
    13e0:	8c 93       	st	X, r24
		TCCR2 |= (1<<2);
		//TCCR2 = (TCCR2 & 0xf8) | 0x04;
#elif 	CLK == ONETWENTYEIGHT
		TCCR2 = (TCCR2 & 0xf8) | 0x05;
#elif 	CLK == TWOFIFTYSIX
		TCCR2 = (TCCR2 & 0xf8) | 0x06;
    13e2:	a5 e4       	ldi	r26, 0x45	; 69
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e5 e4       	ldi	r30, 0x45	; 69
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	88 7f       	andi	r24, 0xF8	; 248
    13ee:	86 60       	ori	r24, 0x06	; 6
    13f0:	8c 93       	st	X, r24
#elif 	CLK == TENTWENTYFOUR
		TCCR2 = (TCCR2 & 0xf8) | 0x07;
#endif

}
    13f2:	cf 91       	pop	r28
    13f4:	df 91       	pop	r29
    13f6:	08 95       	ret

000013f8 <MTIMER_voidTimer2COMPDelay>:

void MTIMER_voidTimer2COMPDelay(u8 copy_u8Offset, u32 copy_u32Counts)
{
    13f8:	df 93       	push	r29
    13fa:	cf 93       	push	r28
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <MTIMER_voidTimer2COMPDelay+0x6>
    13fe:	00 d0       	rcall	.+0      	; 0x1400 <MTIMER_voidTimer2COMPDelay+0x8>
    1400:	0f 92       	push	r0
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	89 83       	std	Y+1, r24	; 0x01
    1408:	4a 83       	std	Y+2, r20	; 0x02
    140a:	5b 83       	std	Y+3, r21	; 0x03
    140c:	6c 83       	std	Y+4, r22	; 0x04
    140e:	7d 83       	std	Y+5, r23	; 0x05
	G_u8Check = 0;
    1410:	10 92 85 01 	sts	0x0185, r1
	G_u32Overflows = copy_u32Counts;
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	9b 81       	ldd	r25, Y+3	; 0x03
    1418:	ac 81       	ldd	r26, Y+4	; 0x04
    141a:	bd 81       	ldd	r27, Y+5	; 0x05
    141c:	80 93 81 01 	sts	0x0181, r24
    1420:	90 93 82 01 	sts	0x0182, r25
    1424:	a0 93 83 01 	sts	0x0183, r26
    1428:	b0 93 84 01 	sts	0x0184, r27
	if (copy_u32Counts == 1)
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	9b 81       	ldd	r25, Y+3	; 0x03
    1430:	ac 81       	ldd	r26, Y+4	; 0x04
    1432:	bd 81       	ldd	r27, Y+5	; 0x05
    1434:	81 30       	cpi	r24, 0x01	; 1
    1436:	91 05       	cpc	r25, r1
    1438:	a1 05       	cpc	r26, r1
    143a:	b1 05       	cpc	r27, r1
    143c:	29 f4       	brne	.+10     	; 0x1448 <MTIMER_voidTimer2COMPDelay+0x50>
	{
		OCR2 = copy_u8Offset;
    143e:	e3 e4       	ldi	r30, 0x43	; 67
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	80 83       	st	Z, r24
    1446:	0c c0       	rjmp	.+24     	; 0x1460 <MTIMER_voidTimer2COMPDelay+0x68>
	}
	else if (copy_u32Counts > 1)
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	9b 81       	ldd	r25, Y+3	; 0x03
    144c:	ac 81       	ldd	r26, Y+4	; 0x04
    144e:	bd 81       	ldd	r27, Y+5	; 0x05
    1450:	82 30       	cpi	r24, 0x02	; 2
    1452:	91 05       	cpc	r25, r1
    1454:	a1 05       	cpc	r26, r1
    1456:	b1 05       	cpc	r27, r1
    1458:	18 f0       	brcs	.+6      	; 0x1460 <MTIMER_voidTimer2COMPDelay+0x68>
	{
		G_u8Reg = copy_u8Offset;
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	80 93 80 01 	sts	0x0180, r24
	}
	MTIMER_voidTimer2COMPInit();
    1460:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <MTIMER_voidTimer2COMPInit>
	while (GET_BIT(TIFR, OCF2) == 0  &&  G_u8Check == 0);
    1464:	e8 e5       	ldi	r30, 0x58	; 88
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	88 23       	and	r24, r24
    146c:	24 f0       	brlt	.+8      	; 0x1476 <MTIMER_voidTimer2COMPDelay+0x7e>
    146e:	80 91 85 01 	lds	r24, 0x0185
    1472:	88 23       	and	r24, r24
    1474:	b9 f3       	breq	.-18     	; 0x1464 <MTIMER_voidTimer2COMPDelay+0x6c>

	}
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <MTIMER_voidTimer2COMPSetCallBack>:

void MTIMER_voidTimer2COMPSetCallBack ( void (*copy_PFvoidTimer2COMP) (void))
{
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	00 d0       	rcall	.+0      	; 0x148c <MTIMER_voidTimer2COMPSetCallBack+0x6>
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	9a 83       	std	Y+2, r25	; 0x02
    1492:	89 83       	std	Y+1, r24	; 0x01
	TIMER_PFTIMER2COMP = copy_PFvoidTimer2COMP ;
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	9a 81       	ldd	r25, Y+2	; 0x02
    1498:	90 93 7f 01 	sts	0x017F, r25
    149c:	80 93 7e 01 	sts	0x017E, r24
}
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <MTIMER_voidTimer2OVFInit>:


void MTIMER_voidTimer2OVFInit(void)

{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE NORMAL MODE*/
		CLR_BIT(TCCR2, WGM20);
    14b2:	a5 e4       	ldi	r26, 0x45	; 69
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e5 e4       	ldi	r30, 0x45	; 69
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	8f 7b       	andi	r24, 0xBF	; 191
    14be:	8c 93       	st	X, r24
		CLR_BIT(TCCR2, WGM21);
    14c0:	a5 e4       	ldi	r26, 0x45	; 69
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e5 e4       	ldi	r30, 0x45	; 69
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	87 7f       	andi	r24, 0xF7	; 247
    14cc:	8c 93       	st	X, r24

		SET_BIT(TIMSK, TOIE2);
    14ce:	a9 e5       	ldi	r26, 0x59	; 89
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e9 e5       	ldi	r30, 0x59	; 89
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	80 64       	ori	r24, 0x40	; 64
    14da:	8c 93       	st	X, r24
		TCCR2 |= (1<<2);
		//TCCR2 = (TCCR2 & 0xf8) | 0x04;
#elif 	CLK == ONETWENTYEIGHT
		TCCR2 = (TCCR2 & 0xf8) | 0x05;
#elif 	CLK == TWOFIFTYSIX
		TCCR2 = (TCCR2 & 0xf8) | 0x06;
    14dc:	a5 e4       	ldi	r26, 0x45	; 69
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e5 e4       	ldi	r30, 0x45	; 69
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	88 7f       	andi	r24, 0xF8	; 248
    14e8:	86 60       	ori	r24, 0x06	; 6
    14ea:	8c 93       	st	X, r24
#elif 	CLK == TENTWENTYFOUR
		TCCR2 = (TCCR2 & 0xf8) | 0x07;
#endif

}
    14ec:	cf 91       	pop	r28
    14ee:	df 91       	pop	r29
    14f0:	08 95       	ret

000014f2 <MTIMER_voidTimer2OVFDelay>:

void MTIMER_voidTimer2OVFDelay(u32 copy_u32Delay_ms)
{
    14f2:	ef 92       	push	r14
    14f4:	ff 92       	push	r15
    14f6:	0f 93       	push	r16
    14f8:	1f 93       	push	r17
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	61 97       	sbiw	r28, 0x11	; 17
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	f8 94       	cli
    1508:	de bf       	out	0x3e, r29	; 62
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	cd bf       	out	0x3d, r28	; 61
    150e:	6e 87       	std	Y+14, r22	; 0x0e
    1510:	7f 87       	std	Y+15, r23	; 0x0f
    1512:	88 8b       	std	Y+16, r24	; 0x10
    1514:	99 8b       	std	Y+17, r25	; 0x11
	f32 L_f32MaxCompare;
	f32 L_f32OverFlowCount;
	u32 L_u32Carry;
	u8 L_u8Offset;

	G_u8Check = 0;
    1516:	10 92 85 01 	sts	0x0185, r1

	MTIMER_voidTimer2OVFInit();
    151a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <MTIMER_voidTimer2OVFInit>
		L_f32MaxCompare = L_f32MaxCompare * 256 * 64;
#elif 	CLK == ONETWENTYEIGHT
		L_f32MaxCompare = (1000000.0) / F_CPU;
		L_f32MaxCompare = L_f32MaxCompare * 256 * 128;
#elif 	CLK == TWOFIFTYSIX
		L_f32MaxCompare = (1000000.0) / F_CPU;
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	a0 e0       	ldi	r26, 0x00	; 0
    1524:	be e3       	ldi	r27, 0x3E	; 62
    1526:	8a 87       	std	Y+10, r24	; 0x0a
    1528:	9b 87       	std	Y+11, r25	; 0x0b
    152a:	ac 87       	std	Y+12, r26	; 0x0c
    152c:	bd 87       	std	Y+13, r27	; 0x0d
		L_f32MaxCompare = L_f32MaxCompare * 256 * 256;
    152e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1530:	7b 85       	ldd	r23, Y+11	; 0x0b
    1532:	8c 85       	ldd	r24, Y+12	; 0x0c
    1534:	9d 85       	ldd	r25, Y+13	; 0x0d
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	40 e8       	ldi	r20, 0x80	; 128
    153c:	53 e4       	ldi	r21, 0x43	; 67
    153e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1542:	dc 01       	movw	r26, r24
    1544:	cb 01       	movw	r24, r22
    1546:	bc 01       	movw	r22, r24
    1548:	cd 01       	movw	r24, r26
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	40 e8       	ldi	r20, 0x80	; 128
    1550:	53 e4       	ldi	r21, 0x43	; 67
    1552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1556:	dc 01       	movw	r26, r24
    1558:	cb 01       	movw	r24, r22
    155a:	8a 87       	std	Y+10, r24	; 0x0a
    155c:	9b 87       	std	Y+11, r25	; 0x0b
    155e:	ac 87       	std	Y+12, r26	; 0x0c
    1560:	bd 87       	std	Y+13, r27	; 0x0d
		L_f32MaxCompare = L_f32MaxCompare * 256 * 1024;

#endif


	if (copy_u32Delay_ms * 1000  <= L_f32MaxCompare)
    1562:	8e 85       	ldd	r24, Y+14	; 0x0e
    1564:	9f 85       	ldd	r25, Y+15	; 0x0f
    1566:	a8 89       	ldd	r26, Y+16	; 0x10
    1568:	b9 89       	ldd	r27, Y+17	; 0x11
    156a:	28 ee       	ldi	r18, 0xE8	; 232
    156c:	33 e0       	ldi	r19, 0x03	; 3
    156e:	40 e0       	ldi	r20, 0x00	; 0
    1570:	50 e0       	ldi	r21, 0x00	; 0
    1572:	bc 01       	movw	r22, r24
    1574:	cd 01       	movw	r24, r26
    1576:	0e 94 55 11 	call	0x22aa	; 0x22aa <__mulsi3>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	bc 01       	movw	r22, r24
    1580:	cd 01       	movw	r24, r26
    1582:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	bc 01       	movw	r22, r24
    158c:	cd 01       	movw	r24, r26
    158e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1590:	3b 85       	ldd	r19, Y+11	; 0x0b
    1592:	4c 85       	ldd	r20, Y+12	; 0x0c
    1594:	5d 85       	ldd	r21, Y+13	; 0x0d
    1596:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__lesf2>
    159a:	18 16       	cp	r1, r24
    159c:	0c f4       	brge	.+2      	; 0x15a0 <MTIMER_voidTimer2OVFDelay+0xae>
    159e:	49 c0       	rjmp	.+146    	; 0x1632 <MTIMER_voidTimer2OVFDelay+0x140>
		{
			L_f32OverFlowCount = (copy_u32Delay_ms / (L_f32MaxCompare/1000.0));
    15a0:	6e 85       	ldd	r22, Y+14	; 0x0e
    15a2:	7f 85       	ldd	r23, Y+15	; 0x0f
    15a4:	88 89       	ldd	r24, Y+16	; 0x10
    15a6:	99 89       	ldd	r25, Y+17	; 0x11
    15a8:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    15ac:	7b 01       	movw	r14, r22
    15ae:	8c 01       	movw	r16, r24
    15b0:	6a 85       	ldd	r22, Y+10	; 0x0a
    15b2:	7b 85       	ldd	r23, Y+11	; 0x0b
    15b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    15b6:	9d 85       	ldd	r25, Y+13	; 0x0d
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	4a e7       	ldi	r20, 0x7A	; 122
    15be:	54 e4       	ldi	r21, 0x44	; 68
    15c0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	9c 01       	movw	r18, r24
    15ca:	ad 01       	movw	r20, r26
    15cc:	c8 01       	movw	r24, r16
    15ce:	b7 01       	movw	r22, r14
    15d0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	8e 83       	std	Y+6, r24	; 0x06
    15da:	9f 83       	std	Y+7, r25	; 0x07
    15dc:	a8 87       	std	Y+8, r26	; 0x08
    15de:	b9 87       	std	Y+9, r27	; 0x09
			L_u8Offset = L_f32OverFlowCount * 256.0;
    15e0:	6e 81       	ldd	r22, Y+6	; 0x06
    15e2:	7f 81       	ldd	r23, Y+7	; 0x07
    15e4:	88 85       	ldd	r24, Y+8	; 0x08
    15e6:	99 85       	ldd	r25, Y+9	; 0x09
    15e8:	20 e0       	ldi	r18, 0x00	; 0
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	40 e8       	ldi	r20, 0x80	; 128
    15ee:	53 e4       	ldi	r21, 0x43	; 67
    15f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f4:	dc 01       	movw	r26, r24
    15f6:	cb 01       	movw	r24, r22
    15f8:	bc 01       	movw	r22, r24
    15fa:	cd 01       	movw	r24, r26
    15fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	89 83       	std	Y+1, r24	; 0x01
			G_u32Overflows = 1;
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	a0 e0       	ldi	r26, 0x00	; 0
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	80 93 81 01 	sts	0x0181, r24
    1612:	90 93 82 01 	sts	0x0182, r25
    1616:	a0 93 83 01 	sts	0x0183, r26
    161a:	b0 93 84 01 	sts	0x0184, r27
			G_u8Reg = 256 - L_u8Offset;
    161e:	89 81       	ldd	r24, Y+1	; 0x01
    1620:	81 95       	neg	r24
    1622:	80 93 80 01 	sts	0x0180, r24
			TCNT2 = G_u8Reg;
    1626:	e4 e4       	ldi	r30, 0x44	; 68
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 91 80 01 	lds	r24, 0x0180
    162e:	80 83       	st	Z, r24
    1630:	7f c0       	rjmp	.+254    	; 0x1730 <MTIMER_voidTimer2OVFDelay+0x23e>
		}
	else
	{
		L_f32OverFlowCount = (copy_u32Delay_ms / (L_f32MaxCompare/1000.0));
    1632:	6e 85       	ldd	r22, Y+14	; 0x0e
    1634:	7f 85       	ldd	r23, Y+15	; 0x0f
    1636:	88 89       	ldd	r24, Y+16	; 0x10
    1638:	99 89       	ldd	r25, Y+17	; 0x11
    163a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    163e:	7b 01       	movw	r14, r22
    1640:	8c 01       	movw	r16, r24
    1642:	6a 85       	ldd	r22, Y+10	; 0x0a
    1644:	7b 85       	ldd	r23, Y+11	; 0x0b
    1646:	8c 85       	ldd	r24, Y+12	; 0x0c
    1648:	9d 85       	ldd	r25, Y+13	; 0x0d
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	4a e7       	ldi	r20, 0x7A	; 122
    1650:	54 e4       	ldi	r21, 0x44	; 68
    1652:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	9c 01       	movw	r18, r24
    165c:	ad 01       	movw	r20, r26
    165e:	c8 01       	movw	r24, r16
    1660:	b7 01       	movw	r22, r14
    1662:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1666:	dc 01       	movw	r26, r24
    1668:	cb 01       	movw	r24, r22
    166a:	8e 83       	std	Y+6, r24	; 0x06
    166c:	9f 83       	std	Y+7, r25	; 0x07
    166e:	a8 87       	std	Y+8, r26	; 0x08
    1670:	b9 87       	std	Y+9, r27	; 0x09
		L_u32Carry = (copy_u32Delay_ms / (L_f32MaxCompare/1000));
    1672:	6e 85       	ldd	r22, Y+14	; 0x0e
    1674:	7f 85       	ldd	r23, Y+15	; 0x0f
    1676:	88 89       	ldd	r24, Y+16	; 0x10
    1678:	99 89       	ldd	r25, Y+17	; 0x11
    167a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    167e:	7b 01       	movw	r14, r22
    1680:	8c 01       	movw	r16, r24
    1682:	6a 85       	ldd	r22, Y+10	; 0x0a
    1684:	7b 85       	ldd	r23, Y+11	; 0x0b
    1686:	8c 85       	ldd	r24, Y+12	; 0x0c
    1688:	9d 85       	ldd	r25, Y+13	; 0x0d
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	4a e7       	ldi	r20, 0x7A	; 122
    1690:	54 e4       	ldi	r21, 0x44	; 68
    1692:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	9c 01       	movw	r18, r24
    169c:	ad 01       	movw	r20, r26
    169e:	c8 01       	movw	r24, r16
    16a0:	b7 01       	movw	r22, r14
    16a2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	bc 01       	movw	r22, r24
    16ac:	cd 01       	movw	r24, r26
    16ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	8a 83       	std	Y+2, r24	; 0x02
    16b8:	9b 83       	std	Y+3, r25	; 0x03
    16ba:	ac 83       	std	Y+4, r26	; 0x04
    16bc:	bd 83       	std	Y+5, r27	; 0x05

		L_u8Offset = (L_f32OverFlowCount - L_u32Carry) * 256.0;
    16be:	6a 81       	ldd	r22, Y+2	; 0x02
    16c0:	7b 81       	ldd	r23, Y+3	; 0x03
    16c2:	8c 81       	ldd	r24, Y+4	; 0x04
    16c4:	9d 81       	ldd	r25, Y+5	; 0x05
    16c6:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    16ca:	9b 01       	movw	r18, r22
    16cc:	ac 01       	movw	r20, r24
    16ce:	6e 81       	ldd	r22, Y+6	; 0x06
    16d0:	7f 81       	ldd	r23, Y+7	; 0x07
    16d2:	88 85       	ldd	r24, Y+8	; 0x08
    16d4:	99 85       	ldd	r25, Y+9	; 0x09
    16d6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	bc 01       	movw	r22, r24
    16e0:	cd 01       	movw	r24, r26
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	40 e8       	ldi	r20, 0x80	; 128
    16e8:	53 e4       	ldi	r21, 0x43	; 67
    16ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	bc 01       	movw	r22, r24
    16f4:	cd 01       	movw	r24, r26
    16f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	89 83       	std	Y+1, r24	; 0x01
		G_u32Overflows = L_u32Carry +1 ;
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	9b 81       	ldd	r25, Y+3	; 0x03
    1704:	ac 81       	ldd	r26, Y+4	; 0x04
    1706:	bd 81       	ldd	r27, Y+5	; 0x05
    1708:	01 96       	adiw	r24, 0x01	; 1
    170a:	a1 1d       	adc	r26, r1
    170c:	b1 1d       	adc	r27, r1
    170e:	80 93 81 01 	sts	0x0181, r24
    1712:	90 93 82 01 	sts	0x0182, r25
    1716:	a0 93 83 01 	sts	0x0183, r26
    171a:	b0 93 84 01 	sts	0x0184, r27
		G_u8Reg = 256 - L_u8Offset;
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	81 95       	neg	r24
    1722:	80 93 80 01 	sts	0x0180, r24
		TCNT2 = G_u8Reg;
    1726:	e4 e4       	ldi	r30, 0x44	; 68
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 91 80 01 	lds	r24, 0x0180
    172e:	80 83       	st	Z, r24

	}

	while (GET_BIT(TIFR, TOV2) == 0 && G_u8Check == 0);
    1730:	e8 e5       	ldi	r30, 0x58	; 88
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	82 95       	swap	r24
    1738:	86 95       	lsr	r24
    173a:	86 95       	lsr	r24
    173c:	83 70       	andi	r24, 0x03	; 3
    173e:	88 2f       	mov	r24, r24
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	81 70       	andi	r24, 0x01	; 1
    1744:	90 70       	andi	r25, 0x00	; 0
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	21 f4       	brne	.+8      	; 0x1752 <MTIMER_voidTimer2OVFDelay+0x260>
    174a:	80 91 85 01 	lds	r24, 0x0185
    174e:	88 23       	and	r24, r24
    1750:	79 f3       	breq	.-34     	; 0x1730 <MTIMER_voidTimer2OVFDelay+0x23e>
}
    1752:	61 96       	adiw	r28, 0x11	; 17
    1754:	0f b6       	in	r0, 0x3f	; 63
    1756:	f8 94       	cli
    1758:	de bf       	out	0x3e, r29	; 62
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	cd bf       	out	0x3d, r28	; 61
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	1f 91       	pop	r17
    1764:	0f 91       	pop	r16
    1766:	ff 90       	pop	r15
    1768:	ef 90       	pop	r14
    176a:	08 95       	ret

0000176c <MTIMER_voidTimer2OVFSetCallBack>:

void MTIMER_voidTimer2OVFSetCallBack ( void (*copy_PFvoidTimer2OVF) (void))
{
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	00 d0       	rcall	.+0      	; 0x1772 <MTIMER_voidTimer2OVFSetCallBack+0x6>
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
    1776:	9a 83       	std	Y+2, r25	; 0x02
    1778:	89 83       	std	Y+1, r24	; 0x01
	TIMER_PFTIMER2OVF = copy_PFvoidTimer2OVF ;
    177a:	89 81       	ldd	r24, Y+1	; 0x01
    177c:	9a 81       	ldd	r25, Y+2	; 0x02
    177e:	90 93 7d 01 	sts	0x017D, r25
    1782:	80 93 7c 01 	sts	0x017C, r24
}
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	08 95       	ret

00001790 <__vector_5>:



ISR (TIMER2_OVF_vect)
{
    1790:	1f 92       	push	r1
    1792:	0f 92       	push	r0
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	0f 92       	push	r0
    1798:	11 24       	eor	r1, r1
    179a:	2f 93       	push	r18
    179c:	3f 93       	push	r19
    179e:	4f 93       	push	r20
    17a0:	5f 93       	push	r21
    17a2:	6f 93       	push	r22
    17a4:	7f 93       	push	r23
    17a6:	8f 93       	push	r24
    17a8:	9f 93       	push	r25
    17aa:	af 93       	push	r26
    17ac:	bf 93       	push	r27
    17ae:	ef 93       	push	r30
    17b0:	ff 93       	push	r31
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
	static u32 L_u32OVFCounter = 0 ;
	L_u32OVFCounter ++ ;
    17ba:	80 91 70 01 	lds	r24, 0x0170
    17be:	90 91 71 01 	lds	r25, 0x0171
    17c2:	a0 91 72 01 	lds	r26, 0x0172
    17c6:	b0 91 73 01 	lds	r27, 0x0173
    17ca:	01 96       	adiw	r24, 0x01	; 1
    17cc:	a1 1d       	adc	r26, r1
    17ce:	b1 1d       	adc	r27, r1
    17d0:	80 93 70 01 	sts	0x0170, r24
    17d4:	90 93 71 01 	sts	0x0171, r25
    17d8:	a0 93 72 01 	sts	0x0172, r26
    17dc:	b0 93 73 01 	sts	0x0173, r27
	if (L_u32OVFCounter == G_u32Overflows)
    17e0:	20 91 70 01 	lds	r18, 0x0170
    17e4:	30 91 71 01 	lds	r19, 0x0171
    17e8:	40 91 72 01 	lds	r20, 0x0172
    17ec:	50 91 73 01 	lds	r21, 0x0173
    17f0:	80 91 81 01 	lds	r24, 0x0181
    17f4:	90 91 82 01 	lds	r25, 0x0182
    17f8:	a0 91 83 01 	lds	r26, 0x0183
    17fc:	b0 91 84 01 	lds	r27, 0x0184
    1800:	28 17       	cp	r18, r24
    1802:	39 07       	cpc	r19, r25
    1804:	4a 07       	cpc	r20, r26
    1806:	5b 07       	cpc	r21, r27
    1808:	a9 f4       	brne	.+42     	; 0x1834 <__vector_5+0xa4>
	{
		L_u32OVFCounter = 0 ;
    180a:	10 92 70 01 	sts	0x0170, r1
    180e:	10 92 71 01 	sts	0x0171, r1
    1812:	10 92 72 01 	sts	0x0172, r1
    1816:	10 92 73 01 	sts	0x0173, r1
		TCNT2 = G_u8Reg;
    181a:	e4 e4       	ldi	r30, 0x44	; 68
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 91 80 01 	lds	r24, 0x0180
    1822:	80 83       	st	Z, r24
		TIMER_PFTIMER2OVF() ;
    1824:	e0 91 7c 01 	lds	r30, 0x017C
    1828:	f0 91 7d 01 	lds	r31, 0x017D
    182c:	09 95       	icall
		G_u8Check = 1;
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	80 93 85 01 	sts	0x0185, r24
	}
}
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	ff 91       	pop	r31
    183a:	ef 91       	pop	r30
    183c:	bf 91       	pop	r27
    183e:	af 91       	pop	r26
    1840:	9f 91       	pop	r25
    1842:	8f 91       	pop	r24
    1844:	7f 91       	pop	r23
    1846:	6f 91       	pop	r22
    1848:	5f 91       	pop	r21
    184a:	4f 91       	pop	r20
    184c:	3f 91       	pop	r19
    184e:	2f 91       	pop	r18
    1850:	0f 90       	pop	r0
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	0f 90       	pop	r0
    1856:	1f 90       	pop	r1
    1858:	18 95       	reti

0000185a <__vector_4>:


ISR (TIMER2_COMP_vect)
{
    185a:	1f 92       	push	r1
    185c:	0f 92       	push	r0
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	0f 92       	push	r0
    1862:	11 24       	eor	r1, r1
    1864:	2f 93       	push	r18
    1866:	3f 93       	push	r19
    1868:	4f 93       	push	r20
    186a:	5f 93       	push	r21
    186c:	6f 93       	push	r22
    186e:	7f 93       	push	r23
    1870:	8f 93       	push	r24
    1872:	9f 93       	push	r25
    1874:	af 93       	push	r26
    1876:	bf 93       	push	r27
    1878:	ef 93       	push	r30
    187a:	ff 93       	push	r31
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
	static u32 G_u32CompCounter = 0;
	G_u32CompCounter ++ ;
    1884:	80 91 74 01 	lds	r24, 0x0174
    1888:	90 91 75 01 	lds	r25, 0x0175
    188c:	a0 91 76 01 	lds	r26, 0x0176
    1890:	b0 91 77 01 	lds	r27, 0x0177
    1894:	01 96       	adiw	r24, 0x01	; 1
    1896:	a1 1d       	adc	r26, r1
    1898:	b1 1d       	adc	r27, r1
    189a:	80 93 74 01 	sts	0x0174, r24
    189e:	90 93 75 01 	sts	0x0175, r25
    18a2:	a0 93 76 01 	sts	0x0176, r26
    18a6:	b0 93 77 01 	sts	0x0177, r27
	if( G_u32CompCounter == G_u32Overflows )
    18aa:	20 91 74 01 	lds	r18, 0x0174
    18ae:	30 91 75 01 	lds	r19, 0x0175
    18b2:	40 91 76 01 	lds	r20, 0x0176
    18b6:	50 91 77 01 	lds	r21, 0x0177
    18ba:	80 91 81 01 	lds	r24, 0x0181
    18be:	90 91 82 01 	lds	r25, 0x0182
    18c2:	a0 91 83 01 	lds	r26, 0x0183
    18c6:	b0 91 84 01 	lds	r27, 0x0184
    18ca:	28 17       	cp	r18, r24
    18cc:	39 07       	cpc	r19, r25
    18ce:	4a 07       	cpc	r20, r26
    18d0:	5b 07       	cpc	r21, r27
    18d2:	89 f4       	brne	.+34     	; 0x18f6 <__vector_4+0x9c>
	{
		TIMER_PFTIMER2COMP() ;
    18d4:	e0 91 7e 01 	lds	r30, 0x017E
    18d8:	f0 91 7f 01 	lds	r31, 0x017F
    18dc:	09 95       	icall
		G_u32CompCounter = 0 ;
    18de:	10 92 74 01 	sts	0x0174, r1
    18e2:	10 92 75 01 	sts	0x0175, r1
    18e6:	10 92 76 01 	sts	0x0176, r1
    18ea:	10 92 77 01 	sts	0x0177, r1
		G_u8Check = 1;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	80 93 85 01 	sts	0x0185, r24
    18f4:	3a c0       	rjmp	.+116    	; 0x196a <__vector_4+0x110>
	}
	else if(G_u32CompCounter == G_u32Overflows - 1)
    18f6:	80 91 81 01 	lds	r24, 0x0181
    18fa:	90 91 82 01 	lds	r25, 0x0182
    18fe:	a0 91 83 01 	lds	r26, 0x0183
    1902:	b0 91 84 01 	lds	r27, 0x0184
    1906:	9c 01       	movw	r18, r24
    1908:	ad 01       	movw	r20, r26
    190a:	21 50       	subi	r18, 0x01	; 1
    190c:	30 40       	sbci	r19, 0x00	; 0
    190e:	40 40       	sbci	r20, 0x00	; 0
    1910:	50 40       	sbci	r21, 0x00	; 0
    1912:	80 91 74 01 	lds	r24, 0x0174
    1916:	90 91 75 01 	lds	r25, 0x0175
    191a:	a0 91 76 01 	lds	r26, 0x0176
    191e:	b0 91 77 01 	lds	r27, 0x0177
    1922:	28 17       	cp	r18, r24
    1924:	39 07       	cpc	r19, r25
    1926:	4a 07       	cpc	r20, r26
    1928:	5b 07       	cpc	r21, r27
    192a:	31 f4       	brne	.+12     	; 0x1938 <__vector_4+0xde>
	{
		OCR2 = G_u8Reg;
    192c:	e3 e4       	ldi	r30, 0x43	; 67
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 91 80 01 	lds	r24, 0x0180
    1934:	80 83       	st	Z, r24
    1936:	19 c0       	rjmp	.+50     	; 0x196a <__vector_4+0x110>
	}
	else if (G_u32CompCounter != G_u32Overflows)
    1938:	20 91 74 01 	lds	r18, 0x0174
    193c:	30 91 75 01 	lds	r19, 0x0175
    1940:	40 91 76 01 	lds	r20, 0x0176
    1944:	50 91 77 01 	lds	r21, 0x0177
    1948:	80 91 81 01 	lds	r24, 0x0181
    194c:	90 91 82 01 	lds	r25, 0x0182
    1950:	a0 91 83 01 	lds	r26, 0x0183
    1954:	b0 91 84 01 	lds	r27, 0x0184
    1958:	28 17       	cp	r18, r24
    195a:	39 07       	cpc	r19, r25
    195c:	4a 07       	cpc	r20, r26
    195e:	5b 07       	cpc	r21, r27
    1960:	21 f0       	breq	.+8      	; 0x196a <__vector_4+0x110>
	{
		OCR2 = 255;
    1962:	e3 e4       	ldi	r30, 0x43	; 67
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	8f ef       	ldi	r24, 0xFF	; 255
    1968:	80 83       	st	Z, r24
	}

}
    196a:	cf 91       	pop	r28
    196c:	df 91       	pop	r29
    196e:	ff 91       	pop	r31
    1970:	ef 91       	pop	r30
    1972:	bf 91       	pop	r27
    1974:	af 91       	pop	r26
    1976:	9f 91       	pop	r25
    1978:	8f 91       	pop	r24
    197a:	7f 91       	pop	r23
    197c:	6f 91       	pop	r22
    197e:	5f 91       	pop	r21
    1980:	4f 91       	pop	r20
    1982:	3f 91       	pop	r19
    1984:	2f 91       	pop	r18
    1986:	0f 90       	pop	r0
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	0f 90       	pop	r0
    198c:	1f 90       	pop	r1
    198e:	18 95       	reti

00001990 <MDIO_voidDioSetPinDirection>:




void MDIO_voidDioSetPinDirection(u8 copy_u8Port, u8 copy_u8Pin, u8 copy_u8Direction)
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	27 97       	sbiw	r28, 0x07	; 7
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	f8 94       	cli
    199e:	de bf       	out	0x3e, r29	; 62
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	cd bf       	out	0x3d, r28	; 61
    19a4:	89 83       	std	Y+1, r24	; 0x01
    19a6:	6a 83       	std	Y+2, r22	; 0x02
    19a8:	4b 83       	std	Y+3, r20	; 0x03
	if (copy_u8Direction == DIO_OUT)
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	81 30       	cpi	r24, 0x01	; 1
    19ae:	09 f0       	breq	.+2      	; 0x19b2 <MDIO_voidDioSetPinDirection+0x22>
    19b0:	6f c0       	rjmp	.+222    	; 0x1a90 <MDIO_voidDioSetPinDirection+0x100>
	{
		switch (copy_u8Port)
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	28 2f       	mov	r18, r24
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	3f 83       	std	Y+7, r19	; 0x07
    19ba:	2e 83       	std	Y+6, r18	; 0x06
    19bc:	8e 81       	ldd	r24, Y+6	; 0x06
    19be:	9f 81       	ldd	r25, Y+7	; 0x07
    19c0:	81 30       	cpi	r24, 0x01	; 1
    19c2:	91 05       	cpc	r25, r1
    19c4:	49 f1       	breq	.+82     	; 0x1a18 <MDIO_voidDioSetPinDirection+0x88>
    19c6:	2e 81       	ldd	r18, Y+6	; 0x06
    19c8:	3f 81       	ldd	r19, Y+7	; 0x07
    19ca:	22 30       	cpi	r18, 0x02	; 2
    19cc:	31 05       	cpc	r19, r1
    19ce:	2c f4       	brge	.+10     	; 0x19da <MDIO_voidDioSetPinDirection+0x4a>
    19d0:	8e 81       	ldd	r24, Y+6	; 0x06
    19d2:	9f 81       	ldd	r25, Y+7	; 0x07
    19d4:	00 97       	sbiw	r24, 0x00	; 0
    19d6:	61 f0       	breq	.+24     	; 0x19f0 <MDIO_voidDioSetPinDirection+0x60>
    19d8:	d2 c0       	rjmp	.+420    	; 0x1b7e <MDIO_voidDioSetPinDirection+0x1ee>
    19da:	2e 81       	ldd	r18, Y+6	; 0x06
    19dc:	3f 81       	ldd	r19, Y+7	; 0x07
    19de:	22 30       	cpi	r18, 0x02	; 2
    19e0:	31 05       	cpc	r19, r1
    19e2:	71 f1       	breq	.+92     	; 0x1a40 <MDIO_voidDioSetPinDirection+0xb0>
    19e4:	8e 81       	ldd	r24, Y+6	; 0x06
    19e6:	9f 81       	ldd	r25, Y+7	; 0x07
    19e8:	83 30       	cpi	r24, 0x03	; 3
    19ea:	91 05       	cpc	r25, r1
    19ec:	e9 f1       	breq	.+122    	; 0x1a68 <MDIO_voidDioSetPinDirection+0xd8>
    19ee:	c7 c0       	rjmp	.+398    	; 0x1b7e <MDIO_voidDioSetPinDirection+0x1ee>
		{
			case DIO_PORTA:SET_BIT(DDRA, copy_u8Pin); break;
    19f0:	aa e3       	ldi	r26, 0x3A	; 58
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	ea e3       	ldi	r30, 0x3A	; 58
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	48 2f       	mov	r20, r24
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	28 2f       	mov	r18, r24
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	02 2e       	mov	r0, r18
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <MDIO_voidDioSetPinDirection+0x7e>
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	0a 94       	dec	r0
    1a10:	e2 f7       	brpl	.-8      	; 0x1a0a <MDIO_voidDioSetPinDirection+0x7a>
    1a12:	84 2b       	or	r24, r20
    1a14:	8c 93       	st	X, r24
    1a16:	b3 c0       	rjmp	.+358    	; 0x1b7e <MDIO_voidDioSetPinDirection+0x1ee>
			case DIO_PORTB:SET_BIT(DDRB, copy_u8Pin); break;
    1a18:	a7 e3       	ldi	r26, 0x37	; 55
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e7 e3       	ldi	r30, 0x37	; 55
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	48 2f       	mov	r20, r24
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	28 2f       	mov	r18, r24
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	02 2e       	mov	r0, r18
    1a30:	02 c0       	rjmp	.+4      	; 0x1a36 <MDIO_voidDioSetPinDirection+0xa6>
    1a32:	88 0f       	add	r24, r24
    1a34:	99 1f       	adc	r25, r25
    1a36:	0a 94       	dec	r0
    1a38:	e2 f7       	brpl	.-8      	; 0x1a32 <MDIO_voidDioSetPinDirection+0xa2>
    1a3a:	84 2b       	or	r24, r20
    1a3c:	8c 93       	st	X, r24
    1a3e:	9f c0       	rjmp	.+318    	; 0x1b7e <MDIO_voidDioSetPinDirection+0x1ee>
			case DIO_PORTC:SET_BIT(DDRC, copy_u8Pin); break;
    1a40:	a4 e3       	ldi	r26, 0x34	; 52
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e4 e3       	ldi	r30, 0x34	; 52
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	48 2f       	mov	r20, r24
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	02 2e       	mov	r0, r18
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <MDIO_voidDioSetPinDirection+0xce>
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	0a 94       	dec	r0
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <MDIO_voidDioSetPinDirection+0xca>
    1a62:	84 2b       	or	r24, r20
    1a64:	8c 93       	st	X, r24
    1a66:	8b c0       	rjmp	.+278    	; 0x1b7e <MDIO_voidDioSetPinDirection+0x1ee>
			case DIO_PORTD:SET_BIT(DDRD, copy_u8Pin); break;
    1a68:	a1 e3       	ldi	r26, 0x31	; 49
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e1 e3       	ldi	r30, 0x31	; 49
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	48 2f       	mov	r20, r24
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	02 2e       	mov	r0, r18
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <MDIO_voidDioSetPinDirection+0xf6>
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	0a 94       	dec	r0
    1a88:	e2 f7       	brpl	.-8      	; 0x1a82 <MDIO_voidDioSetPinDirection+0xf2>
    1a8a:	84 2b       	or	r24, r20
    1a8c:	8c 93       	st	X, r24
    1a8e:	77 c0       	rjmp	.+238    	; 0x1b7e <MDIO_voidDioSetPinDirection+0x1ee>
		}
	}
	else if(copy_u8Direction == DIO_IN)
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	88 23       	and	r24, r24
    1a94:	09 f0       	breq	.+2      	; 0x1a98 <MDIO_voidDioSetPinDirection+0x108>
    1a96:	73 c0       	rjmp	.+230    	; 0x1b7e <MDIO_voidDioSetPinDirection+0x1ee>
	{
		switch (copy_u8Port)
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	3d 83       	std	Y+5, r19	; 0x05
    1aa0:	2c 83       	std	Y+4, r18	; 0x04
    1aa2:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa4:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa6:	81 30       	cpi	r24, 0x01	; 1
    1aa8:	91 05       	cpc	r25, r1
    1aaa:	59 f1       	breq	.+86     	; 0x1b02 <MDIO_voidDioSetPinDirection+0x172>
    1aac:	2c 81       	ldd	r18, Y+4	; 0x04
    1aae:	3d 81       	ldd	r19, Y+5	; 0x05
    1ab0:	22 30       	cpi	r18, 0x02	; 2
    1ab2:	31 05       	cpc	r19, r1
    1ab4:	2c f4       	brge	.+10     	; 0x1ac0 <MDIO_voidDioSetPinDirection+0x130>
    1ab6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aba:	00 97       	sbiw	r24, 0x00	; 0
    1abc:	69 f0       	breq	.+26     	; 0x1ad8 <MDIO_voidDioSetPinDirection+0x148>
    1abe:	5f c0       	rjmp	.+190    	; 0x1b7e <MDIO_voidDioSetPinDirection+0x1ee>
    1ac0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ac2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ac4:	22 30       	cpi	r18, 0x02	; 2
    1ac6:	31 05       	cpc	r19, r1
    1ac8:	89 f1       	breq	.+98     	; 0x1b2c <MDIO_voidDioSetPinDirection+0x19c>
    1aca:	8c 81       	ldd	r24, Y+4	; 0x04
    1acc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ace:	83 30       	cpi	r24, 0x03	; 3
    1ad0:	91 05       	cpc	r25, r1
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <MDIO_voidDioSetPinDirection+0x146>
    1ad4:	40 c0       	rjmp	.+128    	; 0x1b56 <MDIO_voidDioSetPinDirection+0x1c6>
    1ad6:	53 c0       	rjmp	.+166    	; 0x1b7e <MDIO_voidDioSetPinDirection+0x1ee>
		{
			case DIO_PORTA:CLR_BIT(DDRA, copy_u8Pin); break;
    1ad8:	aa e3       	ldi	r26, 0x3A	; 58
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	ea e3       	ldi	r30, 0x3A	; 58
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	48 2f       	mov	r20, r24
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	02 2e       	mov	r0, r18
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <MDIO_voidDioSetPinDirection+0x166>
    1af2:	88 0f       	add	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	0a 94       	dec	r0
    1af8:	e2 f7       	brpl	.-8      	; 0x1af2 <MDIO_voidDioSetPinDirection+0x162>
    1afa:	80 95       	com	r24
    1afc:	84 23       	and	r24, r20
    1afe:	8c 93       	st	X, r24
    1b00:	3e c0       	rjmp	.+124    	; 0x1b7e <MDIO_voidDioSetPinDirection+0x1ee>
			case DIO_PORTB:CLR_BIT(DDRB, copy_u8Pin); break;
    1b02:	a7 e3       	ldi	r26, 0x37	; 55
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	e7 e3       	ldi	r30, 0x37	; 55
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	48 2f       	mov	r20, r24
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	28 2f       	mov	r18, r24
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	02 2e       	mov	r0, r18
    1b1a:	02 c0       	rjmp	.+4      	; 0x1b20 <MDIO_voidDioSetPinDirection+0x190>
    1b1c:	88 0f       	add	r24, r24
    1b1e:	99 1f       	adc	r25, r25
    1b20:	0a 94       	dec	r0
    1b22:	e2 f7       	brpl	.-8      	; 0x1b1c <MDIO_voidDioSetPinDirection+0x18c>
    1b24:	80 95       	com	r24
    1b26:	84 23       	and	r24, r20
    1b28:	8c 93       	st	X, r24
    1b2a:	29 c0       	rjmp	.+82     	; 0x1b7e <MDIO_voidDioSetPinDirection+0x1ee>
			case DIO_PORTC:CLR_BIT(DDRC, copy_u8Pin); break;
    1b2c:	a4 e3       	ldi	r26, 0x34	; 52
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	e4 e3       	ldi	r30, 0x34	; 52
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	48 2f       	mov	r20, r24
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	02 2e       	mov	r0, r18
    1b44:	02 c0       	rjmp	.+4      	; 0x1b4a <MDIO_voidDioSetPinDirection+0x1ba>
    1b46:	88 0f       	add	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	0a 94       	dec	r0
    1b4c:	e2 f7       	brpl	.-8      	; 0x1b46 <MDIO_voidDioSetPinDirection+0x1b6>
    1b4e:	80 95       	com	r24
    1b50:	84 23       	and	r24, r20
    1b52:	8c 93       	st	X, r24
    1b54:	14 c0       	rjmp	.+40     	; 0x1b7e <MDIO_voidDioSetPinDirection+0x1ee>
			case DIO_PORTD:CLR_BIT(DDRD, copy_u8Pin); break;
    1b56:	a1 e3       	ldi	r26, 0x31	; 49
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	e1 e3       	ldi	r30, 0x31	; 49
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	48 2f       	mov	r20, r24
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	28 2f       	mov	r18, r24
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	02 2e       	mov	r0, r18
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <MDIO_voidDioSetPinDirection+0x1e4>
    1b70:	88 0f       	add	r24, r24
    1b72:	99 1f       	adc	r25, r25
    1b74:	0a 94       	dec	r0
    1b76:	e2 f7       	brpl	.-8      	; 0x1b70 <MDIO_voidDioSetPinDirection+0x1e0>
    1b78:	80 95       	com	r24
    1b7a:	84 23       	and	r24, r20
    1b7c:	8c 93       	st	X, r24
		}
	}
}
    1b7e:	27 96       	adiw	r28, 0x07	; 7
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	f8 94       	cli
    1b84:	de bf       	out	0x3e, r29	; 62
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	cd bf       	out	0x3d, r28	; 61
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	08 95       	ret

00001b90 <MDIO_voidDioSetPinValue>:

void MDIO_voidDioSetPinValue (u8 copy_u8Port, u8 copy_u8Pin, u8 copy_u8Value)
{
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	27 97       	sbiw	r28, 0x07	; 7
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	f8 94       	cli
    1b9e:	de bf       	out	0x3e, r29	; 62
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	cd bf       	out	0x3d, r28	; 61
    1ba4:	89 83       	std	Y+1, r24	; 0x01
    1ba6:	6a 83       	std	Y+2, r22	; 0x02
    1ba8:	4b 83       	std	Y+3, r20	; 0x03
	if (copy_u8Value == HIGH)
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	81 30       	cpi	r24, 0x01	; 1
    1bae:	09 f0       	breq	.+2      	; 0x1bb2 <MDIO_voidDioSetPinValue+0x22>
    1bb0:	6f c0       	rjmp	.+222    	; 0x1c90 <MDIO_voidDioSetPinValue+0x100>
	{
		switch(copy_u8Port)
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	28 2f       	mov	r18, r24
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	3f 83       	std	Y+7, r19	; 0x07
    1bba:	2e 83       	std	Y+6, r18	; 0x06
    1bbc:	8e 81       	ldd	r24, Y+6	; 0x06
    1bbe:	9f 81       	ldd	r25, Y+7	; 0x07
    1bc0:	81 30       	cpi	r24, 0x01	; 1
    1bc2:	91 05       	cpc	r25, r1
    1bc4:	49 f1       	breq	.+82     	; 0x1c18 <MDIO_voidDioSetPinValue+0x88>
    1bc6:	2e 81       	ldd	r18, Y+6	; 0x06
    1bc8:	3f 81       	ldd	r19, Y+7	; 0x07
    1bca:	22 30       	cpi	r18, 0x02	; 2
    1bcc:	31 05       	cpc	r19, r1
    1bce:	2c f4       	brge	.+10     	; 0x1bda <MDIO_voidDioSetPinValue+0x4a>
    1bd0:	8e 81       	ldd	r24, Y+6	; 0x06
    1bd2:	9f 81       	ldd	r25, Y+7	; 0x07
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	61 f0       	breq	.+24     	; 0x1bf0 <MDIO_voidDioSetPinValue+0x60>
    1bd8:	d2 c0       	rjmp	.+420    	; 0x1d7e <MDIO_voidDioSetPinValue+0x1ee>
    1bda:	2e 81       	ldd	r18, Y+6	; 0x06
    1bdc:	3f 81       	ldd	r19, Y+7	; 0x07
    1bde:	22 30       	cpi	r18, 0x02	; 2
    1be0:	31 05       	cpc	r19, r1
    1be2:	71 f1       	breq	.+92     	; 0x1c40 <MDIO_voidDioSetPinValue+0xb0>
    1be4:	8e 81       	ldd	r24, Y+6	; 0x06
    1be6:	9f 81       	ldd	r25, Y+7	; 0x07
    1be8:	83 30       	cpi	r24, 0x03	; 3
    1bea:	91 05       	cpc	r25, r1
    1bec:	e9 f1       	breq	.+122    	; 0x1c68 <MDIO_voidDioSetPinValue+0xd8>
    1bee:	c7 c0       	rjmp	.+398    	; 0x1d7e <MDIO_voidDioSetPinValue+0x1ee>
		{
			case DIO_PORTA: SET_BIT(PORTA, copy_u8Pin); break;
    1bf0:	ab e3       	ldi	r26, 0x3B	; 59
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	eb e3       	ldi	r30, 0x3B	; 59
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	48 2f       	mov	r20, r24
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	02 2e       	mov	r0, r18
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <MDIO_voidDioSetPinValue+0x7e>
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	0a 94       	dec	r0
    1c10:	e2 f7       	brpl	.-8      	; 0x1c0a <MDIO_voidDioSetPinValue+0x7a>
    1c12:	84 2b       	or	r24, r20
    1c14:	8c 93       	st	X, r24
    1c16:	b3 c0       	rjmp	.+358    	; 0x1d7e <MDIO_voidDioSetPinValue+0x1ee>
			case DIO_PORTB: SET_BIT(PORTB, copy_u8Pin); break;
    1c18:	a8 e3       	ldi	r26, 0x38	; 56
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e8 e3       	ldi	r30, 0x38	; 56
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	48 2f       	mov	r20, r24
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	02 2e       	mov	r0, r18
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <MDIO_voidDioSetPinValue+0xa6>
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	0a 94       	dec	r0
    1c38:	e2 f7       	brpl	.-8      	; 0x1c32 <MDIO_voidDioSetPinValue+0xa2>
    1c3a:	84 2b       	or	r24, r20
    1c3c:	8c 93       	st	X, r24
    1c3e:	9f c0       	rjmp	.+318    	; 0x1d7e <MDIO_voidDioSetPinValue+0x1ee>
			case DIO_PORTC: SET_BIT(PORTC, copy_u8Pin); break;
    1c40:	a5 e3       	ldi	r26, 0x35	; 53
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	e5 e3       	ldi	r30, 0x35	; 53
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	48 2f       	mov	r20, r24
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	02 2e       	mov	r0, r18
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <MDIO_voidDioSetPinValue+0xce>
    1c5a:	88 0f       	add	r24, r24
    1c5c:	99 1f       	adc	r25, r25
    1c5e:	0a 94       	dec	r0
    1c60:	e2 f7       	brpl	.-8      	; 0x1c5a <MDIO_voidDioSetPinValue+0xca>
    1c62:	84 2b       	or	r24, r20
    1c64:	8c 93       	st	X, r24
    1c66:	8b c0       	rjmp	.+278    	; 0x1d7e <MDIO_voidDioSetPinValue+0x1ee>
			case DIO_PORTD: SET_BIT(PORTD, copy_u8Pin); break;
    1c68:	a2 e3       	ldi	r26, 0x32	; 50
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	e2 e3       	ldi	r30, 0x32	; 50
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	48 2f       	mov	r20, r24
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	02 2e       	mov	r0, r18
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <MDIO_voidDioSetPinValue+0xf6>
    1c82:	88 0f       	add	r24, r24
    1c84:	99 1f       	adc	r25, r25
    1c86:	0a 94       	dec	r0
    1c88:	e2 f7       	brpl	.-8      	; 0x1c82 <MDIO_voidDioSetPinValue+0xf2>
    1c8a:	84 2b       	or	r24, r20
    1c8c:	8c 93       	st	X, r24
    1c8e:	77 c0       	rjmp	.+238    	; 0x1d7e <MDIO_voidDioSetPinValue+0x1ee>
		}
	}
	else if (copy_u8Value == LOW)
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	88 23       	and	r24, r24
    1c94:	09 f0       	breq	.+2      	; 0x1c98 <MDIO_voidDioSetPinValue+0x108>
    1c96:	73 c0       	rjmp	.+230    	; 0x1d7e <MDIO_voidDioSetPinValue+0x1ee>
	{
		switch(copy_u8Port)
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
    1c9a:	28 2f       	mov	r18, r24
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	3d 83       	std	Y+5, r19	; 0x05
    1ca0:	2c 83       	std	Y+4, r18	; 0x04
    1ca2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca6:	81 30       	cpi	r24, 0x01	; 1
    1ca8:	91 05       	cpc	r25, r1
    1caa:	59 f1       	breq	.+86     	; 0x1d02 <MDIO_voidDioSetPinValue+0x172>
    1cac:	2c 81       	ldd	r18, Y+4	; 0x04
    1cae:	3d 81       	ldd	r19, Y+5	; 0x05
    1cb0:	22 30       	cpi	r18, 0x02	; 2
    1cb2:	31 05       	cpc	r19, r1
    1cb4:	2c f4       	brge	.+10     	; 0x1cc0 <MDIO_voidDioSetPinValue+0x130>
    1cb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cba:	00 97       	sbiw	r24, 0x00	; 0
    1cbc:	69 f0       	breq	.+26     	; 0x1cd8 <MDIO_voidDioSetPinValue+0x148>
    1cbe:	5f c0       	rjmp	.+190    	; 0x1d7e <MDIO_voidDioSetPinValue+0x1ee>
    1cc0:	2c 81       	ldd	r18, Y+4	; 0x04
    1cc2:	3d 81       	ldd	r19, Y+5	; 0x05
    1cc4:	22 30       	cpi	r18, 0x02	; 2
    1cc6:	31 05       	cpc	r19, r1
    1cc8:	89 f1       	breq	.+98     	; 0x1d2c <MDIO_voidDioSetPinValue+0x19c>
    1cca:	8c 81       	ldd	r24, Y+4	; 0x04
    1ccc:	9d 81       	ldd	r25, Y+5	; 0x05
    1cce:	83 30       	cpi	r24, 0x03	; 3
    1cd0:	91 05       	cpc	r25, r1
    1cd2:	09 f4       	brne	.+2      	; 0x1cd6 <MDIO_voidDioSetPinValue+0x146>
    1cd4:	40 c0       	rjmp	.+128    	; 0x1d56 <MDIO_voidDioSetPinValue+0x1c6>
    1cd6:	53 c0       	rjmp	.+166    	; 0x1d7e <MDIO_voidDioSetPinValue+0x1ee>
		{
			case DIO_PORTA: CLR_BIT(PORTA, copy_u8Pin); break;
    1cd8:	ab e3       	ldi	r26, 0x3B	; 59
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	eb e3       	ldi	r30, 0x3B	; 59
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	48 2f       	mov	r20, r24
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	02 2e       	mov	r0, r18
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <MDIO_voidDioSetPinValue+0x166>
    1cf2:	88 0f       	add	r24, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	0a 94       	dec	r0
    1cf8:	e2 f7       	brpl	.-8      	; 0x1cf2 <MDIO_voidDioSetPinValue+0x162>
    1cfa:	80 95       	com	r24
    1cfc:	84 23       	and	r24, r20
    1cfe:	8c 93       	st	X, r24
    1d00:	3e c0       	rjmp	.+124    	; 0x1d7e <MDIO_voidDioSetPinValue+0x1ee>
			case DIO_PORTB: CLR_BIT(PORTB, copy_u8Pin); break;
    1d02:	a8 e3       	ldi	r26, 0x38	; 56
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	e8 e3       	ldi	r30, 0x38	; 56
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	48 2f       	mov	r20, r24
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	28 2f       	mov	r18, r24
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	02 2e       	mov	r0, r18
    1d1a:	02 c0       	rjmp	.+4      	; 0x1d20 <MDIO_voidDioSetPinValue+0x190>
    1d1c:	88 0f       	add	r24, r24
    1d1e:	99 1f       	adc	r25, r25
    1d20:	0a 94       	dec	r0
    1d22:	e2 f7       	brpl	.-8      	; 0x1d1c <MDIO_voidDioSetPinValue+0x18c>
    1d24:	80 95       	com	r24
    1d26:	84 23       	and	r24, r20
    1d28:	8c 93       	st	X, r24
    1d2a:	29 c0       	rjmp	.+82     	; 0x1d7e <MDIO_voidDioSetPinValue+0x1ee>
			case DIO_PORTC: CLR_BIT(PORTC, copy_u8Pin); break;
    1d2c:	a5 e3       	ldi	r26, 0x35	; 53
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e5 e3       	ldi	r30, 0x35	; 53
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	48 2f       	mov	r20, r24
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	28 2f       	mov	r18, r24
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	02 2e       	mov	r0, r18
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <MDIO_voidDioSetPinValue+0x1ba>
    1d46:	88 0f       	add	r24, r24
    1d48:	99 1f       	adc	r25, r25
    1d4a:	0a 94       	dec	r0
    1d4c:	e2 f7       	brpl	.-8      	; 0x1d46 <MDIO_voidDioSetPinValue+0x1b6>
    1d4e:	80 95       	com	r24
    1d50:	84 23       	and	r24, r20
    1d52:	8c 93       	st	X, r24
    1d54:	14 c0       	rjmp	.+40     	; 0x1d7e <MDIO_voidDioSetPinValue+0x1ee>
			case DIO_PORTD: CLR_BIT(PORTD, copy_u8Pin); break;
    1d56:	a2 e3       	ldi	r26, 0x32	; 50
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	e2 e3       	ldi	r30, 0x32	; 50
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	48 2f       	mov	r20, r24
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	28 2f       	mov	r18, r24
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	02 2e       	mov	r0, r18
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <MDIO_voidDioSetPinValue+0x1e4>
    1d70:	88 0f       	add	r24, r24
    1d72:	99 1f       	adc	r25, r25
    1d74:	0a 94       	dec	r0
    1d76:	e2 f7       	brpl	.-8      	; 0x1d70 <MDIO_voidDioSetPinValue+0x1e0>
    1d78:	80 95       	com	r24
    1d7a:	84 23       	and	r24, r20
    1d7c:	8c 93       	st	X, r24
		}
	}
}
    1d7e:	27 96       	adiw	r28, 0x07	; 7
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	f8 94       	cli
    1d84:	de bf       	out	0x3e, r29	; 62
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	cd bf       	out	0x3d, r28	; 61
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <MDIO_u8DioGetPinValue>:

u8 MDIO_u8DioGetPinValue (u8 copy_u8Port, u8 copy_u8Pin)
{
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	00 d0       	rcall	.+0      	; 0x1d96 <MDIO_u8DioGetPinValue+0x6>
    1d96:	00 d0       	rcall	.+0      	; 0x1d98 <MDIO_u8DioGetPinValue+0x8>
    1d98:	0f 92       	push	r0
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
    1d9e:	8a 83       	std	Y+2, r24	; 0x02
    1da0:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8Value;
	switch(copy_u8Port)
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	3d 83       	std	Y+5, r19	; 0x05
    1daa:	2c 83       	std	Y+4, r18	; 0x04
    1dac:	4c 81       	ldd	r20, Y+4	; 0x04
    1dae:	5d 81       	ldd	r21, Y+5	; 0x05
    1db0:	41 30       	cpi	r20, 0x01	; 1
    1db2:	51 05       	cpc	r21, r1
    1db4:	41 f1       	breq	.+80     	; 0x1e06 <MDIO_u8DioGetPinValue+0x76>
    1db6:	8c 81       	ldd	r24, Y+4	; 0x04
    1db8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dba:	82 30       	cpi	r24, 0x02	; 2
    1dbc:	91 05       	cpc	r25, r1
    1dbe:	34 f4       	brge	.+12     	; 0x1dcc <MDIO_u8DioGetPinValue+0x3c>
    1dc0:	2c 81       	ldd	r18, Y+4	; 0x04
    1dc2:	3d 81       	ldd	r19, Y+5	; 0x05
    1dc4:	21 15       	cp	r18, r1
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	61 f0       	breq	.+24     	; 0x1de2 <MDIO_u8DioGetPinValue+0x52>
    1dca:	52 c0       	rjmp	.+164    	; 0x1e70 <MDIO_u8DioGetPinValue+0xe0>
    1dcc:	4c 81       	ldd	r20, Y+4	; 0x04
    1dce:	5d 81       	ldd	r21, Y+5	; 0x05
    1dd0:	42 30       	cpi	r20, 0x02	; 2
    1dd2:	51 05       	cpc	r21, r1
    1dd4:	51 f1       	breq	.+84     	; 0x1e2a <MDIO_u8DioGetPinValue+0x9a>
    1dd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dda:	83 30       	cpi	r24, 0x03	; 3
    1ddc:	91 05       	cpc	r25, r1
    1dde:	b9 f1       	breq	.+110    	; 0x1e4e <MDIO_u8DioGetPinValue+0xbe>
    1de0:	47 c0       	rjmp	.+142    	; 0x1e70 <MDIO_u8DioGetPinValue+0xe0>
		{
			case DIO_PORTA: L_u8Value = GET_BIT(PINA, copy_u8Pin); break;
    1de2:	e9 e3       	ldi	r30, 0x39	; 57
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	8b 81       	ldd	r24, Y+3	; 0x03
    1dee:	88 2f       	mov	r24, r24
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	a9 01       	movw	r20, r18
    1df4:	02 c0       	rjmp	.+4      	; 0x1dfa <MDIO_u8DioGetPinValue+0x6a>
    1df6:	55 95       	asr	r21
    1df8:	47 95       	ror	r20
    1dfa:	8a 95       	dec	r24
    1dfc:	e2 f7       	brpl	.-8      	; 0x1df6 <MDIO_u8DioGetPinValue+0x66>
    1dfe:	ca 01       	movw	r24, r20
    1e00:	81 70       	andi	r24, 0x01	; 1
    1e02:	89 83       	std	Y+1, r24	; 0x01
    1e04:	35 c0       	rjmp	.+106    	; 0x1e70 <MDIO_u8DioGetPinValue+0xe0>
			case DIO_PORTB: L_u8Value = GET_BIT(PINB, copy_u8Pin); break;
    1e06:	e6 e3       	ldi	r30, 0x36	; 54
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	88 2f       	mov	r24, r24
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	a9 01       	movw	r20, r18
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <MDIO_u8DioGetPinValue+0x8e>
    1e1a:	55 95       	asr	r21
    1e1c:	47 95       	ror	r20
    1e1e:	8a 95       	dec	r24
    1e20:	e2 f7       	brpl	.-8      	; 0x1e1a <MDIO_u8DioGetPinValue+0x8a>
    1e22:	ca 01       	movw	r24, r20
    1e24:	81 70       	andi	r24, 0x01	; 1
    1e26:	89 83       	std	Y+1, r24	; 0x01
    1e28:	23 c0       	rjmp	.+70     	; 0x1e70 <MDIO_u8DioGetPinValue+0xe0>
			case DIO_PORTC: L_u8Value = GET_BIT(PINC, copy_u8Pin); break;
    1e2a:	e3 e3       	ldi	r30, 0x33	; 51
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	28 2f       	mov	r18, r24
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	88 2f       	mov	r24, r24
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	a9 01       	movw	r20, r18
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <MDIO_u8DioGetPinValue+0xb2>
    1e3e:	55 95       	asr	r21
    1e40:	47 95       	ror	r20
    1e42:	8a 95       	dec	r24
    1e44:	e2 f7       	brpl	.-8      	; 0x1e3e <MDIO_u8DioGetPinValue+0xae>
    1e46:	ca 01       	movw	r24, r20
    1e48:	81 70       	andi	r24, 0x01	; 1
    1e4a:	89 83       	std	Y+1, r24	; 0x01
    1e4c:	11 c0       	rjmp	.+34     	; 0x1e70 <MDIO_u8DioGetPinValue+0xe0>
			case DIO_PORTD: L_u8Value = GET_BIT(PIND, copy_u8Pin); break;
    1e4e:	e0 e3       	ldi	r30, 0x30	; 48
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	28 2f       	mov	r18, r24
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	88 2f       	mov	r24, r24
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	a9 01       	movw	r20, r18
    1e60:	02 c0       	rjmp	.+4      	; 0x1e66 <MDIO_u8DioGetPinValue+0xd6>
    1e62:	55 95       	asr	r21
    1e64:	47 95       	ror	r20
    1e66:	8a 95       	dec	r24
    1e68:	e2 f7       	brpl	.-8      	; 0x1e62 <MDIO_u8DioGetPinValue+0xd2>
    1e6a:	ca 01       	movw	r24, r20
    1e6c:	81 70       	andi	r24, 0x01	; 1
    1e6e:	89 83       	std	Y+1, r24	; 0x01
		}
	return L_u8Value;
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	08 95       	ret

00001e82 <MDIO_voidDioTogglePin>:

void MDIO_voidDioTogglePin (u8 copy_u8Port, u8 copy_u8Pin)
{
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	00 d0       	rcall	.+0      	; 0x1e88 <MDIO_voidDioTogglePin+0x6>
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <MDIO_voidDioTogglePin+0x8>
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    1e8e:	89 83       	std	Y+1, r24	; 0x01
    1e90:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8Port)
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	28 2f       	mov	r18, r24
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	3c 83       	std	Y+4, r19	; 0x04
    1e9a:	2b 83       	std	Y+3, r18	; 0x03
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea0:	81 30       	cpi	r24, 0x01	; 1
    1ea2:	91 05       	cpc	r25, r1
    1ea4:	49 f1       	breq	.+82     	; 0x1ef8 <MDIO_voidDioTogglePin+0x76>
    1ea6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ea8:	3c 81       	ldd	r19, Y+4	; 0x04
    1eaa:	22 30       	cpi	r18, 0x02	; 2
    1eac:	31 05       	cpc	r19, r1
    1eae:	2c f4       	brge	.+10     	; 0x1eba <MDIO_voidDioTogglePin+0x38>
    1eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb4:	00 97       	sbiw	r24, 0x00	; 0
    1eb6:	61 f0       	breq	.+24     	; 0x1ed0 <MDIO_voidDioTogglePin+0x4e>
    1eb8:	5a c0       	rjmp	.+180    	; 0x1f6e <MDIO_voidDioTogglePin+0xec>
    1eba:	2b 81       	ldd	r18, Y+3	; 0x03
    1ebc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ebe:	22 30       	cpi	r18, 0x02	; 2
    1ec0:	31 05       	cpc	r19, r1
    1ec2:	71 f1       	breq	.+92     	; 0x1f20 <MDIO_voidDioTogglePin+0x9e>
    1ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec8:	83 30       	cpi	r24, 0x03	; 3
    1eca:	91 05       	cpc	r25, r1
    1ecc:	e9 f1       	breq	.+122    	; 0x1f48 <MDIO_voidDioTogglePin+0xc6>
    1ece:	4f c0       	rjmp	.+158    	; 0x1f6e <MDIO_voidDioTogglePin+0xec>
		{
			case DIO_PORTA: TOG_BIT(PORTA, copy_u8Pin); break;
    1ed0:	ab e3       	ldi	r26, 0x3B	; 59
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	eb e3       	ldi	r30, 0x3B	; 59
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	48 2f       	mov	r20, r24
    1edc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ede:	28 2f       	mov	r18, r24
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	02 2e       	mov	r0, r18
    1ee8:	02 c0       	rjmp	.+4      	; 0x1eee <MDIO_voidDioTogglePin+0x6c>
    1eea:	88 0f       	add	r24, r24
    1eec:	99 1f       	adc	r25, r25
    1eee:	0a 94       	dec	r0
    1ef0:	e2 f7       	brpl	.-8      	; 0x1eea <MDIO_voidDioTogglePin+0x68>
    1ef2:	84 27       	eor	r24, r20
    1ef4:	8c 93       	st	X, r24
    1ef6:	3b c0       	rjmp	.+118    	; 0x1f6e <MDIO_voidDioTogglePin+0xec>
			case DIO_PORTB: TOG_BIT(PORTB, copy_u8Pin); break;
    1ef8:	a8 e3       	ldi	r26, 0x38	; 56
    1efa:	b0 e0       	ldi	r27, 0x00	; 0
    1efc:	e8 e3       	ldi	r30, 0x38	; 56
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	48 2f       	mov	r20, r24
    1f04:	8a 81       	ldd	r24, Y+2	; 0x02
    1f06:	28 2f       	mov	r18, r24
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	02 2e       	mov	r0, r18
    1f10:	02 c0       	rjmp	.+4      	; 0x1f16 <MDIO_voidDioTogglePin+0x94>
    1f12:	88 0f       	add	r24, r24
    1f14:	99 1f       	adc	r25, r25
    1f16:	0a 94       	dec	r0
    1f18:	e2 f7       	brpl	.-8      	; 0x1f12 <MDIO_voidDioTogglePin+0x90>
    1f1a:	84 27       	eor	r24, r20
    1f1c:	8c 93       	st	X, r24
    1f1e:	27 c0       	rjmp	.+78     	; 0x1f6e <MDIO_voidDioTogglePin+0xec>
			case DIO_PORTC: TOG_BIT(PORTC, copy_u8Pin); break;
    1f20:	a5 e3       	ldi	r26, 0x35	; 53
    1f22:	b0 e0       	ldi	r27, 0x00	; 0
    1f24:	e5 e3       	ldi	r30, 0x35	; 53
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	48 2f       	mov	r20, r24
    1f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2e:	28 2f       	mov	r18, r24
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	02 2e       	mov	r0, r18
    1f38:	02 c0       	rjmp	.+4      	; 0x1f3e <MDIO_voidDioTogglePin+0xbc>
    1f3a:	88 0f       	add	r24, r24
    1f3c:	99 1f       	adc	r25, r25
    1f3e:	0a 94       	dec	r0
    1f40:	e2 f7       	brpl	.-8      	; 0x1f3a <MDIO_voidDioTogglePin+0xb8>
    1f42:	84 27       	eor	r24, r20
    1f44:	8c 93       	st	X, r24
    1f46:	13 c0       	rjmp	.+38     	; 0x1f6e <MDIO_voidDioTogglePin+0xec>
			case DIO_PORTD: TOG_BIT(PORTD, copy_u8Pin); break;
    1f48:	a2 e3       	ldi	r26, 0x32	; 50
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	e2 e3       	ldi	r30, 0x32	; 50
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	80 81       	ld	r24, Z
    1f52:	48 2f       	mov	r20, r24
    1f54:	8a 81       	ldd	r24, Y+2	; 0x02
    1f56:	28 2f       	mov	r18, r24
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	02 2e       	mov	r0, r18
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <MDIO_voidDioTogglePin+0xe4>
    1f62:	88 0f       	add	r24, r24
    1f64:	99 1f       	adc	r25, r25
    1f66:	0a 94       	dec	r0
    1f68:	e2 f7       	brpl	.-8      	; 0x1f62 <MDIO_voidDioTogglePin+0xe0>
    1f6a:	84 27       	eor	r24, r20
    1f6c:	8c 93       	st	X, r24
		}
}
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	08 95       	ret

00001f7c <MDIO_voidDioSetPortDirection>:

void MDIO_voidDioSetPortDirection (u8 copy_u8Port, u8 copy_u8Direction)
{
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	00 d0       	rcall	.+0      	; 0x1f82 <MDIO_voidDioSetPortDirection+0x6>
    1f82:	00 d0       	rcall	.+0      	; 0x1f84 <MDIO_voidDioSetPortDirection+0x8>
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
    1f88:	89 83       	std	Y+1, r24	; 0x01
    1f8a:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8Port)
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	28 2f       	mov	r18, r24
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	3c 83       	std	Y+4, r19	; 0x04
    1f94:	2b 83       	std	Y+3, r18	; 0x03
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9a:	81 30       	cpi	r24, 0x01	; 1
    1f9c:	91 05       	cpc	r25, r1
    1f9e:	d1 f0       	breq	.+52     	; 0x1fd4 <MDIO_voidDioSetPortDirection+0x58>
    1fa0:	2b 81       	ldd	r18, Y+3	; 0x03
    1fa2:	3c 81       	ldd	r19, Y+4	; 0x04
    1fa4:	22 30       	cpi	r18, 0x02	; 2
    1fa6:	31 05       	cpc	r19, r1
    1fa8:	2c f4       	brge	.+10     	; 0x1fb4 <MDIO_voidDioSetPortDirection+0x38>
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	9c 81       	ldd	r25, Y+4	; 0x04
    1fae:	00 97       	sbiw	r24, 0x00	; 0
    1fb0:	61 f0       	breq	.+24     	; 0x1fca <MDIO_voidDioSetPortDirection+0x4e>
    1fb2:	1e c0       	rjmp	.+60     	; 0x1ff0 <MDIO_voidDioSetPortDirection+0x74>
    1fb4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fb6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fb8:	22 30       	cpi	r18, 0x02	; 2
    1fba:	31 05       	cpc	r19, r1
    1fbc:	81 f0       	breq	.+32     	; 0x1fde <MDIO_voidDioSetPortDirection+0x62>
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc2:	83 30       	cpi	r24, 0x03	; 3
    1fc4:	91 05       	cpc	r25, r1
    1fc6:	81 f0       	breq	.+32     	; 0x1fe8 <MDIO_voidDioSetPortDirection+0x6c>
    1fc8:	13 c0       	rjmp	.+38     	; 0x1ff0 <MDIO_voidDioSetPortDirection+0x74>
		{
			case DIO_PORTA: DDRA = copy_u8Direction; break;
    1fca:	ea e3       	ldi	r30, 0x3A	; 58
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd0:	80 83       	st	Z, r24
    1fd2:	0e c0       	rjmp	.+28     	; 0x1ff0 <MDIO_voidDioSetPortDirection+0x74>
			case DIO_PORTB: DDRB = copy_u8Direction; break;
    1fd4:	e7 e3       	ldi	r30, 0x37	; 55
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fda:	80 83       	st	Z, r24
    1fdc:	09 c0       	rjmp	.+18     	; 0x1ff0 <MDIO_voidDioSetPortDirection+0x74>
			case DIO_PORTC: DDRC = copy_u8Direction; break;
    1fde:	e4 e3       	ldi	r30, 0x34	; 52
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	80 83       	st	Z, r24
    1fe6:	04 c0       	rjmp	.+8      	; 0x1ff0 <MDIO_voidDioSetPortDirection+0x74>
			case DIO_PORTD: DDRD = copy_u8Direction; break;
    1fe8:	e1 e3       	ldi	r30, 0x31	; 49
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	8a 81       	ldd	r24, Y+2	; 0x02
    1fee:	80 83       	st	Z, r24
		}
}
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	cf 91       	pop	r28
    1ffa:	df 91       	pop	r29
    1ffc:	08 95       	ret

00001ffe <MDIO_voidDioSetPortValue>:

void MDIO_voidDioSetPortValue (u8 copy_u8Port, u8 copy_u8Value)
{
    1ffe:	df 93       	push	r29
    2000:	cf 93       	push	r28
    2002:	00 d0       	rcall	.+0      	; 0x2004 <MDIO_voidDioSetPortValue+0x6>
    2004:	00 d0       	rcall	.+0      	; 0x2006 <MDIO_voidDioSetPortValue+0x8>
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8Port)
    200e:	89 81       	ldd	r24, Y+1	; 0x01
    2010:	28 2f       	mov	r18, r24
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	3c 83       	std	Y+4, r19	; 0x04
    2016:	2b 83       	std	Y+3, r18	; 0x03
    2018:	8b 81       	ldd	r24, Y+3	; 0x03
    201a:	9c 81       	ldd	r25, Y+4	; 0x04
    201c:	81 30       	cpi	r24, 0x01	; 1
    201e:	91 05       	cpc	r25, r1
    2020:	d1 f0       	breq	.+52     	; 0x2056 <MDIO_voidDioSetPortValue+0x58>
    2022:	2b 81       	ldd	r18, Y+3	; 0x03
    2024:	3c 81       	ldd	r19, Y+4	; 0x04
    2026:	22 30       	cpi	r18, 0x02	; 2
    2028:	31 05       	cpc	r19, r1
    202a:	2c f4       	brge	.+10     	; 0x2036 <MDIO_voidDioSetPortValue+0x38>
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	9c 81       	ldd	r25, Y+4	; 0x04
    2030:	00 97       	sbiw	r24, 0x00	; 0
    2032:	61 f0       	breq	.+24     	; 0x204c <MDIO_voidDioSetPortValue+0x4e>
    2034:	1e c0       	rjmp	.+60     	; 0x2072 <MDIO_voidDioSetPortValue+0x74>
    2036:	2b 81       	ldd	r18, Y+3	; 0x03
    2038:	3c 81       	ldd	r19, Y+4	; 0x04
    203a:	22 30       	cpi	r18, 0x02	; 2
    203c:	31 05       	cpc	r19, r1
    203e:	81 f0       	breq	.+32     	; 0x2060 <MDIO_voidDioSetPortValue+0x62>
    2040:	8b 81       	ldd	r24, Y+3	; 0x03
    2042:	9c 81       	ldd	r25, Y+4	; 0x04
    2044:	83 30       	cpi	r24, 0x03	; 3
    2046:	91 05       	cpc	r25, r1
    2048:	81 f0       	breq	.+32     	; 0x206a <MDIO_voidDioSetPortValue+0x6c>
    204a:	13 c0       	rjmp	.+38     	; 0x2072 <MDIO_voidDioSetPortValue+0x74>
		{
			case DIO_PORTA: PORTA = copy_u8Value;  break;
    204c:	eb e3       	ldi	r30, 0x3B	; 59
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	8a 81       	ldd	r24, Y+2	; 0x02
    2052:	80 83       	st	Z, r24
    2054:	0e c0       	rjmp	.+28     	; 0x2072 <MDIO_voidDioSetPortValue+0x74>
			case DIO_PORTB: PORTB = copy_u8Value;  break;
    2056:	e8 e3       	ldi	r30, 0x38	; 56
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	80 83       	st	Z, r24
    205e:	09 c0       	rjmp	.+18     	; 0x2072 <MDIO_voidDioSetPortValue+0x74>
			case DIO_PORTC: PORTC = copy_u8Value;  break;
    2060:	e5 e3       	ldi	r30, 0x35	; 53
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	8a 81       	ldd	r24, Y+2	; 0x02
    2066:	80 83       	st	Z, r24
    2068:	04 c0       	rjmp	.+8      	; 0x2072 <MDIO_voidDioSetPortValue+0x74>
			case DIO_PORTD: PORTD = copy_u8Value;  break;
    206a:	e2 e3       	ldi	r30, 0x32	; 50
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	80 83       	st	Z, r24
		}
}
    2072:	0f 90       	pop	r0
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	cf 91       	pop	r28
    207c:	df 91       	pop	r29
    207e:	08 95       	ret

00002080 <EXTI_voidInit>:

#define NULL ((void *)0)
static void (*EXTI_pf_EXTI[3])(void) = {NULL, NULL, NULL};

void EXTI_voidInit(void)
{
    2080:	df 93       	push	r29
    2082:	cf 93       	push	r28
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
#if EXTI_INDEX_0 == INT0
	SET_BIT(GICR, GICR_INT0);
    2088:	ab e5       	ldi	r26, 0x5B	; 91
    208a:	b0 e0       	ldi	r27, 0x00	; 0
    208c:	eb e5       	ldi	r30, 0x5B	; 91
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	80 81       	ld	r24, Z
    2092:	80 64       	ori	r24, 0x40	; 64
    2094:	8c 93       	st	X, r24
//CHOOSE CLOCK
#if EXTI_CLOCK_0 == LOW_LEVEL
	CLR_BIT(MCUCR,MCUCR_ISC00);
	CLR_BIT(MCUCR,MCUCR_ISC01);
#elif EXTI_CLOCK_0 == ANY_LOGICAL
	SET_BIT(MCUCR,MCUCR_ISC00);
    2096:	a5 e5       	ldi	r26, 0x55	; 85
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	e5 e5       	ldi	r30, 0x55	; 85
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	81 60       	ori	r24, 0x01	; 1
    20a2:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC01);
    20a4:	a5 e5       	ldi	r26, 0x55	; 85
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	e5 e5       	ldi	r30, 0x55	; 85
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	8d 7f       	andi	r24, 0xFD	; 253
    20b0:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
#endif
#endif

#if EXIT_INDEX_1== INT1
	SET_BIT(GICR, GICR_INT1);
    20b2:	ab e5       	ldi	r26, 0x5B	; 91
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	eb e5       	ldi	r30, 0x5B	; 91
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	80 68       	ori	r24, 0x80	; 128
    20be:	8c 93       	st	X, r24
//CHOOSE CLOCK
#if EXTI_CLOCK_1 == LOW_LEVEL
	CLR_BIT(MCUCR,MCUCR_ISC10);
	CLR_BIT(MCUCR,MCUCR_ISC11);
#elif EXTI_CLOCK_1 == ANY_LOGICAL
	SET_BIT(MCUCR,MCUCR_ISC10);
    20c0:	a5 e5       	ldi	r26, 0x55	; 85
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e5 e5       	ldi	r30, 0x55	; 85
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	84 60       	ori	r24, 0x04	; 4
    20cc:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC11);
    20ce:	a5 e5       	ldi	r26, 0x55	; 85
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	e5 e5       	ldi	r30, 0x55	; 85
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	87 7f       	andi	r24, 0xF7	; 247
    20da:	8c 93       	st	X, r24
	CLR_BIT(MCUCSR, MCUCSR_ISC2);
#elif EXTI_CLOCK_2 == RAISING
	SET_BIT(MCUCSR, MCUCSR_ISC2);
#endif
#endif
}
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <EXTI_voidGIE>:


void EXTI_voidGIE(void)
{
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
#if GIE == ENABLE
	SET_BIT(SREG, SREG_PIN);
    20ea:	af e5       	ldi	r26, 0x5F	; 95
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	ef e5       	ldi	r30, 0x5F	; 95
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	80 68       	ori	r24, 0x80	; 128
    20f6:	8c 93       	st	X, r24
#elif GIE == DISABLE
	CLR_BIT(SREG, SREG_PIN);
#endif
}
    20f8:	cf 91       	pop	r28
    20fa:	df 91       	pop	r29
    20fc:	08 95       	ret

000020fe <EXTI_voidEXTISetCallBack>:

void EXTI_voidEXTISetCallBack(u8 copy_u8EXTIIndex, void (*copy_pf)(void))
{
    20fe:	df 93       	push	r29
    2100:	cf 93       	push	r28
    2102:	00 d0       	rcall	.+0      	; 0x2104 <EXTI_voidEXTISetCallBack+0x6>
    2104:	0f 92       	push	r0
    2106:	cd b7       	in	r28, 0x3d	; 61
    2108:	de b7       	in	r29, 0x3e	; 62
    210a:	89 83       	std	Y+1, r24	; 0x01
    210c:	7b 83       	std	Y+3, r23	; 0x03
    210e:	6a 83       	std	Y+2, r22	; 0x02
	EXTI_pf_EXTI[copy_u8EXTIIndex] = copy_pf;
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	88 2f       	mov	r24, r24
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	88 0f       	add	r24, r24
    2118:	99 1f       	adc	r25, r25
    211a:	fc 01       	movw	r30, r24
    211c:	ea 57       	subi	r30, 0x7A	; 122
    211e:	fe 4f       	sbci	r31, 0xFE	; 254
    2120:	8a 81       	ldd	r24, Y+2	; 0x02
    2122:	9b 81       	ldd	r25, Y+3	; 0x03
    2124:	91 83       	std	Z+1, r25	; 0x01
    2126:	80 83       	st	Z, r24
}
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	08 95       	ret

00002134 <__vector_1>:

ISR(INT0_vect)
{
    2134:	1f 92       	push	r1
    2136:	0f 92       	push	r0
    2138:	0f b6       	in	r0, 0x3f	; 63
    213a:	0f 92       	push	r0
    213c:	11 24       	eor	r1, r1
    213e:	2f 93       	push	r18
    2140:	3f 93       	push	r19
    2142:	4f 93       	push	r20
    2144:	5f 93       	push	r21
    2146:	6f 93       	push	r22
    2148:	7f 93       	push	r23
    214a:	8f 93       	push	r24
    214c:	9f 93       	push	r25
    214e:	af 93       	push	r26
    2150:	bf 93       	push	r27
    2152:	ef 93       	push	r30
    2154:	ff 93       	push	r31
    2156:	df 93       	push	r29
    2158:	cf 93       	push	r28
    215a:	cd b7       	in	r28, 0x3d	; 61
    215c:	de b7       	in	r29, 0x3e	; 62
	if ( EXTI_pf_EXTI[0] != NULL )
    215e:	80 91 86 01 	lds	r24, 0x0186
    2162:	90 91 87 01 	lds	r25, 0x0187
    2166:	00 97       	sbiw	r24, 0x00	; 0
    2168:	29 f0       	breq	.+10     	; 0x2174 <__vector_1+0x40>
	{
		EXTI_pf_EXTI[0]();
    216a:	e0 91 86 01 	lds	r30, 0x0186
    216e:	f0 91 87 01 	lds	r31, 0x0187
    2172:	09 95       	icall
	}
}
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	ff 91       	pop	r31
    217a:	ef 91       	pop	r30
    217c:	bf 91       	pop	r27
    217e:	af 91       	pop	r26
    2180:	9f 91       	pop	r25
    2182:	8f 91       	pop	r24
    2184:	7f 91       	pop	r23
    2186:	6f 91       	pop	r22
    2188:	5f 91       	pop	r21
    218a:	4f 91       	pop	r20
    218c:	3f 91       	pop	r19
    218e:	2f 91       	pop	r18
    2190:	0f 90       	pop	r0
    2192:	0f be       	out	0x3f, r0	; 63
    2194:	0f 90       	pop	r0
    2196:	1f 90       	pop	r1
    2198:	18 95       	reti

0000219a <__vector_2>:

ISR(INT1_vect)
{
    219a:	1f 92       	push	r1
    219c:	0f 92       	push	r0
    219e:	0f b6       	in	r0, 0x3f	; 63
    21a0:	0f 92       	push	r0
    21a2:	11 24       	eor	r1, r1
    21a4:	2f 93       	push	r18
    21a6:	3f 93       	push	r19
    21a8:	4f 93       	push	r20
    21aa:	5f 93       	push	r21
    21ac:	6f 93       	push	r22
    21ae:	7f 93       	push	r23
    21b0:	8f 93       	push	r24
    21b2:	9f 93       	push	r25
    21b4:	af 93       	push	r26
    21b6:	bf 93       	push	r27
    21b8:	ef 93       	push	r30
    21ba:	ff 93       	push	r31
    21bc:	df 93       	push	r29
    21be:	cf 93       	push	r28
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
	if ( EXTI_pf_EXTI[1] != NULL )
    21c4:	80 91 88 01 	lds	r24, 0x0188
    21c8:	90 91 89 01 	lds	r25, 0x0189
    21cc:	00 97       	sbiw	r24, 0x00	; 0
    21ce:	29 f0       	breq	.+10     	; 0x21da <__vector_2+0x40>
	{
		EXTI_pf_EXTI[1]();
    21d0:	e0 91 88 01 	lds	r30, 0x0188
    21d4:	f0 91 89 01 	lds	r31, 0x0189
    21d8:	09 95       	icall
	}
}
    21da:	cf 91       	pop	r28
    21dc:	df 91       	pop	r29
    21de:	ff 91       	pop	r31
    21e0:	ef 91       	pop	r30
    21e2:	bf 91       	pop	r27
    21e4:	af 91       	pop	r26
    21e6:	9f 91       	pop	r25
    21e8:	8f 91       	pop	r24
    21ea:	7f 91       	pop	r23
    21ec:	6f 91       	pop	r22
    21ee:	5f 91       	pop	r21
    21f0:	4f 91       	pop	r20
    21f2:	3f 91       	pop	r19
    21f4:	2f 91       	pop	r18
    21f6:	0f 90       	pop	r0
    21f8:	0f be       	out	0x3f, r0	; 63
    21fa:	0f 90       	pop	r0
    21fc:	1f 90       	pop	r1
    21fe:	18 95       	reti

00002200 <__vector_3>:

ISR(INT2_vect)
{
    2200:	1f 92       	push	r1
    2202:	0f 92       	push	r0
    2204:	0f b6       	in	r0, 0x3f	; 63
    2206:	0f 92       	push	r0
    2208:	11 24       	eor	r1, r1
    220a:	2f 93       	push	r18
    220c:	3f 93       	push	r19
    220e:	4f 93       	push	r20
    2210:	5f 93       	push	r21
    2212:	6f 93       	push	r22
    2214:	7f 93       	push	r23
    2216:	8f 93       	push	r24
    2218:	9f 93       	push	r25
    221a:	af 93       	push	r26
    221c:	bf 93       	push	r27
    221e:	ef 93       	push	r30
    2220:	ff 93       	push	r31
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
	if ( EXTI_pf_EXTI[2] != NULL )
    222a:	80 91 8a 01 	lds	r24, 0x018A
    222e:	90 91 8b 01 	lds	r25, 0x018B
    2232:	00 97       	sbiw	r24, 0x00	; 0
    2234:	29 f0       	breq	.+10     	; 0x2240 <__vector_3+0x40>
	{
		EXTI_pf_EXTI[2]();
    2236:	e0 91 8a 01 	lds	r30, 0x018A
    223a:	f0 91 8b 01 	lds	r31, 0x018B
    223e:	09 95       	icall
	}
}
    2240:	cf 91       	pop	r28
    2242:	df 91       	pop	r29
    2244:	ff 91       	pop	r31
    2246:	ef 91       	pop	r30
    2248:	bf 91       	pop	r27
    224a:	af 91       	pop	r26
    224c:	9f 91       	pop	r25
    224e:	8f 91       	pop	r24
    2250:	7f 91       	pop	r23
    2252:	6f 91       	pop	r22
    2254:	5f 91       	pop	r21
    2256:	4f 91       	pop	r20
    2258:	3f 91       	pop	r19
    225a:	2f 91       	pop	r18
    225c:	0f 90       	pop	r0
    225e:	0f be       	out	0x3f, r0	; 63
    2260:	0f 90       	pop	r0
    2262:	1f 90       	pop	r1
    2264:	18 95       	reti

00002266 <main>:
#include "MCAL/M_TMR/TIME_Interface.h"

void toggleLED(void);

int main (void)
{
    2266:	df 93       	push	r29
    2268:	cf 93       	push	r28
    226a:	cd b7       	in	r28, 0x3d	; 61
    226c:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidDioSetPinDirection(DIO_PORTA, DIO_PIN_0, DIO_OUT);
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	60 e0       	ldi	r22, 0x00	; 0
    2272:	41 e0       	ldi	r20, 0x01	; 1
    2274:	0e 94 c8 0c 	call	0x1990	; 0x1990 <MDIO_voidDioSetPinDirection>

	EXTI_voidGIE();
    2278:	0e 94 71 10 	call	0x20e2	; 0x20e2 <EXTI_voidGIE>

	MTIMER_voidTimer2COMPSetCallBack(toggleLED);
    227c:	8a e4       	ldi	r24, 0x4A	; 74
    227e:	91 e1       	ldi	r25, 0x11	; 17
    2280:	0e 94 43 0a 	call	0x1486	; 0x1486 <MTIMER_voidTimer2COMPSetCallBack>
	while (1)
	{
		MTIMER_voidTimer2COMPDelay(18, 122);
    2284:	82 e1       	ldi	r24, 0x12	; 18
    2286:	4a e7       	ldi	r20, 0x7A	; 122
    2288:	50 e0       	ldi	r21, 0x00	; 0
    228a:	60 e0       	ldi	r22, 0x00	; 0
    228c:	70 e0       	ldi	r23, 0x00	; 0
    228e:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <MTIMER_voidTimer2COMPDelay>
    2292:	f8 cf       	rjmp	.-16     	; 0x2284 <main+0x1e>

00002294 <toggleLED>:
	}
	return 0;
}

void toggleLED(void)
{
    2294:	df 93       	push	r29
    2296:	cf 93       	push	r28
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidDioTogglePin(DIO_PORTA, DIO_PIN_0);
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	60 e0       	ldi	r22, 0x00	; 0
    22a0:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <MDIO_voidDioTogglePin>

}
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	08 95       	ret

000022aa <__mulsi3>:
    22aa:	62 9f       	mul	r22, r18
    22ac:	d0 01       	movw	r26, r0
    22ae:	73 9f       	mul	r23, r19
    22b0:	f0 01       	movw	r30, r0
    22b2:	82 9f       	mul	r24, r18
    22b4:	e0 0d       	add	r30, r0
    22b6:	f1 1d       	adc	r31, r1
    22b8:	64 9f       	mul	r22, r20
    22ba:	e0 0d       	add	r30, r0
    22bc:	f1 1d       	adc	r31, r1
    22be:	92 9f       	mul	r25, r18
    22c0:	f0 0d       	add	r31, r0
    22c2:	83 9f       	mul	r24, r19
    22c4:	f0 0d       	add	r31, r0
    22c6:	74 9f       	mul	r23, r20
    22c8:	f0 0d       	add	r31, r0
    22ca:	65 9f       	mul	r22, r21
    22cc:	f0 0d       	add	r31, r0
    22ce:	99 27       	eor	r25, r25
    22d0:	72 9f       	mul	r23, r18
    22d2:	b0 0d       	add	r27, r0
    22d4:	e1 1d       	adc	r30, r1
    22d6:	f9 1f       	adc	r31, r25
    22d8:	63 9f       	mul	r22, r19
    22da:	b0 0d       	add	r27, r0
    22dc:	e1 1d       	adc	r30, r1
    22de:	f9 1f       	adc	r31, r25
    22e0:	bd 01       	movw	r22, r26
    22e2:	cf 01       	movw	r24, r30
    22e4:	11 24       	eor	r1, r1
    22e6:	08 95       	ret

000022e8 <__prologue_saves__>:
    22e8:	2f 92       	push	r2
    22ea:	3f 92       	push	r3
    22ec:	4f 92       	push	r4
    22ee:	5f 92       	push	r5
    22f0:	6f 92       	push	r6
    22f2:	7f 92       	push	r7
    22f4:	8f 92       	push	r8
    22f6:	9f 92       	push	r9
    22f8:	af 92       	push	r10
    22fa:	bf 92       	push	r11
    22fc:	cf 92       	push	r12
    22fe:	df 92       	push	r13
    2300:	ef 92       	push	r14
    2302:	ff 92       	push	r15
    2304:	0f 93       	push	r16
    2306:	1f 93       	push	r17
    2308:	cf 93       	push	r28
    230a:	df 93       	push	r29
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	ca 1b       	sub	r28, r26
    2312:	db 0b       	sbc	r29, r27
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	f8 94       	cli
    2318:	de bf       	out	0x3e, r29	; 62
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	cd bf       	out	0x3d, r28	; 61
    231e:	09 94       	ijmp

00002320 <__epilogue_restores__>:
    2320:	2a 88       	ldd	r2, Y+18	; 0x12
    2322:	39 88       	ldd	r3, Y+17	; 0x11
    2324:	48 88       	ldd	r4, Y+16	; 0x10
    2326:	5f 84       	ldd	r5, Y+15	; 0x0f
    2328:	6e 84       	ldd	r6, Y+14	; 0x0e
    232a:	7d 84       	ldd	r7, Y+13	; 0x0d
    232c:	8c 84       	ldd	r8, Y+12	; 0x0c
    232e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2330:	aa 84       	ldd	r10, Y+10	; 0x0a
    2332:	b9 84       	ldd	r11, Y+9	; 0x09
    2334:	c8 84       	ldd	r12, Y+8	; 0x08
    2336:	df 80       	ldd	r13, Y+7	; 0x07
    2338:	ee 80       	ldd	r14, Y+6	; 0x06
    233a:	fd 80       	ldd	r15, Y+5	; 0x05
    233c:	0c 81       	ldd	r16, Y+4	; 0x04
    233e:	1b 81       	ldd	r17, Y+3	; 0x03
    2340:	aa 81       	ldd	r26, Y+2	; 0x02
    2342:	b9 81       	ldd	r27, Y+1	; 0x01
    2344:	ce 0f       	add	r28, r30
    2346:	d1 1d       	adc	r29, r1
    2348:	0f b6       	in	r0, 0x3f	; 63
    234a:	f8 94       	cli
    234c:	de bf       	out	0x3e, r29	; 62
    234e:	0f be       	out	0x3f, r0	; 63
    2350:	cd bf       	out	0x3d, r28	; 61
    2352:	ed 01       	movw	r28, r26
    2354:	08 95       	ret

00002356 <_exit>:
    2356:	f8 94       	cli

00002358 <__stop_program>:
    2358:	ff cf       	rjmp	.-2      	; 0x2358 <__stop_program>
