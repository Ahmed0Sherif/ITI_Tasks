
D17_Task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  000028ac  00002940  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  00800168  00800168  00002a48  2**0
                  ALLOC
  3 .stab         00002028  00000000  00000000  00002a48  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000128c  00000000  00000000  00004a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00005cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f6  00000000  00000000  00005e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002393  00000000  00000000  00006092  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001374  00000000  00000000  00008425  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001238  00000000  00000000  00009799  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a9d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ff  00000000  00000000  0000ab94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009de  00000000  00000000  0000ae93  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b871  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8f 12 	jmp	0x251e	; 0x251e <__vector_1>
       8:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <__vector_2>
       c:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <__vector_3>
      10:	0c 94 56 0d 	jmp	0x1aac	; 0x1aac <__vector_4>
      14:	0c 94 eb 0c 	jmp	0x19d6	; 0x19d6 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__vector_10>
      2c:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a4 39       	cpi	r26, 0x94	; 148
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec ea       	ldi	r30, 0xAC	; 172
      78:	f8 e2       	ldi	r31, 0x28	; 40
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 62 13 	call	0x26c4	; 0x26c4 <main>
      8a:	0c 94 54 14 	jmp	0x28a8	; 0x28a8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 83 04 	call	0x906	; 0x906 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 83 04 	call	0x906	; 0x906 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1d 14 	jmp	0x283a	; 0x283a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 29 14 	jmp	0x2852	; 0x2852 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 45 14 	jmp	0x288a	; 0x288a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 29 14 	jmp	0x2852	; 0x2852 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 45 14 	jmp	0x288a	; 0x288a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1d 14 	jmp	0x283a	; 0x283a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 25 14 	jmp	0x284a	; 0x284a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 41 14 	jmp	0x2882	; 0x2882 <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 29 14 	jmp	0x2852	; 0x2852 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 45 14 	jmp	0x288a	; 0x288a <__epilogue_restores__+0x18>

000007ea <__lesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 29 14 	jmp	0x2852	; 0x2852 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__lesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__lesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__lesf2+0x58>
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 45 14 	jmp	0x288a	; 0x288a <__epilogue_restores__+0x18>

0000084a <__floatsisf>:
     84a:	a8 e0       	ldi	r26, 0x08	; 8
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 26 14 	jmp	0x284c	; 0x284c <__prologue_saves__+0x12>
     856:	9b 01       	movw	r18, r22
     858:	ac 01       	movw	r20, r24
     85a:	83 e0       	ldi	r24, 0x03	; 3
     85c:	89 83       	std	Y+1, r24	; 0x01
     85e:	da 01       	movw	r26, r20
     860:	c9 01       	movw	r24, r18
     862:	88 27       	eor	r24, r24
     864:	b7 fd       	sbrc	r27, 7
     866:	83 95       	inc	r24
     868:	99 27       	eor	r25, r25
     86a:	aa 27       	eor	r26, r26
     86c:	bb 27       	eor	r27, r27
     86e:	b8 2e       	mov	r11, r24
     870:	21 15       	cp	r18, r1
     872:	31 05       	cpc	r19, r1
     874:	41 05       	cpc	r20, r1
     876:	51 05       	cpc	r21, r1
     878:	19 f4       	brne	.+6      	; 0x880 <__stack+0x21>
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	89 83       	std	Y+1, r24	; 0x01
     87e:	3a c0       	rjmp	.+116    	; 0x8f4 <__stack+0x95>
     880:	88 23       	and	r24, r24
     882:	a9 f0       	breq	.+42     	; 0x8ae <__stack+0x4f>
     884:	20 30       	cpi	r18, 0x00	; 0
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	38 07       	cpc	r19, r24
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	48 07       	cpc	r20, r24
     88e:	80 e8       	ldi	r24, 0x80	; 128
     890:	58 07       	cpc	r21, r24
     892:	29 f4       	brne	.+10     	; 0x89e <__stack+0x3f>
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	9f ec       	ldi	r25, 0xCF	; 207
     89c:	30 c0       	rjmp	.+96     	; 0x8fe <__stack+0x9f>
     89e:	ee 24       	eor	r14, r14
     8a0:	ff 24       	eor	r15, r15
     8a2:	87 01       	movw	r16, r14
     8a4:	e2 1a       	sub	r14, r18
     8a6:	f3 0a       	sbc	r15, r19
     8a8:	04 0b       	sbc	r16, r20
     8aa:	15 0b       	sbc	r17, r21
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <__stack+0x53>
     8ae:	79 01       	movw	r14, r18
     8b0:	8a 01       	movw	r16, r20
     8b2:	8e e1       	ldi	r24, 0x1E	; 30
     8b4:	c8 2e       	mov	r12, r24
     8b6:	d1 2c       	mov	r13, r1
     8b8:	dc 82       	std	Y+4, r13	; 0x04
     8ba:	cb 82       	std	Y+3, r12	; 0x03
     8bc:	ed 82       	std	Y+5, r14	; 0x05
     8be:	fe 82       	std	Y+6, r15	; 0x06
     8c0:	0f 83       	std	Y+7, r16	; 0x07
     8c2:	18 87       	std	Y+8, r17	; 0x08
     8c4:	c8 01       	movw	r24, r16
     8c6:	b7 01       	movw	r22, r14
     8c8:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__clzsi2>
     8cc:	01 97       	sbiw	r24, 0x01	; 1
     8ce:	18 16       	cp	r1, r24
     8d0:	19 06       	cpc	r1, r25
     8d2:	84 f4       	brge	.+32     	; 0x8f4 <__stack+0x95>
     8d4:	08 2e       	mov	r0, r24
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	ee 0c       	add	r14, r14
     8da:	ff 1c       	adc	r15, r15
     8dc:	00 1f       	adc	r16, r16
     8de:	11 1f       	adc	r17, r17
     8e0:	0a 94       	dec	r0
     8e2:	d2 f7       	brpl	.-12     	; 0x8d8 <__stack+0x79>
     8e4:	ed 82       	std	Y+5, r14	; 0x05
     8e6:	fe 82       	std	Y+6, r15	; 0x06
     8e8:	0f 83       	std	Y+7, r16	; 0x07
     8ea:	18 87       	std	Y+8, r17	; 0x08
     8ec:	c8 1a       	sub	r12, r24
     8ee:	d9 0a       	sbc	r13, r25
     8f0:	dc 82       	std	Y+4, r13	; 0x04
     8f2:	cb 82       	std	Y+3, r12	; 0x03
     8f4:	ba 82       	std	Y+2, r11	; 0x02
     8f6:	ce 01       	movw	r24, r28
     8f8:	01 96       	adiw	r24, 0x01	; 1
     8fa:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     8fe:	28 96       	adiw	r28, 0x08	; 8
     900:	e9 e0       	ldi	r30, 0x09	; 9
     902:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__epilogue_restores__+0x12>

00000906 <__fixsfsi>:
     906:	ac e0       	ldi	r26, 0x0C	; 12
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	e9 e8       	ldi	r30, 0x89	; 137
     90c:	f4 e0       	ldi	r31, 0x04	; 4
     90e:	0c 94 2d 14 	jmp	0x285a	; 0x285a <__prologue_saves__+0x20>
     912:	69 83       	std	Y+1, r22	; 0x01
     914:	7a 83       	std	Y+2, r23	; 0x02
     916:	8b 83       	std	Y+3, r24	; 0x03
     918:	9c 83       	std	Y+4, r25	; 0x04
     91a:	ce 01       	movw	r24, r28
     91c:	01 96       	adiw	r24, 0x01	; 1
     91e:	be 01       	movw	r22, r28
     920:	6b 5f       	subi	r22, 0xFB	; 251
     922:	7f 4f       	sbci	r23, 0xFF	; 255
     924:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     928:	8d 81       	ldd	r24, Y+5	; 0x05
     92a:	82 30       	cpi	r24, 0x02	; 2
     92c:	61 f1       	breq	.+88     	; 0x986 <__fixsfsi+0x80>
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	50 f1       	brcs	.+84     	; 0x986 <__fixsfsi+0x80>
     932:	84 30       	cpi	r24, 0x04	; 4
     934:	21 f4       	brne	.+8      	; 0x93e <__fixsfsi+0x38>
     936:	8e 81       	ldd	r24, Y+6	; 0x06
     938:	88 23       	and	r24, r24
     93a:	51 f1       	breq	.+84     	; 0x990 <__fixsfsi+0x8a>
     93c:	2e c0       	rjmp	.+92     	; 0x99a <__fixsfsi+0x94>
     93e:	2f 81       	ldd	r18, Y+7	; 0x07
     940:	38 85       	ldd	r19, Y+8	; 0x08
     942:	37 fd       	sbrc	r19, 7
     944:	20 c0       	rjmp	.+64     	; 0x986 <__fixsfsi+0x80>
     946:	6e 81       	ldd	r22, Y+6	; 0x06
     948:	2f 31       	cpi	r18, 0x1F	; 31
     94a:	31 05       	cpc	r19, r1
     94c:	1c f0       	brlt	.+6      	; 0x954 <__fixsfsi+0x4e>
     94e:	66 23       	and	r22, r22
     950:	f9 f0       	breq	.+62     	; 0x990 <__fixsfsi+0x8a>
     952:	23 c0       	rjmp	.+70     	; 0x99a <__fixsfsi+0x94>
     954:	8e e1       	ldi	r24, 0x1E	; 30
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	82 1b       	sub	r24, r18
     95a:	93 0b       	sbc	r25, r19
     95c:	29 85       	ldd	r18, Y+9	; 0x09
     95e:	3a 85       	ldd	r19, Y+10	; 0x0a
     960:	4b 85       	ldd	r20, Y+11	; 0x0b
     962:	5c 85       	ldd	r21, Y+12	; 0x0c
     964:	04 c0       	rjmp	.+8      	; 0x96e <__fixsfsi+0x68>
     966:	56 95       	lsr	r21
     968:	47 95       	ror	r20
     96a:	37 95       	ror	r19
     96c:	27 95       	ror	r18
     96e:	8a 95       	dec	r24
     970:	d2 f7       	brpl	.-12     	; 0x966 <__fixsfsi+0x60>
     972:	66 23       	and	r22, r22
     974:	b1 f0       	breq	.+44     	; 0x9a2 <__fixsfsi+0x9c>
     976:	50 95       	com	r21
     978:	40 95       	com	r20
     97a:	30 95       	com	r19
     97c:	21 95       	neg	r18
     97e:	3f 4f       	sbci	r19, 0xFF	; 255
     980:	4f 4f       	sbci	r20, 0xFF	; 255
     982:	5f 4f       	sbci	r21, 0xFF	; 255
     984:	0e c0       	rjmp	.+28     	; 0x9a2 <__fixsfsi+0x9c>
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	40 e0       	ldi	r20, 0x00	; 0
     98c:	50 e0       	ldi	r21, 0x00	; 0
     98e:	09 c0       	rjmp	.+18     	; 0x9a2 <__fixsfsi+0x9c>
     990:	2f ef       	ldi	r18, 0xFF	; 255
     992:	3f ef       	ldi	r19, 0xFF	; 255
     994:	4f ef       	ldi	r20, 0xFF	; 255
     996:	5f e7       	ldi	r21, 0x7F	; 127
     998:	04 c0       	rjmp	.+8      	; 0x9a2 <__fixsfsi+0x9c>
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	40 e0       	ldi	r20, 0x00	; 0
     9a0:	50 e8       	ldi	r21, 0x80	; 128
     9a2:	b9 01       	movw	r22, r18
     9a4:	ca 01       	movw	r24, r20
     9a6:	2c 96       	adiw	r28, 0x0c	; 12
     9a8:	e2 e0       	ldi	r30, 0x02	; 2
     9aa:	0c 94 49 14 	jmp	0x2892	; 0x2892 <__epilogue_restores__+0x20>

000009ae <__floatunsisf>:
     9ae:	a8 e0       	ldi	r26, 0x08	; 8
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	ed ed       	ldi	r30, 0xDD	; 221
     9b4:	f4 e0       	ldi	r31, 0x04	; 4
     9b6:	0c 94 25 14 	jmp	0x284a	; 0x284a <__prologue_saves__+0x10>
     9ba:	7b 01       	movw	r14, r22
     9bc:	8c 01       	movw	r16, r24
     9be:	61 15       	cp	r22, r1
     9c0:	71 05       	cpc	r23, r1
     9c2:	81 05       	cpc	r24, r1
     9c4:	91 05       	cpc	r25, r1
     9c6:	19 f4       	brne	.+6      	; 0x9ce <__floatunsisf+0x20>
     9c8:	82 e0       	ldi	r24, 0x02	; 2
     9ca:	89 83       	std	Y+1, r24	; 0x01
     9cc:	60 c0       	rjmp	.+192    	; 0xa8e <__floatunsisf+0xe0>
     9ce:	83 e0       	ldi	r24, 0x03	; 3
     9d0:	89 83       	std	Y+1, r24	; 0x01
     9d2:	8e e1       	ldi	r24, 0x1E	; 30
     9d4:	c8 2e       	mov	r12, r24
     9d6:	d1 2c       	mov	r13, r1
     9d8:	dc 82       	std	Y+4, r13	; 0x04
     9da:	cb 82       	std	Y+3, r12	; 0x03
     9dc:	ed 82       	std	Y+5, r14	; 0x05
     9de:	fe 82       	std	Y+6, r15	; 0x06
     9e0:	0f 83       	std	Y+7, r16	; 0x07
     9e2:	18 87       	std	Y+8, r17	; 0x08
     9e4:	c8 01       	movw	r24, r16
     9e6:	b7 01       	movw	r22, r14
     9e8:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__clzsi2>
     9ec:	fc 01       	movw	r30, r24
     9ee:	31 97       	sbiw	r30, 0x01	; 1
     9f0:	f7 ff       	sbrs	r31, 7
     9f2:	3b c0       	rjmp	.+118    	; 0xa6a <__floatunsisf+0xbc>
     9f4:	22 27       	eor	r18, r18
     9f6:	33 27       	eor	r19, r19
     9f8:	2e 1b       	sub	r18, r30
     9fa:	3f 0b       	sbc	r19, r31
     9fc:	57 01       	movw	r10, r14
     9fe:	68 01       	movw	r12, r16
     a00:	02 2e       	mov	r0, r18
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__floatunsisf+0x5e>
     a04:	d6 94       	lsr	r13
     a06:	c7 94       	ror	r12
     a08:	b7 94       	ror	r11
     a0a:	a7 94       	ror	r10
     a0c:	0a 94       	dec	r0
     a0e:	d2 f7       	brpl	.-12     	; 0xa04 <__floatunsisf+0x56>
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	a0 e0       	ldi	r26, 0x00	; 0
     a1e:	b0 e0       	ldi	r27, 0x00	; 0
     a20:	04 c0       	rjmp	.+8      	; 0xa2a <__floatunsisf+0x7c>
     a22:	88 0f       	add	r24, r24
     a24:	99 1f       	adc	r25, r25
     a26:	aa 1f       	adc	r26, r26
     a28:	bb 1f       	adc	r27, r27
     a2a:	2a 95       	dec	r18
     a2c:	d2 f7       	brpl	.-12     	; 0xa22 <__floatunsisf+0x74>
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	a1 09       	sbc	r26, r1
     a32:	b1 09       	sbc	r27, r1
     a34:	8e 21       	and	r24, r14
     a36:	9f 21       	and	r25, r15
     a38:	a0 23       	and	r26, r16
     a3a:	b1 23       	and	r27, r17
     a3c:	00 97       	sbiw	r24, 0x00	; 0
     a3e:	a1 05       	cpc	r26, r1
     a40:	b1 05       	cpc	r27, r1
     a42:	21 f0       	breq	.+8      	; 0xa4c <__floatunsisf+0x9e>
     a44:	41 e0       	ldi	r20, 0x01	; 1
     a46:	50 e0       	ldi	r21, 0x00	; 0
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	4a 29       	or	r20, r10
     a4e:	5b 29       	or	r21, r11
     a50:	6c 29       	or	r22, r12
     a52:	7d 29       	or	r23, r13
     a54:	4d 83       	std	Y+5, r20	; 0x05
     a56:	5e 83       	std	Y+6, r21	; 0x06
     a58:	6f 83       	std	Y+7, r22	; 0x07
     a5a:	78 87       	std	Y+8, r23	; 0x08
     a5c:	8e e1       	ldi	r24, 0x1E	; 30
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	8e 1b       	sub	r24, r30
     a62:	9f 0b       	sbc	r25, r31
     a64:	9c 83       	std	Y+4, r25	; 0x04
     a66:	8b 83       	std	Y+3, r24	; 0x03
     a68:	12 c0       	rjmp	.+36     	; 0xa8e <__floatunsisf+0xe0>
     a6a:	30 97       	sbiw	r30, 0x00	; 0
     a6c:	81 f0       	breq	.+32     	; 0xa8e <__floatunsisf+0xe0>
     a6e:	0e 2e       	mov	r0, r30
     a70:	04 c0       	rjmp	.+8      	; 0xa7a <__floatunsisf+0xcc>
     a72:	ee 0c       	add	r14, r14
     a74:	ff 1c       	adc	r15, r15
     a76:	00 1f       	adc	r16, r16
     a78:	11 1f       	adc	r17, r17
     a7a:	0a 94       	dec	r0
     a7c:	d2 f7       	brpl	.-12     	; 0xa72 <__floatunsisf+0xc4>
     a7e:	ed 82       	std	Y+5, r14	; 0x05
     a80:	fe 82       	std	Y+6, r15	; 0x06
     a82:	0f 83       	std	Y+7, r16	; 0x07
     a84:	18 87       	std	Y+8, r17	; 0x08
     a86:	ce 1a       	sub	r12, r30
     a88:	df 0a       	sbc	r13, r31
     a8a:	dc 82       	std	Y+4, r13	; 0x04
     a8c:	cb 82       	std	Y+3, r12	; 0x03
     a8e:	1a 82       	std	Y+2, r1	; 0x02
     a90:	ce 01       	movw	r24, r28
     a92:	01 96       	adiw	r24, 0x01	; 1
     a94:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     a98:	28 96       	adiw	r28, 0x08	; 8
     a9a:	ea e0       	ldi	r30, 0x0A	; 10
     a9c:	0c 94 41 14 	jmp	0x2882	; 0x2882 <__epilogue_restores__+0x10>

00000aa0 <__clzsi2>:
     aa0:	ef 92       	push	r14
     aa2:	ff 92       	push	r15
     aa4:	0f 93       	push	r16
     aa6:	1f 93       	push	r17
     aa8:	7b 01       	movw	r14, r22
     aaa:	8c 01       	movw	r16, r24
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	e8 16       	cp	r14, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	f8 06       	cpc	r15, r24
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	08 07       	cpc	r16, r24
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	18 07       	cpc	r17, r24
     abc:	88 f4       	brcc	.+34     	; 0xae0 <__clzsi2+0x40>
     abe:	8f ef       	ldi	r24, 0xFF	; 255
     ac0:	e8 16       	cp	r14, r24
     ac2:	f1 04       	cpc	r15, r1
     ac4:	01 05       	cpc	r16, r1
     ac6:	11 05       	cpc	r17, r1
     ac8:	31 f0       	breq	.+12     	; 0xad6 <__clzsi2+0x36>
     aca:	28 f0       	brcs	.+10     	; 0xad6 <__clzsi2+0x36>
     acc:	88 e0       	ldi	r24, 0x08	; 8
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	a0 e0       	ldi	r26, 0x00	; 0
     ad2:	b0 e0       	ldi	r27, 0x00	; 0
     ad4:	17 c0       	rjmp	.+46     	; 0xb04 <__clzsi2+0x64>
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	a0 e0       	ldi	r26, 0x00	; 0
     adc:	b0 e0       	ldi	r27, 0x00	; 0
     ade:	12 c0       	rjmp	.+36     	; 0xb04 <__clzsi2+0x64>
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	e8 16       	cp	r14, r24
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	f8 06       	cpc	r15, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	08 07       	cpc	r16, r24
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	18 07       	cpc	r17, r24
     af0:	28 f0       	brcs	.+10     	; 0xafc <__clzsi2+0x5c>
     af2:	88 e1       	ldi	r24, 0x18	; 24
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	a0 e0       	ldi	r26, 0x00	; 0
     af8:	b0 e0       	ldi	r27, 0x00	; 0
     afa:	04 c0       	rjmp	.+8      	; 0xb04 <__clzsi2+0x64>
     afc:	80 e1       	ldi	r24, 0x10	; 16
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	a0 e0       	ldi	r26, 0x00	; 0
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	20 e2       	ldi	r18, 0x20	; 32
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	40 e0       	ldi	r20, 0x00	; 0
     b0a:	50 e0       	ldi	r21, 0x00	; 0
     b0c:	28 1b       	sub	r18, r24
     b0e:	39 0b       	sbc	r19, r25
     b10:	4a 0b       	sbc	r20, r26
     b12:	5b 0b       	sbc	r21, r27
     b14:	04 c0       	rjmp	.+8      	; 0xb1e <__clzsi2+0x7e>
     b16:	16 95       	lsr	r17
     b18:	07 95       	ror	r16
     b1a:	f7 94       	ror	r15
     b1c:	e7 94       	ror	r14
     b1e:	8a 95       	dec	r24
     b20:	d2 f7       	brpl	.-12     	; 0xb16 <__clzsi2+0x76>
     b22:	f7 01       	movw	r30, r14
     b24:	e8 59       	subi	r30, 0x98	; 152
     b26:	ff 4f       	sbci	r31, 0xFF	; 255
     b28:	80 81       	ld	r24, Z
     b2a:	28 1b       	sub	r18, r24
     b2c:	31 09       	sbc	r19, r1
     b2e:	41 09       	sbc	r20, r1
     b30:	51 09       	sbc	r21, r1
     b32:	c9 01       	movw	r24, r18
     b34:	1f 91       	pop	r17
     b36:	0f 91       	pop	r16
     b38:	ff 90       	pop	r15
     b3a:	ef 90       	pop	r14
     b3c:	08 95       	ret

00000b3e <__pack_f>:
     b3e:	df 92       	push	r13
     b40:	ef 92       	push	r14
     b42:	ff 92       	push	r15
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	fc 01       	movw	r30, r24
     b4a:	e4 80       	ldd	r14, Z+4	; 0x04
     b4c:	f5 80       	ldd	r15, Z+5	; 0x05
     b4e:	06 81       	ldd	r16, Z+6	; 0x06
     b50:	17 81       	ldd	r17, Z+7	; 0x07
     b52:	d1 80       	ldd	r13, Z+1	; 0x01
     b54:	80 81       	ld	r24, Z
     b56:	82 30       	cpi	r24, 0x02	; 2
     b58:	48 f4       	brcc	.+18     	; 0xb6c <__pack_f+0x2e>
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	a0 e1       	ldi	r26, 0x10	; 16
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	e8 2a       	or	r14, r24
     b64:	f9 2a       	or	r15, r25
     b66:	0a 2b       	or	r16, r26
     b68:	1b 2b       	or	r17, r27
     b6a:	a5 c0       	rjmp	.+330    	; 0xcb6 <__pack_f+0x178>
     b6c:	84 30       	cpi	r24, 0x04	; 4
     b6e:	09 f4       	brne	.+2      	; 0xb72 <__pack_f+0x34>
     b70:	9f c0       	rjmp	.+318    	; 0xcb0 <__pack_f+0x172>
     b72:	82 30       	cpi	r24, 0x02	; 2
     b74:	21 f4       	brne	.+8      	; 0xb7e <__pack_f+0x40>
     b76:	ee 24       	eor	r14, r14
     b78:	ff 24       	eor	r15, r15
     b7a:	87 01       	movw	r16, r14
     b7c:	05 c0       	rjmp	.+10     	; 0xb88 <__pack_f+0x4a>
     b7e:	e1 14       	cp	r14, r1
     b80:	f1 04       	cpc	r15, r1
     b82:	01 05       	cpc	r16, r1
     b84:	11 05       	cpc	r17, r1
     b86:	19 f4       	brne	.+6      	; 0xb8e <__pack_f+0x50>
     b88:	e0 e0       	ldi	r30, 0x00	; 0
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	96 c0       	rjmp	.+300    	; 0xcba <__pack_f+0x17c>
     b8e:	62 81       	ldd	r22, Z+2	; 0x02
     b90:	73 81       	ldd	r23, Z+3	; 0x03
     b92:	9f ef       	ldi	r25, 0xFF	; 255
     b94:	62 38       	cpi	r22, 0x82	; 130
     b96:	79 07       	cpc	r23, r25
     b98:	0c f0       	brlt	.+2      	; 0xb9c <__pack_f+0x5e>
     b9a:	5b c0       	rjmp	.+182    	; 0xc52 <__pack_f+0x114>
     b9c:	22 e8       	ldi	r18, 0x82	; 130
     b9e:	3f ef       	ldi	r19, 0xFF	; 255
     ba0:	26 1b       	sub	r18, r22
     ba2:	37 0b       	sbc	r19, r23
     ba4:	2a 31       	cpi	r18, 0x1A	; 26
     ba6:	31 05       	cpc	r19, r1
     ba8:	2c f0       	brlt	.+10     	; 0xbb4 <__pack_f+0x76>
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	50 e0       	ldi	r21, 0x00	; 0
     bb2:	2a c0       	rjmp	.+84     	; 0xc08 <__pack_f+0xca>
     bb4:	b8 01       	movw	r22, r16
     bb6:	a7 01       	movw	r20, r14
     bb8:	02 2e       	mov	r0, r18
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__pack_f+0x86>
     bbc:	76 95       	lsr	r23
     bbe:	67 95       	ror	r22
     bc0:	57 95       	ror	r21
     bc2:	47 95       	ror	r20
     bc4:	0a 94       	dec	r0
     bc6:	d2 f7       	brpl	.-12     	; 0xbbc <__pack_f+0x7e>
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	a0 e0       	ldi	r26, 0x00	; 0
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	04 c0       	rjmp	.+8      	; 0xbda <__pack_f+0x9c>
     bd2:	88 0f       	add	r24, r24
     bd4:	99 1f       	adc	r25, r25
     bd6:	aa 1f       	adc	r26, r26
     bd8:	bb 1f       	adc	r27, r27
     bda:	2a 95       	dec	r18
     bdc:	d2 f7       	brpl	.-12     	; 0xbd2 <__pack_f+0x94>
     bde:	01 97       	sbiw	r24, 0x01	; 1
     be0:	a1 09       	sbc	r26, r1
     be2:	b1 09       	sbc	r27, r1
     be4:	8e 21       	and	r24, r14
     be6:	9f 21       	and	r25, r15
     be8:	a0 23       	and	r26, r16
     bea:	b1 23       	and	r27, r17
     bec:	00 97       	sbiw	r24, 0x00	; 0
     bee:	a1 05       	cpc	r26, r1
     bf0:	b1 05       	cpc	r27, r1
     bf2:	21 f0       	breq	.+8      	; 0xbfc <__pack_f+0xbe>
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	a0 e0       	ldi	r26, 0x00	; 0
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	9a 01       	movw	r18, r20
     bfe:	ab 01       	movw	r20, r22
     c00:	28 2b       	or	r18, r24
     c02:	39 2b       	or	r19, r25
     c04:	4a 2b       	or	r20, r26
     c06:	5b 2b       	or	r21, r27
     c08:	da 01       	movw	r26, r20
     c0a:	c9 01       	movw	r24, r18
     c0c:	8f 77       	andi	r24, 0x7F	; 127
     c0e:	90 70       	andi	r25, 0x00	; 0
     c10:	a0 70       	andi	r26, 0x00	; 0
     c12:	b0 70       	andi	r27, 0x00	; 0
     c14:	80 34       	cpi	r24, 0x40	; 64
     c16:	91 05       	cpc	r25, r1
     c18:	a1 05       	cpc	r26, r1
     c1a:	b1 05       	cpc	r27, r1
     c1c:	39 f4       	brne	.+14     	; 0xc2c <__pack_f+0xee>
     c1e:	27 ff       	sbrs	r18, 7
     c20:	09 c0       	rjmp	.+18     	; 0xc34 <__pack_f+0xf6>
     c22:	20 5c       	subi	r18, 0xC0	; 192
     c24:	3f 4f       	sbci	r19, 0xFF	; 255
     c26:	4f 4f       	sbci	r20, 0xFF	; 255
     c28:	5f 4f       	sbci	r21, 0xFF	; 255
     c2a:	04 c0       	rjmp	.+8      	; 0xc34 <__pack_f+0xf6>
     c2c:	21 5c       	subi	r18, 0xC1	; 193
     c2e:	3f 4f       	sbci	r19, 0xFF	; 255
     c30:	4f 4f       	sbci	r20, 0xFF	; 255
     c32:	5f 4f       	sbci	r21, 0xFF	; 255
     c34:	e0 e0       	ldi	r30, 0x00	; 0
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	20 30       	cpi	r18, 0x00	; 0
     c3a:	a0 e0       	ldi	r26, 0x00	; 0
     c3c:	3a 07       	cpc	r19, r26
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	4a 07       	cpc	r20, r26
     c42:	a0 e4       	ldi	r26, 0x40	; 64
     c44:	5a 07       	cpc	r21, r26
     c46:	10 f0       	brcs	.+4      	; 0xc4c <__pack_f+0x10e>
     c48:	e1 e0       	ldi	r30, 0x01	; 1
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	79 01       	movw	r14, r18
     c4e:	8a 01       	movw	r16, r20
     c50:	27 c0       	rjmp	.+78     	; 0xca0 <__pack_f+0x162>
     c52:	60 38       	cpi	r22, 0x80	; 128
     c54:	71 05       	cpc	r23, r1
     c56:	64 f5       	brge	.+88     	; 0xcb0 <__pack_f+0x172>
     c58:	fb 01       	movw	r30, r22
     c5a:	e1 58       	subi	r30, 0x81	; 129
     c5c:	ff 4f       	sbci	r31, 0xFF	; 255
     c5e:	d8 01       	movw	r26, r16
     c60:	c7 01       	movw	r24, r14
     c62:	8f 77       	andi	r24, 0x7F	; 127
     c64:	90 70       	andi	r25, 0x00	; 0
     c66:	a0 70       	andi	r26, 0x00	; 0
     c68:	b0 70       	andi	r27, 0x00	; 0
     c6a:	80 34       	cpi	r24, 0x40	; 64
     c6c:	91 05       	cpc	r25, r1
     c6e:	a1 05       	cpc	r26, r1
     c70:	b1 05       	cpc	r27, r1
     c72:	39 f4       	brne	.+14     	; 0xc82 <__pack_f+0x144>
     c74:	e7 fe       	sbrs	r14, 7
     c76:	0d c0       	rjmp	.+26     	; 0xc92 <__pack_f+0x154>
     c78:	80 e4       	ldi	r24, 0x40	; 64
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	a0 e0       	ldi	r26, 0x00	; 0
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	04 c0       	rjmp	.+8      	; 0xc8a <__pack_f+0x14c>
     c82:	8f e3       	ldi	r24, 0x3F	; 63
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	a0 e0       	ldi	r26, 0x00	; 0
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e8 0e       	add	r14, r24
     c8c:	f9 1e       	adc	r15, r25
     c8e:	0a 1f       	adc	r16, r26
     c90:	1b 1f       	adc	r17, r27
     c92:	17 ff       	sbrs	r17, 7
     c94:	05 c0       	rjmp	.+10     	; 0xca0 <__pack_f+0x162>
     c96:	16 95       	lsr	r17
     c98:	07 95       	ror	r16
     c9a:	f7 94       	ror	r15
     c9c:	e7 94       	ror	r14
     c9e:	31 96       	adiw	r30, 0x01	; 1
     ca0:	87 e0       	ldi	r24, 0x07	; 7
     ca2:	16 95       	lsr	r17
     ca4:	07 95       	ror	r16
     ca6:	f7 94       	ror	r15
     ca8:	e7 94       	ror	r14
     caa:	8a 95       	dec	r24
     cac:	d1 f7       	brne	.-12     	; 0xca2 <__pack_f+0x164>
     cae:	05 c0       	rjmp	.+10     	; 0xcba <__pack_f+0x17c>
     cb0:	ee 24       	eor	r14, r14
     cb2:	ff 24       	eor	r15, r15
     cb4:	87 01       	movw	r16, r14
     cb6:	ef ef       	ldi	r30, 0xFF	; 255
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	6e 2f       	mov	r22, r30
     cbc:	67 95       	ror	r22
     cbe:	66 27       	eor	r22, r22
     cc0:	67 95       	ror	r22
     cc2:	90 2f       	mov	r25, r16
     cc4:	9f 77       	andi	r25, 0x7F	; 127
     cc6:	d7 94       	ror	r13
     cc8:	dd 24       	eor	r13, r13
     cca:	d7 94       	ror	r13
     ccc:	8e 2f       	mov	r24, r30
     cce:	86 95       	lsr	r24
     cd0:	49 2f       	mov	r20, r25
     cd2:	46 2b       	or	r20, r22
     cd4:	58 2f       	mov	r21, r24
     cd6:	5d 29       	or	r21, r13
     cd8:	b7 01       	movw	r22, r14
     cda:	ca 01       	movw	r24, r20
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	ff 90       	pop	r15
     ce2:	ef 90       	pop	r14
     ce4:	df 90       	pop	r13
     ce6:	08 95       	ret

00000ce8 <__unpack_f>:
     ce8:	fc 01       	movw	r30, r24
     cea:	db 01       	movw	r26, r22
     cec:	40 81       	ld	r20, Z
     cee:	51 81       	ldd	r21, Z+1	; 0x01
     cf0:	22 81       	ldd	r18, Z+2	; 0x02
     cf2:	62 2f       	mov	r22, r18
     cf4:	6f 77       	andi	r22, 0x7F	; 127
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	22 1f       	adc	r18, r18
     cfa:	22 27       	eor	r18, r18
     cfc:	22 1f       	adc	r18, r18
     cfe:	93 81       	ldd	r25, Z+3	; 0x03
     d00:	89 2f       	mov	r24, r25
     d02:	88 0f       	add	r24, r24
     d04:	82 2b       	or	r24, r18
     d06:	28 2f       	mov	r18, r24
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	99 1f       	adc	r25, r25
     d0c:	99 27       	eor	r25, r25
     d0e:	99 1f       	adc	r25, r25
     d10:	11 96       	adiw	r26, 0x01	; 1
     d12:	9c 93       	st	X, r25
     d14:	11 97       	sbiw	r26, 0x01	; 1
     d16:	21 15       	cp	r18, r1
     d18:	31 05       	cpc	r19, r1
     d1a:	a9 f5       	brne	.+106    	; 0xd86 <__unpack_f+0x9e>
     d1c:	41 15       	cp	r20, r1
     d1e:	51 05       	cpc	r21, r1
     d20:	61 05       	cpc	r22, r1
     d22:	71 05       	cpc	r23, r1
     d24:	11 f4       	brne	.+4      	; 0xd2a <__unpack_f+0x42>
     d26:	82 e0       	ldi	r24, 0x02	; 2
     d28:	37 c0       	rjmp	.+110    	; 0xd98 <__unpack_f+0xb0>
     d2a:	82 e8       	ldi	r24, 0x82	; 130
     d2c:	9f ef       	ldi	r25, 0xFF	; 255
     d2e:	13 96       	adiw	r26, 0x03	; 3
     d30:	9c 93       	st	X, r25
     d32:	8e 93       	st	-X, r24
     d34:	12 97       	sbiw	r26, 0x02	; 2
     d36:	9a 01       	movw	r18, r20
     d38:	ab 01       	movw	r20, r22
     d3a:	67 e0       	ldi	r22, 0x07	; 7
     d3c:	22 0f       	add	r18, r18
     d3e:	33 1f       	adc	r19, r19
     d40:	44 1f       	adc	r20, r20
     d42:	55 1f       	adc	r21, r21
     d44:	6a 95       	dec	r22
     d46:	d1 f7       	brne	.-12     	; 0xd3c <__unpack_f+0x54>
     d48:	83 e0       	ldi	r24, 0x03	; 3
     d4a:	8c 93       	st	X, r24
     d4c:	0d c0       	rjmp	.+26     	; 0xd68 <__unpack_f+0x80>
     d4e:	22 0f       	add	r18, r18
     d50:	33 1f       	adc	r19, r19
     d52:	44 1f       	adc	r20, r20
     d54:	55 1f       	adc	r21, r21
     d56:	12 96       	adiw	r26, 0x02	; 2
     d58:	8d 91       	ld	r24, X+
     d5a:	9c 91       	ld	r25, X
     d5c:	13 97       	sbiw	r26, 0x03	; 3
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	13 96       	adiw	r26, 0x03	; 3
     d62:	9c 93       	st	X, r25
     d64:	8e 93       	st	-X, r24
     d66:	12 97       	sbiw	r26, 0x02	; 2
     d68:	20 30       	cpi	r18, 0x00	; 0
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	38 07       	cpc	r19, r24
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	48 07       	cpc	r20, r24
     d72:	80 e4       	ldi	r24, 0x40	; 64
     d74:	58 07       	cpc	r21, r24
     d76:	58 f3       	brcs	.-42     	; 0xd4e <__unpack_f+0x66>
     d78:	14 96       	adiw	r26, 0x04	; 4
     d7a:	2d 93       	st	X+, r18
     d7c:	3d 93       	st	X+, r19
     d7e:	4d 93       	st	X+, r20
     d80:	5c 93       	st	X, r21
     d82:	17 97       	sbiw	r26, 0x07	; 7
     d84:	08 95       	ret
     d86:	2f 3f       	cpi	r18, 0xFF	; 255
     d88:	31 05       	cpc	r19, r1
     d8a:	79 f4       	brne	.+30     	; 0xdaa <__unpack_f+0xc2>
     d8c:	41 15       	cp	r20, r1
     d8e:	51 05       	cpc	r21, r1
     d90:	61 05       	cpc	r22, r1
     d92:	71 05       	cpc	r23, r1
     d94:	19 f4       	brne	.+6      	; 0xd9c <__unpack_f+0xb4>
     d96:	84 e0       	ldi	r24, 0x04	; 4
     d98:	8c 93       	st	X, r24
     d9a:	08 95       	ret
     d9c:	64 ff       	sbrs	r22, 4
     d9e:	03 c0       	rjmp	.+6      	; 0xda6 <__unpack_f+0xbe>
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	8c 93       	st	X, r24
     da4:	12 c0       	rjmp	.+36     	; 0xdca <__unpack_f+0xe2>
     da6:	1c 92       	st	X, r1
     da8:	10 c0       	rjmp	.+32     	; 0xdca <__unpack_f+0xe2>
     daa:	2f 57       	subi	r18, 0x7F	; 127
     dac:	30 40       	sbci	r19, 0x00	; 0
     dae:	13 96       	adiw	r26, 0x03	; 3
     db0:	3c 93       	st	X, r19
     db2:	2e 93       	st	-X, r18
     db4:	12 97       	sbiw	r26, 0x02	; 2
     db6:	83 e0       	ldi	r24, 0x03	; 3
     db8:	8c 93       	st	X, r24
     dba:	87 e0       	ldi	r24, 0x07	; 7
     dbc:	44 0f       	add	r20, r20
     dbe:	55 1f       	adc	r21, r21
     dc0:	66 1f       	adc	r22, r22
     dc2:	77 1f       	adc	r23, r23
     dc4:	8a 95       	dec	r24
     dc6:	d1 f7       	brne	.-12     	; 0xdbc <__unpack_f+0xd4>
     dc8:	70 64       	ori	r23, 0x40	; 64
     dca:	14 96       	adiw	r26, 0x04	; 4
     dcc:	4d 93       	st	X+, r20
     dce:	5d 93       	st	X+, r21
     dd0:	6d 93       	st	X+, r22
     dd2:	7c 93       	st	X, r23
     dd4:	17 97       	sbiw	r26, 0x07	; 7
     dd6:	08 95       	ret

00000dd8 <__fpcmp_parts_f>:
     dd8:	1f 93       	push	r17
     dda:	dc 01       	movw	r26, r24
     ddc:	fb 01       	movw	r30, r22
     dde:	9c 91       	ld	r25, X
     de0:	92 30       	cpi	r25, 0x02	; 2
     de2:	08 f4       	brcc	.+2      	; 0xde6 <__fpcmp_parts_f+0xe>
     de4:	47 c0       	rjmp	.+142    	; 0xe74 <__fpcmp_parts_f+0x9c>
     de6:	80 81       	ld	r24, Z
     de8:	82 30       	cpi	r24, 0x02	; 2
     dea:	08 f4       	brcc	.+2      	; 0xdee <__fpcmp_parts_f+0x16>
     dec:	43 c0       	rjmp	.+134    	; 0xe74 <__fpcmp_parts_f+0x9c>
     dee:	94 30       	cpi	r25, 0x04	; 4
     df0:	51 f4       	brne	.+20     	; 0xe06 <__fpcmp_parts_f+0x2e>
     df2:	11 96       	adiw	r26, 0x01	; 1
     df4:	1c 91       	ld	r17, X
     df6:	84 30       	cpi	r24, 0x04	; 4
     df8:	99 f5       	brne	.+102    	; 0xe60 <__fpcmp_parts_f+0x88>
     dfa:	81 81       	ldd	r24, Z+1	; 0x01
     dfc:	68 2f       	mov	r22, r24
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	61 1b       	sub	r22, r17
     e02:	71 09       	sbc	r23, r1
     e04:	3f c0       	rjmp	.+126    	; 0xe84 <__fpcmp_parts_f+0xac>
     e06:	84 30       	cpi	r24, 0x04	; 4
     e08:	21 f0       	breq	.+8      	; 0xe12 <__fpcmp_parts_f+0x3a>
     e0a:	92 30       	cpi	r25, 0x02	; 2
     e0c:	31 f4       	brne	.+12     	; 0xe1a <__fpcmp_parts_f+0x42>
     e0e:	82 30       	cpi	r24, 0x02	; 2
     e10:	b9 f1       	breq	.+110    	; 0xe80 <__fpcmp_parts_f+0xa8>
     e12:	81 81       	ldd	r24, Z+1	; 0x01
     e14:	88 23       	and	r24, r24
     e16:	89 f1       	breq	.+98     	; 0xe7a <__fpcmp_parts_f+0xa2>
     e18:	2d c0       	rjmp	.+90     	; 0xe74 <__fpcmp_parts_f+0x9c>
     e1a:	11 96       	adiw	r26, 0x01	; 1
     e1c:	1c 91       	ld	r17, X
     e1e:	11 97       	sbiw	r26, 0x01	; 1
     e20:	82 30       	cpi	r24, 0x02	; 2
     e22:	f1 f0       	breq	.+60     	; 0xe60 <__fpcmp_parts_f+0x88>
     e24:	81 81       	ldd	r24, Z+1	; 0x01
     e26:	18 17       	cp	r17, r24
     e28:	d9 f4       	brne	.+54     	; 0xe60 <__fpcmp_parts_f+0x88>
     e2a:	12 96       	adiw	r26, 0x02	; 2
     e2c:	2d 91       	ld	r18, X+
     e2e:	3c 91       	ld	r19, X
     e30:	13 97       	sbiw	r26, 0x03	; 3
     e32:	82 81       	ldd	r24, Z+2	; 0x02
     e34:	93 81       	ldd	r25, Z+3	; 0x03
     e36:	82 17       	cp	r24, r18
     e38:	93 07       	cpc	r25, r19
     e3a:	94 f0       	brlt	.+36     	; 0xe60 <__fpcmp_parts_f+0x88>
     e3c:	28 17       	cp	r18, r24
     e3e:	39 07       	cpc	r19, r25
     e40:	bc f0       	brlt	.+46     	; 0xe70 <__fpcmp_parts_f+0x98>
     e42:	14 96       	adiw	r26, 0x04	; 4
     e44:	8d 91       	ld	r24, X+
     e46:	9d 91       	ld	r25, X+
     e48:	0d 90       	ld	r0, X+
     e4a:	bc 91       	ld	r27, X
     e4c:	a0 2d       	mov	r26, r0
     e4e:	24 81       	ldd	r18, Z+4	; 0x04
     e50:	35 81       	ldd	r19, Z+5	; 0x05
     e52:	46 81       	ldd	r20, Z+6	; 0x06
     e54:	57 81       	ldd	r21, Z+7	; 0x07
     e56:	28 17       	cp	r18, r24
     e58:	39 07       	cpc	r19, r25
     e5a:	4a 07       	cpc	r20, r26
     e5c:	5b 07       	cpc	r21, r27
     e5e:	18 f4       	brcc	.+6      	; 0xe66 <__fpcmp_parts_f+0x8e>
     e60:	11 23       	and	r17, r17
     e62:	41 f0       	breq	.+16     	; 0xe74 <__fpcmp_parts_f+0x9c>
     e64:	0a c0       	rjmp	.+20     	; 0xe7a <__fpcmp_parts_f+0xa2>
     e66:	82 17       	cp	r24, r18
     e68:	93 07       	cpc	r25, r19
     e6a:	a4 07       	cpc	r26, r20
     e6c:	b5 07       	cpc	r27, r21
     e6e:	40 f4       	brcc	.+16     	; 0xe80 <__fpcmp_parts_f+0xa8>
     e70:	11 23       	and	r17, r17
     e72:	19 f0       	breq	.+6      	; 0xe7a <__fpcmp_parts_f+0xa2>
     e74:	61 e0       	ldi	r22, 0x01	; 1
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	05 c0       	rjmp	.+10     	; 0xe84 <__fpcmp_parts_f+0xac>
     e7a:	6f ef       	ldi	r22, 0xFF	; 255
     e7c:	7f ef       	ldi	r23, 0xFF	; 255
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <__fpcmp_parts_f+0xac>
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	cb 01       	movw	r24, r22
     e86:	1f 91       	pop	r17
     e88:	08 95       	ret

00000e8a <MTIMER_voidTimer0OVFInit>:
////////////////////////////////////////////////////////////////////////////////////////



void MTIMER_voidTimer0OVFInit(void)
{
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE NORMAL MODE*/
		CLR_BIT(TCCR0, WGM00);
     e92:	a3 e5       	ldi	r26, 0x53	; 83
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e3 e5       	ldi	r30, 0x53	; 83
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	8f 7b       	andi	r24, 0xBF	; 191
     e9e:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, WGM01);
     ea0:	a3 e5       	ldi	r26, 0x53	; 83
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e3 e5       	ldi	r30, 0x53	; 83
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	87 7f       	andi	r24, 0xF7	; 247
     eac:	8c 93       	st	X, r24

		SET_BIT(TIMSK, TOIE0);
     eae:	a9 e5       	ldi	r26, 0x59	; 89
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e9 e5       	ldi	r30, 0x59	; 89
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	81 60       	ori	r24, 0x01	; 1
     eba:	8c 93       	st	X, r24
#elif 	CLK == EIGHT
		TCCR0 = (TCCR0 & 0xf8) | 0x02;
#elif 	CLK == SIXTYFOUR
		TCCR0 = (TCCR0 & 0xf8) | 0x03;
#elif 	CLK == TWOFIFTYSIX
		TCCR0 = (TCCR0 & 0xf8) | 0x04;
     ebc:	a3 e5       	ldi	r26, 0x53	; 83
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e3 e5       	ldi	r30, 0x53	; 83
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	88 7f       	andi	r24, 0xF8	; 248
     ec8:	84 60       	ori	r24, 0x04	; 4
     eca:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xf8) | 0x06;
#elif 	CLK == EXTERN_RISING
		TCCR0 = (TCCR0 & 0xf8) | 0x07;
#endif

}
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	08 95       	ret

00000ed2 <MTIMER_voidTimer0OVFDelay>:

void MTIMER_voidTimer0OVFDelay(u32 copy_u32Delay_ms)
{
     ed2:	ef 92       	push	r14
     ed4:	ff 92       	push	r15
     ed6:	0f 93       	push	r16
     ed8:	1f 93       	push	r17
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	61 97       	sbiw	r28, 0x11	; 17
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	6e 87       	std	Y+14, r22	; 0x0e
     ef0:	7f 87       	std	Y+15, r23	; 0x0f
     ef2:	88 8b       	std	Y+16, r24	; 0x10
     ef4:	99 8b       	std	Y+17, r25	; 0x11
	f32 L_f32MaxCompare;
	f32 L_f32OverFlowCount;
	u32 L_u32Carry;
	u8 L_u8Offset;

	G_u8Check = 0;
     ef6:	10 92 85 01 	sts	0x0185, r1
	MTIMER_voidTimer0OVFInit();
     efa:	0e 94 45 07 	call	0xe8a	; 0xe8a <MTIMER_voidTimer0OVFInit>
		L_f32MaxCompare = L_f32MaxCompare * 256 * 8;
#elif 	CLK == SIXTYFOUR
		L_f32MaxCompare = (1000000.0) / F_CPU;
		L_f32MaxCompare = L_f32MaxCompare * 256 * 64;
#elif 	CLK == TWOFIFTYSIX
		L_f32MaxCompare = (1000000.0) / F_CPU;
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	a0 e0       	ldi	r26, 0x00	; 0
     f04:	be e3       	ldi	r27, 0x3E	; 62
     f06:	8a 87       	std	Y+10, r24	; 0x0a
     f08:	9b 87       	std	Y+11, r25	; 0x0b
     f0a:	ac 87       	std	Y+12, r26	; 0x0c
     f0c:	bd 87       	std	Y+13, r27	; 0x0d
		L_f32MaxCompare = L_f32MaxCompare * 256 * 256;
     f0e:	6a 85       	ldd	r22, Y+10	; 0x0a
     f10:	7b 85       	ldd	r23, Y+11	; 0x0b
     f12:	8c 85       	ldd	r24, Y+12	; 0x0c
     f14:	9d 85       	ldd	r25, Y+13	; 0x0d
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	40 e8       	ldi	r20, 0x80	; 128
     f1c:	53 e4       	ldi	r21, 0x43	; 67
     f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f22:	dc 01       	movw	r26, r24
     f24:	cb 01       	movw	r24, r22
     f26:	bc 01       	movw	r22, r24
     f28:	cd 01       	movw	r24, r26
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	40 e8       	ldi	r20, 0x80	; 128
     f30:	53 e4       	ldi	r21, 0x43	; 67
     f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f36:	dc 01       	movw	r26, r24
     f38:	cb 01       	movw	r24, r22
     f3a:	8a 87       	std	Y+10, r24	; 0x0a
     f3c:	9b 87       	std	Y+11, r25	; 0x0b
     f3e:	ac 87       	std	Y+12, r26	; 0x0c
     f40:	bd 87       	std	Y+13, r27	; 0x0d
		L_f32MaxCompare = L_f32MaxCompare * 256 * 1024;

#endif


	if (copy_u32Delay_ms * 1000  <= L_f32MaxCompare)
     f42:	8e 85       	ldd	r24, Y+14	; 0x0e
     f44:	9f 85       	ldd	r25, Y+15	; 0x0f
     f46:	a8 89       	ldd	r26, Y+16	; 0x10
     f48:	b9 89       	ldd	r27, Y+17	; 0x11
     f4a:	28 ee       	ldi	r18, 0xE8	; 232
     f4c:	33 e0       	ldi	r19, 0x03	; 3
     f4e:	40 e0       	ldi	r20, 0x00	; 0
     f50:	50 e0       	ldi	r21, 0x00	; 0
     f52:	bc 01       	movw	r22, r24
     f54:	cd 01       	movw	r24, r26
     f56:	0e 94 d7 13 	call	0x27ae	; 0x27ae <__mulsi3>
     f5a:	dc 01       	movw	r26, r24
     f5c:	cb 01       	movw	r24, r22
     f5e:	bc 01       	movw	r22, r24
     f60:	cd 01       	movw	r24, r26
     f62:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
     f66:	dc 01       	movw	r26, r24
     f68:	cb 01       	movw	r24, r22
     f6a:	bc 01       	movw	r22, r24
     f6c:	cd 01       	movw	r24, r26
     f6e:	2a 85       	ldd	r18, Y+10	; 0x0a
     f70:	3b 85       	ldd	r19, Y+11	; 0x0b
     f72:	4c 85       	ldd	r20, Y+12	; 0x0c
     f74:	5d 85       	ldd	r21, Y+13	; 0x0d
     f76:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__lesf2>
     f7a:	18 16       	cp	r1, r24
     f7c:	0c f4       	brge	.+2      	; 0xf80 <MTIMER_voidTimer0OVFDelay+0xae>
     f7e:	49 c0       	rjmp	.+146    	; 0x1012 <MTIMER_voidTimer0OVFDelay+0x140>
		{
			L_f32OverFlowCount = (copy_u32Delay_ms / (L_f32MaxCompare/1000.0));
     f80:	6e 85       	ldd	r22, Y+14	; 0x0e
     f82:	7f 85       	ldd	r23, Y+15	; 0x0f
     f84:	88 89       	ldd	r24, Y+16	; 0x10
     f86:	99 89       	ldd	r25, Y+17	; 0x11
     f88:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
     f8c:	7b 01       	movw	r14, r22
     f8e:	8c 01       	movw	r16, r24
     f90:	6a 85       	ldd	r22, Y+10	; 0x0a
     f92:	7b 85       	ldd	r23, Y+11	; 0x0b
     f94:	8c 85       	ldd	r24, Y+12	; 0x0c
     f96:	9d 85       	ldd	r25, Y+13	; 0x0d
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	4a e7       	ldi	r20, 0x7A	; 122
     f9e:	54 e4       	ldi	r21, 0x44	; 68
     fa0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	9c 01       	movw	r18, r24
     faa:	ad 01       	movw	r20, r26
     fac:	c8 01       	movw	r24, r16
     fae:	b7 01       	movw	r22, r14
     fb0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	8e 83       	std	Y+6, r24	; 0x06
     fba:	9f 83       	std	Y+7, r25	; 0x07
     fbc:	a8 87       	std	Y+8, r26	; 0x08
     fbe:	b9 87       	std	Y+9, r27	; 0x09
			L_u8Offset = L_f32OverFlowCount * 256.0;
     fc0:	6e 81       	ldd	r22, Y+6	; 0x06
     fc2:	7f 81       	ldd	r23, Y+7	; 0x07
     fc4:	88 85       	ldd	r24, Y+8	; 0x08
     fc6:	99 85       	ldd	r25, Y+9	; 0x09
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	40 e8       	ldi	r20, 0x80	; 128
     fce:	53 e4       	ldi	r21, 0x43	; 67
     fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd4:	dc 01       	movw	r26, r24
     fd6:	cb 01       	movw	r24, r22
     fd8:	bc 01       	movw	r22, r24
     fda:	cd 01       	movw	r24, r26
     fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe0:	dc 01       	movw	r26, r24
     fe2:	cb 01       	movw	r24, r22
     fe4:	89 83       	std	Y+1, r24	; 0x01
			G_u32Overflows = 1;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	a0 e0       	ldi	r26, 0x00	; 0
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	80 93 81 01 	sts	0x0181, r24
     ff2:	90 93 82 01 	sts	0x0182, r25
     ff6:	a0 93 83 01 	sts	0x0183, r26
     ffa:	b0 93 84 01 	sts	0x0184, r27
			G_u8Reg = 256 - L_u8Offset;
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	81 95       	neg	r24
    1002:	80 93 80 01 	sts	0x0180, r24
			TCNT0 = G_u8Reg;
    1006:	e2 e5       	ldi	r30, 0x52	; 82
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 91 80 01 	lds	r24, 0x0180
    100e:	80 83       	st	Z, r24
    1010:	7f c0       	rjmp	.+254    	; 0x1110 <MTIMER_voidTimer0OVFDelay+0x23e>
		}
	else
		{
			L_f32OverFlowCount = (copy_u32Delay_ms / (L_f32MaxCompare/1000.0));
    1012:	6e 85       	ldd	r22, Y+14	; 0x0e
    1014:	7f 85       	ldd	r23, Y+15	; 0x0f
    1016:	88 89       	ldd	r24, Y+16	; 0x10
    1018:	99 89       	ldd	r25, Y+17	; 0x11
    101a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    101e:	7b 01       	movw	r14, r22
    1020:	8c 01       	movw	r16, r24
    1022:	6a 85       	ldd	r22, Y+10	; 0x0a
    1024:	7b 85       	ldd	r23, Y+11	; 0x0b
    1026:	8c 85       	ldd	r24, Y+12	; 0x0c
    1028:	9d 85       	ldd	r25, Y+13	; 0x0d
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	4a e7       	ldi	r20, 0x7A	; 122
    1030:	54 e4       	ldi	r21, 0x44	; 68
    1032:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	9c 01       	movw	r18, r24
    103c:	ad 01       	movw	r20, r26
    103e:	c8 01       	movw	r24, r16
    1040:	b7 01       	movw	r22, r14
    1042:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1046:	dc 01       	movw	r26, r24
    1048:	cb 01       	movw	r24, r22
    104a:	8e 83       	std	Y+6, r24	; 0x06
    104c:	9f 83       	std	Y+7, r25	; 0x07
    104e:	a8 87       	std	Y+8, r26	; 0x08
    1050:	b9 87       	std	Y+9, r27	; 0x09
			L_u32Carry = (copy_u32Delay_ms / (L_f32MaxCompare/1000));
    1052:	6e 85       	ldd	r22, Y+14	; 0x0e
    1054:	7f 85       	ldd	r23, Y+15	; 0x0f
    1056:	88 89       	ldd	r24, Y+16	; 0x10
    1058:	99 89       	ldd	r25, Y+17	; 0x11
    105a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    105e:	7b 01       	movw	r14, r22
    1060:	8c 01       	movw	r16, r24
    1062:	6a 85       	ldd	r22, Y+10	; 0x0a
    1064:	7b 85       	ldd	r23, Y+11	; 0x0b
    1066:	8c 85       	ldd	r24, Y+12	; 0x0c
    1068:	9d 85       	ldd	r25, Y+13	; 0x0d
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	4a e7       	ldi	r20, 0x7A	; 122
    1070:	54 e4       	ldi	r21, 0x44	; 68
    1072:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	9c 01       	movw	r18, r24
    107c:	ad 01       	movw	r20, r26
    107e:	c8 01       	movw	r24, r16
    1080:	b7 01       	movw	r22, r14
    1082:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	bc 01       	movw	r22, r24
    108c:	cd 01       	movw	r24, r26
    108e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1092:	dc 01       	movw	r26, r24
    1094:	cb 01       	movw	r24, r22
    1096:	8a 83       	std	Y+2, r24	; 0x02
    1098:	9b 83       	std	Y+3, r25	; 0x03
    109a:	ac 83       	std	Y+4, r26	; 0x04
    109c:	bd 83       	std	Y+5, r27	; 0x05

			L_u8Offset = (L_f32OverFlowCount - L_u32Carry) * 256.0;
    109e:	6a 81       	ldd	r22, Y+2	; 0x02
    10a0:	7b 81       	ldd	r23, Y+3	; 0x03
    10a2:	8c 81       	ldd	r24, Y+4	; 0x04
    10a4:	9d 81       	ldd	r25, Y+5	; 0x05
    10a6:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    10aa:	9b 01       	movw	r18, r22
    10ac:	ac 01       	movw	r20, r24
    10ae:	6e 81       	ldd	r22, Y+6	; 0x06
    10b0:	7f 81       	ldd	r23, Y+7	; 0x07
    10b2:	88 85       	ldd	r24, Y+8	; 0x08
    10b4:	99 85       	ldd	r25, Y+9	; 0x09
    10b6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	bc 01       	movw	r22, r24
    10c0:	cd 01       	movw	r24, r26
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	40 e8       	ldi	r20, 0x80	; 128
    10c8:	53 e4       	ldi	r21, 0x43	; 67
    10ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ce:	dc 01       	movw	r26, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	bc 01       	movw	r22, r24
    10d4:	cd 01       	movw	r24, r26
    10d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10da:	dc 01       	movw	r26, r24
    10dc:	cb 01       	movw	r24, r22
    10de:	89 83       	std	Y+1, r24	; 0x01
			G_u32Overflows = L_u32Carry +1 ;
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	9b 81       	ldd	r25, Y+3	; 0x03
    10e4:	ac 81       	ldd	r26, Y+4	; 0x04
    10e6:	bd 81       	ldd	r27, Y+5	; 0x05
    10e8:	01 96       	adiw	r24, 0x01	; 1
    10ea:	a1 1d       	adc	r26, r1
    10ec:	b1 1d       	adc	r27, r1
    10ee:	80 93 81 01 	sts	0x0181, r24
    10f2:	90 93 82 01 	sts	0x0182, r25
    10f6:	a0 93 83 01 	sts	0x0183, r26
    10fa:	b0 93 84 01 	sts	0x0184, r27
			G_u8Reg = 256 - L_u8Offset;
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	81 95       	neg	r24
    1102:	80 93 80 01 	sts	0x0180, r24
			TCNT0 = G_u8Reg;
    1106:	e2 e5       	ldi	r30, 0x52	; 82
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 91 80 01 	lds	r24, 0x0180
    110e:	80 83       	st	Z, r24
		}

		while (GET_BIT(TIFR, TOV0) == 0 && G_u8Check == 0);
    1110:	e8 e5       	ldi	r30, 0x58	; 88
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	88 2f       	mov	r24, r24
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	81 70       	andi	r24, 0x01	; 1
    111c:	90 70       	andi	r25, 0x00	; 0
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	21 f4       	brne	.+8      	; 0x112a <MTIMER_voidTimer0OVFDelay+0x258>
    1122:	80 91 85 01 	lds	r24, 0x0185
    1126:	88 23       	and	r24, r24
    1128:	99 f3       	breq	.-26     	; 0x1110 <MTIMER_voidTimer0OVFDelay+0x23e>
}
    112a:	61 96       	adiw	r28, 0x11	; 17
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	f8 94       	cli
    1130:	de bf       	out	0x3e, r29	; 62
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	cd bf       	out	0x3d, r28	; 61
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	1f 91       	pop	r17
    113c:	0f 91       	pop	r16
    113e:	ff 90       	pop	r15
    1140:	ef 90       	pop	r14
    1142:	08 95       	ret

00001144 <MTIMER_voidTimer0OVFSetCallBack>:

void MTIMER_voidTimer0OVFSetCallBack ( void (*copy_PFvoidTimer0OVF) (void))
{
    1144:	df 93       	push	r29
    1146:	cf 93       	push	r28
    1148:	00 d0       	rcall	.+0      	; 0x114a <MTIMER_voidTimer0OVFSetCallBack+0x6>
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	9a 83       	std	Y+2, r25	; 0x02
    1150:	89 83       	std	Y+1, r24	; 0x01
	TIMER_PFTIMER0OVF = copy_PFvoidTimer0OVF ;
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	9a 81       	ldd	r25, Y+2	; 0x02
    1156:	90 93 69 01 	sts	0x0169, r25
    115a:	80 93 68 01 	sts	0x0168, r24
}
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	cf 91       	pop	r28
    1164:	df 91       	pop	r29
    1166:	08 95       	ret

00001168 <MTIMER_voidTimer0COMPInit>:



void MTIMER_voidTimer0COMPInit(void)
{
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE CTC MODE*/
		CLR_BIT(TCCR0, WGM00);
    1170:	a3 e5       	ldi	r26, 0x53	; 83
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e3 e5       	ldi	r30, 0x53	; 83
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	8f 7b       	andi	r24, 0xBF	; 191
    117c:	8c 93       	st	X, r24
		SET_BIT(TCCR0, WGM01);
    117e:	a3 e5       	ldi	r26, 0x53	; 83
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e3 e5       	ldi	r30, 0x53	; 83
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	88 60       	ori	r24, 0x08	; 8
    118a:	8c 93       	st	X, r24

		SET_BIT(TIMSK, OCIE0);
    118c:	a9 e5       	ldi	r26, 0x59	; 89
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e9 e5       	ldi	r30, 0x59	; 89
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	82 60       	ori	r24, 0x02	; 2
    1198:	8c 93       	st	X, r24
#elif 	CLK == EIGHT
		TCCR0 = (TCCR0 & 0xf8) | 0x02;
#elif 	CLK == SIXTYFOUR
		TCCR0 = (TCCR0 & 0xf8) | 0x03;
#elif 	CLK == TWOFIFTYSIX
		TCCR0 = (TCCR0 & 0xf8) | 0x04;
    119a:	a3 e5       	ldi	r26, 0x53	; 83
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e3 e5       	ldi	r30, 0x53	; 83
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	88 7f       	andi	r24, 0xF8	; 248
    11a6:	84 60       	ori	r24, 0x04	; 4
    11a8:	8c 93       	st	X, r24
#elif 	CLK == EXTERN_FALLING
		TCCR0 = (TCCR0 & 0xf8) | 0x06;
#elif 	CLK == EXTERN_RISING
		TCCR0 = (TCCR0 & 0xf8) | 0x07;
#endif
}
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <MTIMER_voidTimer0COMPDelay>:


void MTIMER_voidTimer0COMPDelay(u8 copy_u8Offset, u32 copy_u32Counts)
{
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <MTIMER_voidTimer0COMPDelay+0x6>
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <MTIMER_voidTimer0COMPDelay+0x8>
    11b8:	0f 92       	push	r0
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	89 83       	std	Y+1, r24	; 0x01
    11c0:	4a 83       	std	Y+2, r20	; 0x02
    11c2:	5b 83       	std	Y+3, r21	; 0x03
    11c4:	6c 83       	std	Y+4, r22	; 0x04
    11c6:	7d 83       	std	Y+5, r23	; 0x05
	G_u8Check = 0;
    11c8:	10 92 85 01 	sts	0x0185, r1
	G_u32Overflows = copy_u32Counts;
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	9b 81       	ldd	r25, Y+3	; 0x03
    11d0:	ac 81       	ldd	r26, Y+4	; 0x04
    11d2:	bd 81       	ldd	r27, Y+5	; 0x05
    11d4:	80 93 81 01 	sts	0x0181, r24
    11d8:	90 93 82 01 	sts	0x0182, r25
    11dc:	a0 93 83 01 	sts	0x0183, r26
    11e0:	b0 93 84 01 	sts	0x0184, r27
	if (copy_u32Counts == 1)
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	9b 81       	ldd	r25, Y+3	; 0x03
    11e8:	ac 81       	ldd	r26, Y+4	; 0x04
    11ea:	bd 81       	ldd	r27, Y+5	; 0x05
    11ec:	81 30       	cpi	r24, 0x01	; 1
    11ee:	91 05       	cpc	r25, r1
    11f0:	a1 05       	cpc	r26, r1
    11f2:	b1 05       	cpc	r27, r1
    11f4:	29 f4       	brne	.+10     	; 0x1200 <MTIMER_voidTimer0COMPDelay+0x50>
	{
		OCR0 = copy_u8Offset;
    11f6:	ec e5       	ldi	r30, 0x5C	; 92
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	80 83       	st	Z, r24
    11fe:	10 c0       	rjmp	.+32     	; 0x1220 <MTIMER_voidTimer0COMPDelay+0x70>
	}
	else if (copy_u32Counts > 1)
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	9b 81       	ldd	r25, Y+3	; 0x03
    1204:	ac 81       	ldd	r26, Y+4	; 0x04
    1206:	bd 81       	ldd	r27, Y+5	; 0x05
    1208:	82 30       	cpi	r24, 0x02	; 2
    120a:	91 05       	cpc	r25, r1
    120c:	a1 05       	cpc	r26, r1
    120e:	b1 05       	cpc	r27, r1
    1210:	38 f0       	brcs	.+14     	; 0x1220 <MTIMER_voidTimer0COMPDelay+0x70>
	{
		G_u8Reg = copy_u8Offset;
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	80 93 80 01 	sts	0x0180, r24
		OCR0 = 255;
    1218:	ec e5       	ldi	r30, 0x5C	; 92
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	8f ef       	ldi	r24, 0xFF	; 255
    121e:	80 83       	st	Z, r24
	}
	MTIMER_voidTimer0COMPInit();
    1220:	0e 94 b4 08 	call	0x1168	; 0x1168 <MTIMER_voidTimer0COMPInit>
	while (GET_BIT(TIFR, OCF0) == 0  &&  G_u8Check == 0);
    1224:	e8 e5       	ldi	r30, 0x58	; 88
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	86 95       	lsr	r24
    122c:	88 2f       	mov	r24, r24
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	81 70       	andi	r24, 0x01	; 1
    1232:	90 70       	andi	r25, 0x00	; 0
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	21 f4       	brne	.+8      	; 0x1240 <MTIMER_voidTimer0COMPDelay+0x90>
    1238:	80 91 85 01 	lds	r24, 0x0185
    123c:	88 23       	and	r24, r24
    123e:	91 f3       	breq	.-28     	; 0x1224 <MTIMER_voidTimer0COMPDelay+0x74>
	//TCCR0 = 0;
}
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	cf 91       	pop	r28
    124c:	df 91       	pop	r29
    124e:	08 95       	ret

00001250 <MTIMER_voidTimer0COMPSetCallBack>:




void MTIMER_voidTimer0COMPSetCallBack ( void (*copy_PFvoidTimer0COMP) (void))
{
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	00 d0       	rcall	.+0      	; 0x1256 <MTIMER_voidTimer0COMPSetCallBack+0x6>
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	9a 83       	std	Y+2, r25	; 0x02
    125c:	89 83       	std	Y+1, r24	; 0x01
	TIMER_PFTIMER0COMP = copy_PFvoidTimer0COMP ;
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	9a 81       	ldd	r25, Y+2	; 0x02
    1262:	90 93 6b 01 	sts	0x016B, r25
    1266:	80 93 6a 01 	sts	0x016A, r24
}
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	cf 91       	pop	r28
    1270:	df 91       	pop	r29
    1272:	08 95       	ret

00001274 <__vector_11>:


ISR (TIMER0_OVF_vect)
{
    1274:	1f 92       	push	r1
    1276:	0f 92       	push	r0
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	0f 92       	push	r0
    127c:	11 24       	eor	r1, r1
    127e:	2f 93       	push	r18
    1280:	3f 93       	push	r19
    1282:	4f 93       	push	r20
    1284:	5f 93       	push	r21
    1286:	6f 93       	push	r22
    1288:	7f 93       	push	r23
    128a:	8f 93       	push	r24
    128c:	9f 93       	push	r25
    128e:	af 93       	push	r26
    1290:	bf 93       	push	r27
    1292:	ef 93       	push	r30
    1294:	ff 93       	push	r31
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
	static u32 L_u32OVFCounter = 0 ;
	L_u32OVFCounter ++ ;
    129e:	80 91 70 01 	lds	r24, 0x0170
    12a2:	90 91 71 01 	lds	r25, 0x0171
    12a6:	a0 91 72 01 	lds	r26, 0x0172
    12aa:	b0 91 73 01 	lds	r27, 0x0173
    12ae:	01 96       	adiw	r24, 0x01	; 1
    12b0:	a1 1d       	adc	r26, r1
    12b2:	b1 1d       	adc	r27, r1
    12b4:	80 93 70 01 	sts	0x0170, r24
    12b8:	90 93 71 01 	sts	0x0171, r25
    12bc:	a0 93 72 01 	sts	0x0172, r26
    12c0:	b0 93 73 01 	sts	0x0173, r27
	if (L_u32OVFCounter == G_u32Overflows)
    12c4:	20 91 70 01 	lds	r18, 0x0170
    12c8:	30 91 71 01 	lds	r19, 0x0171
    12cc:	40 91 72 01 	lds	r20, 0x0172
    12d0:	50 91 73 01 	lds	r21, 0x0173
    12d4:	80 91 81 01 	lds	r24, 0x0181
    12d8:	90 91 82 01 	lds	r25, 0x0182
    12dc:	a0 91 83 01 	lds	r26, 0x0183
    12e0:	b0 91 84 01 	lds	r27, 0x0184
    12e4:	28 17       	cp	r18, r24
    12e6:	39 07       	cpc	r19, r25
    12e8:	4a 07       	cpc	r20, r26
    12ea:	5b 07       	cpc	r21, r27
    12ec:	d9 f4       	brne	.+54     	; 0x1324 <__vector_11+0xb0>
	{
		L_u32OVFCounter = 0 ;
    12ee:	10 92 70 01 	sts	0x0170, r1
    12f2:	10 92 71 01 	sts	0x0171, r1
    12f6:	10 92 72 01 	sts	0x0172, r1
    12fa:	10 92 73 01 	sts	0x0173, r1
		TCNT0 = G_u8Reg;
    12fe:	e2 e5       	ldi	r30, 0x52	; 82
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 91 80 01 	lds	r24, 0x0180
    1306:	80 83       	st	Z, r24
		if(TIMER_PFTIMER0OVF != NULL)
    1308:	80 91 68 01 	lds	r24, 0x0168
    130c:	90 91 69 01 	lds	r25, 0x0169
    1310:	00 97       	sbiw	r24, 0x00	; 0
    1312:	29 f0       	breq	.+10     	; 0x131e <__vector_11+0xaa>
			TIMER_PFTIMER0OVF() ;
    1314:	e0 91 68 01 	lds	r30, 0x0168
    1318:	f0 91 69 01 	lds	r31, 0x0169
    131c:	09 95       	icall
		G_u8Check = 1;
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	80 93 85 01 	sts	0x0185, r24
	}
}
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	ff 91       	pop	r31
    132a:	ef 91       	pop	r30
    132c:	bf 91       	pop	r27
    132e:	af 91       	pop	r26
    1330:	9f 91       	pop	r25
    1332:	8f 91       	pop	r24
    1334:	7f 91       	pop	r23
    1336:	6f 91       	pop	r22
    1338:	5f 91       	pop	r21
    133a:	4f 91       	pop	r20
    133c:	3f 91       	pop	r19
    133e:	2f 91       	pop	r18
    1340:	0f 90       	pop	r0
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	0f 90       	pop	r0
    1346:	1f 90       	pop	r1
    1348:	18 95       	reti

0000134a <__vector_10>:

ISR (TIMER0_COMP_vect)
{
    134a:	1f 92       	push	r1
    134c:	0f 92       	push	r0
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	0f 92       	push	r0
    1352:	11 24       	eor	r1, r1
    1354:	2f 93       	push	r18
    1356:	3f 93       	push	r19
    1358:	4f 93       	push	r20
    135a:	5f 93       	push	r21
    135c:	6f 93       	push	r22
    135e:	7f 93       	push	r23
    1360:	8f 93       	push	r24
    1362:	9f 93       	push	r25
    1364:	af 93       	push	r26
    1366:	bf 93       	push	r27
    1368:	ef 93       	push	r30
    136a:	ff 93       	push	r31
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
	static u32 G_u32CompCounter = 0;
	G_u32CompCounter ++ ;
    1374:	80 91 74 01 	lds	r24, 0x0174
    1378:	90 91 75 01 	lds	r25, 0x0175
    137c:	a0 91 76 01 	lds	r26, 0x0176
    1380:	b0 91 77 01 	lds	r27, 0x0177
    1384:	01 96       	adiw	r24, 0x01	; 1
    1386:	a1 1d       	adc	r26, r1
    1388:	b1 1d       	adc	r27, r1
    138a:	80 93 74 01 	sts	0x0174, r24
    138e:	90 93 75 01 	sts	0x0175, r25
    1392:	a0 93 76 01 	sts	0x0176, r26
    1396:	b0 93 77 01 	sts	0x0177, r27
	if( G_u32Overflows ==  G_u32CompCounter)
    139a:	20 91 81 01 	lds	r18, 0x0181
    139e:	30 91 82 01 	lds	r19, 0x0182
    13a2:	40 91 83 01 	lds	r20, 0x0183
    13a6:	50 91 84 01 	lds	r21, 0x0184
    13aa:	80 91 74 01 	lds	r24, 0x0174
    13ae:	90 91 75 01 	lds	r25, 0x0175
    13b2:	a0 91 76 01 	lds	r26, 0x0176
    13b6:	b0 91 77 01 	lds	r27, 0x0177
    13ba:	28 17       	cp	r18, r24
    13bc:	39 07       	cpc	r19, r25
    13be:	4a 07       	cpc	r20, r26
    13c0:	5b 07       	cpc	r21, r27
    13c2:	b9 f4       	brne	.+46     	; 0x13f2 <__vector_10+0xa8>
	{
		if( TIMER_PFTIMER0COMP != NULL )
    13c4:	80 91 6a 01 	lds	r24, 0x016A
    13c8:	90 91 6b 01 	lds	r25, 0x016B
    13cc:	00 97       	sbiw	r24, 0x00	; 0
    13ce:	29 f0       	breq	.+10     	; 0x13da <__vector_10+0x90>
			TIMER_PFTIMER0COMP() ;
    13d0:	e0 91 6a 01 	lds	r30, 0x016A
    13d4:	f0 91 6b 01 	lds	r31, 0x016B
    13d8:	09 95       	icall
		G_u32CompCounter = 0 ;
    13da:	10 92 74 01 	sts	0x0174, r1
    13de:	10 92 75 01 	sts	0x0175, r1
    13e2:	10 92 76 01 	sts	0x0176, r1
    13e6:	10 92 77 01 	sts	0x0177, r1
		G_u8Check = 1;
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	80 93 85 01 	sts	0x0185, r24
    13f0:	3a c0       	rjmp	.+116    	; 0x1466 <__vector_10+0x11c>
	}
	else if(G_u32Overflows == G_u32CompCounter + 1)
    13f2:	80 91 74 01 	lds	r24, 0x0174
    13f6:	90 91 75 01 	lds	r25, 0x0175
    13fa:	a0 91 76 01 	lds	r26, 0x0176
    13fe:	b0 91 77 01 	lds	r27, 0x0177
    1402:	9c 01       	movw	r18, r24
    1404:	ad 01       	movw	r20, r26
    1406:	2f 5f       	subi	r18, 0xFF	; 255
    1408:	3f 4f       	sbci	r19, 0xFF	; 255
    140a:	4f 4f       	sbci	r20, 0xFF	; 255
    140c:	5f 4f       	sbci	r21, 0xFF	; 255
    140e:	80 91 81 01 	lds	r24, 0x0181
    1412:	90 91 82 01 	lds	r25, 0x0182
    1416:	a0 91 83 01 	lds	r26, 0x0183
    141a:	b0 91 84 01 	lds	r27, 0x0184
    141e:	28 17       	cp	r18, r24
    1420:	39 07       	cpc	r19, r25
    1422:	4a 07       	cpc	r20, r26
    1424:	5b 07       	cpc	r21, r27
    1426:	31 f4       	brne	.+12     	; 0x1434 <__vector_10+0xea>
	{
		OCR0 = G_u8Reg;
    1428:	ec e5       	ldi	r30, 0x5C	; 92
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 91 80 01 	lds	r24, 0x0180
    1430:	80 83       	st	Z, r24
    1432:	19 c0       	rjmp	.+50     	; 0x1466 <__vector_10+0x11c>
	}
	else if (G_u32Overflows != G_u32CompCounter)
    1434:	20 91 81 01 	lds	r18, 0x0181
    1438:	30 91 82 01 	lds	r19, 0x0182
    143c:	40 91 83 01 	lds	r20, 0x0183
    1440:	50 91 84 01 	lds	r21, 0x0184
    1444:	80 91 74 01 	lds	r24, 0x0174
    1448:	90 91 75 01 	lds	r25, 0x0175
    144c:	a0 91 76 01 	lds	r26, 0x0176
    1450:	b0 91 77 01 	lds	r27, 0x0177
    1454:	28 17       	cp	r18, r24
    1456:	39 07       	cpc	r19, r25
    1458:	4a 07       	cpc	r20, r26
    145a:	5b 07       	cpc	r21, r27
    145c:	21 f0       	breq	.+8      	; 0x1466 <__vector_10+0x11c>
	{
		OCR0 = 255;
    145e:	ec e5       	ldi	r30, 0x5C	; 92
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	8f ef       	ldi	r24, 0xFF	; 255
    1464:	80 83       	st	Z, r24
	}

}
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	ff 91       	pop	r31
    146c:	ef 91       	pop	r30
    146e:	bf 91       	pop	r27
    1470:	af 91       	pop	r26
    1472:	9f 91       	pop	r25
    1474:	8f 91       	pop	r24
    1476:	7f 91       	pop	r23
    1478:	6f 91       	pop	r22
    147a:	5f 91       	pop	r21
    147c:	4f 91       	pop	r20
    147e:	3f 91       	pop	r19
    1480:	2f 91       	pop	r18
    1482:	0f 90       	pop	r0
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	0f 90       	pop	r0
    1488:	1f 90       	pop	r1
    148a:	18 95       	reti

0000148c <MTIMER_voidTimer0FPWMInit>:


void MTIMER_voidTimer0FPWMInit()
{
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE FPWM MODE*/
		SET_BIT(TCCR0, WGM00);
    1494:	a3 e5       	ldi	r26, 0x53	; 83
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	e3 e5       	ldi	r30, 0x53	; 83
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	80 64       	ori	r24, 0x40	; 64
    14a0:	8c 93       	st	X, r24
		SET_BIT(TCCR0, WGM01);
    14a2:	a3 e5       	ldi	r26, 0x53	; 83
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e3 e5       	ldi	r30, 0x53	; 83
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	88 60       	ori	r24, 0x08	; 8
    14ae:	8c 93       	st	X, r24

		SET_BIT(TCCR0, COM00);
    14b0:	a3 e5       	ldi	r26, 0x53	; 83
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e3 e5       	ldi	r30, 0x53	; 83
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	80 61       	ori	r24, 0x10	; 16
    14bc:	8c 93       	st	X, r24
		SET_BIT(TCCR0, COM01);
    14be:	a3 e5       	ldi	r26, 0x53	; 83
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e3 e5       	ldi	r30, 0x53	; 83
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	80 62       	ori	r24, 0x20	; 32
    14ca:	8c 93       	st	X, r24
#elif 	CLK == EIGHT
		TCCR0 = (TCCR0 & 0xf8) | 0x02;
#elif 	CLK == SIXTYFOUR
		TCCR0 = (TCCR0 & 0xf8) | 0x03;
#elif 	CLK == TWOFIFTYSIX
		TCCR0 = (TCCR0 & 0xf8) | 0x04;
    14cc:	a3 e5       	ldi	r26, 0x53	; 83
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e3 e5       	ldi	r30, 0x53	; 83
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	88 7f       	andi	r24, 0xF8	; 248
    14d8:	84 60       	ori	r24, 0x04	; 4
    14da:	8c 93       	st	X, r24
#elif 	CLK == EXTERN_FALLING
		TCCR0 = (TCCR0 & 0xf8) | 0x06;
#elif 	CLK == EXTERN_RISING
		TCCR0 = (TCCR0 & 0xf8) | 0x07;
#endif
}
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <MTIMER_voidTimer0FPWMWrite>:

void MTIMER_voidTimer0FPWMWrite(u8 copy_u8Value)
{
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	0f 92       	push	r0
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
    14ec:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = copy_u8Value;
    14ee:	ec e5       	ldi	r30, 0x5C	; 92
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	80 83       	st	Z, r24

}
    14f6:	0f 90       	pop	r0
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <MTIMER_voidTimer1FPWM_ICR_INIT>:
/////////////////////////////////////////////////////////////////////////////////////////
void MTIMER_voidTimer1FPWM_ICR_INIT (void)
{
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSING FWPM W/ ICR*/

	CLR_BIT(TCCR1A,WGM10);
    1506:	af e4       	ldi	r26, 0x4F	; 79
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	ef e4       	ldi	r30, 0x4F	; 79
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	8e 7f       	andi	r24, 0xFE	; 254
    1512:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    1514:	af e4       	ldi	r26, 0x4F	; 79
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	ef e4       	ldi	r30, 0x4F	; 79
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	82 60       	ori	r24, 0x02	; 2
    1520:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    1522:	ae e4       	ldi	r26, 0x4E	; 78
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	ee e4       	ldi	r30, 0x4E	; 78
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	88 60       	ori	r24, 0x08	; 8
    152e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    1530:	ae e4       	ldi	r26, 0x4E	; 78
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	ee e4       	ldi	r30, 0x4E	; 78
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	80 61       	ori	r24, 0x10	; 16
    153c:	8c 93       	st	X, r24

	/* CLEAR OC1A */
	CLR_BIT(TCCR1A, COM1A0);
    153e:	af e4       	ldi	r26, 0x4F	; 79
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	ef e4       	ldi	r30, 0x4F	; 79
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	8f 7b       	andi	r24, 0xBF	; 191
    154a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1A1);
    154c:	af e4       	ldi	r26, 0x4F	; 79
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	ef e4       	ldi	r30, 0x4F	; 79
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	80 68       	ori	r24, 0x80	; 128
    1558:	8c 93       	st	X, r24

	/*FREQUENCY CONTROL*/
#if		CLK_ONE == ONE
		TCCR1B = (TCCR1B & 0xf8) | 0x01;
    155a:	ae e4       	ldi	r26, 0x4E	; 78
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	ee e4       	ldi	r30, 0x4E	; 78
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	88 7f       	andi	r24, 0xF8	; 248
    1566:	81 60       	ori	r24, 0x01	; 1
    1568:	8c 93       	st	X, r24
		TCCR1B = (TCCR1B & 0xf8) | 0x07;
#endif


	/* ICR1 */
	ICR1 = 19999;
    156a:	e6 e4       	ldi	r30, 0x46	; 70
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	8f e1       	ldi	r24, 0x1F	; 31
    1570:	9e e4       	ldi	r25, 0x4E	; 78
    1572:	91 83       	std	Z+1, r25	; 0x01
    1574:	80 83       	st	Z, r24
	/*N.B. Regarding FREQ and ICR1
	 * At mode 14, TIMER1 works in FPWM mode,
	 * with the value of ICR1 controlling
	 *the top value, hence, the frequency of PWM
	 * */
}
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	08 95       	ret

0000157c <MTIMER_voidTimer2COMPInit>:

////////////////////////////////////////////////////////////////////////////////////////

void MTIMER_voidTimer2COMPInit(void)

{
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE CTC MODE*/
		CLR_BIT(TCCR2, WGM20);
    1584:	a5 e4       	ldi	r26, 0x45	; 69
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e5 e4       	ldi	r30, 0x45	; 69
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	8f 7b       	andi	r24, 0xBF	; 191
    1590:	8c 93       	st	X, r24
		SET_BIT(TCCR2, WGM21);
    1592:	a5 e4       	ldi	r26, 0x45	; 69
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e5 e4       	ldi	r30, 0x45	; 69
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	88 60       	ori	r24, 0x08	; 8
    159e:	8c 93       	st	X, r24

		SET_BIT(TIMSK, OCIE2);
    15a0:	a9 e5       	ldi	r26, 0x59	; 89
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e9 e5       	ldi	r30, 0x59	; 89
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	80 68       	ori	r24, 0x80	; 128
    15ac:	8c 93       	st	X, r24
		TCCR2 |= (1<<2);
		//TCCR2 = (TCCR2 & 0xf8) | 0x04;
#elif 	CLK == ONETWENTYEIGHT
		TCCR2 = (TCCR2 & 0xf8) | 0x05;
#elif 	CLK == TWOFIFTYSIX
		TCCR2 = (TCCR2 & 0xf8) | 0x06;
    15ae:	a5 e4       	ldi	r26, 0x45	; 69
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e5 e4       	ldi	r30, 0x45	; 69
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	88 7f       	andi	r24, 0xF8	; 248
    15ba:	86 60       	ori	r24, 0x06	; 6
    15bc:	8c 93       	st	X, r24
#elif 	CLK == TENTWENTYFOUR
		TCCR2 = (TCCR2 & 0xf8) | 0x07;
#endif

}
    15be:	cf 91       	pop	r28
    15c0:	df 91       	pop	r29
    15c2:	08 95       	ret

000015c4 <MTIMER_voidTimer2COMPDelay>:

void MTIMER_voidTimer2COMPDelay(u8 copy_u8Offset, u32 copy_u32Counts)
{
    15c4:	df 93       	push	r29
    15c6:	cf 93       	push	r28
    15c8:	00 d0       	rcall	.+0      	; 0x15ca <MTIMER_voidTimer2COMPDelay+0x6>
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <MTIMER_voidTimer2COMPDelay+0x8>
    15cc:	0f 92       	push	r0
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
    15d2:	89 83       	std	Y+1, r24	; 0x01
    15d4:	4a 83       	std	Y+2, r20	; 0x02
    15d6:	5b 83       	std	Y+3, r21	; 0x03
    15d8:	6c 83       	std	Y+4, r22	; 0x04
    15da:	7d 83       	std	Y+5, r23	; 0x05
	G_u8Check = 0;
    15dc:	10 92 85 01 	sts	0x0185, r1
	G_u32Overflows = copy_u32Counts;
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	9b 81       	ldd	r25, Y+3	; 0x03
    15e4:	ac 81       	ldd	r26, Y+4	; 0x04
    15e6:	bd 81       	ldd	r27, Y+5	; 0x05
    15e8:	80 93 81 01 	sts	0x0181, r24
    15ec:	90 93 82 01 	sts	0x0182, r25
    15f0:	a0 93 83 01 	sts	0x0183, r26
    15f4:	b0 93 84 01 	sts	0x0184, r27
	if (copy_u32Counts == 1)
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	9b 81       	ldd	r25, Y+3	; 0x03
    15fc:	ac 81       	ldd	r26, Y+4	; 0x04
    15fe:	bd 81       	ldd	r27, Y+5	; 0x05
    1600:	81 30       	cpi	r24, 0x01	; 1
    1602:	91 05       	cpc	r25, r1
    1604:	a1 05       	cpc	r26, r1
    1606:	b1 05       	cpc	r27, r1
    1608:	29 f4       	brne	.+10     	; 0x1614 <MTIMER_voidTimer2COMPDelay+0x50>
	{
		OCR2 = copy_u8Offset;
    160a:	e3 e4       	ldi	r30, 0x43	; 67
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	80 83       	st	Z, r24
    1612:	10 c0       	rjmp	.+32     	; 0x1634 <MTIMER_voidTimer2COMPDelay+0x70>
	}
	else if (copy_u32Counts > 1)
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	9b 81       	ldd	r25, Y+3	; 0x03
    1618:	ac 81       	ldd	r26, Y+4	; 0x04
    161a:	bd 81       	ldd	r27, Y+5	; 0x05
    161c:	82 30       	cpi	r24, 0x02	; 2
    161e:	91 05       	cpc	r25, r1
    1620:	a1 05       	cpc	r26, r1
    1622:	b1 05       	cpc	r27, r1
    1624:	38 f0       	brcs	.+14     	; 0x1634 <MTIMER_voidTimer2COMPDelay+0x70>
	{
		G_u8Reg = copy_u8Offset;
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	80 93 80 01 	sts	0x0180, r24
		OCR2 = 255;
    162c:	e3 e4       	ldi	r30, 0x43	; 67
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	8f ef       	ldi	r24, 0xFF	; 255
    1632:	80 83       	st	Z, r24

	}
	MTIMER_voidTimer2COMPInit();
    1634:	0e 94 be 0a 	call	0x157c	; 0x157c <MTIMER_voidTimer2COMPInit>
	while (GET_BIT(TIFR, OCF2) == 0  &&  G_u8Check == 0);
    1638:	e8 e5       	ldi	r30, 0x58	; 88
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	88 23       	and	r24, r24
    1640:	24 f0       	brlt	.+8      	; 0x164a <MTIMER_voidTimer2COMPDelay+0x86>
    1642:	80 91 85 01 	lds	r24, 0x0185
    1646:	88 23       	and	r24, r24
    1648:	b9 f3       	breq	.-18     	; 0x1638 <MTIMER_voidTimer2COMPDelay+0x74>
	}
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	08 95       	ret

0000165a <MTIMER_voidTimer2COMPSetCallBack>:

void MTIMER_voidTimer2COMPSetCallBack ( void (*copy_PFvoidTimer2COMP) (void))
{
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	00 d0       	rcall	.+0      	; 0x1660 <MTIMER_voidTimer2COMPSetCallBack+0x6>
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	9a 83       	std	Y+2, r25	; 0x02
    1666:	89 83       	std	Y+1, r24	; 0x01
	TIMER_PFTIMER2COMP = copy_PFvoidTimer2COMP ;
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	9a 81       	ldd	r25, Y+2	; 0x02
    166c:	90 93 6f 01 	sts	0x016F, r25
    1670:	80 93 6e 01 	sts	0x016E, r24
}
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	cf 91       	pop	r28
    167a:	df 91       	pop	r29
    167c:	08 95       	ret

0000167e <MTIMER_voidTimer2OVFInit>:


void MTIMER_voidTimer2OVFInit(void)

{
    167e:	df 93       	push	r29
    1680:	cf 93       	push	r28
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE NORMAL MODE*/
		CLR_BIT(TCCR2, WGM20);
    1686:	a5 e4       	ldi	r26, 0x45	; 69
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e5 e4       	ldi	r30, 0x45	; 69
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	8f 7b       	andi	r24, 0xBF	; 191
    1692:	8c 93       	st	X, r24
		CLR_BIT(TCCR2, WGM21);
    1694:	a5 e4       	ldi	r26, 0x45	; 69
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e5 e4       	ldi	r30, 0x45	; 69
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	87 7f       	andi	r24, 0xF7	; 247
    16a0:	8c 93       	st	X, r24

		SET_BIT(TIMSK, TOIE2);
    16a2:	a9 e5       	ldi	r26, 0x59	; 89
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e9 e5       	ldi	r30, 0x59	; 89
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	80 64       	ori	r24, 0x40	; 64
    16ae:	8c 93       	st	X, r24
		TCCR2 |= (1<<2);
		//TCCR2 = (TCCR2 & 0xf8) | 0x04;
#elif 	CLK == ONETWENTYEIGHT
		TCCR2 = (TCCR2 & 0xf8) | 0x05;
#elif 	CLK == TWOFIFTYSIX
		TCCR2 = (TCCR2 & 0xf8) | 0x06;
    16b0:	a5 e4       	ldi	r26, 0x45	; 69
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e5 e4       	ldi	r30, 0x45	; 69
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	88 7f       	andi	r24, 0xF8	; 248
    16bc:	86 60       	ori	r24, 0x06	; 6
    16be:	8c 93       	st	X, r24
#elif 	CLK == TENTWENTYFOUR
		TCCR2 = (TCCR2 & 0xf8) | 0x07;
#endif

}
    16c0:	cf 91       	pop	r28
    16c2:	df 91       	pop	r29
    16c4:	08 95       	ret

000016c6 <MTIMER_voidTimer2OVFDelay>:

void MTIMER_voidTimer2OVFDelay(u32 copy_u32Delay_ms)
{
    16c6:	ef 92       	push	r14
    16c8:	ff 92       	push	r15
    16ca:	0f 93       	push	r16
    16cc:	1f 93       	push	r17
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    16d6:	61 97       	sbiw	r28, 0x11	; 17
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	cd bf       	out	0x3d, r28	; 61
    16e2:	6e 87       	std	Y+14, r22	; 0x0e
    16e4:	7f 87       	std	Y+15, r23	; 0x0f
    16e6:	88 8b       	std	Y+16, r24	; 0x10
    16e8:	99 8b       	std	Y+17, r25	; 0x11
	f32 L_f32MaxCompare;
	f32 L_f32OverFlowCount;
	u32 L_u32Carry;
	u8 L_u8Offset;

	G_u8Check = 0;
    16ea:	10 92 85 01 	sts	0x0185, r1

	MTIMER_voidTimer2OVFInit();
    16ee:	0e 94 3f 0b 	call	0x167e	; 0x167e <MTIMER_voidTimer2OVFInit>
		L_f32MaxCompare = L_f32MaxCompare * 256 * 64;
#elif 	CLK == ONETWENTYEIGHT
		L_f32MaxCompare = (1000000.0) / F_CPU;
		L_f32MaxCompare = L_f32MaxCompare * 256 * 128;
#elif 	CLK == TWOFIFTYSIX
		L_f32MaxCompare = (1000000.0) / F_CPU;
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	a0 e0       	ldi	r26, 0x00	; 0
    16f8:	be e3       	ldi	r27, 0x3E	; 62
    16fa:	8a 87       	std	Y+10, r24	; 0x0a
    16fc:	9b 87       	std	Y+11, r25	; 0x0b
    16fe:	ac 87       	std	Y+12, r26	; 0x0c
    1700:	bd 87       	std	Y+13, r27	; 0x0d
		L_f32MaxCompare = L_f32MaxCompare * 256 * 256;
    1702:	6a 85       	ldd	r22, Y+10	; 0x0a
    1704:	7b 85       	ldd	r23, Y+11	; 0x0b
    1706:	8c 85       	ldd	r24, Y+12	; 0x0c
    1708:	9d 85       	ldd	r25, Y+13	; 0x0d
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	40 e8       	ldi	r20, 0x80	; 128
    1710:	53 e4       	ldi	r21, 0x43	; 67
    1712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	bc 01       	movw	r22, r24
    171c:	cd 01       	movw	r24, r26
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	40 e8       	ldi	r20, 0x80	; 128
    1724:	53 e4       	ldi	r21, 0x43	; 67
    1726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	8a 87       	std	Y+10, r24	; 0x0a
    1730:	9b 87       	std	Y+11, r25	; 0x0b
    1732:	ac 87       	std	Y+12, r26	; 0x0c
    1734:	bd 87       	std	Y+13, r27	; 0x0d
		L_f32MaxCompare = L_f32MaxCompare * 256 * 1024;

#endif


	if (copy_u32Delay_ms * 1000  <= L_f32MaxCompare)
    1736:	8e 85       	ldd	r24, Y+14	; 0x0e
    1738:	9f 85       	ldd	r25, Y+15	; 0x0f
    173a:	a8 89       	ldd	r26, Y+16	; 0x10
    173c:	b9 89       	ldd	r27, Y+17	; 0x11
    173e:	28 ee       	ldi	r18, 0xE8	; 232
    1740:	33 e0       	ldi	r19, 0x03	; 3
    1742:	40 e0       	ldi	r20, 0x00	; 0
    1744:	50 e0       	ldi	r21, 0x00	; 0
    1746:	bc 01       	movw	r22, r24
    1748:	cd 01       	movw	r24, r26
    174a:	0e 94 d7 13 	call	0x27ae	; 0x27ae <__mulsi3>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	bc 01       	movw	r22, r24
    1754:	cd 01       	movw	r24, r26
    1756:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	bc 01       	movw	r22, r24
    1760:	cd 01       	movw	r24, r26
    1762:	2a 85       	ldd	r18, Y+10	; 0x0a
    1764:	3b 85       	ldd	r19, Y+11	; 0x0b
    1766:	4c 85       	ldd	r20, Y+12	; 0x0c
    1768:	5d 85       	ldd	r21, Y+13	; 0x0d
    176a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__lesf2>
    176e:	18 16       	cp	r1, r24
    1770:	0c f4       	brge	.+2      	; 0x1774 <MTIMER_voidTimer2OVFDelay+0xae>
    1772:	49 c0       	rjmp	.+146    	; 0x1806 <MTIMER_voidTimer2OVFDelay+0x140>
		{
			L_f32OverFlowCount = (copy_u32Delay_ms / (L_f32MaxCompare/1000.0));
    1774:	6e 85       	ldd	r22, Y+14	; 0x0e
    1776:	7f 85       	ldd	r23, Y+15	; 0x0f
    1778:	88 89       	ldd	r24, Y+16	; 0x10
    177a:	99 89       	ldd	r25, Y+17	; 0x11
    177c:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    1780:	7b 01       	movw	r14, r22
    1782:	8c 01       	movw	r16, r24
    1784:	6a 85       	ldd	r22, Y+10	; 0x0a
    1786:	7b 85       	ldd	r23, Y+11	; 0x0b
    1788:	8c 85       	ldd	r24, Y+12	; 0x0c
    178a:	9d 85       	ldd	r25, Y+13	; 0x0d
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	4a e7       	ldi	r20, 0x7A	; 122
    1792:	54 e4       	ldi	r21, 0x44	; 68
    1794:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	9c 01       	movw	r18, r24
    179e:	ad 01       	movw	r20, r26
    17a0:	c8 01       	movw	r24, r16
    17a2:	b7 01       	movw	r22, r14
    17a4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	8e 83       	std	Y+6, r24	; 0x06
    17ae:	9f 83       	std	Y+7, r25	; 0x07
    17b0:	a8 87       	std	Y+8, r26	; 0x08
    17b2:	b9 87       	std	Y+9, r27	; 0x09
			L_u8Offset = L_f32OverFlowCount * 256.0;
    17b4:	6e 81       	ldd	r22, Y+6	; 0x06
    17b6:	7f 81       	ldd	r23, Y+7	; 0x07
    17b8:	88 85       	ldd	r24, Y+8	; 0x08
    17ba:	99 85       	ldd	r25, Y+9	; 0x09
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	40 e8       	ldi	r20, 0x80	; 128
    17c2:	53 e4       	ldi	r21, 0x43	; 67
    17c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	bc 01       	movw	r22, r24
    17ce:	cd 01       	movw	r24, r26
    17d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	89 83       	std	Y+1, r24	; 0x01
			G_u32Overflows = 1;
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	a0 e0       	ldi	r26, 0x00	; 0
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	80 93 81 01 	sts	0x0181, r24
    17e6:	90 93 82 01 	sts	0x0182, r25
    17ea:	a0 93 83 01 	sts	0x0183, r26
    17ee:	b0 93 84 01 	sts	0x0184, r27
			G_u8Reg = 256 - L_u8Offset;
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	81 95       	neg	r24
    17f6:	80 93 80 01 	sts	0x0180, r24
			TCNT2 = G_u8Reg;
    17fa:	e4 e4       	ldi	r30, 0x44	; 68
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 91 80 01 	lds	r24, 0x0180
    1802:	80 83       	st	Z, r24
    1804:	7f c0       	rjmp	.+254    	; 0x1904 <MTIMER_voidTimer2OVFDelay+0x23e>
		}
	else
	{
		L_f32OverFlowCount = (copy_u32Delay_ms / (L_f32MaxCompare/1000.0));
    1806:	6e 85       	ldd	r22, Y+14	; 0x0e
    1808:	7f 85       	ldd	r23, Y+15	; 0x0f
    180a:	88 89       	ldd	r24, Y+16	; 0x10
    180c:	99 89       	ldd	r25, Y+17	; 0x11
    180e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    1812:	7b 01       	movw	r14, r22
    1814:	8c 01       	movw	r16, r24
    1816:	6a 85       	ldd	r22, Y+10	; 0x0a
    1818:	7b 85       	ldd	r23, Y+11	; 0x0b
    181a:	8c 85       	ldd	r24, Y+12	; 0x0c
    181c:	9d 85       	ldd	r25, Y+13	; 0x0d
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	4a e7       	ldi	r20, 0x7A	; 122
    1824:	54 e4       	ldi	r21, 0x44	; 68
    1826:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	9c 01       	movw	r18, r24
    1830:	ad 01       	movw	r20, r26
    1832:	c8 01       	movw	r24, r16
    1834:	b7 01       	movw	r22, r14
    1836:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	8e 83       	std	Y+6, r24	; 0x06
    1840:	9f 83       	std	Y+7, r25	; 0x07
    1842:	a8 87       	std	Y+8, r26	; 0x08
    1844:	b9 87       	std	Y+9, r27	; 0x09
		L_u32Carry = (copy_u32Delay_ms / (L_f32MaxCompare/1000));
    1846:	6e 85       	ldd	r22, Y+14	; 0x0e
    1848:	7f 85       	ldd	r23, Y+15	; 0x0f
    184a:	88 89       	ldd	r24, Y+16	; 0x10
    184c:	99 89       	ldd	r25, Y+17	; 0x11
    184e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    1852:	7b 01       	movw	r14, r22
    1854:	8c 01       	movw	r16, r24
    1856:	6a 85       	ldd	r22, Y+10	; 0x0a
    1858:	7b 85       	ldd	r23, Y+11	; 0x0b
    185a:	8c 85       	ldd	r24, Y+12	; 0x0c
    185c:	9d 85       	ldd	r25, Y+13	; 0x0d
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	4a e7       	ldi	r20, 0x7A	; 122
    1864:	54 e4       	ldi	r21, 0x44	; 68
    1866:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	9c 01       	movw	r18, r24
    1870:	ad 01       	movw	r20, r26
    1872:	c8 01       	movw	r24, r16
    1874:	b7 01       	movw	r22, r14
    1876:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	bc 01       	movw	r22, r24
    1880:	cd 01       	movw	r24, r26
    1882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	8a 83       	std	Y+2, r24	; 0x02
    188c:	9b 83       	std	Y+3, r25	; 0x03
    188e:	ac 83       	std	Y+4, r26	; 0x04
    1890:	bd 83       	std	Y+5, r27	; 0x05

		L_u8Offset = (L_f32OverFlowCount - L_u32Carry) * 256.0;
    1892:	6a 81       	ldd	r22, Y+2	; 0x02
    1894:	7b 81       	ldd	r23, Y+3	; 0x03
    1896:	8c 81       	ldd	r24, Y+4	; 0x04
    1898:	9d 81       	ldd	r25, Y+5	; 0x05
    189a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    189e:	9b 01       	movw	r18, r22
    18a0:	ac 01       	movw	r20, r24
    18a2:	6e 81       	ldd	r22, Y+6	; 0x06
    18a4:	7f 81       	ldd	r23, Y+7	; 0x07
    18a6:	88 85       	ldd	r24, Y+8	; 0x08
    18a8:	99 85       	ldd	r25, Y+9	; 0x09
    18aa:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	bc 01       	movw	r22, r24
    18b4:	cd 01       	movw	r24, r26
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	40 e8       	ldi	r20, 0x80	; 128
    18bc:	53 e4       	ldi	r21, 0x43	; 67
    18be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	bc 01       	movw	r22, r24
    18c8:	cd 01       	movw	r24, r26
    18ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	89 83       	std	Y+1, r24	; 0x01
		G_u32Overflows = L_u32Carry +1 ;
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	9b 81       	ldd	r25, Y+3	; 0x03
    18d8:	ac 81       	ldd	r26, Y+4	; 0x04
    18da:	bd 81       	ldd	r27, Y+5	; 0x05
    18dc:	01 96       	adiw	r24, 0x01	; 1
    18de:	a1 1d       	adc	r26, r1
    18e0:	b1 1d       	adc	r27, r1
    18e2:	80 93 81 01 	sts	0x0181, r24
    18e6:	90 93 82 01 	sts	0x0182, r25
    18ea:	a0 93 83 01 	sts	0x0183, r26
    18ee:	b0 93 84 01 	sts	0x0184, r27
		G_u8Reg = 256 - L_u8Offset;
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
    18f4:	81 95       	neg	r24
    18f6:	80 93 80 01 	sts	0x0180, r24
		TCNT2 = G_u8Reg;
    18fa:	e4 e4       	ldi	r30, 0x44	; 68
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 91 80 01 	lds	r24, 0x0180
    1902:	80 83       	st	Z, r24

	}

	while (GET_BIT(TIFR, TOV2) == 0 && G_u8Check == 0);
    1904:	e8 e5       	ldi	r30, 0x58	; 88
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	82 95       	swap	r24
    190c:	86 95       	lsr	r24
    190e:	86 95       	lsr	r24
    1910:	83 70       	andi	r24, 0x03	; 3
    1912:	88 2f       	mov	r24, r24
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	81 70       	andi	r24, 0x01	; 1
    1918:	90 70       	andi	r25, 0x00	; 0
    191a:	00 97       	sbiw	r24, 0x00	; 0
    191c:	21 f4       	brne	.+8      	; 0x1926 <MTIMER_voidTimer2OVFDelay+0x260>
    191e:	80 91 85 01 	lds	r24, 0x0185
    1922:	88 23       	and	r24, r24
    1924:	79 f3       	breq	.-34     	; 0x1904 <MTIMER_voidTimer2OVFDelay+0x23e>
}
    1926:	61 96       	adiw	r28, 0x11	; 17
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	f8 94       	cli
    192c:	de bf       	out	0x3e, r29	; 62
    192e:	0f be       	out	0x3f, r0	; 63
    1930:	cd bf       	out	0x3d, r28	; 61
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	1f 91       	pop	r17
    1938:	0f 91       	pop	r16
    193a:	ff 90       	pop	r15
    193c:	ef 90       	pop	r14
    193e:	08 95       	ret

00001940 <MTIMER_voidTimer2OVFSetCallBack>:

void MTIMER_voidTimer2OVFSetCallBack ( void (*copy_PFvoidTimer2OVF) (void))
{
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	00 d0       	rcall	.+0      	; 0x1946 <MTIMER_voidTimer2OVFSetCallBack+0x6>
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
    194a:	9a 83       	std	Y+2, r25	; 0x02
    194c:	89 83       	std	Y+1, r24	; 0x01
	TIMER_PFTIMER2OVF = copy_PFvoidTimer2OVF ;
    194e:	89 81       	ldd	r24, Y+1	; 0x01
    1950:	9a 81       	ldd	r25, Y+2	; 0x02
    1952:	90 93 6d 01 	sts	0x016D, r25
    1956:	80 93 6c 01 	sts	0x016C, r24
}
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	cf 91       	pop	r28
    1960:	df 91       	pop	r29
    1962:	08 95       	ret

00001964 <MTIMER_voidTimer2FPWMInit>:


void MTIMER_voidTimer2FPWMInit()
{
    1964:	df 93       	push	r29
    1966:	cf 93       	push	r28
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE FPWM MODE*/
		SET_BIT(TCCR2, WGM20);
    196c:	a5 e4       	ldi	r26, 0x45	; 69
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e5 e4       	ldi	r30, 0x45	; 69
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	80 64       	ori	r24, 0x40	; 64
    1978:	8c 93       	st	X, r24
		SET_BIT(TCCR2, WGM21);
    197a:	a5 e4       	ldi	r26, 0x45	; 69
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	e5 e4       	ldi	r30, 0x45	; 69
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	88 60       	ori	r24, 0x08	; 8
    1986:	8c 93       	st	X, r24

		CLR_BIT(TCCR2, COM20);
    1988:	a5 e4       	ldi	r26, 0x45	; 69
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e5 e4       	ldi	r30, 0x45	; 69
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	8f 7e       	andi	r24, 0xEF	; 239
    1994:	8c 93       	st	X, r24
		SET_BIT(TCCR2, COM21);
    1996:	a5 e4       	ldi	r26, 0x45	; 69
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e5 e4       	ldi	r30, 0x45	; 69
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	80 62       	ori	r24, 0x20	; 32
    19a2:	8c 93       	st	X, r24
		TCCR2 |= (1<<2);
		//TCCR2 = (TCCR2 & 0xf8) | 0x04;
#elif 	CLK == ONETWENTYEIGHT
		TCCR2 = (TCCR2 & 0xf8) | 0x05;
#elif 	CLK == TWOFIFTYSIX
		TCCR2 = (TCCR2 & 0xf8) | 0x06;
    19a4:	a5 e4       	ldi	r26, 0x45	; 69
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e5 e4       	ldi	r30, 0x45	; 69
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	88 7f       	andi	r24, 0xF8	; 248
    19b0:	86 60       	ori	r24, 0x06	; 6
    19b2:	8c 93       	st	X, r24
#elif 	CLK == TENTWENTYFOUR
		TCCR2 = (TCCR2 & 0xf8) | 0x07;
#endif
}
    19b4:	cf 91       	pop	r28
    19b6:	df 91       	pop	r29
    19b8:	08 95       	ret

000019ba <MTIMER_voidTimer2FPWMWrite>:


void MTIMER_voidTimer2FPWMWrite(u8 copy_u8Value)
{
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	0f 92       	push	r0
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = copy_u8Value;
    19c6:	e3 e4       	ldi	r30, 0x43	; 67
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	89 81       	ldd	r24, Y+1	; 0x01
    19cc:	80 83       	st	Z, r24
}
    19ce:	0f 90       	pop	r0
    19d0:	cf 91       	pop	r28
    19d2:	df 91       	pop	r29
    19d4:	08 95       	ret

000019d6 <__vector_5>:




ISR (TIMER2_OVF_vect)
{
    19d6:	1f 92       	push	r1
    19d8:	0f 92       	push	r0
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	0f 92       	push	r0
    19de:	11 24       	eor	r1, r1
    19e0:	2f 93       	push	r18
    19e2:	3f 93       	push	r19
    19e4:	4f 93       	push	r20
    19e6:	5f 93       	push	r21
    19e8:	6f 93       	push	r22
    19ea:	7f 93       	push	r23
    19ec:	8f 93       	push	r24
    19ee:	9f 93       	push	r25
    19f0:	af 93       	push	r26
    19f2:	bf 93       	push	r27
    19f4:	ef 93       	push	r30
    19f6:	ff 93       	push	r31
    19f8:	df 93       	push	r29
    19fa:	cf 93       	push	r28
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
	static u32 L_u32OVFCounter = 0 ;
	L_u32OVFCounter ++ ;
    1a00:	80 91 78 01 	lds	r24, 0x0178
    1a04:	90 91 79 01 	lds	r25, 0x0179
    1a08:	a0 91 7a 01 	lds	r26, 0x017A
    1a0c:	b0 91 7b 01 	lds	r27, 0x017B
    1a10:	01 96       	adiw	r24, 0x01	; 1
    1a12:	a1 1d       	adc	r26, r1
    1a14:	b1 1d       	adc	r27, r1
    1a16:	80 93 78 01 	sts	0x0178, r24
    1a1a:	90 93 79 01 	sts	0x0179, r25
    1a1e:	a0 93 7a 01 	sts	0x017A, r26
    1a22:	b0 93 7b 01 	sts	0x017B, r27
	if (L_u32OVFCounter == G_u32Overflows)
    1a26:	20 91 78 01 	lds	r18, 0x0178
    1a2a:	30 91 79 01 	lds	r19, 0x0179
    1a2e:	40 91 7a 01 	lds	r20, 0x017A
    1a32:	50 91 7b 01 	lds	r21, 0x017B
    1a36:	80 91 81 01 	lds	r24, 0x0181
    1a3a:	90 91 82 01 	lds	r25, 0x0182
    1a3e:	a0 91 83 01 	lds	r26, 0x0183
    1a42:	b0 91 84 01 	lds	r27, 0x0184
    1a46:	28 17       	cp	r18, r24
    1a48:	39 07       	cpc	r19, r25
    1a4a:	4a 07       	cpc	r20, r26
    1a4c:	5b 07       	cpc	r21, r27
    1a4e:	d9 f4       	brne	.+54     	; 0x1a86 <__vector_5+0xb0>
	{
		L_u32OVFCounter = 0 ;
    1a50:	10 92 78 01 	sts	0x0178, r1
    1a54:	10 92 79 01 	sts	0x0179, r1
    1a58:	10 92 7a 01 	sts	0x017A, r1
    1a5c:	10 92 7b 01 	sts	0x017B, r1
		TCNT2 = G_u8Reg;
    1a60:	e4 e4       	ldi	r30, 0x44	; 68
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 91 80 01 	lds	r24, 0x0180
    1a68:	80 83       	st	Z, r24
		if ( TIMER_PFTIMER2OVF != NULL )
    1a6a:	80 91 6c 01 	lds	r24, 0x016C
    1a6e:	90 91 6d 01 	lds	r25, 0x016D
    1a72:	00 97       	sbiw	r24, 0x00	; 0
    1a74:	29 f0       	breq	.+10     	; 0x1a80 <__vector_5+0xaa>
			TIMER_PFTIMER2OVF() ;
    1a76:	e0 91 6c 01 	lds	r30, 0x016C
    1a7a:	f0 91 6d 01 	lds	r31, 0x016D
    1a7e:	09 95       	icall
		G_u8Check = 1;
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	80 93 85 01 	sts	0x0185, r24
	}
}
    1a86:	cf 91       	pop	r28
    1a88:	df 91       	pop	r29
    1a8a:	ff 91       	pop	r31
    1a8c:	ef 91       	pop	r30
    1a8e:	bf 91       	pop	r27
    1a90:	af 91       	pop	r26
    1a92:	9f 91       	pop	r25
    1a94:	8f 91       	pop	r24
    1a96:	7f 91       	pop	r23
    1a98:	6f 91       	pop	r22
    1a9a:	5f 91       	pop	r21
    1a9c:	4f 91       	pop	r20
    1a9e:	3f 91       	pop	r19
    1aa0:	2f 91       	pop	r18
    1aa2:	0f 90       	pop	r0
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	0f 90       	pop	r0
    1aa8:	1f 90       	pop	r1
    1aaa:	18 95       	reti

00001aac <__vector_4>:


ISR (TIMER2_COMP_vect)
{
    1aac:	1f 92       	push	r1
    1aae:	0f 92       	push	r0
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	0f 92       	push	r0
    1ab4:	11 24       	eor	r1, r1
    1ab6:	2f 93       	push	r18
    1ab8:	3f 93       	push	r19
    1aba:	4f 93       	push	r20
    1abc:	5f 93       	push	r21
    1abe:	6f 93       	push	r22
    1ac0:	7f 93       	push	r23
    1ac2:	8f 93       	push	r24
    1ac4:	9f 93       	push	r25
    1ac6:	af 93       	push	r26
    1ac8:	bf 93       	push	r27
    1aca:	ef 93       	push	r30
    1acc:	ff 93       	push	r31
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
	static u32 G_u32CompCounter = 0;
	G_u32CompCounter ++ ;
    1ad6:	80 91 7c 01 	lds	r24, 0x017C
    1ada:	90 91 7d 01 	lds	r25, 0x017D
    1ade:	a0 91 7e 01 	lds	r26, 0x017E
    1ae2:	b0 91 7f 01 	lds	r27, 0x017F
    1ae6:	01 96       	adiw	r24, 0x01	; 1
    1ae8:	a1 1d       	adc	r26, r1
    1aea:	b1 1d       	adc	r27, r1
    1aec:	80 93 7c 01 	sts	0x017C, r24
    1af0:	90 93 7d 01 	sts	0x017D, r25
    1af4:	a0 93 7e 01 	sts	0x017E, r26
    1af8:	b0 93 7f 01 	sts	0x017F, r27
	if( G_u32CompCounter == G_u32Overflows )
    1afc:	20 91 7c 01 	lds	r18, 0x017C
    1b00:	30 91 7d 01 	lds	r19, 0x017D
    1b04:	40 91 7e 01 	lds	r20, 0x017E
    1b08:	50 91 7f 01 	lds	r21, 0x017F
    1b0c:	80 91 81 01 	lds	r24, 0x0181
    1b10:	90 91 82 01 	lds	r25, 0x0182
    1b14:	a0 91 83 01 	lds	r26, 0x0183
    1b18:	b0 91 84 01 	lds	r27, 0x0184
    1b1c:	28 17       	cp	r18, r24
    1b1e:	39 07       	cpc	r19, r25
    1b20:	4a 07       	cpc	r20, r26
    1b22:	5b 07       	cpc	r21, r27
    1b24:	b9 f4       	brne	.+46     	; 0x1b54 <__vector_4+0xa8>
	{
		if(TIMER_PFTIMER2COMP != NULL)
    1b26:	80 91 6e 01 	lds	r24, 0x016E
    1b2a:	90 91 6f 01 	lds	r25, 0x016F
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
    1b30:	29 f0       	breq	.+10     	; 0x1b3c <__vector_4+0x90>
			TIMER_PFTIMER2COMP() ;
    1b32:	e0 91 6e 01 	lds	r30, 0x016E
    1b36:	f0 91 6f 01 	lds	r31, 0x016F
    1b3a:	09 95       	icall
		G_u32CompCounter = 0 ;
    1b3c:	10 92 7c 01 	sts	0x017C, r1
    1b40:	10 92 7d 01 	sts	0x017D, r1
    1b44:	10 92 7e 01 	sts	0x017E, r1
    1b48:	10 92 7f 01 	sts	0x017F, r1
		G_u8Check = 1;
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	80 93 85 01 	sts	0x0185, r24
    1b52:	3a c0       	rjmp	.+116    	; 0x1bc8 <__vector_4+0x11c>
	}
	else if(G_u32CompCounter == G_u32Overflows - 1)
    1b54:	80 91 81 01 	lds	r24, 0x0181
    1b58:	90 91 82 01 	lds	r25, 0x0182
    1b5c:	a0 91 83 01 	lds	r26, 0x0183
    1b60:	b0 91 84 01 	lds	r27, 0x0184
    1b64:	9c 01       	movw	r18, r24
    1b66:	ad 01       	movw	r20, r26
    1b68:	21 50       	subi	r18, 0x01	; 1
    1b6a:	30 40       	sbci	r19, 0x00	; 0
    1b6c:	40 40       	sbci	r20, 0x00	; 0
    1b6e:	50 40       	sbci	r21, 0x00	; 0
    1b70:	80 91 7c 01 	lds	r24, 0x017C
    1b74:	90 91 7d 01 	lds	r25, 0x017D
    1b78:	a0 91 7e 01 	lds	r26, 0x017E
    1b7c:	b0 91 7f 01 	lds	r27, 0x017F
    1b80:	28 17       	cp	r18, r24
    1b82:	39 07       	cpc	r19, r25
    1b84:	4a 07       	cpc	r20, r26
    1b86:	5b 07       	cpc	r21, r27
    1b88:	31 f4       	brne	.+12     	; 0x1b96 <__vector_4+0xea>
	{
		OCR2 = G_u8Reg;
    1b8a:	e3 e4       	ldi	r30, 0x43	; 67
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 91 80 01 	lds	r24, 0x0180
    1b92:	80 83       	st	Z, r24
    1b94:	19 c0       	rjmp	.+50     	; 0x1bc8 <__vector_4+0x11c>
	}
	else if (G_u32CompCounter != G_u32Overflows)
    1b96:	20 91 7c 01 	lds	r18, 0x017C
    1b9a:	30 91 7d 01 	lds	r19, 0x017D
    1b9e:	40 91 7e 01 	lds	r20, 0x017E
    1ba2:	50 91 7f 01 	lds	r21, 0x017F
    1ba6:	80 91 81 01 	lds	r24, 0x0181
    1baa:	90 91 82 01 	lds	r25, 0x0182
    1bae:	a0 91 83 01 	lds	r26, 0x0183
    1bb2:	b0 91 84 01 	lds	r27, 0x0184
    1bb6:	28 17       	cp	r18, r24
    1bb8:	39 07       	cpc	r19, r25
    1bba:	4a 07       	cpc	r20, r26
    1bbc:	5b 07       	cpc	r21, r27
    1bbe:	21 f0       	breq	.+8      	; 0x1bc8 <__vector_4+0x11c>
	{
		OCR2 = 255;
    1bc0:	e3 e4       	ldi	r30, 0x43	; 67
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	8f ef       	ldi	r24, 0xFF	; 255
    1bc6:	80 83       	st	Z, r24
	}

}
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	ff 91       	pop	r31
    1bce:	ef 91       	pop	r30
    1bd0:	bf 91       	pop	r27
    1bd2:	af 91       	pop	r26
    1bd4:	9f 91       	pop	r25
    1bd6:	8f 91       	pop	r24
    1bd8:	7f 91       	pop	r23
    1bda:	6f 91       	pop	r22
    1bdc:	5f 91       	pop	r21
    1bde:	4f 91       	pop	r20
    1be0:	3f 91       	pop	r19
    1be2:	2f 91       	pop	r18
    1be4:	0f 90       	pop	r0
    1be6:	0f be       	out	0x3f, r0	; 63
    1be8:	0f 90       	pop	r0
    1bea:	1f 90       	pop	r1
    1bec:	18 95       	reti

00001bee <MDIO_voidDioSetPinDirection>:




void MDIO_voidDioSetPinDirection(u8 copy_u8Port, u8 copy_u8Pin, u8 copy_u8Direction)
{
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
    1bf6:	27 97       	sbiw	r28, 0x07	; 7
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	f8 94       	cli
    1bfc:	de bf       	out	0x3e, r29	; 62
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	cd bf       	out	0x3d, r28	; 61
    1c02:	89 83       	std	Y+1, r24	; 0x01
    1c04:	6a 83       	std	Y+2, r22	; 0x02
    1c06:	4b 83       	std	Y+3, r20	; 0x03
	if (copy_u8Direction == DIO_OUT)
    1c08:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0a:	81 30       	cpi	r24, 0x01	; 1
    1c0c:	09 f0       	breq	.+2      	; 0x1c10 <MDIO_voidDioSetPinDirection+0x22>
    1c0e:	6f c0       	rjmp	.+222    	; 0x1cee <MDIO_voidDioSetPinDirection+0x100>
	{
		switch (copy_u8Port)
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	3f 83       	std	Y+7, r19	; 0x07
    1c18:	2e 83       	std	Y+6, r18	; 0x06
    1c1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c1c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c1e:	81 30       	cpi	r24, 0x01	; 1
    1c20:	91 05       	cpc	r25, r1
    1c22:	49 f1       	breq	.+82     	; 0x1c76 <MDIO_voidDioSetPinDirection+0x88>
    1c24:	2e 81       	ldd	r18, Y+6	; 0x06
    1c26:	3f 81       	ldd	r19, Y+7	; 0x07
    1c28:	22 30       	cpi	r18, 0x02	; 2
    1c2a:	31 05       	cpc	r19, r1
    1c2c:	2c f4       	brge	.+10     	; 0x1c38 <MDIO_voidDioSetPinDirection+0x4a>
    1c2e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c30:	9f 81       	ldd	r25, Y+7	; 0x07
    1c32:	00 97       	sbiw	r24, 0x00	; 0
    1c34:	61 f0       	breq	.+24     	; 0x1c4e <MDIO_voidDioSetPinDirection+0x60>
    1c36:	d2 c0       	rjmp	.+420    	; 0x1ddc <MDIO_voidDioSetPinDirection+0x1ee>
    1c38:	2e 81       	ldd	r18, Y+6	; 0x06
    1c3a:	3f 81       	ldd	r19, Y+7	; 0x07
    1c3c:	22 30       	cpi	r18, 0x02	; 2
    1c3e:	31 05       	cpc	r19, r1
    1c40:	71 f1       	breq	.+92     	; 0x1c9e <MDIO_voidDioSetPinDirection+0xb0>
    1c42:	8e 81       	ldd	r24, Y+6	; 0x06
    1c44:	9f 81       	ldd	r25, Y+7	; 0x07
    1c46:	83 30       	cpi	r24, 0x03	; 3
    1c48:	91 05       	cpc	r25, r1
    1c4a:	e9 f1       	breq	.+122    	; 0x1cc6 <MDIO_voidDioSetPinDirection+0xd8>
    1c4c:	c7 c0       	rjmp	.+398    	; 0x1ddc <MDIO_voidDioSetPinDirection+0x1ee>
		{
			case DIO_PORTA:SET_BIT(DDRA, copy_u8Pin); break;
    1c4e:	aa e3       	ldi	r26, 0x3A	; 58
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	ea e3       	ldi	r30, 0x3A	; 58
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	48 2f       	mov	r20, r24
    1c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5c:	28 2f       	mov	r18, r24
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	02 2e       	mov	r0, r18
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <MDIO_voidDioSetPinDirection+0x7e>
    1c68:	88 0f       	add	r24, r24
    1c6a:	99 1f       	adc	r25, r25
    1c6c:	0a 94       	dec	r0
    1c6e:	e2 f7       	brpl	.-8      	; 0x1c68 <MDIO_voidDioSetPinDirection+0x7a>
    1c70:	84 2b       	or	r24, r20
    1c72:	8c 93       	st	X, r24
    1c74:	b3 c0       	rjmp	.+358    	; 0x1ddc <MDIO_voidDioSetPinDirection+0x1ee>
			case DIO_PORTB:SET_BIT(DDRB, copy_u8Pin); break;
    1c76:	a7 e3       	ldi	r26, 0x37	; 55
    1c78:	b0 e0       	ldi	r27, 0x00	; 0
    1c7a:	e7 e3       	ldi	r30, 0x37	; 55
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	80 81       	ld	r24, Z
    1c80:	48 2f       	mov	r20, r24
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	28 2f       	mov	r18, r24
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	02 2e       	mov	r0, r18
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <MDIO_voidDioSetPinDirection+0xa6>
    1c90:	88 0f       	add	r24, r24
    1c92:	99 1f       	adc	r25, r25
    1c94:	0a 94       	dec	r0
    1c96:	e2 f7       	brpl	.-8      	; 0x1c90 <MDIO_voidDioSetPinDirection+0xa2>
    1c98:	84 2b       	or	r24, r20
    1c9a:	8c 93       	st	X, r24
    1c9c:	9f c0       	rjmp	.+318    	; 0x1ddc <MDIO_voidDioSetPinDirection+0x1ee>
			case DIO_PORTC:SET_BIT(DDRC, copy_u8Pin); break;
    1c9e:	a4 e3       	ldi	r26, 0x34	; 52
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	e4 e3       	ldi	r30, 0x34	; 52
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	48 2f       	mov	r20, r24
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	28 2f       	mov	r18, r24
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	02 2e       	mov	r0, r18
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <MDIO_voidDioSetPinDirection+0xce>
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	0a 94       	dec	r0
    1cbe:	e2 f7       	brpl	.-8      	; 0x1cb8 <MDIO_voidDioSetPinDirection+0xca>
    1cc0:	84 2b       	or	r24, r20
    1cc2:	8c 93       	st	X, r24
    1cc4:	8b c0       	rjmp	.+278    	; 0x1ddc <MDIO_voidDioSetPinDirection+0x1ee>
			case DIO_PORTD:SET_BIT(DDRD, copy_u8Pin); break;
    1cc6:	a1 e3       	ldi	r26, 0x31	; 49
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	e1 e3       	ldi	r30, 0x31	; 49
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	48 2f       	mov	r20, r24
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd4:	28 2f       	mov	r18, r24
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	02 2e       	mov	r0, r18
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <MDIO_voidDioSetPinDirection+0xf6>
    1ce0:	88 0f       	add	r24, r24
    1ce2:	99 1f       	adc	r25, r25
    1ce4:	0a 94       	dec	r0
    1ce6:	e2 f7       	brpl	.-8      	; 0x1ce0 <MDIO_voidDioSetPinDirection+0xf2>
    1ce8:	84 2b       	or	r24, r20
    1cea:	8c 93       	st	X, r24
    1cec:	77 c0       	rjmp	.+238    	; 0x1ddc <MDIO_voidDioSetPinDirection+0x1ee>
		}
	}
	else if(copy_u8Direction == DIO_IN)
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	88 23       	and	r24, r24
    1cf2:	09 f0       	breq	.+2      	; 0x1cf6 <MDIO_voidDioSetPinDirection+0x108>
    1cf4:	73 c0       	rjmp	.+230    	; 0x1ddc <MDIO_voidDioSetPinDirection+0x1ee>
	{
		switch (copy_u8Port)
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
    1cf8:	28 2f       	mov	r18, r24
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	3d 83       	std	Y+5, r19	; 0x05
    1cfe:	2c 83       	std	Y+4, r18	; 0x04
    1d00:	8c 81       	ldd	r24, Y+4	; 0x04
    1d02:	9d 81       	ldd	r25, Y+5	; 0x05
    1d04:	81 30       	cpi	r24, 0x01	; 1
    1d06:	91 05       	cpc	r25, r1
    1d08:	59 f1       	breq	.+86     	; 0x1d60 <MDIO_voidDioSetPinDirection+0x172>
    1d0a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d0c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d0e:	22 30       	cpi	r18, 0x02	; 2
    1d10:	31 05       	cpc	r19, r1
    1d12:	2c f4       	brge	.+10     	; 0x1d1e <MDIO_voidDioSetPinDirection+0x130>
    1d14:	8c 81       	ldd	r24, Y+4	; 0x04
    1d16:	9d 81       	ldd	r25, Y+5	; 0x05
    1d18:	00 97       	sbiw	r24, 0x00	; 0
    1d1a:	69 f0       	breq	.+26     	; 0x1d36 <MDIO_voidDioSetPinDirection+0x148>
    1d1c:	5f c0       	rjmp	.+190    	; 0x1ddc <MDIO_voidDioSetPinDirection+0x1ee>
    1d1e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d20:	3d 81       	ldd	r19, Y+5	; 0x05
    1d22:	22 30       	cpi	r18, 0x02	; 2
    1d24:	31 05       	cpc	r19, r1
    1d26:	89 f1       	breq	.+98     	; 0x1d8a <MDIO_voidDioSetPinDirection+0x19c>
    1d28:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d2c:	83 30       	cpi	r24, 0x03	; 3
    1d2e:	91 05       	cpc	r25, r1
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <MDIO_voidDioSetPinDirection+0x146>
    1d32:	40 c0       	rjmp	.+128    	; 0x1db4 <MDIO_voidDioSetPinDirection+0x1c6>
    1d34:	53 c0       	rjmp	.+166    	; 0x1ddc <MDIO_voidDioSetPinDirection+0x1ee>
		{
			case DIO_PORTA:CLR_BIT(DDRA, copy_u8Pin); break;
    1d36:	aa e3       	ldi	r26, 0x3A	; 58
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	ea e3       	ldi	r30, 0x3A	; 58
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	48 2f       	mov	r20, r24
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	28 2f       	mov	r18, r24
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	02 2e       	mov	r0, r18
    1d4e:	02 c0       	rjmp	.+4      	; 0x1d54 <MDIO_voidDioSetPinDirection+0x166>
    1d50:	88 0f       	add	r24, r24
    1d52:	99 1f       	adc	r25, r25
    1d54:	0a 94       	dec	r0
    1d56:	e2 f7       	brpl	.-8      	; 0x1d50 <MDIO_voidDioSetPinDirection+0x162>
    1d58:	80 95       	com	r24
    1d5a:	84 23       	and	r24, r20
    1d5c:	8c 93       	st	X, r24
    1d5e:	3e c0       	rjmp	.+124    	; 0x1ddc <MDIO_voidDioSetPinDirection+0x1ee>
			case DIO_PORTB:CLR_BIT(DDRB, copy_u8Pin); break;
    1d60:	a7 e3       	ldi	r26, 0x37	; 55
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	e7 e3       	ldi	r30, 0x37	; 55
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	48 2f       	mov	r20, r24
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	28 2f       	mov	r18, r24
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	02 2e       	mov	r0, r18
    1d78:	02 c0       	rjmp	.+4      	; 0x1d7e <MDIO_voidDioSetPinDirection+0x190>
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	0a 94       	dec	r0
    1d80:	e2 f7       	brpl	.-8      	; 0x1d7a <MDIO_voidDioSetPinDirection+0x18c>
    1d82:	80 95       	com	r24
    1d84:	84 23       	and	r24, r20
    1d86:	8c 93       	st	X, r24
    1d88:	29 c0       	rjmp	.+82     	; 0x1ddc <MDIO_voidDioSetPinDirection+0x1ee>
			case DIO_PORTC:CLR_BIT(DDRC, copy_u8Pin); break;
    1d8a:	a4 e3       	ldi	r26, 0x34	; 52
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	e4 e3       	ldi	r30, 0x34	; 52
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	48 2f       	mov	r20, r24
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	28 2f       	mov	r18, r24
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	02 2e       	mov	r0, r18
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <MDIO_voidDioSetPinDirection+0x1ba>
    1da4:	88 0f       	add	r24, r24
    1da6:	99 1f       	adc	r25, r25
    1da8:	0a 94       	dec	r0
    1daa:	e2 f7       	brpl	.-8      	; 0x1da4 <MDIO_voidDioSetPinDirection+0x1b6>
    1dac:	80 95       	com	r24
    1dae:	84 23       	and	r24, r20
    1db0:	8c 93       	st	X, r24
    1db2:	14 c0       	rjmp	.+40     	; 0x1ddc <MDIO_voidDioSetPinDirection+0x1ee>
			case DIO_PORTD:CLR_BIT(DDRD, copy_u8Pin); break;
    1db4:	a1 e3       	ldi	r26, 0x31	; 49
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	e1 e3       	ldi	r30, 0x31	; 49
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	48 2f       	mov	r20, r24
    1dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc2:	28 2f       	mov	r18, r24
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	02 2e       	mov	r0, r18
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <MDIO_voidDioSetPinDirection+0x1e4>
    1dce:	88 0f       	add	r24, r24
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	0a 94       	dec	r0
    1dd4:	e2 f7       	brpl	.-8      	; 0x1dce <MDIO_voidDioSetPinDirection+0x1e0>
    1dd6:	80 95       	com	r24
    1dd8:	84 23       	and	r24, r20
    1dda:	8c 93       	st	X, r24
		}
	}
}
    1ddc:	27 96       	adiw	r28, 0x07	; 7
    1dde:	0f b6       	in	r0, 0x3f	; 63
    1de0:	f8 94       	cli
    1de2:	de bf       	out	0x3e, r29	; 62
    1de4:	0f be       	out	0x3f, r0	; 63
    1de6:	cd bf       	out	0x3d, r28	; 61
    1de8:	cf 91       	pop	r28
    1dea:	df 91       	pop	r29
    1dec:	08 95       	ret

00001dee <MDIO_voidDioSetPinValue>:

void MDIO_voidDioSetPinValue (u8 copy_u8Port, u8 copy_u8Pin, u8 copy_u8Value)
{
    1dee:	df 93       	push	r29
    1df0:	cf 93       	push	r28
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
    1df6:	27 97       	sbiw	r28, 0x07	; 7
    1df8:	0f b6       	in	r0, 0x3f	; 63
    1dfa:	f8 94       	cli
    1dfc:	de bf       	out	0x3e, r29	; 62
    1dfe:	0f be       	out	0x3f, r0	; 63
    1e00:	cd bf       	out	0x3d, r28	; 61
    1e02:	89 83       	std	Y+1, r24	; 0x01
    1e04:	6a 83       	std	Y+2, r22	; 0x02
    1e06:	4b 83       	std	Y+3, r20	; 0x03
	if (copy_u8Value == HIGH)
    1e08:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0a:	81 30       	cpi	r24, 0x01	; 1
    1e0c:	09 f0       	breq	.+2      	; 0x1e10 <MDIO_voidDioSetPinValue+0x22>
    1e0e:	6f c0       	rjmp	.+222    	; 0x1eee <MDIO_voidDioSetPinValue+0x100>
	{
		switch(copy_u8Port)
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	3f 83       	std	Y+7, r19	; 0x07
    1e18:	2e 83       	std	Y+6, r18	; 0x06
    1e1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e1c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e1e:	81 30       	cpi	r24, 0x01	; 1
    1e20:	91 05       	cpc	r25, r1
    1e22:	49 f1       	breq	.+82     	; 0x1e76 <MDIO_voidDioSetPinValue+0x88>
    1e24:	2e 81       	ldd	r18, Y+6	; 0x06
    1e26:	3f 81       	ldd	r19, Y+7	; 0x07
    1e28:	22 30       	cpi	r18, 0x02	; 2
    1e2a:	31 05       	cpc	r19, r1
    1e2c:	2c f4       	brge	.+10     	; 0x1e38 <MDIO_voidDioSetPinValue+0x4a>
    1e2e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e30:	9f 81       	ldd	r25, Y+7	; 0x07
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	61 f0       	breq	.+24     	; 0x1e4e <MDIO_voidDioSetPinValue+0x60>
    1e36:	d2 c0       	rjmp	.+420    	; 0x1fdc <MDIO_voidDioSetPinValue+0x1ee>
    1e38:	2e 81       	ldd	r18, Y+6	; 0x06
    1e3a:	3f 81       	ldd	r19, Y+7	; 0x07
    1e3c:	22 30       	cpi	r18, 0x02	; 2
    1e3e:	31 05       	cpc	r19, r1
    1e40:	71 f1       	breq	.+92     	; 0x1e9e <MDIO_voidDioSetPinValue+0xb0>
    1e42:	8e 81       	ldd	r24, Y+6	; 0x06
    1e44:	9f 81       	ldd	r25, Y+7	; 0x07
    1e46:	83 30       	cpi	r24, 0x03	; 3
    1e48:	91 05       	cpc	r25, r1
    1e4a:	e9 f1       	breq	.+122    	; 0x1ec6 <MDIO_voidDioSetPinValue+0xd8>
    1e4c:	c7 c0       	rjmp	.+398    	; 0x1fdc <MDIO_voidDioSetPinValue+0x1ee>
		{
			case DIO_PORTA: SET_BIT(PORTA, copy_u8Pin); break;
    1e4e:	ab e3       	ldi	r26, 0x3B	; 59
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	eb e3       	ldi	r30, 0x3B	; 59
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	48 2f       	mov	r20, r24
    1e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5c:	28 2f       	mov	r18, r24
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	02 2e       	mov	r0, r18
    1e66:	02 c0       	rjmp	.+4      	; 0x1e6c <MDIO_voidDioSetPinValue+0x7e>
    1e68:	88 0f       	add	r24, r24
    1e6a:	99 1f       	adc	r25, r25
    1e6c:	0a 94       	dec	r0
    1e6e:	e2 f7       	brpl	.-8      	; 0x1e68 <MDIO_voidDioSetPinValue+0x7a>
    1e70:	84 2b       	or	r24, r20
    1e72:	8c 93       	st	X, r24
    1e74:	b3 c0       	rjmp	.+358    	; 0x1fdc <MDIO_voidDioSetPinValue+0x1ee>
			case DIO_PORTB: SET_BIT(PORTB, copy_u8Pin); break;
    1e76:	a8 e3       	ldi	r26, 0x38	; 56
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e8 e3       	ldi	r30, 0x38	; 56
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	48 2f       	mov	r20, r24
    1e82:	8a 81       	ldd	r24, Y+2	; 0x02
    1e84:	28 2f       	mov	r18, r24
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	02 2e       	mov	r0, r18
    1e8e:	02 c0       	rjmp	.+4      	; 0x1e94 <MDIO_voidDioSetPinValue+0xa6>
    1e90:	88 0f       	add	r24, r24
    1e92:	99 1f       	adc	r25, r25
    1e94:	0a 94       	dec	r0
    1e96:	e2 f7       	brpl	.-8      	; 0x1e90 <MDIO_voidDioSetPinValue+0xa2>
    1e98:	84 2b       	or	r24, r20
    1e9a:	8c 93       	st	X, r24
    1e9c:	9f c0       	rjmp	.+318    	; 0x1fdc <MDIO_voidDioSetPinValue+0x1ee>
			case DIO_PORTC: SET_BIT(PORTC, copy_u8Pin); break;
    1e9e:	a5 e3       	ldi	r26, 0x35	; 53
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	e5 e3       	ldi	r30, 0x35	; 53
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	48 2f       	mov	r20, r24
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	28 2f       	mov	r18, r24
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	02 2e       	mov	r0, r18
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <MDIO_voidDioSetPinValue+0xce>
    1eb8:	88 0f       	add	r24, r24
    1eba:	99 1f       	adc	r25, r25
    1ebc:	0a 94       	dec	r0
    1ebe:	e2 f7       	brpl	.-8      	; 0x1eb8 <MDIO_voidDioSetPinValue+0xca>
    1ec0:	84 2b       	or	r24, r20
    1ec2:	8c 93       	st	X, r24
    1ec4:	8b c0       	rjmp	.+278    	; 0x1fdc <MDIO_voidDioSetPinValue+0x1ee>
			case DIO_PORTD: SET_BIT(PORTD, copy_u8Pin); break;
    1ec6:	a2 e3       	ldi	r26, 0x32	; 50
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	e2 e3       	ldi	r30, 0x32	; 50
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	48 2f       	mov	r20, r24
    1ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed4:	28 2f       	mov	r18, r24
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	02 2e       	mov	r0, r18
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <MDIO_voidDioSetPinValue+0xf6>
    1ee0:	88 0f       	add	r24, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	0a 94       	dec	r0
    1ee6:	e2 f7       	brpl	.-8      	; 0x1ee0 <MDIO_voidDioSetPinValue+0xf2>
    1ee8:	84 2b       	or	r24, r20
    1eea:	8c 93       	st	X, r24
    1eec:	77 c0       	rjmp	.+238    	; 0x1fdc <MDIO_voidDioSetPinValue+0x1ee>
		}
	}
	else if (copy_u8Value == LOW)
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	88 23       	and	r24, r24
    1ef2:	09 f0       	breq	.+2      	; 0x1ef6 <MDIO_voidDioSetPinValue+0x108>
    1ef4:	73 c0       	rjmp	.+230    	; 0x1fdc <MDIO_voidDioSetPinValue+0x1ee>
	{
		switch(copy_u8Port)
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	28 2f       	mov	r18, r24
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	3d 83       	std	Y+5, r19	; 0x05
    1efe:	2c 83       	std	Y+4, r18	; 0x04
    1f00:	8c 81       	ldd	r24, Y+4	; 0x04
    1f02:	9d 81       	ldd	r25, Y+5	; 0x05
    1f04:	81 30       	cpi	r24, 0x01	; 1
    1f06:	91 05       	cpc	r25, r1
    1f08:	59 f1       	breq	.+86     	; 0x1f60 <MDIO_voidDioSetPinValue+0x172>
    1f0a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f0c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f0e:	22 30       	cpi	r18, 0x02	; 2
    1f10:	31 05       	cpc	r19, r1
    1f12:	2c f4       	brge	.+10     	; 0x1f1e <MDIO_voidDioSetPinValue+0x130>
    1f14:	8c 81       	ldd	r24, Y+4	; 0x04
    1f16:	9d 81       	ldd	r25, Y+5	; 0x05
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	69 f0       	breq	.+26     	; 0x1f36 <MDIO_voidDioSetPinValue+0x148>
    1f1c:	5f c0       	rjmp	.+190    	; 0x1fdc <MDIO_voidDioSetPinValue+0x1ee>
    1f1e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f20:	3d 81       	ldd	r19, Y+5	; 0x05
    1f22:	22 30       	cpi	r18, 0x02	; 2
    1f24:	31 05       	cpc	r19, r1
    1f26:	89 f1       	breq	.+98     	; 0x1f8a <MDIO_voidDioSetPinValue+0x19c>
    1f28:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2c:	83 30       	cpi	r24, 0x03	; 3
    1f2e:	91 05       	cpc	r25, r1
    1f30:	09 f4       	brne	.+2      	; 0x1f34 <MDIO_voidDioSetPinValue+0x146>
    1f32:	40 c0       	rjmp	.+128    	; 0x1fb4 <MDIO_voidDioSetPinValue+0x1c6>
    1f34:	53 c0       	rjmp	.+166    	; 0x1fdc <MDIO_voidDioSetPinValue+0x1ee>
		{
			case DIO_PORTA: CLR_BIT(PORTA, copy_u8Pin); break;
    1f36:	ab e3       	ldi	r26, 0x3B	; 59
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	eb e3       	ldi	r30, 0x3B	; 59
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	48 2f       	mov	r20, r24
    1f42:	8a 81       	ldd	r24, Y+2	; 0x02
    1f44:	28 2f       	mov	r18, r24
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	02 2e       	mov	r0, r18
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <MDIO_voidDioSetPinValue+0x166>
    1f50:	88 0f       	add	r24, r24
    1f52:	99 1f       	adc	r25, r25
    1f54:	0a 94       	dec	r0
    1f56:	e2 f7       	brpl	.-8      	; 0x1f50 <MDIO_voidDioSetPinValue+0x162>
    1f58:	80 95       	com	r24
    1f5a:	84 23       	and	r24, r20
    1f5c:	8c 93       	st	X, r24
    1f5e:	3e c0       	rjmp	.+124    	; 0x1fdc <MDIO_voidDioSetPinValue+0x1ee>
			case DIO_PORTB: CLR_BIT(PORTB, copy_u8Pin); break;
    1f60:	a8 e3       	ldi	r26, 0x38	; 56
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	e8 e3       	ldi	r30, 0x38	; 56
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	48 2f       	mov	r20, r24
    1f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6e:	28 2f       	mov	r18, r24
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	02 2e       	mov	r0, r18
    1f78:	02 c0       	rjmp	.+4      	; 0x1f7e <MDIO_voidDioSetPinValue+0x190>
    1f7a:	88 0f       	add	r24, r24
    1f7c:	99 1f       	adc	r25, r25
    1f7e:	0a 94       	dec	r0
    1f80:	e2 f7       	brpl	.-8      	; 0x1f7a <MDIO_voidDioSetPinValue+0x18c>
    1f82:	80 95       	com	r24
    1f84:	84 23       	and	r24, r20
    1f86:	8c 93       	st	X, r24
    1f88:	29 c0       	rjmp	.+82     	; 0x1fdc <MDIO_voidDioSetPinValue+0x1ee>
			case DIO_PORTC: CLR_BIT(PORTC, copy_u8Pin); break;
    1f8a:	a5 e3       	ldi	r26, 0x35	; 53
    1f8c:	b0 e0       	ldi	r27, 0x00	; 0
    1f8e:	e5 e3       	ldi	r30, 0x35	; 53
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	80 81       	ld	r24, Z
    1f94:	48 2f       	mov	r20, r24
    1f96:	8a 81       	ldd	r24, Y+2	; 0x02
    1f98:	28 2f       	mov	r18, r24
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	02 2e       	mov	r0, r18
    1fa2:	02 c0       	rjmp	.+4      	; 0x1fa8 <MDIO_voidDioSetPinValue+0x1ba>
    1fa4:	88 0f       	add	r24, r24
    1fa6:	99 1f       	adc	r25, r25
    1fa8:	0a 94       	dec	r0
    1faa:	e2 f7       	brpl	.-8      	; 0x1fa4 <MDIO_voidDioSetPinValue+0x1b6>
    1fac:	80 95       	com	r24
    1fae:	84 23       	and	r24, r20
    1fb0:	8c 93       	st	X, r24
    1fb2:	14 c0       	rjmp	.+40     	; 0x1fdc <MDIO_voidDioSetPinValue+0x1ee>
			case DIO_PORTD: CLR_BIT(PORTD, copy_u8Pin); break;
    1fb4:	a2 e3       	ldi	r26, 0x32	; 50
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	e2 e3       	ldi	r30, 0x32	; 50
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	48 2f       	mov	r20, r24
    1fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc2:	28 2f       	mov	r18, r24
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	02 2e       	mov	r0, r18
    1fcc:	02 c0       	rjmp	.+4      	; 0x1fd2 <MDIO_voidDioSetPinValue+0x1e4>
    1fce:	88 0f       	add	r24, r24
    1fd0:	99 1f       	adc	r25, r25
    1fd2:	0a 94       	dec	r0
    1fd4:	e2 f7       	brpl	.-8      	; 0x1fce <MDIO_voidDioSetPinValue+0x1e0>
    1fd6:	80 95       	com	r24
    1fd8:	84 23       	and	r24, r20
    1fda:	8c 93       	st	X, r24
		}
	}
}
    1fdc:	27 96       	adiw	r28, 0x07	; 7
    1fde:	0f b6       	in	r0, 0x3f	; 63
    1fe0:	f8 94       	cli
    1fe2:	de bf       	out	0x3e, r29	; 62
    1fe4:	0f be       	out	0x3f, r0	; 63
    1fe6:	cd bf       	out	0x3d, r28	; 61
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	08 95       	ret

00001fee <MDIO_u8DioGetPinValue>:

u8 MDIO_u8DioGetPinValue (u8 copy_u8Port, u8 copy_u8Pin)
{
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	00 d0       	rcall	.+0      	; 0x1ff4 <MDIO_u8DioGetPinValue+0x6>
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <MDIO_u8DioGetPinValue+0x8>
    1ff6:	0f 92       	push	r0
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    1ffc:	8a 83       	std	Y+2, r24	; 0x02
    1ffe:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8Value;
	switch(copy_u8Port)
    2000:	8a 81       	ldd	r24, Y+2	; 0x02
    2002:	28 2f       	mov	r18, r24
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	3d 83       	std	Y+5, r19	; 0x05
    2008:	2c 83       	std	Y+4, r18	; 0x04
    200a:	4c 81       	ldd	r20, Y+4	; 0x04
    200c:	5d 81       	ldd	r21, Y+5	; 0x05
    200e:	41 30       	cpi	r20, 0x01	; 1
    2010:	51 05       	cpc	r21, r1
    2012:	41 f1       	breq	.+80     	; 0x2064 <MDIO_u8DioGetPinValue+0x76>
    2014:	8c 81       	ldd	r24, Y+4	; 0x04
    2016:	9d 81       	ldd	r25, Y+5	; 0x05
    2018:	82 30       	cpi	r24, 0x02	; 2
    201a:	91 05       	cpc	r25, r1
    201c:	34 f4       	brge	.+12     	; 0x202a <MDIO_u8DioGetPinValue+0x3c>
    201e:	2c 81       	ldd	r18, Y+4	; 0x04
    2020:	3d 81       	ldd	r19, Y+5	; 0x05
    2022:	21 15       	cp	r18, r1
    2024:	31 05       	cpc	r19, r1
    2026:	61 f0       	breq	.+24     	; 0x2040 <MDIO_u8DioGetPinValue+0x52>
    2028:	52 c0       	rjmp	.+164    	; 0x20ce <MDIO_u8DioGetPinValue+0xe0>
    202a:	4c 81       	ldd	r20, Y+4	; 0x04
    202c:	5d 81       	ldd	r21, Y+5	; 0x05
    202e:	42 30       	cpi	r20, 0x02	; 2
    2030:	51 05       	cpc	r21, r1
    2032:	51 f1       	breq	.+84     	; 0x2088 <MDIO_u8DioGetPinValue+0x9a>
    2034:	8c 81       	ldd	r24, Y+4	; 0x04
    2036:	9d 81       	ldd	r25, Y+5	; 0x05
    2038:	83 30       	cpi	r24, 0x03	; 3
    203a:	91 05       	cpc	r25, r1
    203c:	b9 f1       	breq	.+110    	; 0x20ac <MDIO_u8DioGetPinValue+0xbe>
    203e:	47 c0       	rjmp	.+142    	; 0x20ce <MDIO_u8DioGetPinValue+0xe0>
		{
			case DIO_PORTA: L_u8Value = GET_BIT(PINA, copy_u8Pin); break;
    2040:	e9 e3       	ldi	r30, 0x39	; 57
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	28 2f       	mov	r18, r24
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	8b 81       	ldd	r24, Y+3	; 0x03
    204c:	88 2f       	mov	r24, r24
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	a9 01       	movw	r20, r18
    2052:	02 c0       	rjmp	.+4      	; 0x2058 <MDIO_u8DioGetPinValue+0x6a>
    2054:	55 95       	asr	r21
    2056:	47 95       	ror	r20
    2058:	8a 95       	dec	r24
    205a:	e2 f7       	brpl	.-8      	; 0x2054 <MDIO_u8DioGetPinValue+0x66>
    205c:	ca 01       	movw	r24, r20
    205e:	81 70       	andi	r24, 0x01	; 1
    2060:	89 83       	std	Y+1, r24	; 0x01
    2062:	35 c0       	rjmp	.+106    	; 0x20ce <MDIO_u8DioGetPinValue+0xe0>
			case DIO_PORTB: L_u8Value = GET_BIT(PINB, copy_u8Pin); break;
    2064:	e6 e3       	ldi	r30, 0x36	; 54
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	28 2f       	mov	r18, r24
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	8b 81       	ldd	r24, Y+3	; 0x03
    2070:	88 2f       	mov	r24, r24
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	a9 01       	movw	r20, r18
    2076:	02 c0       	rjmp	.+4      	; 0x207c <MDIO_u8DioGetPinValue+0x8e>
    2078:	55 95       	asr	r21
    207a:	47 95       	ror	r20
    207c:	8a 95       	dec	r24
    207e:	e2 f7       	brpl	.-8      	; 0x2078 <MDIO_u8DioGetPinValue+0x8a>
    2080:	ca 01       	movw	r24, r20
    2082:	81 70       	andi	r24, 0x01	; 1
    2084:	89 83       	std	Y+1, r24	; 0x01
    2086:	23 c0       	rjmp	.+70     	; 0x20ce <MDIO_u8DioGetPinValue+0xe0>
			case DIO_PORTC: L_u8Value = GET_BIT(PINC, copy_u8Pin); break;
    2088:	e3 e3       	ldi	r30, 0x33	; 51
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	28 2f       	mov	r18, r24
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	8b 81       	ldd	r24, Y+3	; 0x03
    2094:	88 2f       	mov	r24, r24
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	a9 01       	movw	r20, r18
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <MDIO_u8DioGetPinValue+0xb2>
    209c:	55 95       	asr	r21
    209e:	47 95       	ror	r20
    20a0:	8a 95       	dec	r24
    20a2:	e2 f7       	brpl	.-8      	; 0x209c <MDIO_u8DioGetPinValue+0xae>
    20a4:	ca 01       	movw	r24, r20
    20a6:	81 70       	andi	r24, 0x01	; 1
    20a8:	89 83       	std	Y+1, r24	; 0x01
    20aa:	11 c0       	rjmp	.+34     	; 0x20ce <MDIO_u8DioGetPinValue+0xe0>
			case DIO_PORTD: L_u8Value = GET_BIT(PIND, copy_u8Pin); break;
    20ac:	e0 e3       	ldi	r30, 0x30	; 48
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	28 2f       	mov	r18, r24
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	8b 81       	ldd	r24, Y+3	; 0x03
    20b8:	88 2f       	mov	r24, r24
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	a9 01       	movw	r20, r18
    20be:	02 c0       	rjmp	.+4      	; 0x20c4 <MDIO_u8DioGetPinValue+0xd6>
    20c0:	55 95       	asr	r21
    20c2:	47 95       	ror	r20
    20c4:	8a 95       	dec	r24
    20c6:	e2 f7       	brpl	.-8      	; 0x20c0 <MDIO_u8DioGetPinValue+0xd2>
    20c8:	ca 01       	movw	r24, r20
    20ca:	81 70       	andi	r24, 0x01	; 1
    20cc:	89 83       	std	Y+1, r24	; 0x01
		}
	return L_u8Value;
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	cf 91       	pop	r28
    20dc:	df 91       	pop	r29
    20de:	08 95       	ret

000020e0 <MDIO_voidDioTogglePin>:

void MDIO_voidDioTogglePin (u8 copy_u8Port, u8 copy_u8Pin)
{
    20e0:	df 93       	push	r29
    20e2:	cf 93       	push	r28
    20e4:	00 d0       	rcall	.+0      	; 0x20e6 <MDIO_voidDioTogglePin+0x6>
    20e6:	00 d0       	rcall	.+0      	; 0x20e8 <MDIO_voidDioTogglePin+0x8>
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
    20ec:	89 83       	std	Y+1, r24	; 0x01
    20ee:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8Port)
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	28 2f       	mov	r18, r24
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	3c 83       	std	Y+4, r19	; 0x04
    20f8:	2b 83       	std	Y+3, r18	; 0x03
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	9c 81       	ldd	r25, Y+4	; 0x04
    20fe:	81 30       	cpi	r24, 0x01	; 1
    2100:	91 05       	cpc	r25, r1
    2102:	49 f1       	breq	.+82     	; 0x2156 <MDIO_voidDioTogglePin+0x76>
    2104:	2b 81       	ldd	r18, Y+3	; 0x03
    2106:	3c 81       	ldd	r19, Y+4	; 0x04
    2108:	22 30       	cpi	r18, 0x02	; 2
    210a:	31 05       	cpc	r19, r1
    210c:	2c f4       	brge	.+10     	; 0x2118 <MDIO_voidDioTogglePin+0x38>
    210e:	8b 81       	ldd	r24, Y+3	; 0x03
    2110:	9c 81       	ldd	r25, Y+4	; 0x04
    2112:	00 97       	sbiw	r24, 0x00	; 0
    2114:	61 f0       	breq	.+24     	; 0x212e <MDIO_voidDioTogglePin+0x4e>
    2116:	5a c0       	rjmp	.+180    	; 0x21cc <MDIO_voidDioTogglePin+0xec>
    2118:	2b 81       	ldd	r18, Y+3	; 0x03
    211a:	3c 81       	ldd	r19, Y+4	; 0x04
    211c:	22 30       	cpi	r18, 0x02	; 2
    211e:	31 05       	cpc	r19, r1
    2120:	71 f1       	breq	.+92     	; 0x217e <MDIO_voidDioTogglePin+0x9e>
    2122:	8b 81       	ldd	r24, Y+3	; 0x03
    2124:	9c 81       	ldd	r25, Y+4	; 0x04
    2126:	83 30       	cpi	r24, 0x03	; 3
    2128:	91 05       	cpc	r25, r1
    212a:	e9 f1       	breq	.+122    	; 0x21a6 <MDIO_voidDioTogglePin+0xc6>
    212c:	4f c0       	rjmp	.+158    	; 0x21cc <MDIO_voidDioTogglePin+0xec>
		{
			case DIO_PORTA: TOG_BIT(PORTA, copy_u8Pin); break;
    212e:	ab e3       	ldi	r26, 0x3B	; 59
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	eb e3       	ldi	r30, 0x3B	; 59
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	48 2f       	mov	r20, r24
    213a:	8a 81       	ldd	r24, Y+2	; 0x02
    213c:	28 2f       	mov	r18, r24
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	02 2e       	mov	r0, r18
    2146:	02 c0       	rjmp	.+4      	; 0x214c <MDIO_voidDioTogglePin+0x6c>
    2148:	88 0f       	add	r24, r24
    214a:	99 1f       	adc	r25, r25
    214c:	0a 94       	dec	r0
    214e:	e2 f7       	brpl	.-8      	; 0x2148 <MDIO_voidDioTogglePin+0x68>
    2150:	84 27       	eor	r24, r20
    2152:	8c 93       	st	X, r24
    2154:	3b c0       	rjmp	.+118    	; 0x21cc <MDIO_voidDioTogglePin+0xec>
			case DIO_PORTB: TOG_BIT(PORTB, copy_u8Pin); break;
    2156:	a8 e3       	ldi	r26, 0x38	; 56
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	e8 e3       	ldi	r30, 0x38	; 56
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	48 2f       	mov	r20, r24
    2162:	8a 81       	ldd	r24, Y+2	; 0x02
    2164:	28 2f       	mov	r18, r24
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	02 2e       	mov	r0, r18
    216e:	02 c0       	rjmp	.+4      	; 0x2174 <MDIO_voidDioTogglePin+0x94>
    2170:	88 0f       	add	r24, r24
    2172:	99 1f       	adc	r25, r25
    2174:	0a 94       	dec	r0
    2176:	e2 f7       	brpl	.-8      	; 0x2170 <MDIO_voidDioTogglePin+0x90>
    2178:	84 27       	eor	r24, r20
    217a:	8c 93       	st	X, r24
    217c:	27 c0       	rjmp	.+78     	; 0x21cc <MDIO_voidDioTogglePin+0xec>
			case DIO_PORTC: TOG_BIT(PORTC, copy_u8Pin); break;
    217e:	a5 e3       	ldi	r26, 0x35	; 53
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e5 e3       	ldi	r30, 0x35	; 53
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	48 2f       	mov	r20, r24
    218a:	8a 81       	ldd	r24, Y+2	; 0x02
    218c:	28 2f       	mov	r18, r24
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	02 2e       	mov	r0, r18
    2196:	02 c0       	rjmp	.+4      	; 0x219c <MDIO_voidDioTogglePin+0xbc>
    2198:	88 0f       	add	r24, r24
    219a:	99 1f       	adc	r25, r25
    219c:	0a 94       	dec	r0
    219e:	e2 f7       	brpl	.-8      	; 0x2198 <MDIO_voidDioTogglePin+0xb8>
    21a0:	84 27       	eor	r24, r20
    21a2:	8c 93       	st	X, r24
    21a4:	13 c0       	rjmp	.+38     	; 0x21cc <MDIO_voidDioTogglePin+0xec>
			case DIO_PORTD: TOG_BIT(PORTD, copy_u8Pin); break;
    21a6:	a2 e3       	ldi	r26, 0x32	; 50
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	e2 e3       	ldi	r30, 0x32	; 50
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	48 2f       	mov	r20, r24
    21b2:	8a 81       	ldd	r24, Y+2	; 0x02
    21b4:	28 2f       	mov	r18, r24
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	02 2e       	mov	r0, r18
    21be:	02 c0       	rjmp	.+4      	; 0x21c4 <MDIO_voidDioTogglePin+0xe4>
    21c0:	88 0f       	add	r24, r24
    21c2:	99 1f       	adc	r25, r25
    21c4:	0a 94       	dec	r0
    21c6:	e2 f7       	brpl	.-8      	; 0x21c0 <MDIO_voidDioTogglePin+0xe0>
    21c8:	84 27       	eor	r24, r20
    21ca:	8c 93       	st	X, r24
		}
}
    21cc:	0f 90       	pop	r0
    21ce:	0f 90       	pop	r0
    21d0:	0f 90       	pop	r0
    21d2:	0f 90       	pop	r0
    21d4:	cf 91       	pop	r28
    21d6:	df 91       	pop	r29
    21d8:	08 95       	ret

000021da <MDIO_voidDioSetPortDirection>:

void MDIO_voidDioSetPortDirection (u8 copy_u8Port, u8 copy_u8Direction)
{
    21da:	df 93       	push	r29
    21dc:	cf 93       	push	r28
    21de:	00 d0       	rcall	.+0      	; 0x21e0 <MDIO_voidDioSetPortDirection+0x6>
    21e0:	00 d0       	rcall	.+0      	; 0x21e2 <MDIO_voidDioSetPortDirection+0x8>
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
    21e6:	89 83       	std	Y+1, r24	; 0x01
    21e8:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8Port)
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	28 2f       	mov	r18, r24
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	3c 83       	std	Y+4, r19	; 0x04
    21f2:	2b 83       	std	Y+3, r18	; 0x03
    21f4:	8b 81       	ldd	r24, Y+3	; 0x03
    21f6:	9c 81       	ldd	r25, Y+4	; 0x04
    21f8:	81 30       	cpi	r24, 0x01	; 1
    21fa:	91 05       	cpc	r25, r1
    21fc:	d1 f0       	breq	.+52     	; 0x2232 <MDIO_voidDioSetPortDirection+0x58>
    21fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2200:	3c 81       	ldd	r19, Y+4	; 0x04
    2202:	22 30       	cpi	r18, 0x02	; 2
    2204:	31 05       	cpc	r19, r1
    2206:	2c f4       	brge	.+10     	; 0x2212 <MDIO_voidDioSetPortDirection+0x38>
    2208:	8b 81       	ldd	r24, Y+3	; 0x03
    220a:	9c 81       	ldd	r25, Y+4	; 0x04
    220c:	00 97       	sbiw	r24, 0x00	; 0
    220e:	61 f0       	breq	.+24     	; 0x2228 <MDIO_voidDioSetPortDirection+0x4e>
    2210:	1e c0       	rjmp	.+60     	; 0x224e <MDIO_voidDioSetPortDirection+0x74>
    2212:	2b 81       	ldd	r18, Y+3	; 0x03
    2214:	3c 81       	ldd	r19, Y+4	; 0x04
    2216:	22 30       	cpi	r18, 0x02	; 2
    2218:	31 05       	cpc	r19, r1
    221a:	81 f0       	breq	.+32     	; 0x223c <MDIO_voidDioSetPortDirection+0x62>
    221c:	8b 81       	ldd	r24, Y+3	; 0x03
    221e:	9c 81       	ldd	r25, Y+4	; 0x04
    2220:	83 30       	cpi	r24, 0x03	; 3
    2222:	91 05       	cpc	r25, r1
    2224:	81 f0       	breq	.+32     	; 0x2246 <MDIO_voidDioSetPortDirection+0x6c>
    2226:	13 c0       	rjmp	.+38     	; 0x224e <MDIO_voidDioSetPortDirection+0x74>
		{
			case DIO_PORTA: DDRA = copy_u8Direction; break;
    2228:	ea e3       	ldi	r30, 0x3A	; 58
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	8a 81       	ldd	r24, Y+2	; 0x02
    222e:	80 83       	st	Z, r24
    2230:	0e c0       	rjmp	.+28     	; 0x224e <MDIO_voidDioSetPortDirection+0x74>
			case DIO_PORTB: DDRB = copy_u8Direction; break;
    2232:	e7 e3       	ldi	r30, 0x37	; 55
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	8a 81       	ldd	r24, Y+2	; 0x02
    2238:	80 83       	st	Z, r24
    223a:	09 c0       	rjmp	.+18     	; 0x224e <MDIO_voidDioSetPortDirection+0x74>
			case DIO_PORTC: DDRC = copy_u8Direction; break;
    223c:	e4 e3       	ldi	r30, 0x34	; 52
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	8a 81       	ldd	r24, Y+2	; 0x02
    2242:	80 83       	st	Z, r24
    2244:	04 c0       	rjmp	.+8      	; 0x224e <MDIO_voidDioSetPortDirection+0x74>
			case DIO_PORTD: DDRD = copy_u8Direction; break;
    2246:	e1 e3       	ldi	r30, 0x31	; 49
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	8a 81       	ldd	r24, Y+2	; 0x02
    224c:	80 83       	st	Z, r24
		}
}
    224e:	0f 90       	pop	r0
    2250:	0f 90       	pop	r0
    2252:	0f 90       	pop	r0
    2254:	0f 90       	pop	r0
    2256:	cf 91       	pop	r28
    2258:	df 91       	pop	r29
    225a:	08 95       	ret

0000225c <MDIO_voidDioSetPortValue>:

void MDIO_voidDioSetPortValue (u8 copy_u8Port, u8 copy_u8Value)
{
    225c:	df 93       	push	r29
    225e:	cf 93       	push	r28
    2260:	00 d0       	rcall	.+0      	; 0x2262 <MDIO_voidDioSetPortValue+0x6>
    2262:	00 d0       	rcall	.+0      	; 0x2264 <MDIO_voidDioSetPortValue+0x8>
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
    2268:	89 83       	std	Y+1, r24	; 0x01
    226a:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8Port)
    226c:	89 81       	ldd	r24, Y+1	; 0x01
    226e:	28 2f       	mov	r18, r24
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	3c 83       	std	Y+4, r19	; 0x04
    2274:	2b 83       	std	Y+3, r18	; 0x03
    2276:	8b 81       	ldd	r24, Y+3	; 0x03
    2278:	9c 81       	ldd	r25, Y+4	; 0x04
    227a:	81 30       	cpi	r24, 0x01	; 1
    227c:	91 05       	cpc	r25, r1
    227e:	d1 f0       	breq	.+52     	; 0x22b4 <MDIO_voidDioSetPortValue+0x58>
    2280:	2b 81       	ldd	r18, Y+3	; 0x03
    2282:	3c 81       	ldd	r19, Y+4	; 0x04
    2284:	22 30       	cpi	r18, 0x02	; 2
    2286:	31 05       	cpc	r19, r1
    2288:	2c f4       	brge	.+10     	; 0x2294 <MDIO_voidDioSetPortValue+0x38>
    228a:	8b 81       	ldd	r24, Y+3	; 0x03
    228c:	9c 81       	ldd	r25, Y+4	; 0x04
    228e:	00 97       	sbiw	r24, 0x00	; 0
    2290:	61 f0       	breq	.+24     	; 0x22aa <MDIO_voidDioSetPortValue+0x4e>
    2292:	1e c0       	rjmp	.+60     	; 0x22d0 <MDIO_voidDioSetPortValue+0x74>
    2294:	2b 81       	ldd	r18, Y+3	; 0x03
    2296:	3c 81       	ldd	r19, Y+4	; 0x04
    2298:	22 30       	cpi	r18, 0x02	; 2
    229a:	31 05       	cpc	r19, r1
    229c:	81 f0       	breq	.+32     	; 0x22be <MDIO_voidDioSetPortValue+0x62>
    229e:	8b 81       	ldd	r24, Y+3	; 0x03
    22a0:	9c 81       	ldd	r25, Y+4	; 0x04
    22a2:	83 30       	cpi	r24, 0x03	; 3
    22a4:	91 05       	cpc	r25, r1
    22a6:	81 f0       	breq	.+32     	; 0x22c8 <MDIO_voidDioSetPortValue+0x6c>
    22a8:	13 c0       	rjmp	.+38     	; 0x22d0 <MDIO_voidDioSetPortValue+0x74>
		{
			case DIO_PORTA: PORTA = copy_u8Value;  break;
    22aa:	eb e3       	ldi	r30, 0x3B	; 59
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	8a 81       	ldd	r24, Y+2	; 0x02
    22b0:	80 83       	st	Z, r24
    22b2:	0e c0       	rjmp	.+28     	; 0x22d0 <MDIO_voidDioSetPortValue+0x74>
			case DIO_PORTB: PORTB = copy_u8Value;  break;
    22b4:	e8 e3       	ldi	r30, 0x38	; 56
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ba:	80 83       	st	Z, r24
    22bc:	09 c0       	rjmp	.+18     	; 0x22d0 <MDIO_voidDioSetPortValue+0x74>
			case DIO_PORTC: PORTC = copy_u8Value;  break;
    22be:	e5 e3       	ldi	r30, 0x35	; 53
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	8a 81       	ldd	r24, Y+2	; 0x02
    22c4:	80 83       	st	Z, r24
    22c6:	04 c0       	rjmp	.+8      	; 0x22d0 <MDIO_voidDioSetPortValue+0x74>
			case DIO_PORTD: PORTD = copy_u8Value;  break;
    22c8:	e2 e3       	ldi	r30, 0x32	; 50
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	8a 81       	ldd	r24, Y+2	; 0x02
    22ce:	80 83       	st	Z, r24
		}
}
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	cf 91       	pop	r28
    22da:	df 91       	pop	r29
    22dc:	08 95       	ret

000022de <MADC_voidADCSingleInit>:

static void (*ADC_CONV_END)(void);

static u8 G_u8Check;
void MADC_voidADCSingleInit()
{
    22de:	df 93       	push	r29
    22e0:	cf 93       	push	r28
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
#if ADC_SINGLE ==ADC_0
	SINGLE_CHANNEL(0);
    22e6:	a7 e2       	ldi	r26, 0x27	; 39
    22e8:	b0 e0       	ldi	r27, 0x00	; 0
    22ea:	e7 e2       	ldi	r30, 0x27	; 39
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	80 81       	ld	r24, Z
    22f0:	88 7f       	andi	r24, 0xF8	; 248
    22f2:	8c 93       	st	X, r24

#if 	SOURCE == AREF
	 CLR_BIT(ADMUX, REFS0);
	 CLR_BIT(ADMUX, REFS1);
#elif	SOURCE == AVCC
	 SET_BIT(ADMUX, REFS0);
    22f4:	a7 e2       	ldi	r26, 0x27	; 39
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	e7 e2       	ldi	r30, 0x27	; 39
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	80 64       	ori	r24, 0x40	; 64
    2300:	8c 93       	st	X, r24
	 CLR_BIT(ADMUX, REFS1);
    2302:	a7 e2       	ldi	r26, 0x27	; 39
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	e7 e2       	ldi	r30, 0x27	; 39
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	8f 77       	andi	r24, 0x7F	; 127
    230e:	8c 93       	st	X, r24
	 SET_BIT(ADMUX, REFS0);
	 SET_BIT(ADMUX, REFS1);
#endif

#if 	ADJUST == LEFT
	SET_BIT(ADMUX, ADLAR);
    2310:	a7 e2       	ldi	r26, 0x27	; 39
    2312:	b0 e0       	ldi	r27, 0x00	; 0
    2314:	e7 e2       	ldi	r30, 0x27	; 39
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	80 81       	ld	r24, Z
    231a:	80 62       	ori	r24, 0x20	; 32
    231c:	8c 93       	st	X, r24
#if 	PRESCALAR == ADC_TWO
	PRESCALAR_SELECT(1);
#elif	PRESCALAR == ADC_FOUR
	PRESCALAR_SELECT(2);
#elif	PRESCALAR == ADC_EIGHT
	PRESCALAR_SELECT(3);
    231e:	a6 e2       	ldi	r26, 0x26	; 38
    2320:	b0 e0       	ldi	r27, 0x00	; 0
    2322:	e6 e2       	ldi	r30, 0x26	; 38
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	80 81       	ld	r24, Z
    2328:	88 7f       	andi	r24, 0xF8	; 248
    232a:	8d 5f       	subi	r24, 0xFD	; 253
    232c:	8c 93       	st	X, r24
#elif	PRESCALAR == ADC_SIXTYFOUR
	PRESCALAR_SELECT(6);
#elif	PRESCALAR == ADC_ONETWENTYEIGHT
	PRESCALAR_SELECT(7);
#endif
	SET_BIT(ADCSRA, ADEN);
    232e:	a6 e2       	ldi	r26, 0x26	; 38
    2330:	b0 e0       	ldi	r27, 0x00	; 0
    2332:	e6 e2       	ldi	r30, 0x26	; 38
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	80 68       	ori	r24, 0x80	; 128
    233a:	8c 93       	st	X, r24
}
    233c:	cf 91       	pop	r28
    233e:	df 91       	pop	r29
    2340:	08 95       	ret

00002342 <MADC_voidADCStart>:
void MADC_voidADCStart()
{
    2342:	df 93       	push	r29
    2344:	cf 93       	push	r28
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
G_u8Check = 0;
    234a:	10 92 88 01 	sts	0x0188, r1
SET_BIT(ADCSRA,ADSC);
    234e:	a6 e2       	ldi	r26, 0x26	; 38
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	e6 e2       	ldi	r30, 0x26	; 38
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	80 64       	ori	r24, 0x40	; 64
    235a:	8c 93       	st	X, r24
}
    235c:	cf 91       	pop	r28
    235e:	df 91       	pop	r29
    2360:	08 95       	ret

00002362 <MADC_voidADCIsDone>:

void MADC_voidADCIsDone()
{
    2362:	df 93       	push	r29
    2364:	cf 93       	push	r28
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
	while( GET_BIT(ADCSRA, ADIF) == 0);
    236a:	e6 e2       	ldi	r30, 0x26	; 38
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	80 81       	ld	r24, Z
    2370:	82 95       	swap	r24
    2372:	8f 70       	andi	r24, 0x0F	; 15
    2374:	88 2f       	mov	r24, r24
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	81 70       	andi	r24, 0x01	; 1
    237a:	90 70       	andi	r25, 0x00	; 0
    237c:	00 97       	sbiw	r24, 0x00	; 0
    237e:	a9 f3       	breq	.-22     	; 0x236a <MADC_voidADCIsDone+0x8>
	SET_BIT(ADCSRA, ADIF);
    2380:	a6 e2       	ldi	r26, 0x26	; 38
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	e6 e2       	ldi	r30, 0x26	; 38
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	80 61       	ori	r24, 0x10	; 16
    238c:	8c 93       	st	X, r24
}
    238e:	cf 91       	pop	r28
    2390:	df 91       	pop	r29
    2392:	08 95       	ret

00002394 <MADC_voidADCDisable>:

void MADC_voidADCDisable()
{
    2394:	df 93       	push	r29
    2396:	cf 93       	push	r28
    2398:	cd b7       	in	r28, 0x3d	; 61
    239a:	de b7       	in	r29, 0x3e	; 62
ADCSRA = 0x00;
    239c:	e6 e2       	ldi	r30, 0x26	; 38
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	10 82       	st	Z, r1
}
    23a2:	cf 91       	pop	r28
    23a4:	df 91       	pop	r29
    23a6:	08 95       	ret

000023a8 <MADC_voidADCInt>:

void MADC_voidADCInt()
{
    23a8:	df 93       	push	r29
    23aa:	cf 93       	push	r28
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
#if ADC_INT == ENABLE
	SET_BIT(ADCSRA, ADIE);
    23b0:	a6 e2       	ldi	r26, 0x26	; 38
    23b2:	b0 e0       	ldi	r27, 0x00	; 0
    23b4:	e6 e2       	ldi	r30, 0x26	; 38
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	80 81       	ld	r24, Z
    23ba:	88 60       	ori	r24, 0x08	; 8
    23bc:	8c 93       	st	X, r24
#elif
	CLR_BIT(ADCSRA, ADIE);
#endif
}
    23be:	cf 91       	pop	r28
    23c0:	df 91       	pop	r29
    23c2:	08 95       	ret

000023c4 <MADC_voidADCSetCallBack>:

void MADC_voidADCSetCallBack ( void (*copy_ADCEndConv) (void))
{
    23c4:	df 93       	push	r29
    23c6:	cf 93       	push	r28
    23c8:	00 d0       	rcall	.+0      	; 0x23ca <MADC_voidADCSetCallBack+0x6>
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
    23ce:	9a 83       	std	Y+2, r25	; 0x02
    23d0:	89 83       	std	Y+1, r24	; 0x01
	ADC_CONV_END = copy_ADCEndConv;
    23d2:	89 81       	ldd	r24, Y+1	; 0x01
    23d4:	9a 81       	ldd	r25, Y+2	; 0x02
    23d6:	90 93 87 01 	sts	0x0187, r25
    23da:	80 93 86 01 	sts	0x0186, r24
}
    23de:	0f 90       	pop	r0
    23e0:	0f 90       	pop	r0
    23e2:	cf 91       	pop	r28
    23e4:	df 91       	pop	r29
    23e6:	08 95       	ret

000023e8 <MADC_u16ADCReturnValue>:

u16 MADC_u16ADCReturnValue (void)
{
    23e8:	df 93       	push	r29
    23ea:	cf 93       	push	r28
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
#if 	ADJUST == RIGHT
		return ADCW;
#elif 	ADJUST == LEFT
		return (ADCW >>6);
    23f0:	e4 e2       	ldi	r30, 0x24	; 36
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	91 81       	ldd	r25, Z+1	; 0x01
    23f8:	00 24       	eor	r0, r0
    23fa:	88 0f       	add	r24, r24
    23fc:	99 1f       	adc	r25, r25
    23fe:	00 1c       	adc	r0, r0
    2400:	88 0f       	add	r24, r24
    2402:	99 1f       	adc	r25, r25
    2404:	00 1c       	adc	r0, r0
    2406:	89 2f       	mov	r24, r25
    2408:	90 2d       	mov	r25, r0
#endif

}
    240a:	cf 91       	pop	r28
    240c:	df 91       	pop	r29
    240e:	08 95       	ret

00002410 <__vector_16>:
ISR(ADC_vect)
{
    2410:	1f 92       	push	r1
    2412:	0f 92       	push	r0
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	0f 92       	push	r0
    2418:	11 24       	eor	r1, r1
    241a:	2f 93       	push	r18
    241c:	3f 93       	push	r19
    241e:	4f 93       	push	r20
    2420:	5f 93       	push	r21
    2422:	6f 93       	push	r22
    2424:	7f 93       	push	r23
    2426:	8f 93       	push	r24
    2428:	9f 93       	push	r25
    242a:	af 93       	push	r26
    242c:	bf 93       	push	r27
    242e:	ef 93       	push	r30
    2430:	ff 93       	push	r31
    2432:	df 93       	push	r29
    2434:	cf 93       	push	r28
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
	ADC_CONV_END();
    243a:	e0 91 86 01 	lds	r30, 0x0186
    243e:	f0 91 87 01 	lds	r31, 0x0187
    2442:	09 95       	icall
}
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	ff 91       	pop	r31
    244a:	ef 91       	pop	r30
    244c:	bf 91       	pop	r27
    244e:	af 91       	pop	r26
    2450:	9f 91       	pop	r25
    2452:	8f 91       	pop	r24
    2454:	7f 91       	pop	r23
    2456:	6f 91       	pop	r22
    2458:	5f 91       	pop	r21
    245a:	4f 91       	pop	r20
    245c:	3f 91       	pop	r19
    245e:	2f 91       	pop	r18
    2460:	0f 90       	pop	r0
    2462:	0f be       	out	0x3f, r0	; 63
    2464:	0f 90       	pop	r0
    2466:	1f 90       	pop	r1
    2468:	18 95       	reti

0000246a <EXTI_voidInit>:

#define NULL ((void *)0)
static void (*EXTI_pf_EXTI[3])(void) = {NULL, NULL, NULL};

void EXTI_voidInit(void)
{
    246a:	df 93       	push	r29
    246c:	cf 93       	push	r28
    246e:	cd b7       	in	r28, 0x3d	; 61
    2470:	de b7       	in	r29, 0x3e	; 62
#if EXTI_INDEX_0 == INT0
	SET_BIT(GICR, GICR_INT0);
    2472:	ab e5       	ldi	r26, 0x5B	; 91
    2474:	b0 e0       	ldi	r27, 0x00	; 0
    2476:	eb e5       	ldi	r30, 0x5B	; 91
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	80 81       	ld	r24, Z
    247c:	80 64       	ori	r24, 0x40	; 64
    247e:	8c 93       	st	X, r24
//CHOOSE CLOCK
#if EXTI_CLOCK_0 == LOW_LEVEL
	CLR_BIT(MCUCR,MCUCR_ISC00);
	CLR_BIT(MCUCR,MCUCR_ISC01);
#elif EXTI_CLOCK_0 == ANY_LOGICAL
	SET_BIT(MCUCR,MCUCR_ISC00);
    2480:	a5 e5       	ldi	r26, 0x55	; 85
    2482:	b0 e0       	ldi	r27, 0x00	; 0
    2484:	e5 e5       	ldi	r30, 0x55	; 85
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	80 81       	ld	r24, Z
    248a:	81 60       	ori	r24, 0x01	; 1
    248c:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC01);
    248e:	a5 e5       	ldi	r26, 0x55	; 85
    2490:	b0 e0       	ldi	r27, 0x00	; 0
    2492:	e5 e5       	ldi	r30, 0x55	; 85
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	8d 7f       	andi	r24, 0xFD	; 253
    249a:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
#endif
#endif

#if EXIT_INDEX_1== INT1
	SET_BIT(GICR, GICR_INT1);
    249c:	ab e5       	ldi	r26, 0x5B	; 91
    249e:	b0 e0       	ldi	r27, 0x00	; 0
    24a0:	eb e5       	ldi	r30, 0x5B	; 91
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	80 68       	ori	r24, 0x80	; 128
    24a8:	8c 93       	st	X, r24
//CHOOSE CLOCK
#if EXTI_CLOCK_1 == LOW_LEVEL
	CLR_BIT(MCUCR,MCUCR_ISC10);
	CLR_BIT(MCUCR,MCUCR_ISC11);
#elif EXTI_CLOCK_1 == ANY_LOGICAL
	SET_BIT(MCUCR,MCUCR_ISC10);
    24aa:	a5 e5       	ldi	r26, 0x55	; 85
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	e5 e5       	ldi	r30, 0x55	; 85
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	80 81       	ld	r24, Z
    24b4:	84 60       	ori	r24, 0x04	; 4
    24b6:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC11);
    24b8:	a5 e5       	ldi	r26, 0x55	; 85
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	e5 e5       	ldi	r30, 0x55	; 85
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	87 7f       	andi	r24, 0xF7	; 247
    24c4:	8c 93       	st	X, r24
	CLR_BIT(MCUCSR, MCUCSR_ISC2);
#elif EXTI_CLOCK_2 == RAISING
	SET_BIT(MCUCSR, MCUCSR_ISC2);
#endif
#endif
}
    24c6:	cf 91       	pop	r28
    24c8:	df 91       	pop	r29
    24ca:	08 95       	ret

000024cc <EXTI_voidGIE>:


void EXTI_voidGIE(void)
{
    24cc:	df 93       	push	r29
    24ce:	cf 93       	push	r28
    24d0:	cd b7       	in	r28, 0x3d	; 61
    24d2:	de b7       	in	r29, 0x3e	; 62
#if GIE == ENABLE
	SET_BIT(SREG, SREG_PIN);
    24d4:	af e5       	ldi	r26, 0x5F	; 95
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	ef e5       	ldi	r30, 0x5F	; 95
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	80 68       	ori	r24, 0x80	; 128
    24e0:	8c 93       	st	X, r24
#elif GIE == DISABLE
	CLR_BIT(SREG, SREG_PIN);
#endif
}
    24e2:	cf 91       	pop	r28
    24e4:	df 91       	pop	r29
    24e6:	08 95       	ret

000024e8 <EXTI_voidEXTISetCallBack>:

void EXTI_voidEXTISetCallBack(u8 copy_u8EXTIIndex, void (*copy_pf)(void))
{
    24e8:	df 93       	push	r29
    24ea:	cf 93       	push	r28
    24ec:	00 d0       	rcall	.+0      	; 0x24ee <EXTI_voidEXTISetCallBack+0x6>
    24ee:	0f 92       	push	r0
    24f0:	cd b7       	in	r28, 0x3d	; 61
    24f2:	de b7       	in	r29, 0x3e	; 62
    24f4:	89 83       	std	Y+1, r24	; 0x01
    24f6:	7b 83       	std	Y+3, r23	; 0x03
    24f8:	6a 83       	std	Y+2, r22	; 0x02
	EXTI_pf_EXTI[copy_u8EXTIIndex] = copy_pf;
    24fa:	89 81       	ldd	r24, Y+1	; 0x01
    24fc:	88 2f       	mov	r24, r24
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	88 0f       	add	r24, r24
    2502:	99 1f       	adc	r25, r25
    2504:	fc 01       	movw	r30, r24
    2506:	e7 57       	subi	r30, 0x77	; 119
    2508:	fe 4f       	sbci	r31, 0xFE	; 254
    250a:	8a 81       	ldd	r24, Y+2	; 0x02
    250c:	9b 81       	ldd	r25, Y+3	; 0x03
    250e:	91 83       	std	Z+1, r25	; 0x01
    2510:	80 83       	st	Z, r24
}
    2512:	0f 90       	pop	r0
    2514:	0f 90       	pop	r0
    2516:	0f 90       	pop	r0
    2518:	cf 91       	pop	r28
    251a:	df 91       	pop	r29
    251c:	08 95       	ret

0000251e <__vector_1>:

ISR(INT0_vect)
{
    251e:	1f 92       	push	r1
    2520:	0f 92       	push	r0
    2522:	0f b6       	in	r0, 0x3f	; 63
    2524:	0f 92       	push	r0
    2526:	11 24       	eor	r1, r1
    2528:	2f 93       	push	r18
    252a:	3f 93       	push	r19
    252c:	4f 93       	push	r20
    252e:	5f 93       	push	r21
    2530:	6f 93       	push	r22
    2532:	7f 93       	push	r23
    2534:	8f 93       	push	r24
    2536:	9f 93       	push	r25
    2538:	af 93       	push	r26
    253a:	bf 93       	push	r27
    253c:	ef 93       	push	r30
    253e:	ff 93       	push	r31
    2540:	df 93       	push	r29
    2542:	cf 93       	push	r28
    2544:	cd b7       	in	r28, 0x3d	; 61
    2546:	de b7       	in	r29, 0x3e	; 62
	if ( EXTI_pf_EXTI[0] != NULL )
    2548:	80 91 89 01 	lds	r24, 0x0189
    254c:	90 91 8a 01 	lds	r25, 0x018A
    2550:	00 97       	sbiw	r24, 0x00	; 0
    2552:	29 f0       	breq	.+10     	; 0x255e <__vector_1+0x40>
	{
		EXTI_pf_EXTI[0]();
    2554:	e0 91 89 01 	lds	r30, 0x0189
    2558:	f0 91 8a 01 	lds	r31, 0x018A
    255c:	09 95       	icall
	}
}
    255e:	cf 91       	pop	r28
    2560:	df 91       	pop	r29
    2562:	ff 91       	pop	r31
    2564:	ef 91       	pop	r30
    2566:	bf 91       	pop	r27
    2568:	af 91       	pop	r26
    256a:	9f 91       	pop	r25
    256c:	8f 91       	pop	r24
    256e:	7f 91       	pop	r23
    2570:	6f 91       	pop	r22
    2572:	5f 91       	pop	r21
    2574:	4f 91       	pop	r20
    2576:	3f 91       	pop	r19
    2578:	2f 91       	pop	r18
    257a:	0f 90       	pop	r0
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	0f 90       	pop	r0
    2580:	1f 90       	pop	r1
    2582:	18 95       	reti

00002584 <__vector_2>:

ISR(INT1_vect)
{
    2584:	1f 92       	push	r1
    2586:	0f 92       	push	r0
    2588:	0f b6       	in	r0, 0x3f	; 63
    258a:	0f 92       	push	r0
    258c:	11 24       	eor	r1, r1
    258e:	2f 93       	push	r18
    2590:	3f 93       	push	r19
    2592:	4f 93       	push	r20
    2594:	5f 93       	push	r21
    2596:	6f 93       	push	r22
    2598:	7f 93       	push	r23
    259a:	8f 93       	push	r24
    259c:	9f 93       	push	r25
    259e:	af 93       	push	r26
    25a0:	bf 93       	push	r27
    25a2:	ef 93       	push	r30
    25a4:	ff 93       	push	r31
    25a6:	df 93       	push	r29
    25a8:	cf 93       	push	r28
    25aa:	cd b7       	in	r28, 0x3d	; 61
    25ac:	de b7       	in	r29, 0x3e	; 62
	if ( EXTI_pf_EXTI[1] != NULL )
    25ae:	80 91 8b 01 	lds	r24, 0x018B
    25b2:	90 91 8c 01 	lds	r25, 0x018C
    25b6:	00 97       	sbiw	r24, 0x00	; 0
    25b8:	29 f0       	breq	.+10     	; 0x25c4 <__vector_2+0x40>
	{
		EXTI_pf_EXTI[1]();
    25ba:	e0 91 8b 01 	lds	r30, 0x018B
    25be:	f0 91 8c 01 	lds	r31, 0x018C
    25c2:	09 95       	icall
	}
}
    25c4:	cf 91       	pop	r28
    25c6:	df 91       	pop	r29
    25c8:	ff 91       	pop	r31
    25ca:	ef 91       	pop	r30
    25cc:	bf 91       	pop	r27
    25ce:	af 91       	pop	r26
    25d0:	9f 91       	pop	r25
    25d2:	8f 91       	pop	r24
    25d4:	7f 91       	pop	r23
    25d6:	6f 91       	pop	r22
    25d8:	5f 91       	pop	r21
    25da:	4f 91       	pop	r20
    25dc:	3f 91       	pop	r19
    25de:	2f 91       	pop	r18
    25e0:	0f 90       	pop	r0
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	0f 90       	pop	r0
    25e6:	1f 90       	pop	r1
    25e8:	18 95       	reti

000025ea <__vector_3>:

ISR(INT2_vect)
{
    25ea:	1f 92       	push	r1
    25ec:	0f 92       	push	r0
    25ee:	0f b6       	in	r0, 0x3f	; 63
    25f0:	0f 92       	push	r0
    25f2:	11 24       	eor	r1, r1
    25f4:	2f 93       	push	r18
    25f6:	3f 93       	push	r19
    25f8:	4f 93       	push	r20
    25fa:	5f 93       	push	r21
    25fc:	6f 93       	push	r22
    25fe:	7f 93       	push	r23
    2600:	8f 93       	push	r24
    2602:	9f 93       	push	r25
    2604:	af 93       	push	r26
    2606:	bf 93       	push	r27
    2608:	ef 93       	push	r30
    260a:	ff 93       	push	r31
    260c:	df 93       	push	r29
    260e:	cf 93       	push	r28
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
	if ( EXTI_pf_EXTI[2] != NULL )
    2614:	80 91 8d 01 	lds	r24, 0x018D
    2618:	90 91 8e 01 	lds	r25, 0x018E
    261c:	00 97       	sbiw	r24, 0x00	; 0
    261e:	29 f0       	breq	.+10     	; 0x262a <__vector_3+0x40>
	{
		EXTI_pf_EXTI[2]();
    2620:	e0 91 8d 01 	lds	r30, 0x018D
    2624:	f0 91 8e 01 	lds	r31, 0x018E
    2628:	09 95       	icall
	}
}
    262a:	cf 91       	pop	r28
    262c:	df 91       	pop	r29
    262e:	ff 91       	pop	r31
    2630:	ef 91       	pop	r30
    2632:	bf 91       	pop	r27
    2634:	af 91       	pop	r26
    2636:	9f 91       	pop	r25
    2638:	8f 91       	pop	r24
    263a:	7f 91       	pop	r23
    263c:	6f 91       	pop	r22
    263e:	5f 91       	pop	r21
    2640:	4f 91       	pop	r20
    2642:	3f 91       	pop	r19
    2644:	2f 91       	pop	r18
    2646:	0f 90       	pop	r0
    2648:	0f be       	out	0x3f, r0	; 63
    264a:	0f 90       	pop	r0
    264c:	1f 90       	pop	r1
    264e:	18 95       	reti

00002650 <HSERVO_voidServoTIMER1Init>:
#include "../../LIB/BIT_MATH.h"
#include "../../LIB/STD_TYPES.h"
#include "../../MCAL/M_TMR/TIME_Interface.h"
#include "SERVO_Interface.h"
void HSERVO_voidServoTIMER1Init(void)
{
    2650:	df 93       	push	r29
    2652:	cf 93       	push	r28
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62
	MTIMER_voidTimer1FPWM_ICR_INIT();
    2658:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <MTIMER_voidTimer1FPWM_ICR_INIT>

	//Forces the timer to work at 50 Hz at 8MHz F_CPU
	TCCR1B = (TCCR1B & 0xf8) | 0x02;
    265c:	ae e4       	ldi	r26, 0x4E	; 78
    265e:	b0 e0       	ldi	r27, 0x00	; 0
    2660:	ee e4       	ldi	r30, 0x4E	; 78
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	80 81       	ld	r24, Z
    2666:	88 7f       	andi	r24, 0xF8	; 248
    2668:	82 60       	ori	r24, 0x02	; 2
    266a:	8c 93       	st	X, r24
	ICR1 = 19999;
    266c:	e6 e4       	ldi	r30, 0x46	; 70
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	8f e1       	ldi	r24, 0x1F	; 31
    2672:	9e e4       	ldi	r25, 0x4E	; 78
    2674:	91 83       	std	Z+1, r25	; 0x01
    2676:	80 83       	st	Z, r24
}
    2678:	cf 91       	pop	r28
    267a:	df 91       	pop	r29
    267c:	08 95       	ret

0000267e <HSERVO_voidServoTIMER1Write>:

void HSERVO_voidServoTIMER1Write(u8 copy_u8Angle)
{
    267e:	df 93       	push	r29
    2680:	cf 93       	push	r28
    2682:	0f 92       	push	r0
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
    2688:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = ((50* copy_u8Angle)+8991)/9;
    268a:	ea e4       	ldi	r30, 0x4A	; 74
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	28 2f       	mov	r18, r24
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	82 e3       	ldi	r24, 0x32	; 50
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	ac 01       	movw	r20, r24
    269a:	24 9f       	mul	r18, r20
    269c:	c0 01       	movw	r24, r0
    269e:	25 9f       	mul	r18, r21
    26a0:	90 0d       	add	r25, r0
    26a2:	34 9f       	mul	r19, r20
    26a4:	90 0d       	add	r25, r0
    26a6:	11 24       	eor	r1, r1
    26a8:	81 5e       	subi	r24, 0xE1	; 225
    26aa:	9c 4d       	sbci	r25, 0xDC	; 220
    26ac:	29 e0       	ldi	r18, 0x09	; 9
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	b9 01       	movw	r22, r18
    26b2:	0e 94 f6 13 	call	0x27ec	; 0x27ec <__divmodhi4>
    26b6:	cb 01       	movw	r24, r22
    26b8:	91 83       	std	Z+1, r25	; 0x01
    26ba:	80 83       	st	Z, r24
/*@ copy_u8Angle = 0, OCR1A = 999
 *@ copy_u8Angle = 180, OCR1A = 1999
 * By solving the straight line equation.
 **/
}
    26bc:	0f 90       	pop	r0
    26be:	cf 91       	pop	r28
    26c0:	df 91       	pop	r29
    26c2:	08 95       	ret

000026c4 <main>:

s16 G_s16ADCValue;
s8 G_u8Servo;

int main (void)
{
    26c4:	df 93       	push	r29
    26c6:	cf 93       	push	r28
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidDioSetPinDirection(DIO_PORTD, DIO_PIN_5, DIO_OUT);
    26cc:	83 e0       	ldi	r24, 0x03	; 3
    26ce:	65 e0       	ldi	r22, 0x05	; 5
    26d0:	41 e0       	ldi	r20, 0x01	; 1
    26d2:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <MDIO_voidDioSetPinDirection>

	MADC_voidADCSingleInit();
    26d6:	0e 94 6f 11 	call	0x22de	; 0x22de <MADC_voidADCSingleInit>

	EXTI_voidGIE();
    26da:	0e 94 66 12 	call	0x24cc	; 0x24cc <EXTI_voidGIE>

	MADC_voidADCInt();
    26de:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <MADC_voidADCInt>
	HSERVO_voidServoTIMER1Init();
    26e2:	0e 94 28 13 	call	0x2650	; 0x2650 <HSERVO_voidServoTIMER1Init>

	MADC_voidADCSetCallBack(writeServo);
    26e6:	8a e7       	ldi	r24, 0x7A	; 122
    26e8:	93 e1       	ldi	r25, 0x13	; 19
    26ea:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <MADC_voidADCSetCallBack>

	while (1)
	{
		MADC_voidADCStart();
    26ee:	0e 94 a1 11 	call	0x2342	; 0x2342 <MADC_voidADCStart>
    26f2:	fd cf       	rjmp	.-6      	; 0x26ee <main+0x2a>

000026f4 <writeServo>:
	return 0;
}


void writeServo()
{
    26f4:	df 93       	push	r29
    26f6:	cf 93       	push	r28
    26f8:	cd b7       	in	r28, 0x3d	; 61
    26fa:	de b7       	in	r29, 0x3e	; 62
	G_s16ADCValue = MADC_u16ADCReturnValue();
    26fc:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <MADC_u16ADCReturnValue>
    2700:	90 93 92 01 	sts	0x0192, r25
    2704:	80 93 91 01 	sts	0x0191, r24
	G_u8Servo = ( 180.0 * G_s16ADCValue / 1023 );
    2708:	80 91 91 01 	lds	r24, 0x0191
    270c:	90 91 92 01 	lds	r25, 0x0192
    2710:	aa 27       	eor	r26, r26
    2712:	97 fd       	sbrc	r25, 7
    2714:	a0 95       	com	r26
    2716:	ba 2f       	mov	r27, r26
    2718:	bc 01       	movw	r22, r24
    271a:	cd 01       	movw	r24, r26
    271c:	0e 94 25 04 	call	0x84a	; 0x84a <__floatsisf>
    2720:	dc 01       	movw	r26, r24
    2722:	cb 01       	movw	r24, r22
    2724:	bc 01       	movw	r22, r24
    2726:	cd 01       	movw	r24, r26
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	44 e3       	ldi	r20, 0x34	; 52
    272e:	53 e4       	ldi	r21, 0x43	; 67
    2730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	bc 01       	movw	r22, r24
    273a:	cd 01       	movw	r24, r26
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 ec       	ldi	r19, 0xC0	; 192
    2740:	4f e7       	ldi	r20, 0x7F	; 127
    2742:	54 e4       	ldi	r21, 0x44	; 68
    2744:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2748:	dc 01       	movw	r26, r24
    274a:	cb 01       	movw	r24, r22
    274c:	bc 01       	movw	r22, r24
    274e:	cd 01       	movw	r24, r26
    2750:	0e 94 83 04 	call	0x906	; 0x906 <__fixsfsi>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	80 93 93 01 	sts	0x0193, r24
	HSERVO_voidServoTIMER1Write(G_u8Servo);
    275c:	80 91 93 01 	lds	r24, 0x0193
    2760:	0e 94 3f 13 	call	0x267e	; 0x267e <HSERVO_voidServoTIMER1Write>
}
    2764:	cf 91       	pop	r28
    2766:	df 91       	pop	r29
    2768:	08 95       	ret

0000276a <testADC>:

void testADC()
{
    276a:	df 93       	push	r29
    276c:	cf 93       	push	r28
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
	G_s16ADCValue = ADCL;
    2772:	e4 e2       	ldi	r30, 0x24	; 36
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	88 2f       	mov	r24, r24
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	90 93 92 01 	sts	0x0192, r25
    2780:	80 93 91 01 	sts	0x0191, r24
	MDIO_voidDioSetPortValue(DIO_PORTB, ADCL);
    2784:	e4 e2       	ldi	r30, 0x24	; 36
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	90 81       	ld	r25, Z
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	69 2f       	mov	r22, r25
    278e:	0e 94 2e 11 	call	0x225c	; 0x225c <MDIO_voidDioSetPortValue>
	MDIO_voidDioSetPortValue(DIO_PORTC, ADCH);
    2792:	e5 e2       	ldi	r30, 0x25	; 37
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	90 81       	ld	r25, Z
    2798:	82 e0       	ldi	r24, 0x02	; 2
    279a:	69 2f       	mov	r22, r25
    279c:	0e 94 2e 11 	call	0x225c	; 0x225c <MDIO_voidDioSetPortValue>

	MDIO_voidDioTogglePin(DIO_PORTA, DIO_PIN_2);
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	62 e0       	ldi	r22, 0x02	; 2
    27a4:	0e 94 70 10 	call	0x20e0	; 0x20e0 <MDIO_voidDioTogglePin>
}
    27a8:	cf 91       	pop	r28
    27aa:	df 91       	pop	r29
    27ac:	08 95       	ret

000027ae <__mulsi3>:
    27ae:	62 9f       	mul	r22, r18
    27b0:	d0 01       	movw	r26, r0
    27b2:	73 9f       	mul	r23, r19
    27b4:	f0 01       	movw	r30, r0
    27b6:	82 9f       	mul	r24, r18
    27b8:	e0 0d       	add	r30, r0
    27ba:	f1 1d       	adc	r31, r1
    27bc:	64 9f       	mul	r22, r20
    27be:	e0 0d       	add	r30, r0
    27c0:	f1 1d       	adc	r31, r1
    27c2:	92 9f       	mul	r25, r18
    27c4:	f0 0d       	add	r31, r0
    27c6:	83 9f       	mul	r24, r19
    27c8:	f0 0d       	add	r31, r0
    27ca:	74 9f       	mul	r23, r20
    27cc:	f0 0d       	add	r31, r0
    27ce:	65 9f       	mul	r22, r21
    27d0:	f0 0d       	add	r31, r0
    27d2:	99 27       	eor	r25, r25
    27d4:	72 9f       	mul	r23, r18
    27d6:	b0 0d       	add	r27, r0
    27d8:	e1 1d       	adc	r30, r1
    27da:	f9 1f       	adc	r31, r25
    27dc:	63 9f       	mul	r22, r19
    27de:	b0 0d       	add	r27, r0
    27e0:	e1 1d       	adc	r30, r1
    27e2:	f9 1f       	adc	r31, r25
    27e4:	bd 01       	movw	r22, r26
    27e6:	cf 01       	movw	r24, r30
    27e8:	11 24       	eor	r1, r1
    27ea:	08 95       	ret

000027ec <__divmodhi4>:
    27ec:	97 fb       	bst	r25, 7
    27ee:	09 2e       	mov	r0, r25
    27f0:	07 26       	eor	r0, r23
    27f2:	0a d0       	rcall	.+20     	; 0x2808 <__divmodhi4_neg1>
    27f4:	77 fd       	sbrc	r23, 7
    27f6:	04 d0       	rcall	.+8      	; 0x2800 <__divmodhi4_neg2>
    27f8:	0c d0       	rcall	.+24     	; 0x2812 <__udivmodhi4>
    27fa:	06 d0       	rcall	.+12     	; 0x2808 <__divmodhi4_neg1>
    27fc:	00 20       	and	r0, r0
    27fe:	1a f4       	brpl	.+6      	; 0x2806 <__divmodhi4_exit>

00002800 <__divmodhi4_neg2>:
    2800:	70 95       	com	r23
    2802:	61 95       	neg	r22
    2804:	7f 4f       	sbci	r23, 0xFF	; 255

00002806 <__divmodhi4_exit>:
    2806:	08 95       	ret

00002808 <__divmodhi4_neg1>:
    2808:	f6 f7       	brtc	.-4      	; 0x2806 <__divmodhi4_exit>
    280a:	90 95       	com	r25
    280c:	81 95       	neg	r24
    280e:	9f 4f       	sbci	r25, 0xFF	; 255
    2810:	08 95       	ret

00002812 <__udivmodhi4>:
    2812:	aa 1b       	sub	r26, r26
    2814:	bb 1b       	sub	r27, r27
    2816:	51 e1       	ldi	r21, 0x11	; 17
    2818:	07 c0       	rjmp	.+14     	; 0x2828 <__udivmodhi4_ep>

0000281a <__udivmodhi4_loop>:
    281a:	aa 1f       	adc	r26, r26
    281c:	bb 1f       	adc	r27, r27
    281e:	a6 17       	cp	r26, r22
    2820:	b7 07       	cpc	r27, r23
    2822:	10 f0       	brcs	.+4      	; 0x2828 <__udivmodhi4_ep>
    2824:	a6 1b       	sub	r26, r22
    2826:	b7 0b       	sbc	r27, r23

00002828 <__udivmodhi4_ep>:
    2828:	88 1f       	adc	r24, r24
    282a:	99 1f       	adc	r25, r25
    282c:	5a 95       	dec	r21
    282e:	a9 f7       	brne	.-22     	; 0x281a <__udivmodhi4_loop>
    2830:	80 95       	com	r24
    2832:	90 95       	com	r25
    2834:	bc 01       	movw	r22, r24
    2836:	cd 01       	movw	r24, r26
    2838:	08 95       	ret

0000283a <__prologue_saves__>:
    283a:	2f 92       	push	r2
    283c:	3f 92       	push	r3
    283e:	4f 92       	push	r4
    2840:	5f 92       	push	r5
    2842:	6f 92       	push	r6
    2844:	7f 92       	push	r7
    2846:	8f 92       	push	r8
    2848:	9f 92       	push	r9
    284a:	af 92       	push	r10
    284c:	bf 92       	push	r11
    284e:	cf 92       	push	r12
    2850:	df 92       	push	r13
    2852:	ef 92       	push	r14
    2854:	ff 92       	push	r15
    2856:	0f 93       	push	r16
    2858:	1f 93       	push	r17
    285a:	cf 93       	push	r28
    285c:	df 93       	push	r29
    285e:	cd b7       	in	r28, 0x3d	; 61
    2860:	de b7       	in	r29, 0x3e	; 62
    2862:	ca 1b       	sub	r28, r26
    2864:	db 0b       	sbc	r29, r27
    2866:	0f b6       	in	r0, 0x3f	; 63
    2868:	f8 94       	cli
    286a:	de bf       	out	0x3e, r29	; 62
    286c:	0f be       	out	0x3f, r0	; 63
    286e:	cd bf       	out	0x3d, r28	; 61
    2870:	09 94       	ijmp

00002872 <__epilogue_restores__>:
    2872:	2a 88       	ldd	r2, Y+18	; 0x12
    2874:	39 88       	ldd	r3, Y+17	; 0x11
    2876:	48 88       	ldd	r4, Y+16	; 0x10
    2878:	5f 84       	ldd	r5, Y+15	; 0x0f
    287a:	6e 84       	ldd	r6, Y+14	; 0x0e
    287c:	7d 84       	ldd	r7, Y+13	; 0x0d
    287e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2880:	9b 84       	ldd	r9, Y+11	; 0x0b
    2882:	aa 84       	ldd	r10, Y+10	; 0x0a
    2884:	b9 84       	ldd	r11, Y+9	; 0x09
    2886:	c8 84       	ldd	r12, Y+8	; 0x08
    2888:	df 80       	ldd	r13, Y+7	; 0x07
    288a:	ee 80       	ldd	r14, Y+6	; 0x06
    288c:	fd 80       	ldd	r15, Y+5	; 0x05
    288e:	0c 81       	ldd	r16, Y+4	; 0x04
    2890:	1b 81       	ldd	r17, Y+3	; 0x03
    2892:	aa 81       	ldd	r26, Y+2	; 0x02
    2894:	b9 81       	ldd	r27, Y+1	; 0x01
    2896:	ce 0f       	add	r28, r30
    2898:	d1 1d       	adc	r29, r1
    289a:	0f b6       	in	r0, 0x3f	; 63
    289c:	f8 94       	cli
    289e:	de bf       	out	0x3e, r29	; 62
    28a0:	0f be       	out	0x3f, r0	; 63
    28a2:	cd bf       	out	0x3d, r28	; 61
    28a4:	ed 01       	movw	r28, r26
    28a6:	08 95       	ret

000028a8 <_exit>:
    28a8:	f8 94       	cli

000028aa <__stop_program>:
    28aa:	ff cf       	rjmp	.-2      	; 0x28aa <__stop_program>
