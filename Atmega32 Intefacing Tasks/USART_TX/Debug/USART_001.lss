
USART_001.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  000031a8  0000323c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800180  00800180  0000335c  2**0
                  ALLOC
  3 .stab         00002814  00000000  00000000  0000335c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001525  00000000  00000000  00005b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00007095  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  00007255  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  00007465  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  00009aef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  0000afcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000c278  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  0000c458  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  0000c756  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d100  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 e9 0d 	jmp	0x1bd2	; 0x1bd2 <__vector_4>
      14:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__vector_10>
      2c:	0c 94 cd 09 	jmp	0x139a	; 0x139a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ea       	ldi	r30, 0xA8	; 168
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3a       	cpi	r26, 0xA0	; 160
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f6 17 	call	0x2fec	; 0x2fec <main>
      8a:	0c 94 d2 18 	jmp	0x31a4	; 0x31a4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 56 18 	jmp	0x30ac	; 0x30ac <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 72 18 	jmp	0x30e4	; 0x30e4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 62 18 	jmp	0x30c4	; 0x30c4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7e 18 	jmp	0x30fc	; 0x30fc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 62 18 	jmp	0x30c4	; 0x30c4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7e 18 	jmp	0x30fc	; 0x30fc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 56 18 	jmp	0x30ac	; 0x30ac <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 72 18 	jmp	0x30e4	; 0x30e4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5e 18 	jmp	0x30bc	; 0x30bc <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 7a 18 	jmp	0x30f4	; 0x30f4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 62 18 	jmp	0x30c4	; 0x30c4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7e 18 	jmp	0x30fc	; 0x30fc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 62 18 	jmp	0x30c4	; 0x30c4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 7e 18 	jmp	0x30fc	; 0x30fc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 62 18 	jmp	0x30c4	; 0x30c4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 7e 18 	jmp	0x30fc	; 0x30fc <__epilogue_restores__+0x18>

000008aa <__lesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 62 18 	jmp	0x30c4	; 0x30c4 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__lesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__lesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__lesf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 7e 18 	jmp	0x30fc	; 0x30fc <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 66 18 	jmp	0x30cc	; 0x30cc <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 82 18 	jmp	0x3104	; 0x3104 <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 5e 18 	jmp	0x30bc	; 0x30bc <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 7a 18 	jmp	0x30f4	; 0x30f4 <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	e8 59       	subi	r30, 0x98	; 152
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <UART_voidInit>:
#include <avr/interrupt.h>
#include "../M_DIO/MDIO_Interface.h"
#include "UART_Interface.h"

void UART_voidInit (void)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <UART_voidInit+0x6>
     e94:	0f 92       	push	r0
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
	u8 L_u8_UCSRCValue = 0b10000000;
     e9a:	80 e8       	ldi	r24, 0x80	; 128
     e9c:	8b 83       	std	Y+3, r24	; 0x03

	/*BAUD RATE = 9600*/
	u16 L_u166BaudRate = 51;
     e9e:	83 e3       	ldi	r24, 0x33	; 51
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	9a 83       	std	Y+2, r25	; 0x02
     ea4:	89 83       	std	Y+1, r24	; 0x01

	UBRRL = (u8) L_u166BaudRate;
     ea6:	e9 e2       	ldi	r30, 0x29	; 41
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	80 83       	st	Z, r24
	UBRRH = (u8) (L_u166BaudRate >> 8);
     eae:	e0 e4       	ldi	r30, 0x40	; 64
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	9a 81       	ldd	r25, Y+2	; 0x02
     eb6:	89 2f       	mov	r24, r25
     eb8:	99 27       	eor	r25, r25
     eba:	80 83       	st	Z, r24

#if		RX_COM == ENABLE
		SET_BIT(UCSRB, RXCIE);
#elif	RX_COM == DISABLE
		CLR_BIT(UCSRB, RXCIE);
     ebc:	aa e2       	ldi	r26, 0x2A	; 42
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	ea e2       	ldi	r30, 0x2A	; 42
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	8f 77       	andi	r24, 0x7F	; 127
     ec8:	8c 93       	st	X, r24
#endif

#if		TX_COM == ENABLE
		SET_BIT(UCSRB, TXCIE);
#elif	TX_COM == DISABLE
		CLR_BIT(UCSRB, TXCIE);
     eca:	aa e2       	ldi	r26, 0x2A	; 42
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	ea e2       	ldi	r30, 0x2A	; 42
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	8f 7b       	andi	r24, 0xBF	; 191
     ed6:	8c 93       	st	X, r24
#endif

#if		DATA_EMPTY == ENABLE
		SET_BIT(UCSRB, UDRIE);
#elif	DATA_EMPTY == DISABLE
		CLR_BIT(UCSRB, UDRIE);
     ed8:	aa e2       	ldi	r26, 0x2A	; 42
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	ea e2       	ldi	r30, 0x2A	; 42
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	8f 7d       	andi	r24, 0xDF	; 223
     ee4:	8c 93       	st	X, r24


#if 	DOUBLE_SPD == ENABLE
		SET_BIT(UCSRA, U2X);
#elif	 DOUBLE_SPD == DISABLE
		CLR_BIT(UCSRA, U2X);
     ee6:	ab e2       	ldi	r26, 0x2B	; 43
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	eb e2       	ldi	r30, 0x2B	; 43
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	8d 7f       	andi	r24, 0xFD	; 253
     ef2:	8c 93       	st	X, r24
#endif
////////////////////////////////////////////
#if 	MULTIPROCESSOR == ENABLE
		SET_BIT(UCSRA, MPCM);
#elif	MULTIPROCESSOR == DISABLE
		CLR_BIT(UCSRA, MPCM);
     ef4:	ab e2       	ldi	r26, 0x2B	; 43
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	eb e2       	ldi	r30, 0x2B	; 43
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	8e 7f       	andi	r24, 0xFE	; 254
     f00:	8c 93       	st	X, r24

#endif
///////////////////////////////////////////
#if 	TX_EN == ENABLE
		SET_BIT(UCSRB,TXEN);
     f02:	aa e2       	ldi	r26, 0x2A	; 42
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	ea e2       	ldi	r30, 0x2A	; 42
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	88 60       	ori	r24, 0x08	; 8
     f0e:	8c 93       	st	X, r24
		CLR_BIT(UCSRB,TXEN);

#endif

#if 	RX_EN == ENABLE
		SET_BIT(UCSRB,RXEN);
     f10:	aa e2       	ldi	r26, 0x2A	; 42
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	ea e2       	ldi	r30, 0x2A	; 42
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	80 61       	ori	r24, 0x10	; 16
     f1c:	8c 93       	st	X, r24
		CLR_BIT(UCSRB,UCSZ2);
#elif	DATA_BITS == SEVEN
		L_u8_UCSRCValue = ( L_u8_UCSRCValue & 0xf9 ) | 0b00000100;
		CLR_BIT(UCSRB,UCSZ2);
#elif	DATA_BITS == EIGHT
		L_u8_UCSRCValue = ( L_u8_UCSRCValue & 0xf9 ) | 0b00000110;
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	86 60       	ori	r24, 0x06	; 6
     f22:	8b 83       	std	Y+3, r24	; 0x03
		CLR_BIT(UCSRB,UCSZ2);
     f24:	aa e2       	ldi	r26, 0x2A	; 42
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	ea e2       	ldi	r30, 0x2A	; 42
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8b 7f       	andi	r24, 0xFB	; 251
     f30:	8c 93       	st	X, r24

//////////////////////////////////////////
#if		MODE == SYNC
		SET_BIT(L_u8_UCSRCValue, UMSEL);
#elif	MODE == ASYNC
		CLR_BIT(L_u8_UCSRCValue, UMSEL);
     f32:	8b 81       	ldd	r24, Y+3	; 0x03
     f34:	8f 7b       	andi	r24, 0xBF	; 191
     f36:	8b 83       	std	Y+3, r24	; 0x03
#endif
//////////////////////////////////////////
#if 	PARITY_SEL == DISABLE
		CLR_BIT(L_u8_UCSRCValue, UPM0);
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	8f 7e       	andi	r24, 0xEF	; 239
     f3c:	8b 83       	std	Y+3, r24	; 0x03
		CLR_BIT(L_u8_UCSRCValue, UPM1);
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	8f 7d       	andi	r24, 0xDF	; 223
     f42:	8b 83       	std	Y+3, r24	; 0x03
#endif
////////////////////////////////////////
#if		STOP_BITS == ONE
		CLR_BIT(L_u8_UCSRCValue,USBS);
#elif	STOP_BITS == TWO
		SET_BIT(L_u8_UCSRCValue,USBS);
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	88 60       	ori	r24, 0x08	; 8
     f48:	8b 83       	std	Y+3, r24	; 0x03

#endif
//////////////////////////////////////

	/*UPDATA THE UCSRC VALUE*/
	UCSRC = L_u8_UCSRCValue;
     f4a:	e0 e4       	ldi	r30, 0x40	; 64
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	80 83       	st	Z, r24
}
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <UART_voidSendData>:

void UART_voidSendData	(u8 copy_u8Data)
{
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	0f 92       	push	r0
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	89 83       	std	Y+1, r24	; 0x01
	/*WAIT*/
	while( GET_BIT(UCSRA, UDRE) == 0 );
     f6a:	eb e2       	ldi	r30, 0x2B	; 43
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	82 95       	swap	r24
     f72:	86 95       	lsr	r24
     f74:	87 70       	andi	r24, 0x07	; 7
     f76:	88 2f       	mov	r24, r24
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	81 70       	andi	r24, 0x01	; 1
     f7c:	90 70       	andi	r25, 0x00	; 0
     f7e:	00 97       	sbiw	r24, 0x00	; 0
     f80:	a1 f3       	breq	.-24     	; 0xf6a <UART_voidSendData+0xc>
	UDR = copy_u8Data;
     f82:	ec e2       	ldi	r30, 0x2C	; 44
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	80 83       	st	Z, r24
}
     f8a:	0f 90       	pop	r0
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <UART_voidRecieveData>:

u8 UART_voidRecieveData	(void)
{
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
	/*WAIT*/
	while( GET_BIT(UCSRA, RXC) == 0 );
     f9a:	eb e2       	ldi	r30, 0x2B	; 43
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	88 23       	and	r24, r24
     fa2:	dc f7       	brge	.-10     	; 0xf9a <UART_voidRecieveData+0x8>
	/*RECIEVE DATA*/
	return UDR;
     fa4:	ec e2       	ldi	r30, 0x2C	; 44
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
}
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <MTIMER_voidTimer0OVFInit>:
////////////////////////////////////////////////////////////////////////////////////////



void MTIMER_voidTimer0OVFInit(void)
{
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE NORMAL MODE*/
		CLR_BIT(TCCR0, WGM00);
     fb8:	a3 e5       	ldi	r26, 0x53	; 83
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e3 e5       	ldi	r30, 0x53	; 83
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	8f 7b       	andi	r24, 0xBF	; 191
     fc4:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, WGM01);
     fc6:	a3 e5       	ldi	r26, 0x53	; 83
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e3 e5       	ldi	r30, 0x53	; 83
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	87 7f       	andi	r24, 0xF7	; 247
     fd2:	8c 93       	st	X, r24

		SET_BIT(TIMSK, TOIE0);
     fd4:	a9 e5       	ldi	r26, 0x59	; 89
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e9 e5       	ldi	r30, 0x59	; 89
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	81 60       	ori	r24, 0x01	; 1
     fe0:	8c 93       	st	X, r24
#elif 	CLK == EIGHT
		TCCR0 = (TCCR0 & 0xf8) | 0x02;
#elif 	CLK == SIXTYFOUR
		TCCR0 = (TCCR0 & 0xf8) | 0x03;
#elif 	CLK == TWOFIFTYSIX
		TCCR0 = (TCCR0 & 0xf8) | 0x04;
     fe2:	a3 e5       	ldi	r26, 0x53	; 83
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e3 e5       	ldi	r30, 0x53	; 83
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	88 7f       	andi	r24, 0xF8	; 248
     fee:	84 60       	ori	r24, 0x04	; 4
     ff0:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xf8) | 0x06;
#elif 	CLK == EXTERN_RISING
		TCCR0 = (TCCR0 & 0xf8) | 0x07;
#endif

}
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	08 95       	ret

00000ff8 <MTIMER_voidTimer0OVFDelay>:

void MTIMER_voidTimer0OVFDelay(u32 copy_u32Delay_ms)
{
     ff8:	ef 92       	push	r14
     ffa:	ff 92       	push	r15
     ffc:	0f 93       	push	r16
     ffe:	1f 93       	push	r17
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	61 97       	sbiw	r28, 0x11	; 17
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	f8 94       	cli
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	cd bf       	out	0x3d, r28	; 61
    1014:	6e 87       	std	Y+14, r22	; 0x0e
    1016:	7f 87       	std	Y+15, r23	; 0x0f
    1018:	88 8b       	std	Y+16, r24	; 0x10
    101a:	99 8b       	std	Y+17, r25	; 0x11
	f32 L_f32MaxCompare;
	f32 L_f32OverFlowCount;
	u32 L_u32Carry;
	u8 L_u8Offset;

	G_u8Check = 0;
    101c:	10 92 9d 01 	sts	0x019D, r1
	MTIMER_voidTimer0OVFInit();
    1020:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <MTIMER_voidTimer0OVFInit>
		L_f32MaxCompare = L_f32MaxCompare * 256 * 8;
#elif 	CLK == SIXTYFOUR
		L_f32MaxCompare = (1000000.0) / F_CPU;
		L_f32MaxCompare = L_f32MaxCompare * 256 * 64;
#elif 	CLK == TWOFIFTYSIX
		L_f32MaxCompare = (1000000.0) / F_CPU;
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	a0 e0       	ldi	r26, 0x00	; 0
    102a:	be e3       	ldi	r27, 0x3E	; 62
    102c:	8a 87       	std	Y+10, r24	; 0x0a
    102e:	9b 87       	std	Y+11, r25	; 0x0b
    1030:	ac 87       	std	Y+12, r26	; 0x0c
    1032:	bd 87       	std	Y+13, r27	; 0x0d
		L_f32MaxCompare = L_f32MaxCompare * 256 * 256;
    1034:	6a 85       	ldd	r22, Y+10	; 0x0a
    1036:	7b 85       	ldd	r23, Y+11	; 0x0b
    1038:	8c 85       	ldd	r24, Y+12	; 0x0c
    103a:	9d 85       	ldd	r25, Y+13	; 0x0d
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e8       	ldi	r20, 0x80	; 128
    1042:	53 e4       	ldi	r21, 0x43	; 67
    1044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	bc 01       	movw	r22, r24
    104e:	cd 01       	movw	r24, r26
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	40 e8       	ldi	r20, 0x80	; 128
    1056:	53 e4       	ldi	r21, 0x43	; 67
    1058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	8a 87       	std	Y+10, r24	; 0x0a
    1062:	9b 87       	std	Y+11, r25	; 0x0b
    1064:	ac 87       	std	Y+12, r26	; 0x0c
    1066:	bd 87       	std	Y+13, r27	; 0x0d
		L_f32MaxCompare = L_f32MaxCompare * 256 * 1024;

#endif


	if (copy_u32Delay_ms * 1000  <= L_f32MaxCompare)
    1068:	8e 85       	ldd	r24, Y+14	; 0x0e
    106a:	9f 85       	ldd	r25, Y+15	; 0x0f
    106c:	a8 89       	ldd	r26, Y+16	; 0x10
    106e:	b9 89       	ldd	r27, Y+17	; 0x11
    1070:	28 ee       	ldi	r18, 0xE8	; 232
    1072:	33 e0       	ldi	r19, 0x03	; 3
    1074:	40 e0       	ldi	r20, 0x00	; 0
    1076:	50 e0       	ldi	r21, 0x00	; 0
    1078:	bc 01       	movw	r22, r24
    107a:	cd 01       	movw	r24, r26
    107c:	0e 94 15 18 	call	0x302a	; 0x302a <__mulsi3>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	bc 01       	movw	r22, r24
    1086:	cd 01       	movw	r24, r26
    1088:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	bc 01       	movw	r22, r24
    1092:	cd 01       	movw	r24, r26
    1094:	2a 85       	ldd	r18, Y+10	; 0x0a
    1096:	3b 85       	ldd	r19, Y+11	; 0x0b
    1098:	4c 85       	ldd	r20, Y+12	; 0x0c
    109a:	5d 85       	ldd	r21, Y+13	; 0x0d
    109c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    10a0:	18 16       	cp	r1, r24
    10a2:	0c f4       	brge	.+2      	; 0x10a6 <MTIMER_voidTimer0OVFDelay+0xae>
    10a4:	49 c0       	rjmp	.+146    	; 0x1138 <MTIMER_voidTimer0OVFDelay+0x140>
		{
			L_f32OverFlowCount = (copy_u32Delay_ms / (L_f32MaxCompare/1000.0));
    10a6:	6e 85       	ldd	r22, Y+14	; 0x0e
    10a8:	7f 85       	ldd	r23, Y+15	; 0x0f
    10aa:	88 89       	ldd	r24, Y+16	; 0x10
    10ac:	99 89       	ldd	r25, Y+17	; 0x11
    10ae:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    10b2:	7b 01       	movw	r14, r22
    10b4:	8c 01       	movw	r16, r24
    10b6:	6a 85       	ldd	r22, Y+10	; 0x0a
    10b8:	7b 85       	ldd	r23, Y+11	; 0x0b
    10ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    10bc:	9d 85       	ldd	r25, Y+13	; 0x0d
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	4a e7       	ldi	r20, 0x7A	; 122
    10c4:	54 e4       	ldi	r21, 0x44	; 68
    10c6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    10ca:	dc 01       	movw	r26, r24
    10cc:	cb 01       	movw	r24, r22
    10ce:	9c 01       	movw	r18, r24
    10d0:	ad 01       	movw	r20, r26
    10d2:	c8 01       	movw	r24, r16
    10d4:	b7 01       	movw	r22, r14
    10d6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    10da:	dc 01       	movw	r26, r24
    10dc:	cb 01       	movw	r24, r22
    10de:	8e 83       	std	Y+6, r24	; 0x06
    10e0:	9f 83       	std	Y+7, r25	; 0x07
    10e2:	a8 87       	std	Y+8, r26	; 0x08
    10e4:	b9 87       	std	Y+9, r27	; 0x09
			L_u8Offset = L_f32OverFlowCount * 256.0;
    10e6:	6e 81       	ldd	r22, Y+6	; 0x06
    10e8:	7f 81       	ldd	r23, Y+7	; 0x07
    10ea:	88 85       	ldd	r24, Y+8	; 0x08
    10ec:	99 85       	ldd	r25, Y+9	; 0x09
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	40 e8       	ldi	r20, 0x80	; 128
    10f4:	53 e4       	ldi	r21, 0x43	; 67
    10f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10fa:	dc 01       	movw	r26, r24
    10fc:	cb 01       	movw	r24, r22
    10fe:	bc 01       	movw	r22, r24
    1100:	cd 01       	movw	r24, r26
    1102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	89 83       	std	Y+1, r24	; 0x01
			G_u32Overflows = 1;
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	a0 e0       	ldi	r26, 0x00	; 0
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	80 93 99 01 	sts	0x0199, r24
    1118:	90 93 9a 01 	sts	0x019A, r25
    111c:	a0 93 9b 01 	sts	0x019B, r26
    1120:	b0 93 9c 01 	sts	0x019C, r27
			G_u8Reg = 256 - L_u8Offset;
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	81 95       	neg	r24
    1128:	80 93 98 01 	sts	0x0198, r24
			TCNT0 = G_u8Reg;
    112c:	e2 e5       	ldi	r30, 0x52	; 82
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 91 98 01 	lds	r24, 0x0198
    1134:	80 83       	st	Z, r24
    1136:	7f c0       	rjmp	.+254    	; 0x1236 <MTIMER_voidTimer0OVFDelay+0x23e>
		}
	else
		{
			L_f32OverFlowCount = (copy_u32Delay_ms / (L_f32MaxCompare/1000.0));
    1138:	6e 85       	ldd	r22, Y+14	; 0x0e
    113a:	7f 85       	ldd	r23, Y+15	; 0x0f
    113c:	88 89       	ldd	r24, Y+16	; 0x10
    113e:	99 89       	ldd	r25, Y+17	; 0x11
    1140:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1144:	7b 01       	movw	r14, r22
    1146:	8c 01       	movw	r16, r24
    1148:	6a 85       	ldd	r22, Y+10	; 0x0a
    114a:	7b 85       	ldd	r23, Y+11	; 0x0b
    114c:	8c 85       	ldd	r24, Y+12	; 0x0c
    114e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	4a e7       	ldi	r20, 0x7A	; 122
    1156:	54 e4       	ldi	r21, 0x44	; 68
    1158:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	9c 01       	movw	r18, r24
    1162:	ad 01       	movw	r20, r26
    1164:	c8 01       	movw	r24, r16
    1166:	b7 01       	movw	r22, r14
    1168:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    116c:	dc 01       	movw	r26, r24
    116e:	cb 01       	movw	r24, r22
    1170:	8e 83       	std	Y+6, r24	; 0x06
    1172:	9f 83       	std	Y+7, r25	; 0x07
    1174:	a8 87       	std	Y+8, r26	; 0x08
    1176:	b9 87       	std	Y+9, r27	; 0x09
			L_u32Carry = (copy_u32Delay_ms / (L_f32MaxCompare/1000));
    1178:	6e 85       	ldd	r22, Y+14	; 0x0e
    117a:	7f 85       	ldd	r23, Y+15	; 0x0f
    117c:	88 89       	ldd	r24, Y+16	; 0x10
    117e:	99 89       	ldd	r25, Y+17	; 0x11
    1180:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1184:	7b 01       	movw	r14, r22
    1186:	8c 01       	movw	r16, r24
    1188:	6a 85       	ldd	r22, Y+10	; 0x0a
    118a:	7b 85       	ldd	r23, Y+11	; 0x0b
    118c:	8c 85       	ldd	r24, Y+12	; 0x0c
    118e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	4a e7       	ldi	r20, 0x7A	; 122
    1196:	54 e4       	ldi	r21, 0x44	; 68
    1198:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    119c:	dc 01       	movw	r26, r24
    119e:	cb 01       	movw	r24, r22
    11a0:	9c 01       	movw	r18, r24
    11a2:	ad 01       	movw	r20, r26
    11a4:	c8 01       	movw	r24, r16
    11a6:	b7 01       	movw	r22, r14
    11a8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    11ac:	dc 01       	movw	r26, r24
    11ae:	cb 01       	movw	r24, r22
    11b0:	bc 01       	movw	r22, r24
    11b2:	cd 01       	movw	r24, r26
    11b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b8:	dc 01       	movw	r26, r24
    11ba:	cb 01       	movw	r24, r22
    11bc:	8a 83       	std	Y+2, r24	; 0x02
    11be:	9b 83       	std	Y+3, r25	; 0x03
    11c0:	ac 83       	std	Y+4, r26	; 0x04
    11c2:	bd 83       	std	Y+5, r27	; 0x05

			L_u8Offset = (L_f32OverFlowCount - L_u32Carry) * 256.0;
    11c4:	6a 81       	ldd	r22, Y+2	; 0x02
    11c6:	7b 81       	ldd	r23, Y+3	; 0x03
    11c8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ca:	9d 81       	ldd	r25, Y+5	; 0x05
    11cc:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    11d0:	9b 01       	movw	r18, r22
    11d2:	ac 01       	movw	r20, r24
    11d4:	6e 81       	ldd	r22, Y+6	; 0x06
    11d6:	7f 81       	ldd	r23, Y+7	; 0x07
    11d8:	88 85       	ldd	r24, Y+8	; 0x08
    11da:	99 85       	ldd	r25, Y+9	; 0x09
    11dc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    11e0:	dc 01       	movw	r26, r24
    11e2:	cb 01       	movw	r24, r22
    11e4:	bc 01       	movw	r22, r24
    11e6:	cd 01       	movw	r24, r26
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	40 e8       	ldi	r20, 0x80	; 128
    11ee:	53 e4       	ldi	r21, 0x43	; 67
    11f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	bc 01       	movw	r22, r24
    11fa:	cd 01       	movw	r24, r26
    11fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1200:	dc 01       	movw	r26, r24
    1202:	cb 01       	movw	r24, r22
    1204:	89 83       	std	Y+1, r24	; 0x01
			G_u32Overflows = L_u32Carry +1 ;
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	9b 81       	ldd	r25, Y+3	; 0x03
    120a:	ac 81       	ldd	r26, Y+4	; 0x04
    120c:	bd 81       	ldd	r27, Y+5	; 0x05
    120e:	01 96       	adiw	r24, 0x01	; 1
    1210:	a1 1d       	adc	r26, r1
    1212:	b1 1d       	adc	r27, r1
    1214:	80 93 99 01 	sts	0x0199, r24
    1218:	90 93 9a 01 	sts	0x019A, r25
    121c:	a0 93 9b 01 	sts	0x019B, r26
    1220:	b0 93 9c 01 	sts	0x019C, r27
			G_u8Reg = 256 - L_u8Offset;
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	81 95       	neg	r24
    1228:	80 93 98 01 	sts	0x0198, r24
			TCNT0 = G_u8Reg;
    122c:	e2 e5       	ldi	r30, 0x52	; 82
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 91 98 01 	lds	r24, 0x0198
    1234:	80 83       	st	Z, r24
		}

		while (GET_BIT(TIFR, TOV0) == 0 && G_u8Check == 0);
    1236:	e8 e5       	ldi	r30, 0x58	; 88
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	88 2f       	mov	r24, r24
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	81 70       	andi	r24, 0x01	; 1
    1242:	90 70       	andi	r25, 0x00	; 0
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	21 f4       	brne	.+8      	; 0x1250 <MTIMER_voidTimer0OVFDelay+0x258>
    1248:	80 91 9d 01 	lds	r24, 0x019D
    124c:	88 23       	and	r24, r24
    124e:	99 f3       	breq	.-26     	; 0x1236 <MTIMER_voidTimer0OVFDelay+0x23e>
}
    1250:	61 96       	adiw	r28, 0x11	; 17
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	f8 94       	cli
    1256:	de bf       	out	0x3e, r29	; 62
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	cd bf       	out	0x3d, r28	; 61
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	1f 91       	pop	r17
    1262:	0f 91       	pop	r16
    1264:	ff 90       	pop	r15
    1266:	ef 90       	pop	r14
    1268:	08 95       	ret

0000126a <MTIMER_voidTimer0OVFSetCallBack>:

void MTIMER_voidTimer0OVFSetCallBack ( void (*copy_PFvoidTimer0OVF) (void))
{
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	00 d0       	rcall	.+0      	; 0x1270 <MTIMER_voidTimer0OVFSetCallBack+0x6>
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	9a 83       	std	Y+2, r25	; 0x02
    1276:	89 83       	std	Y+1, r24	; 0x01
	TIMER_PFTIMER0OVF = copy_PFvoidTimer0OVF ;
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	9a 81       	ldd	r25, Y+2	; 0x02
    127c:	90 93 81 01 	sts	0x0181, r25
    1280:	80 93 80 01 	sts	0x0180, r24
}
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <MTIMER_voidTimer0COMPInit>:



void MTIMER_voidTimer0COMPInit(void)
{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE CTC MODE*/
		CLR_BIT(TCCR0, WGM00);
    1296:	a3 e5       	ldi	r26, 0x53	; 83
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e3 e5       	ldi	r30, 0x53	; 83
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	8f 7b       	andi	r24, 0xBF	; 191
    12a2:	8c 93       	st	X, r24
		SET_BIT(TCCR0, WGM01);
    12a4:	a3 e5       	ldi	r26, 0x53	; 83
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e3 e5       	ldi	r30, 0x53	; 83
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	88 60       	ori	r24, 0x08	; 8
    12b0:	8c 93       	st	X, r24

		SET_BIT(TIMSK, OCIE0);
    12b2:	a9 e5       	ldi	r26, 0x59	; 89
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e9 e5       	ldi	r30, 0x59	; 89
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	82 60       	ori	r24, 0x02	; 2
    12be:	8c 93       	st	X, r24
#elif 	CLK == EIGHT
		TCCR0 = (TCCR0 & 0xf8) | 0x02;
#elif 	CLK == SIXTYFOUR
		TCCR0 = (TCCR0 & 0xf8) | 0x03;
#elif 	CLK == TWOFIFTYSIX
		TCCR0 = (TCCR0 & 0xf8) | 0x04;
    12c0:	a3 e5       	ldi	r26, 0x53	; 83
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e3 e5       	ldi	r30, 0x53	; 83
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	88 7f       	andi	r24, 0xF8	; 248
    12cc:	84 60       	ori	r24, 0x04	; 4
    12ce:	8c 93       	st	X, r24
#elif 	CLK == EXTERN_FALLING
		TCCR0 = (TCCR0 & 0xf8) | 0x06;
#elif 	CLK == EXTERN_RISING
		TCCR0 = (TCCR0 & 0xf8) | 0x07;
#endif
}
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <MTIMER_voidTimer0COMPDelay>:


void MTIMER_voidTimer0COMPDelay(u8 copy_u8Offset, u32 copy_u32Counts)
{
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	00 d0       	rcall	.+0      	; 0x12dc <MTIMER_voidTimer0COMPDelay+0x6>
    12dc:	00 d0       	rcall	.+0      	; 0x12de <MTIMER_voidTimer0COMPDelay+0x8>
    12de:	0f 92       	push	r0
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
    12e4:	89 83       	std	Y+1, r24	; 0x01
    12e6:	4a 83       	std	Y+2, r20	; 0x02
    12e8:	5b 83       	std	Y+3, r21	; 0x03
    12ea:	6c 83       	std	Y+4, r22	; 0x04
    12ec:	7d 83       	std	Y+5, r23	; 0x05
	G_u8Check = 0;
    12ee:	10 92 9d 01 	sts	0x019D, r1
	G_u32Overflows = copy_u32Counts;
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	9b 81       	ldd	r25, Y+3	; 0x03
    12f6:	ac 81       	ldd	r26, Y+4	; 0x04
    12f8:	bd 81       	ldd	r27, Y+5	; 0x05
    12fa:	80 93 99 01 	sts	0x0199, r24
    12fe:	90 93 9a 01 	sts	0x019A, r25
    1302:	a0 93 9b 01 	sts	0x019B, r26
    1306:	b0 93 9c 01 	sts	0x019C, r27
	if (copy_u32Counts == 1)
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	9b 81       	ldd	r25, Y+3	; 0x03
    130e:	ac 81       	ldd	r26, Y+4	; 0x04
    1310:	bd 81       	ldd	r27, Y+5	; 0x05
    1312:	81 30       	cpi	r24, 0x01	; 1
    1314:	91 05       	cpc	r25, r1
    1316:	a1 05       	cpc	r26, r1
    1318:	b1 05       	cpc	r27, r1
    131a:	29 f4       	brne	.+10     	; 0x1326 <MTIMER_voidTimer0COMPDelay+0x50>
	{
		OCR0 = copy_u8Offset;
    131c:	ec e5       	ldi	r30, 0x5C	; 92
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	80 83       	st	Z, r24
    1324:	10 c0       	rjmp	.+32     	; 0x1346 <MTIMER_voidTimer0COMPDelay+0x70>
	}
	else if (copy_u32Counts > 1)
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	9b 81       	ldd	r25, Y+3	; 0x03
    132a:	ac 81       	ldd	r26, Y+4	; 0x04
    132c:	bd 81       	ldd	r27, Y+5	; 0x05
    132e:	82 30       	cpi	r24, 0x02	; 2
    1330:	91 05       	cpc	r25, r1
    1332:	a1 05       	cpc	r26, r1
    1334:	b1 05       	cpc	r27, r1
    1336:	38 f0       	brcs	.+14     	; 0x1346 <MTIMER_voidTimer0COMPDelay+0x70>
	{
		G_u8Reg = copy_u8Offset;
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	80 93 98 01 	sts	0x0198, r24
		OCR0 = 255;
    133e:	ec e5       	ldi	r30, 0x5C	; 92
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	8f ef       	ldi	r24, 0xFF	; 255
    1344:	80 83       	st	Z, r24
	}
	MTIMER_voidTimer0COMPInit();
    1346:	0e 94 47 09 	call	0x128e	; 0x128e <MTIMER_voidTimer0COMPInit>
	while (GET_BIT(TIFR, OCF0) == 0  &&  G_u8Check == 0);
    134a:	e8 e5       	ldi	r30, 0x58	; 88
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	86 95       	lsr	r24
    1352:	88 2f       	mov	r24, r24
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	81 70       	andi	r24, 0x01	; 1
    1358:	90 70       	andi	r25, 0x00	; 0
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	21 f4       	brne	.+8      	; 0x1366 <MTIMER_voidTimer0COMPDelay+0x90>
    135e:	80 91 9d 01 	lds	r24, 0x019D
    1362:	88 23       	and	r24, r24
    1364:	91 f3       	breq	.-28     	; 0x134a <MTIMER_voidTimer0COMPDelay+0x74>
	//TCCR0 = 0;
}
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	08 95       	ret

00001376 <MTIMER_voidTimer0COMPSetCallBack>:




void MTIMER_voidTimer0COMPSetCallBack ( void (*copy_PFvoidTimer0COMP) (void))
{
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	00 d0       	rcall	.+0      	; 0x137c <MTIMER_voidTimer0COMPSetCallBack+0x6>
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	9a 83       	std	Y+2, r25	; 0x02
    1382:	89 83       	std	Y+1, r24	; 0x01
	TIMER_PFTIMER0COMP = copy_PFvoidTimer0COMP ;
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	9a 81       	ldd	r25, Y+2	; 0x02
    1388:	90 93 83 01 	sts	0x0183, r25
    138c:	80 93 82 01 	sts	0x0182, r24
}
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <__vector_11>:


ISR (TIMER0_OVF_vect)
{
    139a:	1f 92       	push	r1
    139c:	0f 92       	push	r0
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	0f 92       	push	r0
    13a2:	11 24       	eor	r1, r1
    13a4:	2f 93       	push	r18
    13a6:	3f 93       	push	r19
    13a8:	4f 93       	push	r20
    13aa:	5f 93       	push	r21
    13ac:	6f 93       	push	r22
    13ae:	7f 93       	push	r23
    13b0:	8f 93       	push	r24
    13b2:	9f 93       	push	r25
    13b4:	af 93       	push	r26
    13b6:	bf 93       	push	r27
    13b8:	ef 93       	push	r30
    13ba:	ff 93       	push	r31
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
	static u32 L_u32OVFCounter = 0 ;
	L_u32OVFCounter ++ ;
    13c4:	80 91 88 01 	lds	r24, 0x0188
    13c8:	90 91 89 01 	lds	r25, 0x0189
    13cc:	a0 91 8a 01 	lds	r26, 0x018A
    13d0:	b0 91 8b 01 	lds	r27, 0x018B
    13d4:	01 96       	adiw	r24, 0x01	; 1
    13d6:	a1 1d       	adc	r26, r1
    13d8:	b1 1d       	adc	r27, r1
    13da:	80 93 88 01 	sts	0x0188, r24
    13de:	90 93 89 01 	sts	0x0189, r25
    13e2:	a0 93 8a 01 	sts	0x018A, r26
    13e6:	b0 93 8b 01 	sts	0x018B, r27
	if (L_u32OVFCounter == G_u32Overflows)
    13ea:	20 91 88 01 	lds	r18, 0x0188
    13ee:	30 91 89 01 	lds	r19, 0x0189
    13f2:	40 91 8a 01 	lds	r20, 0x018A
    13f6:	50 91 8b 01 	lds	r21, 0x018B
    13fa:	80 91 99 01 	lds	r24, 0x0199
    13fe:	90 91 9a 01 	lds	r25, 0x019A
    1402:	a0 91 9b 01 	lds	r26, 0x019B
    1406:	b0 91 9c 01 	lds	r27, 0x019C
    140a:	28 17       	cp	r18, r24
    140c:	39 07       	cpc	r19, r25
    140e:	4a 07       	cpc	r20, r26
    1410:	5b 07       	cpc	r21, r27
    1412:	d9 f4       	brne	.+54     	; 0x144a <__vector_11+0xb0>
	{
		L_u32OVFCounter = 0 ;
    1414:	10 92 88 01 	sts	0x0188, r1
    1418:	10 92 89 01 	sts	0x0189, r1
    141c:	10 92 8a 01 	sts	0x018A, r1
    1420:	10 92 8b 01 	sts	0x018B, r1
		TCNT0 = G_u8Reg;
    1424:	e2 e5       	ldi	r30, 0x52	; 82
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 91 98 01 	lds	r24, 0x0198
    142c:	80 83       	st	Z, r24
		if(TIMER_PFTIMER0OVF != NULL)
    142e:	80 91 80 01 	lds	r24, 0x0180
    1432:	90 91 81 01 	lds	r25, 0x0181
    1436:	00 97       	sbiw	r24, 0x00	; 0
    1438:	29 f0       	breq	.+10     	; 0x1444 <__vector_11+0xaa>
			TIMER_PFTIMER0OVF() ;
    143a:	e0 91 80 01 	lds	r30, 0x0180
    143e:	f0 91 81 01 	lds	r31, 0x0181
    1442:	09 95       	icall
		G_u8Check = 1;
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	80 93 9d 01 	sts	0x019D, r24
	}
}
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	ff 91       	pop	r31
    1450:	ef 91       	pop	r30
    1452:	bf 91       	pop	r27
    1454:	af 91       	pop	r26
    1456:	9f 91       	pop	r25
    1458:	8f 91       	pop	r24
    145a:	7f 91       	pop	r23
    145c:	6f 91       	pop	r22
    145e:	5f 91       	pop	r21
    1460:	4f 91       	pop	r20
    1462:	3f 91       	pop	r19
    1464:	2f 91       	pop	r18
    1466:	0f 90       	pop	r0
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	0f 90       	pop	r0
    146c:	1f 90       	pop	r1
    146e:	18 95       	reti

00001470 <__vector_10>:

ISR (TIMER0_COMP_vect)
{
    1470:	1f 92       	push	r1
    1472:	0f 92       	push	r0
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	0f 92       	push	r0
    1478:	11 24       	eor	r1, r1
    147a:	2f 93       	push	r18
    147c:	3f 93       	push	r19
    147e:	4f 93       	push	r20
    1480:	5f 93       	push	r21
    1482:	6f 93       	push	r22
    1484:	7f 93       	push	r23
    1486:	8f 93       	push	r24
    1488:	9f 93       	push	r25
    148a:	af 93       	push	r26
    148c:	bf 93       	push	r27
    148e:	ef 93       	push	r30
    1490:	ff 93       	push	r31
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
	static u32 G_u32CompCounter = 0;
	G_u32CompCounter ++ ;
    149a:	80 91 8c 01 	lds	r24, 0x018C
    149e:	90 91 8d 01 	lds	r25, 0x018D
    14a2:	a0 91 8e 01 	lds	r26, 0x018E
    14a6:	b0 91 8f 01 	lds	r27, 0x018F
    14aa:	01 96       	adiw	r24, 0x01	; 1
    14ac:	a1 1d       	adc	r26, r1
    14ae:	b1 1d       	adc	r27, r1
    14b0:	80 93 8c 01 	sts	0x018C, r24
    14b4:	90 93 8d 01 	sts	0x018D, r25
    14b8:	a0 93 8e 01 	sts	0x018E, r26
    14bc:	b0 93 8f 01 	sts	0x018F, r27
	if( G_u32Overflows ==  G_u32CompCounter)
    14c0:	20 91 99 01 	lds	r18, 0x0199
    14c4:	30 91 9a 01 	lds	r19, 0x019A
    14c8:	40 91 9b 01 	lds	r20, 0x019B
    14cc:	50 91 9c 01 	lds	r21, 0x019C
    14d0:	80 91 8c 01 	lds	r24, 0x018C
    14d4:	90 91 8d 01 	lds	r25, 0x018D
    14d8:	a0 91 8e 01 	lds	r26, 0x018E
    14dc:	b0 91 8f 01 	lds	r27, 0x018F
    14e0:	28 17       	cp	r18, r24
    14e2:	39 07       	cpc	r19, r25
    14e4:	4a 07       	cpc	r20, r26
    14e6:	5b 07       	cpc	r21, r27
    14e8:	b9 f4       	brne	.+46     	; 0x1518 <__vector_10+0xa8>
	{
		if( TIMER_PFTIMER0COMP != NULL )
    14ea:	80 91 82 01 	lds	r24, 0x0182
    14ee:	90 91 83 01 	lds	r25, 0x0183
    14f2:	00 97       	sbiw	r24, 0x00	; 0
    14f4:	29 f0       	breq	.+10     	; 0x1500 <__vector_10+0x90>
			TIMER_PFTIMER0COMP() ;
    14f6:	e0 91 82 01 	lds	r30, 0x0182
    14fa:	f0 91 83 01 	lds	r31, 0x0183
    14fe:	09 95       	icall
		G_u32CompCounter = 0 ;
    1500:	10 92 8c 01 	sts	0x018C, r1
    1504:	10 92 8d 01 	sts	0x018D, r1
    1508:	10 92 8e 01 	sts	0x018E, r1
    150c:	10 92 8f 01 	sts	0x018F, r1
		G_u8Check = 1;
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	80 93 9d 01 	sts	0x019D, r24
    1516:	3a c0       	rjmp	.+116    	; 0x158c <__vector_10+0x11c>
	}
	else if(G_u32Overflows == G_u32CompCounter + 1)
    1518:	80 91 8c 01 	lds	r24, 0x018C
    151c:	90 91 8d 01 	lds	r25, 0x018D
    1520:	a0 91 8e 01 	lds	r26, 0x018E
    1524:	b0 91 8f 01 	lds	r27, 0x018F
    1528:	9c 01       	movw	r18, r24
    152a:	ad 01       	movw	r20, r26
    152c:	2f 5f       	subi	r18, 0xFF	; 255
    152e:	3f 4f       	sbci	r19, 0xFF	; 255
    1530:	4f 4f       	sbci	r20, 0xFF	; 255
    1532:	5f 4f       	sbci	r21, 0xFF	; 255
    1534:	80 91 99 01 	lds	r24, 0x0199
    1538:	90 91 9a 01 	lds	r25, 0x019A
    153c:	a0 91 9b 01 	lds	r26, 0x019B
    1540:	b0 91 9c 01 	lds	r27, 0x019C
    1544:	28 17       	cp	r18, r24
    1546:	39 07       	cpc	r19, r25
    1548:	4a 07       	cpc	r20, r26
    154a:	5b 07       	cpc	r21, r27
    154c:	31 f4       	brne	.+12     	; 0x155a <__vector_10+0xea>
	{
		OCR0 = G_u8Reg;
    154e:	ec e5       	ldi	r30, 0x5C	; 92
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 91 98 01 	lds	r24, 0x0198
    1556:	80 83       	st	Z, r24
    1558:	19 c0       	rjmp	.+50     	; 0x158c <__vector_10+0x11c>
	}
	else if (G_u32Overflows != G_u32CompCounter)
    155a:	20 91 99 01 	lds	r18, 0x0199
    155e:	30 91 9a 01 	lds	r19, 0x019A
    1562:	40 91 9b 01 	lds	r20, 0x019B
    1566:	50 91 9c 01 	lds	r21, 0x019C
    156a:	80 91 8c 01 	lds	r24, 0x018C
    156e:	90 91 8d 01 	lds	r25, 0x018D
    1572:	a0 91 8e 01 	lds	r26, 0x018E
    1576:	b0 91 8f 01 	lds	r27, 0x018F
    157a:	28 17       	cp	r18, r24
    157c:	39 07       	cpc	r19, r25
    157e:	4a 07       	cpc	r20, r26
    1580:	5b 07       	cpc	r21, r27
    1582:	21 f0       	breq	.+8      	; 0x158c <__vector_10+0x11c>
	{
		OCR0 = 255;
    1584:	ec e5       	ldi	r30, 0x5C	; 92
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	8f ef       	ldi	r24, 0xFF	; 255
    158a:	80 83       	st	Z, r24
	}

}
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	ff 91       	pop	r31
    1592:	ef 91       	pop	r30
    1594:	bf 91       	pop	r27
    1596:	af 91       	pop	r26
    1598:	9f 91       	pop	r25
    159a:	8f 91       	pop	r24
    159c:	7f 91       	pop	r23
    159e:	6f 91       	pop	r22
    15a0:	5f 91       	pop	r21
    15a2:	4f 91       	pop	r20
    15a4:	3f 91       	pop	r19
    15a6:	2f 91       	pop	r18
    15a8:	0f 90       	pop	r0
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	0f 90       	pop	r0
    15ae:	1f 90       	pop	r1
    15b0:	18 95       	reti

000015b2 <MTIMER_voidTimer0FPWMInit>:


void MTIMER_voidTimer0FPWMInit()
{
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE FPWM MODE*/
		SET_BIT(TCCR0, WGM00);
    15ba:	a3 e5       	ldi	r26, 0x53	; 83
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e3 e5       	ldi	r30, 0x53	; 83
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	80 64       	ori	r24, 0x40	; 64
    15c6:	8c 93       	st	X, r24
		SET_BIT(TCCR0, WGM01);
    15c8:	a3 e5       	ldi	r26, 0x53	; 83
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e3 e5       	ldi	r30, 0x53	; 83
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	88 60       	ori	r24, 0x08	; 8
    15d4:	8c 93       	st	X, r24

		SET_BIT(TCCR0, COM00);
    15d6:	a3 e5       	ldi	r26, 0x53	; 83
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e3 e5       	ldi	r30, 0x53	; 83
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	80 61       	ori	r24, 0x10	; 16
    15e2:	8c 93       	st	X, r24
		SET_BIT(TCCR0, COM01);
    15e4:	a3 e5       	ldi	r26, 0x53	; 83
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e3 e5       	ldi	r30, 0x53	; 83
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	80 62       	ori	r24, 0x20	; 32
    15f0:	8c 93       	st	X, r24
#elif 	CLK == EIGHT
		TCCR0 = (TCCR0 & 0xf8) | 0x02;
#elif 	CLK == SIXTYFOUR
		TCCR0 = (TCCR0 & 0xf8) | 0x03;
#elif 	CLK == TWOFIFTYSIX
		TCCR0 = (TCCR0 & 0xf8) | 0x04;
    15f2:	a3 e5       	ldi	r26, 0x53	; 83
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e3 e5       	ldi	r30, 0x53	; 83
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	88 7f       	andi	r24, 0xF8	; 248
    15fe:	84 60       	ori	r24, 0x04	; 4
    1600:	8c 93       	st	X, r24
#elif 	CLK == EXTERN_FALLING
		TCCR0 = (TCCR0 & 0xf8) | 0x06;
#elif 	CLK == EXTERN_RISING
		TCCR0 = (TCCR0 & 0xf8) | 0x07;
#endif
}
    1602:	cf 91       	pop	r28
    1604:	df 91       	pop	r29
    1606:	08 95       	ret

00001608 <MTIMER_voidTimer0FPWMWrite>:

void MTIMER_voidTimer0FPWMWrite(u8 copy_u8Value)
{
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	0f 92       	push	r0
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
    1612:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = copy_u8Value;
    1614:	ec e5       	ldi	r30, 0x5C	; 92
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	80 83       	st	Z, r24

}
    161c:	0f 90       	pop	r0
    161e:	cf 91       	pop	r28
    1620:	df 91       	pop	r29
    1622:	08 95       	ret

00001624 <MTIMER_voidTimer1FPWM_ICR_INIT>:
/////////////////////////////////////////////////////////////////////////////////////////
void MTIMER_voidTimer1FPWM_ICR_INIT (void)
{
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSING FWPM W/ ICR*/

	CLR_BIT(TCCR1A,WGM10);
    162c:	af e4       	ldi	r26, 0x4F	; 79
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	ef e4       	ldi	r30, 0x4F	; 79
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	8e 7f       	andi	r24, 0xFE	; 254
    1638:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    163a:	af e4       	ldi	r26, 0x4F	; 79
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	ef e4       	ldi	r30, 0x4F	; 79
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	82 60       	ori	r24, 0x02	; 2
    1646:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    1648:	ae e4       	ldi	r26, 0x4E	; 78
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	ee e4       	ldi	r30, 0x4E	; 78
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	88 60       	ori	r24, 0x08	; 8
    1654:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    1656:	ae e4       	ldi	r26, 0x4E	; 78
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	ee e4       	ldi	r30, 0x4E	; 78
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	80 61       	ori	r24, 0x10	; 16
    1662:	8c 93       	st	X, r24

	/* CLEAR OC1A */
	CLR_BIT(TCCR1A, COM1A0);
    1664:	af e4       	ldi	r26, 0x4F	; 79
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	ef e4       	ldi	r30, 0x4F	; 79
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	8f 7b       	andi	r24, 0xBF	; 191
    1670:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1A1);
    1672:	af e4       	ldi	r26, 0x4F	; 79
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	ef e4       	ldi	r30, 0x4F	; 79
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	80 68       	ori	r24, 0x80	; 128
    167e:	8c 93       	st	X, r24

	/*FREQUENCY CONTROL*/
#if		CLK_ONE == ONE
		TCCR1B = (TCCR1B & 0xf8) | 0x01;
    1680:	ae e4       	ldi	r26, 0x4E	; 78
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	ee e4       	ldi	r30, 0x4E	; 78
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	88 7f       	andi	r24, 0xF8	; 248
    168c:	81 60       	ori	r24, 0x01	; 1
    168e:	8c 93       	st	X, r24
		TCCR1B = (TCCR1B & 0xf8) | 0x07;
#endif


	/* ICR1 */
	ICR1 = 19999;
    1690:	e6 e4       	ldi	r30, 0x46	; 70
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	8f e1       	ldi	r24, 0x1F	; 31
    1696:	9e e4       	ldi	r25, 0x4E	; 78
    1698:	91 83       	std	Z+1, r25	; 0x01
    169a:	80 83       	st	Z, r24
	/*N.B. Regarding FREQ and ICR1
	 * At mode 14, TIMER1 works in FPWM mode,
	 * with the value of ICR1 controlling
	 *the top value, hence, the frequency of PWM
	 * */
}
    169c:	cf 91       	pop	r28
    169e:	df 91       	pop	r29
    16a0:	08 95       	ret

000016a2 <MTIMER_voidTimer2COMPInit>:

////////////////////////////////////////////////////////////////////////////////////////

void MTIMER_voidTimer2COMPInit(void)

{
    16a2:	df 93       	push	r29
    16a4:	cf 93       	push	r28
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE CTC MODE*/
		CLR_BIT(TCCR2, WGM20);
    16aa:	a5 e4       	ldi	r26, 0x45	; 69
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e5 e4       	ldi	r30, 0x45	; 69
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	8f 7b       	andi	r24, 0xBF	; 191
    16b6:	8c 93       	st	X, r24
		SET_BIT(TCCR2, WGM21);
    16b8:	a5 e4       	ldi	r26, 0x45	; 69
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e5 e4       	ldi	r30, 0x45	; 69
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	88 60       	ori	r24, 0x08	; 8
    16c4:	8c 93       	st	X, r24

		SET_BIT(TIMSK, OCIE2);
    16c6:	a9 e5       	ldi	r26, 0x59	; 89
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e9 e5       	ldi	r30, 0x59	; 89
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	80 68       	ori	r24, 0x80	; 128
    16d2:	8c 93       	st	X, r24
		TCCR2 |= (1<<2);
		//TCCR2 = (TCCR2 & 0xf8) | 0x04;
#elif 	CLK == ONETWENTYEIGHT
		TCCR2 = (TCCR2 & 0xf8) | 0x05;
#elif 	CLK == TWOFIFTYSIX
		TCCR2 = (TCCR2 & 0xf8) | 0x06;
    16d4:	a5 e4       	ldi	r26, 0x45	; 69
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e5 e4       	ldi	r30, 0x45	; 69
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	88 7f       	andi	r24, 0xF8	; 248
    16e0:	86 60       	ori	r24, 0x06	; 6
    16e2:	8c 93       	st	X, r24
#elif 	CLK == TENTWENTYFOUR
		TCCR2 = (TCCR2 & 0xf8) | 0x07;
#endif

}
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	08 95       	ret

000016ea <MTIMER_voidTimer2COMPDelay>:

void MTIMER_voidTimer2COMPDelay(u8 copy_u8Offset, u32 copy_u32Counts)
{
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <MTIMER_voidTimer2COMPDelay+0x6>
    16f0:	00 d0       	rcall	.+0      	; 0x16f2 <MTIMER_voidTimer2COMPDelay+0x8>
    16f2:	0f 92       	push	r0
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
    16f8:	89 83       	std	Y+1, r24	; 0x01
    16fa:	4a 83       	std	Y+2, r20	; 0x02
    16fc:	5b 83       	std	Y+3, r21	; 0x03
    16fe:	6c 83       	std	Y+4, r22	; 0x04
    1700:	7d 83       	std	Y+5, r23	; 0x05
	G_u8Check = 0;
    1702:	10 92 9d 01 	sts	0x019D, r1
	G_u32Overflows = copy_u32Counts;
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	9b 81       	ldd	r25, Y+3	; 0x03
    170a:	ac 81       	ldd	r26, Y+4	; 0x04
    170c:	bd 81       	ldd	r27, Y+5	; 0x05
    170e:	80 93 99 01 	sts	0x0199, r24
    1712:	90 93 9a 01 	sts	0x019A, r25
    1716:	a0 93 9b 01 	sts	0x019B, r26
    171a:	b0 93 9c 01 	sts	0x019C, r27
	if (copy_u32Counts == 1)
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	9b 81       	ldd	r25, Y+3	; 0x03
    1722:	ac 81       	ldd	r26, Y+4	; 0x04
    1724:	bd 81       	ldd	r27, Y+5	; 0x05
    1726:	81 30       	cpi	r24, 0x01	; 1
    1728:	91 05       	cpc	r25, r1
    172a:	a1 05       	cpc	r26, r1
    172c:	b1 05       	cpc	r27, r1
    172e:	29 f4       	brne	.+10     	; 0x173a <MTIMER_voidTimer2COMPDelay+0x50>
	{
		OCR2 = copy_u8Offset;
    1730:	e3 e4       	ldi	r30, 0x43	; 67
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	80 83       	st	Z, r24
    1738:	10 c0       	rjmp	.+32     	; 0x175a <MTIMER_voidTimer2COMPDelay+0x70>
	}
	else if (copy_u32Counts > 1)
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	9b 81       	ldd	r25, Y+3	; 0x03
    173e:	ac 81       	ldd	r26, Y+4	; 0x04
    1740:	bd 81       	ldd	r27, Y+5	; 0x05
    1742:	82 30       	cpi	r24, 0x02	; 2
    1744:	91 05       	cpc	r25, r1
    1746:	a1 05       	cpc	r26, r1
    1748:	b1 05       	cpc	r27, r1
    174a:	38 f0       	brcs	.+14     	; 0x175a <MTIMER_voidTimer2COMPDelay+0x70>
	{
		G_u8Reg = copy_u8Offset;
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	80 93 98 01 	sts	0x0198, r24
		OCR2 = 255;
    1752:	e3 e4       	ldi	r30, 0x43	; 67
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	8f ef       	ldi	r24, 0xFF	; 255
    1758:	80 83       	st	Z, r24

	}
	MTIMER_voidTimer2COMPInit();
    175a:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <MTIMER_voidTimer2COMPInit>
	while (GET_BIT(TIFR, OCF2) == 0  &&  G_u8Check == 0);
    175e:	e8 e5       	ldi	r30, 0x58	; 88
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	88 23       	and	r24, r24
    1766:	24 f0       	brlt	.+8      	; 0x1770 <MTIMER_voidTimer2COMPDelay+0x86>
    1768:	80 91 9d 01 	lds	r24, 0x019D
    176c:	88 23       	and	r24, r24
    176e:	b9 f3       	breq	.-18     	; 0x175e <MTIMER_voidTimer2COMPDelay+0x74>
	}
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	cf 91       	pop	r28
    177c:	df 91       	pop	r29
    177e:	08 95       	ret

00001780 <MTIMER_voidTimer2COMPSetCallBack>:

void MTIMER_voidTimer2COMPSetCallBack ( void (*copy_PFvoidTimer2COMP) (void))
{
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	00 d0       	rcall	.+0      	; 0x1786 <MTIMER_voidTimer2COMPSetCallBack+0x6>
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
    178a:	9a 83       	std	Y+2, r25	; 0x02
    178c:	89 83       	std	Y+1, r24	; 0x01
	TIMER_PFTIMER2COMP = copy_PFvoidTimer2COMP ;
    178e:	89 81       	ldd	r24, Y+1	; 0x01
    1790:	9a 81       	ldd	r25, Y+2	; 0x02
    1792:	90 93 87 01 	sts	0x0187, r25
    1796:	80 93 86 01 	sts	0x0186, r24
}
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	08 95       	ret

000017a4 <MTIMER_voidTimer2OVFInit>:


void MTIMER_voidTimer2OVFInit(void)

{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE NORMAL MODE*/
		CLR_BIT(TCCR2, WGM20);
    17ac:	a5 e4       	ldi	r26, 0x45	; 69
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e5 e4       	ldi	r30, 0x45	; 69
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	8f 7b       	andi	r24, 0xBF	; 191
    17b8:	8c 93       	st	X, r24
		CLR_BIT(TCCR2, WGM21);
    17ba:	a5 e4       	ldi	r26, 0x45	; 69
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e5 e4       	ldi	r30, 0x45	; 69
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	87 7f       	andi	r24, 0xF7	; 247
    17c6:	8c 93       	st	X, r24

		SET_BIT(TIMSK, TOIE2);
    17c8:	a9 e5       	ldi	r26, 0x59	; 89
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	e9 e5       	ldi	r30, 0x59	; 89
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	80 64       	ori	r24, 0x40	; 64
    17d4:	8c 93       	st	X, r24
		TCCR2 |= (1<<2);
		//TCCR2 = (TCCR2 & 0xf8) | 0x04;
#elif 	CLK == ONETWENTYEIGHT
		TCCR2 = (TCCR2 & 0xf8) | 0x05;
#elif 	CLK == TWOFIFTYSIX
		TCCR2 = (TCCR2 & 0xf8) | 0x06;
    17d6:	a5 e4       	ldi	r26, 0x45	; 69
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e5 e4       	ldi	r30, 0x45	; 69
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	88 7f       	andi	r24, 0xF8	; 248
    17e2:	86 60       	ori	r24, 0x06	; 6
    17e4:	8c 93       	st	X, r24
#elif 	CLK == TENTWENTYFOUR
		TCCR2 = (TCCR2 & 0xf8) | 0x07;
#endif

}
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	08 95       	ret

000017ec <MTIMER_voidTimer2OVFDelay>:

void MTIMER_voidTimer2OVFDelay(u32 copy_u32Delay_ms)
{
    17ec:	ef 92       	push	r14
    17ee:	ff 92       	push	r15
    17f0:	0f 93       	push	r16
    17f2:	1f 93       	push	r17
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
    17fc:	61 97       	sbiw	r28, 0x11	; 17
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	f8 94       	cli
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	cd bf       	out	0x3d, r28	; 61
    1808:	6e 87       	std	Y+14, r22	; 0x0e
    180a:	7f 87       	std	Y+15, r23	; 0x0f
    180c:	88 8b       	std	Y+16, r24	; 0x10
    180e:	99 8b       	std	Y+17, r25	; 0x11
	f32 L_f32MaxCompare;
	f32 L_f32OverFlowCount;
	u32 L_u32Carry;
	u8 L_u8Offset;

	G_u8Check = 0;
    1810:	10 92 9d 01 	sts	0x019D, r1

	MTIMER_voidTimer2OVFInit();
    1814:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <MTIMER_voidTimer2OVFInit>
		L_f32MaxCompare = L_f32MaxCompare * 256 * 64;
#elif 	CLK == ONETWENTYEIGHT
		L_f32MaxCompare = (1000000.0) / F_CPU;
		L_f32MaxCompare = L_f32MaxCompare * 256 * 128;
#elif 	CLK == TWOFIFTYSIX
		L_f32MaxCompare = (1000000.0) / F_CPU;
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	a0 e0       	ldi	r26, 0x00	; 0
    181e:	be e3       	ldi	r27, 0x3E	; 62
    1820:	8a 87       	std	Y+10, r24	; 0x0a
    1822:	9b 87       	std	Y+11, r25	; 0x0b
    1824:	ac 87       	std	Y+12, r26	; 0x0c
    1826:	bd 87       	std	Y+13, r27	; 0x0d
		L_f32MaxCompare = L_f32MaxCompare * 256 * 256;
    1828:	6a 85       	ldd	r22, Y+10	; 0x0a
    182a:	7b 85       	ldd	r23, Y+11	; 0x0b
    182c:	8c 85       	ldd	r24, Y+12	; 0x0c
    182e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	40 e8       	ldi	r20, 0x80	; 128
    1836:	53 e4       	ldi	r21, 0x43	; 67
    1838:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	bc 01       	movw	r22, r24
    1842:	cd 01       	movw	r24, r26
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	40 e8       	ldi	r20, 0x80	; 128
    184a:	53 e4       	ldi	r21, 0x43	; 67
    184c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	8a 87       	std	Y+10, r24	; 0x0a
    1856:	9b 87       	std	Y+11, r25	; 0x0b
    1858:	ac 87       	std	Y+12, r26	; 0x0c
    185a:	bd 87       	std	Y+13, r27	; 0x0d
		L_f32MaxCompare = L_f32MaxCompare * 256 * 1024;

#endif


	if (copy_u32Delay_ms * 1000  <= L_f32MaxCompare)
    185c:	8e 85       	ldd	r24, Y+14	; 0x0e
    185e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1860:	a8 89       	ldd	r26, Y+16	; 0x10
    1862:	b9 89       	ldd	r27, Y+17	; 0x11
    1864:	28 ee       	ldi	r18, 0xE8	; 232
    1866:	33 e0       	ldi	r19, 0x03	; 3
    1868:	40 e0       	ldi	r20, 0x00	; 0
    186a:	50 e0       	ldi	r21, 0x00	; 0
    186c:	bc 01       	movw	r22, r24
    186e:	cd 01       	movw	r24, r26
    1870:	0e 94 15 18 	call	0x302a	; 0x302a <__mulsi3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	bc 01       	movw	r22, r24
    187a:	cd 01       	movw	r24, r26
    187c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	bc 01       	movw	r22, r24
    1886:	cd 01       	movw	r24, r26
    1888:	2a 85       	ldd	r18, Y+10	; 0x0a
    188a:	3b 85       	ldd	r19, Y+11	; 0x0b
    188c:	4c 85       	ldd	r20, Y+12	; 0x0c
    188e:	5d 85       	ldd	r21, Y+13	; 0x0d
    1890:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    1894:	18 16       	cp	r1, r24
    1896:	0c f4       	brge	.+2      	; 0x189a <MTIMER_voidTimer2OVFDelay+0xae>
    1898:	49 c0       	rjmp	.+146    	; 0x192c <MTIMER_voidTimer2OVFDelay+0x140>
		{
			L_f32OverFlowCount = (copy_u32Delay_ms / (L_f32MaxCompare/1000.0));
    189a:	6e 85       	ldd	r22, Y+14	; 0x0e
    189c:	7f 85       	ldd	r23, Y+15	; 0x0f
    189e:	88 89       	ldd	r24, Y+16	; 0x10
    18a0:	99 89       	ldd	r25, Y+17	; 0x11
    18a2:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    18a6:	7b 01       	movw	r14, r22
    18a8:	8c 01       	movw	r16, r24
    18aa:	6a 85       	ldd	r22, Y+10	; 0x0a
    18ac:	7b 85       	ldd	r23, Y+11	; 0x0b
    18ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    18b0:	9d 85       	ldd	r25, Y+13	; 0x0d
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	4a e7       	ldi	r20, 0x7A	; 122
    18b8:	54 e4       	ldi	r21, 0x44	; 68
    18ba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	9c 01       	movw	r18, r24
    18c4:	ad 01       	movw	r20, r26
    18c6:	c8 01       	movw	r24, r16
    18c8:	b7 01       	movw	r22, r14
    18ca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	8e 83       	std	Y+6, r24	; 0x06
    18d4:	9f 83       	std	Y+7, r25	; 0x07
    18d6:	a8 87       	std	Y+8, r26	; 0x08
    18d8:	b9 87       	std	Y+9, r27	; 0x09
			L_u8Offset = L_f32OverFlowCount * 256.0;
    18da:	6e 81       	ldd	r22, Y+6	; 0x06
    18dc:	7f 81       	ldd	r23, Y+7	; 0x07
    18de:	88 85       	ldd	r24, Y+8	; 0x08
    18e0:	99 85       	ldd	r25, Y+9	; 0x09
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	40 e8       	ldi	r20, 0x80	; 128
    18e8:	53 e4       	ldi	r21, 0x43	; 67
    18ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	bc 01       	movw	r22, r24
    18f4:	cd 01       	movw	r24, r26
    18f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	89 83       	std	Y+1, r24	; 0x01
			G_u32Overflows = 1;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	a0 e0       	ldi	r26, 0x00	; 0
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	80 93 99 01 	sts	0x0199, r24
    190c:	90 93 9a 01 	sts	0x019A, r25
    1910:	a0 93 9b 01 	sts	0x019B, r26
    1914:	b0 93 9c 01 	sts	0x019C, r27
			G_u8Reg = 256 - L_u8Offset;
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	81 95       	neg	r24
    191c:	80 93 98 01 	sts	0x0198, r24
			TCNT2 = G_u8Reg;
    1920:	e4 e4       	ldi	r30, 0x44	; 68
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 91 98 01 	lds	r24, 0x0198
    1928:	80 83       	st	Z, r24
    192a:	7f c0       	rjmp	.+254    	; 0x1a2a <MTIMER_voidTimer2OVFDelay+0x23e>
		}
	else
	{
		L_f32OverFlowCount = (copy_u32Delay_ms / (L_f32MaxCompare/1000.0));
    192c:	6e 85       	ldd	r22, Y+14	; 0x0e
    192e:	7f 85       	ldd	r23, Y+15	; 0x0f
    1930:	88 89       	ldd	r24, Y+16	; 0x10
    1932:	99 89       	ldd	r25, Y+17	; 0x11
    1934:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1938:	7b 01       	movw	r14, r22
    193a:	8c 01       	movw	r16, r24
    193c:	6a 85       	ldd	r22, Y+10	; 0x0a
    193e:	7b 85       	ldd	r23, Y+11	; 0x0b
    1940:	8c 85       	ldd	r24, Y+12	; 0x0c
    1942:	9d 85       	ldd	r25, Y+13	; 0x0d
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	4a e7       	ldi	r20, 0x7A	; 122
    194a:	54 e4       	ldi	r21, 0x44	; 68
    194c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1950:	dc 01       	movw	r26, r24
    1952:	cb 01       	movw	r24, r22
    1954:	9c 01       	movw	r18, r24
    1956:	ad 01       	movw	r20, r26
    1958:	c8 01       	movw	r24, r16
    195a:	b7 01       	movw	r22, r14
    195c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	8e 83       	std	Y+6, r24	; 0x06
    1966:	9f 83       	std	Y+7, r25	; 0x07
    1968:	a8 87       	std	Y+8, r26	; 0x08
    196a:	b9 87       	std	Y+9, r27	; 0x09
		L_u32Carry = (copy_u32Delay_ms / (L_f32MaxCompare/1000));
    196c:	6e 85       	ldd	r22, Y+14	; 0x0e
    196e:	7f 85       	ldd	r23, Y+15	; 0x0f
    1970:	88 89       	ldd	r24, Y+16	; 0x10
    1972:	99 89       	ldd	r25, Y+17	; 0x11
    1974:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1978:	7b 01       	movw	r14, r22
    197a:	8c 01       	movw	r16, r24
    197c:	6a 85       	ldd	r22, Y+10	; 0x0a
    197e:	7b 85       	ldd	r23, Y+11	; 0x0b
    1980:	8c 85       	ldd	r24, Y+12	; 0x0c
    1982:	9d 85       	ldd	r25, Y+13	; 0x0d
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	4a e7       	ldi	r20, 0x7A	; 122
    198a:	54 e4       	ldi	r21, 0x44	; 68
    198c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	9c 01       	movw	r18, r24
    1996:	ad 01       	movw	r20, r26
    1998:	c8 01       	movw	r24, r16
    199a:	b7 01       	movw	r22, r14
    199c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	bc 01       	movw	r22, r24
    19a6:	cd 01       	movw	r24, r26
    19a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	8a 83       	std	Y+2, r24	; 0x02
    19b2:	9b 83       	std	Y+3, r25	; 0x03
    19b4:	ac 83       	std	Y+4, r26	; 0x04
    19b6:	bd 83       	std	Y+5, r27	; 0x05

		L_u8Offset = (L_f32OverFlowCount - L_u32Carry) * 256.0;
    19b8:	6a 81       	ldd	r22, Y+2	; 0x02
    19ba:	7b 81       	ldd	r23, Y+3	; 0x03
    19bc:	8c 81       	ldd	r24, Y+4	; 0x04
    19be:	9d 81       	ldd	r25, Y+5	; 0x05
    19c0:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    19c4:	9b 01       	movw	r18, r22
    19c6:	ac 01       	movw	r20, r24
    19c8:	6e 81       	ldd	r22, Y+6	; 0x06
    19ca:	7f 81       	ldd	r23, Y+7	; 0x07
    19cc:	88 85       	ldd	r24, Y+8	; 0x08
    19ce:	99 85       	ldd	r25, Y+9	; 0x09
    19d0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	bc 01       	movw	r22, r24
    19da:	cd 01       	movw	r24, r26
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	40 e8       	ldi	r20, 0x80	; 128
    19e2:	53 e4       	ldi	r21, 0x43	; 67
    19e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	bc 01       	movw	r22, r24
    19ee:	cd 01       	movw	r24, r26
    19f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	89 83       	std	Y+1, r24	; 0x01
		G_u32Overflows = L_u32Carry +1 ;
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	9b 81       	ldd	r25, Y+3	; 0x03
    19fe:	ac 81       	ldd	r26, Y+4	; 0x04
    1a00:	bd 81       	ldd	r27, Y+5	; 0x05
    1a02:	01 96       	adiw	r24, 0x01	; 1
    1a04:	a1 1d       	adc	r26, r1
    1a06:	b1 1d       	adc	r27, r1
    1a08:	80 93 99 01 	sts	0x0199, r24
    1a0c:	90 93 9a 01 	sts	0x019A, r25
    1a10:	a0 93 9b 01 	sts	0x019B, r26
    1a14:	b0 93 9c 01 	sts	0x019C, r27
		G_u8Reg = 256 - L_u8Offset;
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	81 95       	neg	r24
    1a1c:	80 93 98 01 	sts	0x0198, r24
		TCNT2 = G_u8Reg;
    1a20:	e4 e4       	ldi	r30, 0x44	; 68
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 91 98 01 	lds	r24, 0x0198
    1a28:	80 83       	st	Z, r24

	}

	while (GET_BIT(TIFR, TOV2) == 0 && G_u8Check == 0);
    1a2a:	e8 e5       	ldi	r30, 0x58	; 88
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	82 95       	swap	r24
    1a32:	86 95       	lsr	r24
    1a34:	86 95       	lsr	r24
    1a36:	83 70       	andi	r24, 0x03	; 3
    1a38:	88 2f       	mov	r24, r24
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	81 70       	andi	r24, 0x01	; 1
    1a3e:	90 70       	andi	r25, 0x00	; 0
    1a40:	00 97       	sbiw	r24, 0x00	; 0
    1a42:	21 f4       	brne	.+8      	; 0x1a4c <MTIMER_voidTimer2OVFDelay+0x260>
    1a44:	80 91 9d 01 	lds	r24, 0x019D
    1a48:	88 23       	and	r24, r24
    1a4a:	79 f3       	breq	.-34     	; 0x1a2a <MTIMER_voidTimer2OVFDelay+0x23e>
}
    1a4c:	61 96       	adiw	r28, 0x11	; 17
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	f8 94       	cli
    1a52:	de bf       	out	0x3e, r29	; 62
    1a54:	0f be       	out	0x3f, r0	; 63
    1a56:	cd bf       	out	0x3d, r28	; 61
    1a58:	cf 91       	pop	r28
    1a5a:	df 91       	pop	r29
    1a5c:	1f 91       	pop	r17
    1a5e:	0f 91       	pop	r16
    1a60:	ff 90       	pop	r15
    1a62:	ef 90       	pop	r14
    1a64:	08 95       	ret

00001a66 <MTIMER_voidTimer2OVFSetCallBack>:

void MTIMER_voidTimer2OVFSetCallBack ( void (*copy_PFvoidTimer2OVF) (void))
{
    1a66:	df 93       	push	r29
    1a68:	cf 93       	push	r28
    1a6a:	00 d0       	rcall	.+0      	; 0x1a6c <MTIMER_voidTimer2OVFSetCallBack+0x6>
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
    1a70:	9a 83       	std	Y+2, r25	; 0x02
    1a72:	89 83       	std	Y+1, r24	; 0x01
	TIMER_PFTIMER2OVF = copy_PFvoidTimer2OVF ;
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	9a 81       	ldd	r25, Y+2	; 0x02
    1a78:	90 93 85 01 	sts	0x0185, r25
    1a7c:	80 93 84 01 	sts	0x0184, r24
}
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <MTIMER_voidTimer2FPWMInit>:


void MTIMER_voidTimer2FPWMInit()
{
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE FPWM MODE*/
		SET_BIT(TCCR2, WGM20);
    1a92:	a5 e4       	ldi	r26, 0x45	; 69
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	e5 e4       	ldi	r30, 0x45	; 69
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	80 64       	ori	r24, 0x40	; 64
    1a9e:	8c 93       	st	X, r24
		SET_BIT(TCCR2, WGM21);
    1aa0:	a5 e4       	ldi	r26, 0x45	; 69
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	e5 e4       	ldi	r30, 0x45	; 69
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	88 60       	ori	r24, 0x08	; 8
    1aac:	8c 93       	st	X, r24

		CLR_BIT(TCCR2, COM20);
    1aae:	a5 e4       	ldi	r26, 0x45	; 69
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	e5 e4       	ldi	r30, 0x45	; 69
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	8f 7e       	andi	r24, 0xEF	; 239
    1aba:	8c 93       	st	X, r24
		SET_BIT(TCCR2, COM21);
    1abc:	a5 e4       	ldi	r26, 0x45	; 69
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	e5 e4       	ldi	r30, 0x45	; 69
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	80 62       	ori	r24, 0x20	; 32
    1ac8:	8c 93       	st	X, r24
		TCCR2 |= (1<<2);
		//TCCR2 = (TCCR2 & 0xf8) | 0x04;
#elif 	CLK == ONETWENTYEIGHT
		TCCR2 = (TCCR2 & 0xf8) | 0x05;
#elif 	CLK == TWOFIFTYSIX
		TCCR2 = (TCCR2 & 0xf8) | 0x06;
    1aca:	a5 e4       	ldi	r26, 0x45	; 69
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e5 e4       	ldi	r30, 0x45	; 69
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	88 7f       	andi	r24, 0xF8	; 248
    1ad6:	86 60       	ori	r24, 0x06	; 6
    1ad8:	8c 93       	st	X, r24
#elif 	CLK == TENTWENTYFOUR
		TCCR2 = (TCCR2 & 0xf8) | 0x07;
#endif
}
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	08 95       	ret

00001ae0 <MTIMER_voidTimer2FPWMWrite>:


void MTIMER_voidTimer2FPWMWrite(u8 copy_u8Value)
{
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	0f 92       	push	r0
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = copy_u8Value;
    1aec:	e3 e4       	ldi	r30, 0x43	; 67
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	80 83       	st	Z, r24
}
    1af4:	0f 90       	pop	r0
    1af6:	cf 91       	pop	r28
    1af8:	df 91       	pop	r29
    1afa:	08 95       	ret

00001afc <__vector_5>:




ISR (TIMER2_OVF_vect)
{
    1afc:	1f 92       	push	r1
    1afe:	0f 92       	push	r0
    1b00:	0f b6       	in	r0, 0x3f	; 63
    1b02:	0f 92       	push	r0
    1b04:	11 24       	eor	r1, r1
    1b06:	2f 93       	push	r18
    1b08:	3f 93       	push	r19
    1b0a:	4f 93       	push	r20
    1b0c:	5f 93       	push	r21
    1b0e:	6f 93       	push	r22
    1b10:	7f 93       	push	r23
    1b12:	8f 93       	push	r24
    1b14:	9f 93       	push	r25
    1b16:	af 93       	push	r26
    1b18:	bf 93       	push	r27
    1b1a:	ef 93       	push	r30
    1b1c:	ff 93       	push	r31
    1b1e:	df 93       	push	r29
    1b20:	cf 93       	push	r28
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
	static u32 L_u32OVFCounter = 0 ;
	L_u32OVFCounter ++ ;
    1b26:	80 91 90 01 	lds	r24, 0x0190
    1b2a:	90 91 91 01 	lds	r25, 0x0191
    1b2e:	a0 91 92 01 	lds	r26, 0x0192
    1b32:	b0 91 93 01 	lds	r27, 0x0193
    1b36:	01 96       	adiw	r24, 0x01	; 1
    1b38:	a1 1d       	adc	r26, r1
    1b3a:	b1 1d       	adc	r27, r1
    1b3c:	80 93 90 01 	sts	0x0190, r24
    1b40:	90 93 91 01 	sts	0x0191, r25
    1b44:	a0 93 92 01 	sts	0x0192, r26
    1b48:	b0 93 93 01 	sts	0x0193, r27
	if (L_u32OVFCounter == G_u32Overflows)
    1b4c:	20 91 90 01 	lds	r18, 0x0190
    1b50:	30 91 91 01 	lds	r19, 0x0191
    1b54:	40 91 92 01 	lds	r20, 0x0192
    1b58:	50 91 93 01 	lds	r21, 0x0193
    1b5c:	80 91 99 01 	lds	r24, 0x0199
    1b60:	90 91 9a 01 	lds	r25, 0x019A
    1b64:	a0 91 9b 01 	lds	r26, 0x019B
    1b68:	b0 91 9c 01 	lds	r27, 0x019C
    1b6c:	28 17       	cp	r18, r24
    1b6e:	39 07       	cpc	r19, r25
    1b70:	4a 07       	cpc	r20, r26
    1b72:	5b 07       	cpc	r21, r27
    1b74:	d9 f4       	brne	.+54     	; 0x1bac <__vector_5+0xb0>
	{
		L_u32OVFCounter = 0 ;
    1b76:	10 92 90 01 	sts	0x0190, r1
    1b7a:	10 92 91 01 	sts	0x0191, r1
    1b7e:	10 92 92 01 	sts	0x0192, r1
    1b82:	10 92 93 01 	sts	0x0193, r1
		TCNT2 = G_u8Reg;
    1b86:	e4 e4       	ldi	r30, 0x44	; 68
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 91 98 01 	lds	r24, 0x0198
    1b8e:	80 83       	st	Z, r24
		if ( TIMER_PFTIMER2OVF != NULL )
    1b90:	80 91 84 01 	lds	r24, 0x0184
    1b94:	90 91 85 01 	lds	r25, 0x0185
    1b98:	00 97       	sbiw	r24, 0x00	; 0
    1b9a:	29 f0       	breq	.+10     	; 0x1ba6 <__vector_5+0xaa>
			TIMER_PFTIMER2OVF() ;
    1b9c:	e0 91 84 01 	lds	r30, 0x0184
    1ba0:	f0 91 85 01 	lds	r31, 0x0185
    1ba4:	09 95       	icall
		G_u8Check = 1;
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	80 93 9d 01 	sts	0x019D, r24
	}
}
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	ff 91       	pop	r31
    1bb2:	ef 91       	pop	r30
    1bb4:	bf 91       	pop	r27
    1bb6:	af 91       	pop	r26
    1bb8:	9f 91       	pop	r25
    1bba:	8f 91       	pop	r24
    1bbc:	7f 91       	pop	r23
    1bbe:	6f 91       	pop	r22
    1bc0:	5f 91       	pop	r21
    1bc2:	4f 91       	pop	r20
    1bc4:	3f 91       	pop	r19
    1bc6:	2f 91       	pop	r18
    1bc8:	0f 90       	pop	r0
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	0f 90       	pop	r0
    1bce:	1f 90       	pop	r1
    1bd0:	18 95       	reti

00001bd2 <__vector_4>:


ISR (TIMER2_COMP_vect)
{
    1bd2:	1f 92       	push	r1
    1bd4:	0f 92       	push	r0
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	0f 92       	push	r0
    1bda:	11 24       	eor	r1, r1
    1bdc:	2f 93       	push	r18
    1bde:	3f 93       	push	r19
    1be0:	4f 93       	push	r20
    1be2:	5f 93       	push	r21
    1be4:	6f 93       	push	r22
    1be6:	7f 93       	push	r23
    1be8:	8f 93       	push	r24
    1bea:	9f 93       	push	r25
    1bec:	af 93       	push	r26
    1bee:	bf 93       	push	r27
    1bf0:	ef 93       	push	r30
    1bf2:	ff 93       	push	r31
    1bf4:	df 93       	push	r29
    1bf6:	cf 93       	push	r28
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
	static u32 G_u32CompCounter = 0;
	G_u32CompCounter ++ ;
    1bfc:	80 91 94 01 	lds	r24, 0x0194
    1c00:	90 91 95 01 	lds	r25, 0x0195
    1c04:	a0 91 96 01 	lds	r26, 0x0196
    1c08:	b0 91 97 01 	lds	r27, 0x0197
    1c0c:	01 96       	adiw	r24, 0x01	; 1
    1c0e:	a1 1d       	adc	r26, r1
    1c10:	b1 1d       	adc	r27, r1
    1c12:	80 93 94 01 	sts	0x0194, r24
    1c16:	90 93 95 01 	sts	0x0195, r25
    1c1a:	a0 93 96 01 	sts	0x0196, r26
    1c1e:	b0 93 97 01 	sts	0x0197, r27
	if( G_u32CompCounter == G_u32Overflows )
    1c22:	20 91 94 01 	lds	r18, 0x0194
    1c26:	30 91 95 01 	lds	r19, 0x0195
    1c2a:	40 91 96 01 	lds	r20, 0x0196
    1c2e:	50 91 97 01 	lds	r21, 0x0197
    1c32:	80 91 99 01 	lds	r24, 0x0199
    1c36:	90 91 9a 01 	lds	r25, 0x019A
    1c3a:	a0 91 9b 01 	lds	r26, 0x019B
    1c3e:	b0 91 9c 01 	lds	r27, 0x019C
    1c42:	28 17       	cp	r18, r24
    1c44:	39 07       	cpc	r19, r25
    1c46:	4a 07       	cpc	r20, r26
    1c48:	5b 07       	cpc	r21, r27
    1c4a:	b9 f4       	brne	.+46     	; 0x1c7a <__vector_4+0xa8>
	{
		if(TIMER_PFTIMER2COMP != NULL)
    1c4c:	80 91 86 01 	lds	r24, 0x0186
    1c50:	90 91 87 01 	lds	r25, 0x0187
    1c54:	00 97       	sbiw	r24, 0x00	; 0
    1c56:	29 f0       	breq	.+10     	; 0x1c62 <__vector_4+0x90>
			TIMER_PFTIMER2COMP() ;
    1c58:	e0 91 86 01 	lds	r30, 0x0186
    1c5c:	f0 91 87 01 	lds	r31, 0x0187
    1c60:	09 95       	icall
		G_u32CompCounter = 0 ;
    1c62:	10 92 94 01 	sts	0x0194, r1
    1c66:	10 92 95 01 	sts	0x0195, r1
    1c6a:	10 92 96 01 	sts	0x0196, r1
    1c6e:	10 92 97 01 	sts	0x0197, r1
		G_u8Check = 1;
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	80 93 9d 01 	sts	0x019D, r24
    1c78:	3a c0       	rjmp	.+116    	; 0x1cee <__vector_4+0x11c>
	}
	else if(G_u32CompCounter == G_u32Overflows - 1)
    1c7a:	80 91 99 01 	lds	r24, 0x0199
    1c7e:	90 91 9a 01 	lds	r25, 0x019A
    1c82:	a0 91 9b 01 	lds	r26, 0x019B
    1c86:	b0 91 9c 01 	lds	r27, 0x019C
    1c8a:	9c 01       	movw	r18, r24
    1c8c:	ad 01       	movw	r20, r26
    1c8e:	21 50       	subi	r18, 0x01	; 1
    1c90:	30 40       	sbci	r19, 0x00	; 0
    1c92:	40 40       	sbci	r20, 0x00	; 0
    1c94:	50 40       	sbci	r21, 0x00	; 0
    1c96:	80 91 94 01 	lds	r24, 0x0194
    1c9a:	90 91 95 01 	lds	r25, 0x0195
    1c9e:	a0 91 96 01 	lds	r26, 0x0196
    1ca2:	b0 91 97 01 	lds	r27, 0x0197
    1ca6:	28 17       	cp	r18, r24
    1ca8:	39 07       	cpc	r19, r25
    1caa:	4a 07       	cpc	r20, r26
    1cac:	5b 07       	cpc	r21, r27
    1cae:	31 f4       	brne	.+12     	; 0x1cbc <__vector_4+0xea>
	{
		OCR2 = G_u8Reg;
    1cb0:	e3 e4       	ldi	r30, 0x43	; 67
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 91 98 01 	lds	r24, 0x0198
    1cb8:	80 83       	st	Z, r24
    1cba:	19 c0       	rjmp	.+50     	; 0x1cee <__vector_4+0x11c>
	}
	else if (G_u32CompCounter != G_u32Overflows)
    1cbc:	20 91 94 01 	lds	r18, 0x0194
    1cc0:	30 91 95 01 	lds	r19, 0x0195
    1cc4:	40 91 96 01 	lds	r20, 0x0196
    1cc8:	50 91 97 01 	lds	r21, 0x0197
    1ccc:	80 91 99 01 	lds	r24, 0x0199
    1cd0:	90 91 9a 01 	lds	r25, 0x019A
    1cd4:	a0 91 9b 01 	lds	r26, 0x019B
    1cd8:	b0 91 9c 01 	lds	r27, 0x019C
    1cdc:	28 17       	cp	r18, r24
    1cde:	39 07       	cpc	r19, r25
    1ce0:	4a 07       	cpc	r20, r26
    1ce2:	5b 07       	cpc	r21, r27
    1ce4:	21 f0       	breq	.+8      	; 0x1cee <__vector_4+0x11c>
	{
		OCR2 = 255;
    1ce6:	e3 e4       	ldi	r30, 0x43	; 67
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	8f ef       	ldi	r24, 0xFF	; 255
    1cec:	80 83       	st	Z, r24
	}

}
    1cee:	cf 91       	pop	r28
    1cf0:	df 91       	pop	r29
    1cf2:	ff 91       	pop	r31
    1cf4:	ef 91       	pop	r30
    1cf6:	bf 91       	pop	r27
    1cf8:	af 91       	pop	r26
    1cfa:	9f 91       	pop	r25
    1cfc:	8f 91       	pop	r24
    1cfe:	7f 91       	pop	r23
    1d00:	6f 91       	pop	r22
    1d02:	5f 91       	pop	r21
    1d04:	4f 91       	pop	r20
    1d06:	3f 91       	pop	r19
    1d08:	2f 91       	pop	r18
    1d0a:	0f 90       	pop	r0
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	0f 90       	pop	r0
    1d10:	1f 90       	pop	r1
    1d12:	18 95       	reti

00001d14 <MDIO_voidDioSetPinDirection>:




void MDIO_voidDioSetPinDirection(u8 copy_u8Port, u8 copy_u8Pin, u8 copy_u8Direction)
{
    1d14:	df 93       	push	r29
    1d16:	cf 93       	push	r28
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	27 97       	sbiw	r28, 0x07	; 7
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	f8 94       	cli
    1d22:	de bf       	out	0x3e, r29	; 62
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	cd bf       	out	0x3d, r28	; 61
    1d28:	89 83       	std	Y+1, r24	; 0x01
    1d2a:	6a 83       	std	Y+2, r22	; 0x02
    1d2c:	4b 83       	std	Y+3, r20	; 0x03
	if (copy_u8Direction == DIO_OUT)
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	81 30       	cpi	r24, 0x01	; 1
    1d32:	09 f0       	breq	.+2      	; 0x1d36 <MDIO_voidDioSetPinDirection+0x22>
    1d34:	6f c0       	rjmp	.+222    	; 0x1e14 <MDIO_voidDioSetPinDirection+0x100>
	{
		switch (copy_u8Port)
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	28 2f       	mov	r18, r24
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	3f 83       	std	Y+7, r19	; 0x07
    1d3e:	2e 83       	std	Y+6, r18	; 0x06
    1d40:	8e 81       	ldd	r24, Y+6	; 0x06
    1d42:	9f 81       	ldd	r25, Y+7	; 0x07
    1d44:	81 30       	cpi	r24, 0x01	; 1
    1d46:	91 05       	cpc	r25, r1
    1d48:	49 f1       	breq	.+82     	; 0x1d9c <MDIO_voidDioSetPinDirection+0x88>
    1d4a:	2e 81       	ldd	r18, Y+6	; 0x06
    1d4c:	3f 81       	ldd	r19, Y+7	; 0x07
    1d4e:	22 30       	cpi	r18, 0x02	; 2
    1d50:	31 05       	cpc	r19, r1
    1d52:	2c f4       	brge	.+10     	; 0x1d5e <MDIO_voidDioSetPinDirection+0x4a>
    1d54:	8e 81       	ldd	r24, Y+6	; 0x06
    1d56:	9f 81       	ldd	r25, Y+7	; 0x07
    1d58:	00 97       	sbiw	r24, 0x00	; 0
    1d5a:	61 f0       	breq	.+24     	; 0x1d74 <MDIO_voidDioSetPinDirection+0x60>
    1d5c:	d2 c0       	rjmp	.+420    	; 0x1f02 <MDIO_voidDioSetPinDirection+0x1ee>
    1d5e:	2e 81       	ldd	r18, Y+6	; 0x06
    1d60:	3f 81       	ldd	r19, Y+7	; 0x07
    1d62:	22 30       	cpi	r18, 0x02	; 2
    1d64:	31 05       	cpc	r19, r1
    1d66:	71 f1       	breq	.+92     	; 0x1dc4 <MDIO_voidDioSetPinDirection+0xb0>
    1d68:	8e 81       	ldd	r24, Y+6	; 0x06
    1d6a:	9f 81       	ldd	r25, Y+7	; 0x07
    1d6c:	83 30       	cpi	r24, 0x03	; 3
    1d6e:	91 05       	cpc	r25, r1
    1d70:	e9 f1       	breq	.+122    	; 0x1dec <MDIO_voidDioSetPinDirection+0xd8>
    1d72:	c7 c0       	rjmp	.+398    	; 0x1f02 <MDIO_voidDioSetPinDirection+0x1ee>
		{
			case DIO_PORTA:SET_BIT(DDRA, copy_u8Pin); break;
    1d74:	aa e3       	ldi	r26, 0x3A	; 58
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	ea e3       	ldi	r30, 0x3A	; 58
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	48 2f       	mov	r20, r24
    1d80:	8a 81       	ldd	r24, Y+2	; 0x02
    1d82:	28 2f       	mov	r18, r24
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	02 2e       	mov	r0, r18
    1d8c:	02 c0       	rjmp	.+4      	; 0x1d92 <MDIO_voidDioSetPinDirection+0x7e>
    1d8e:	88 0f       	add	r24, r24
    1d90:	99 1f       	adc	r25, r25
    1d92:	0a 94       	dec	r0
    1d94:	e2 f7       	brpl	.-8      	; 0x1d8e <MDIO_voidDioSetPinDirection+0x7a>
    1d96:	84 2b       	or	r24, r20
    1d98:	8c 93       	st	X, r24
    1d9a:	b3 c0       	rjmp	.+358    	; 0x1f02 <MDIO_voidDioSetPinDirection+0x1ee>
			case DIO_PORTB:SET_BIT(DDRB, copy_u8Pin); break;
    1d9c:	a7 e3       	ldi	r26, 0x37	; 55
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e7 e3       	ldi	r30, 0x37	; 55
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	48 2f       	mov	r20, r24
    1da8:	8a 81       	ldd	r24, Y+2	; 0x02
    1daa:	28 2f       	mov	r18, r24
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	02 2e       	mov	r0, r18
    1db4:	02 c0       	rjmp	.+4      	; 0x1dba <MDIO_voidDioSetPinDirection+0xa6>
    1db6:	88 0f       	add	r24, r24
    1db8:	99 1f       	adc	r25, r25
    1dba:	0a 94       	dec	r0
    1dbc:	e2 f7       	brpl	.-8      	; 0x1db6 <MDIO_voidDioSetPinDirection+0xa2>
    1dbe:	84 2b       	or	r24, r20
    1dc0:	8c 93       	st	X, r24
    1dc2:	9f c0       	rjmp	.+318    	; 0x1f02 <MDIO_voidDioSetPinDirection+0x1ee>
			case DIO_PORTC:SET_BIT(DDRC, copy_u8Pin); break;
    1dc4:	a4 e3       	ldi	r26, 0x34	; 52
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	e4 e3       	ldi	r30, 0x34	; 52
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	48 2f       	mov	r20, r24
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	02 2e       	mov	r0, r18
    1ddc:	02 c0       	rjmp	.+4      	; 0x1de2 <MDIO_voidDioSetPinDirection+0xce>
    1dde:	88 0f       	add	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	0a 94       	dec	r0
    1de4:	e2 f7       	brpl	.-8      	; 0x1dde <MDIO_voidDioSetPinDirection+0xca>
    1de6:	84 2b       	or	r24, r20
    1de8:	8c 93       	st	X, r24
    1dea:	8b c0       	rjmp	.+278    	; 0x1f02 <MDIO_voidDioSetPinDirection+0x1ee>
			case DIO_PORTD:SET_BIT(DDRD, copy_u8Pin); break;
    1dec:	a1 e3       	ldi	r26, 0x31	; 49
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e1 e3       	ldi	r30, 0x31	; 49
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	48 2f       	mov	r20, r24
    1df8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	02 2e       	mov	r0, r18
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <MDIO_voidDioSetPinDirection+0xf6>
    1e06:	88 0f       	add	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	0a 94       	dec	r0
    1e0c:	e2 f7       	brpl	.-8      	; 0x1e06 <MDIO_voidDioSetPinDirection+0xf2>
    1e0e:	84 2b       	or	r24, r20
    1e10:	8c 93       	st	X, r24
    1e12:	77 c0       	rjmp	.+238    	; 0x1f02 <MDIO_voidDioSetPinDirection+0x1ee>
		}
	}
	else if(copy_u8Direction == DIO_IN)
    1e14:	8b 81       	ldd	r24, Y+3	; 0x03
    1e16:	88 23       	and	r24, r24
    1e18:	09 f0       	breq	.+2      	; 0x1e1c <MDIO_voidDioSetPinDirection+0x108>
    1e1a:	73 c0       	rjmp	.+230    	; 0x1f02 <MDIO_voidDioSetPinDirection+0x1ee>
	{
		switch (copy_u8Port)
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	28 2f       	mov	r18, r24
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	3d 83       	std	Y+5, r19	; 0x05
    1e24:	2c 83       	std	Y+4, r18	; 0x04
    1e26:	8c 81       	ldd	r24, Y+4	; 0x04
    1e28:	9d 81       	ldd	r25, Y+5	; 0x05
    1e2a:	81 30       	cpi	r24, 0x01	; 1
    1e2c:	91 05       	cpc	r25, r1
    1e2e:	59 f1       	breq	.+86     	; 0x1e86 <MDIO_voidDioSetPinDirection+0x172>
    1e30:	2c 81       	ldd	r18, Y+4	; 0x04
    1e32:	3d 81       	ldd	r19, Y+5	; 0x05
    1e34:	22 30       	cpi	r18, 0x02	; 2
    1e36:	31 05       	cpc	r19, r1
    1e38:	2c f4       	brge	.+10     	; 0x1e44 <MDIO_voidDioSetPinDirection+0x130>
    1e3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	69 f0       	breq	.+26     	; 0x1e5c <MDIO_voidDioSetPinDirection+0x148>
    1e42:	5f c0       	rjmp	.+190    	; 0x1f02 <MDIO_voidDioSetPinDirection+0x1ee>
    1e44:	2c 81       	ldd	r18, Y+4	; 0x04
    1e46:	3d 81       	ldd	r19, Y+5	; 0x05
    1e48:	22 30       	cpi	r18, 0x02	; 2
    1e4a:	31 05       	cpc	r19, r1
    1e4c:	89 f1       	breq	.+98     	; 0x1eb0 <MDIO_voidDioSetPinDirection+0x19c>
    1e4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e50:	9d 81       	ldd	r25, Y+5	; 0x05
    1e52:	83 30       	cpi	r24, 0x03	; 3
    1e54:	91 05       	cpc	r25, r1
    1e56:	09 f4       	brne	.+2      	; 0x1e5a <MDIO_voidDioSetPinDirection+0x146>
    1e58:	40 c0       	rjmp	.+128    	; 0x1eda <MDIO_voidDioSetPinDirection+0x1c6>
    1e5a:	53 c0       	rjmp	.+166    	; 0x1f02 <MDIO_voidDioSetPinDirection+0x1ee>
		{
			case DIO_PORTA:CLR_BIT(DDRA, copy_u8Pin); break;
    1e5c:	aa e3       	ldi	r26, 0x3A	; 58
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	ea e3       	ldi	r30, 0x3A	; 58
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	48 2f       	mov	r20, r24
    1e68:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6a:	28 2f       	mov	r18, r24
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	02 2e       	mov	r0, r18
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <MDIO_voidDioSetPinDirection+0x166>
    1e76:	88 0f       	add	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	0a 94       	dec	r0
    1e7c:	e2 f7       	brpl	.-8      	; 0x1e76 <MDIO_voidDioSetPinDirection+0x162>
    1e7e:	80 95       	com	r24
    1e80:	84 23       	and	r24, r20
    1e82:	8c 93       	st	X, r24
    1e84:	3e c0       	rjmp	.+124    	; 0x1f02 <MDIO_voidDioSetPinDirection+0x1ee>
			case DIO_PORTB:CLR_BIT(DDRB, copy_u8Pin); break;
    1e86:	a7 e3       	ldi	r26, 0x37	; 55
    1e88:	b0 e0       	ldi	r27, 0x00	; 0
    1e8a:	e7 e3       	ldi	r30, 0x37	; 55
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	48 2f       	mov	r20, r24
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	28 2f       	mov	r18, r24
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	02 2e       	mov	r0, r18
    1e9e:	02 c0       	rjmp	.+4      	; 0x1ea4 <MDIO_voidDioSetPinDirection+0x190>
    1ea0:	88 0f       	add	r24, r24
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	0a 94       	dec	r0
    1ea6:	e2 f7       	brpl	.-8      	; 0x1ea0 <MDIO_voidDioSetPinDirection+0x18c>
    1ea8:	80 95       	com	r24
    1eaa:	84 23       	and	r24, r20
    1eac:	8c 93       	st	X, r24
    1eae:	29 c0       	rjmp	.+82     	; 0x1f02 <MDIO_voidDioSetPinDirection+0x1ee>
			case DIO_PORTC:CLR_BIT(DDRC, copy_u8Pin); break;
    1eb0:	a4 e3       	ldi	r26, 0x34	; 52
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e4 e3       	ldi	r30, 0x34	; 52
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	48 2f       	mov	r20, r24
    1ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	02 2e       	mov	r0, r18
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <MDIO_voidDioSetPinDirection+0x1ba>
    1eca:	88 0f       	add	r24, r24
    1ecc:	99 1f       	adc	r25, r25
    1ece:	0a 94       	dec	r0
    1ed0:	e2 f7       	brpl	.-8      	; 0x1eca <MDIO_voidDioSetPinDirection+0x1b6>
    1ed2:	80 95       	com	r24
    1ed4:	84 23       	and	r24, r20
    1ed6:	8c 93       	st	X, r24
    1ed8:	14 c0       	rjmp	.+40     	; 0x1f02 <MDIO_voidDioSetPinDirection+0x1ee>
			case DIO_PORTD:CLR_BIT(DDRD, copy_u8Pin); break;
    1eda:	a1 e3       	ldi	r26, 0x31	; 49
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e1 e3       	ldi	r30, 0x31	; 49
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	48 2f       	mov	r20, r24
    1ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee8:	28 2f       	mov	r18, r24
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	02 2e       	mov	r0, r18
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <MDIO_voidDioSetPinDirection+0x1e4>
    1ef4:	88 0f       	add	r24, r24
    1ef6:	99 1f       	adc	r25, r25
    1ef8:	0a 94       	dec	r0
    1efa:	e2 f7       	brpl	.-8      	; 0x1ef4 <MDIO_voidDioSetPinDirection+0x1e0>
    1efc:	80 95       	com	r24
    1efe:	84 23       	and	r24, r20
    1f00:	8c 93       	st	X, r24
		}
	}
}
    1f02:	27 96       	adiw	r28, 0x07	; 7
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	f8 94       	cli
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	cd bf       	out	0x3d, r28	; 61
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <MDIO_voidDioSetPinValue>:

void MDIO_voidDioSetPinValue (u8 copy_u8Port, u8 copy_u8Pin, u8 copy_u8Value)
{
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	27 97       	sbiw	r28, 0x07	; 7
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	f8 94       	cli
    1f22:	de bf       	out	0x3e, r29	; 62
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	cd bf       	out	0x3d, r28	; 61
    1f28:	89 83       	std	Y+1, r24	; 0x01
    1f2a:	6a 83       	std	Y+2, r22	; 0x02
    1f2c:	4b 83       	std	Y+3, r20	; 0x03
	if (copy_u8Value == HIGH)
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	81 30       	cpi	r24, 0x01	; 1
    1f32:	09 f0       	breq	.+2      	; 0x1f36 <MDIO_voidDioSetPinValue+0x22>
    1f34:	6f c0       	rjmp	.+222    	; 0x2014 <MDIO_voidDioSetPinValue+0x100>
	{
		switch(copy_u8Port)
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	28 2f       	mov	r18, r24
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	3f 83       	std	Y+7, r19	; 0x07
    1f3e:	2e 83       	std	Y+6, r18	; 0x06
    1f40:	8e 81       	ldd	r24, Y+6	; 0x06
    1f42:	9f 81       	ldd	r25, Y+7	; 0x07
    1f44:	81 30       	cpi	r24, 0x01	; 1
    1f46:	91 05       	cpc	r25, r1
    1f48:	49 f1       	breq	.+82     	; 0x1f9c <MDIO_voidDioSetPinValue+0x88>
    1f4a:	2e 81       	ldd	r18, Y+6	; 0x06
    1f4c:	3f 81       	ldd	r19, Y+7	; 0x07
    1f4e:	22 30       	cpi	r18, 0x02	; 2
    1f50:	31 05       	cpc	r19, r1
    1f52:	2c f4       	brge	.+10     	; 0x1f5e <MDIO_voidDioSetPinValue+0x4a>
    1f54:	8e 81       	ldd	r24, Y+6	; 0x06
    1f56:	9f 81       	ldd	r25, Y+7	; 0x07
    1f58:	00 97       	sbiw	r24, 0x00	; 0
    1f5a:	61 f0       	breq	.+24     	; 0x1f74 <MDIO_voidDioSetPinValue+0x60>
    1f5c:	d2 c0       	rjmp	.+420    	; 0x2102 <MDIO_voidDioSetPinValue+0x1ee>
    1f5e:	2e 81       	ldd	r18, Y+6	; 0x06
    1f60:	3f 81       	ldd	r19, Y+7	; 0x07
    1f62:	22 30       	cpi	r18, 0x02	; 2
    1f64:	31 05       	cpc	r19, r1
    1f66:	71 f1       	breq	.+92     	; 0x1fc4 <MDIO_voidDioSetPinValue+0xb0>
    1f68:	8e 81       	ldd	r24, Y+6	; 0x06
    1f6a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f6c:	83 30       	cpi	r24, 0x03	; 3
    1f6e:	91 05       	cpc	r25, r1
    1f70:	e9 f1       	breq	.+122    	; 0x1fec <MDIO_voidDioSetPinValue+0xd8>
    1f72:	c7 c0       	rjmp	.+398    	; 0x2102 <MDIO_voidDioSetPinValue+0x1ee>
		{
			case DIO_PORTA: SET_BIT(PORTA, copy_u8Pin); break;
    1f74:	ab e3       	ldi	r26, 0x3B	; 59
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	eb e3       	ldi	r30, 0x3B	; 59
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	48 2f       	mov	r20, r24
    1f80:	8a 81       	ldd	r24, Y+2	; 0x02
    1f82:	28 2f       	mov	r18, r24
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	02 2e       	mov	r0, r18
    1f8c:	02 c0       	rjmp	.+4      	; 0x1f92 <MDIO_voidDioSetPinValue+0x7e>
    1f8e:	88 0f       	add	r24, r24
    1f90:	99 1f       	adc	r25, r25
    1f92:	0a 94       	dec	r0
    1f94:	e2 f7       	brpl	.-8      	; 0x1f8e <MDIO_voidDioSetPinValue+0x7a>
    1f96:	84 2b       	or	r24, r20
    1f98:	8c 93       	st	X, r24
    1f9a:	b3 c0       	rjmp	.+358    	; 0x2102 <MDIO_voidDioSetPinValue+0x1ee>
			case DIO_PORTB: SET_BIT(PORTB, copy_u8Pin); break;
    1f9c:	a8 e3       	ldi	r26, 0x38	; 56
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	e8 e3       	ldi	r30, 0x38	; 56
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	48 2f       	mov	r20, r24
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1faa:	28 2f       	mov	r18, r24
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	02 2e       	mov	r0, r18
    1fb4:	02 c0       	rjmp	.+4      	; 0x1fba <MDIO_voidDioSetPinValue+0xa6>
    1fb6:	88 0f       	add	r24, r24
    1fb8:	99 1f       	adc	r25, r25
    1fba:	0a 94       	dec	r0
    1fbc:	e2 f7       	brpl	.-8      	; 0x1fb6 <MDIO_voidDioSetPinValue+0xa2>
    1fbe:	84 2b       	or	r24, r20
    1fc0:	8c 93       	st	X, r24
    1fc2:	9f c0       	rjmp	.+318    	; 0x2102 <MDIO_voidDioSetPinValue+0x1ee>
			case DIO_PORTC: SET_BIT(PORTC, copy_u8Pin); break;
    1fc4:	a5 e3       	ldi	r26, 0x35	; 53
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
    1fc8:	e5 e3       	ldi	r30, 0x35	; 53
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	48 2f       	mov	r20, r24
    1fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd2:	28 2f       	mov	r18, r24
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	02 2e       	mov	r0, r18
    1fdc:	02 c0       	rjmp	.+4      	; 0x1fe2 <MDIO_voidDioSetPinValue+0xce>
    1fde:	88 0f       	add	r24, r24
    1fe0:	99 1f       	adc	r25, r25
    1fe2:	0a 94       	dec	r0
    1fe4:	e2 f7       	brpl	.-8      	; 0x1fde <MDIO_voidDioSetPinValue+0xca>
    1fe6:	84 2b       	or	r24, r20
    1fe8:	8c 93       	st	X, r24
    1fea:	8b c0       	rjmp	.+278    	; 0x2102 <MDIO_voidDioSetPinValue+0x1ee>
			case DIO_PORTD: SET_BIT(PORTD, copy_u8Pin); break;
    1fec:	a2 e3       	ldi	r26, 0x32	; 50
    1fee:	b0 e0       	ldi	r27, 0x00	; 0
    1ff0:	e2 e3       	ldi	r30, 0x32	; 50
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	48 2f       	mov	r20, r24
    1ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffa:	28 2f       	mov	r18, r24
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	02 2e       	mov	r0, r18
    2004:	02 c0       	rjmp	.+4      	; 0x200a <MDIO_voidDioSetPinValue+0xf6>
    2006:	88 0f       	add	r24, r24
    2008:	99 1f       	adc	r25, r25
    200a:	0a 94       	dec	r0
    200c:	e2 f7       	brpl	.-8      	; 0x2006 <MDIO_voidDioSetPinValue+0xf2>
    200e:	84 2b       	or	r24, r20
    2010:	8c 93       	st	X, r24
    2012:	77 c0       	rjmp	.+238    	; 0x2102 <MDIO_voidDioSetPinValue+0x1ee>
		}
	}
	else if (copy_u8Value == LOW)
    2014:	8b 81       	ldd	r24, Y+3	; 0x03
    2016:	88 23       	and	r24, r24
    2018:	09 f0       	breq	.+2      	; 0x201c <MDIO_voidDioSetPinValue+0x108>
    201a:	73 c0       	rjmp	.+230    	; 0x2102 <MDIO_voidDioSetPinValue+0x1ee>
	{
		switch(copy_u8Port)
    201c:	89 81       	ldd	r24, Y+1	; 0x01
    201e:	28 2f       	mov	r18, r24
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	3d 83       	std	Y+5, r19	; 0x05
    2024:	2c 83       	std	Y+4, r18	; 0x04
    2026:	8c 81       	ldd	r24, Y+4	; 0x04
    2028:	9d 81       	ldd	r25, Y+5	; 0x05
    202a:	81 30       	cpi	r24, 0x01	; 1
    202c:	91 05       	cpc	r25, r1
    202e:	59 f1       	breq	.+86     	; 0x2086 <MDIO_voidDioSetPinValue+0x172>
    2030:	2c 81       	ldd	r18, Y+4	; 0x04
    2032:	3d 81       	ldd	r19, Y+5	; 0x05
    2034:	22 30       	cpi	r18, 0x02	; 2
    2036:	31 05       	cpc	r19, r1
    2038:	2c f4       	brge	.+10     	; 0x2044 <MDIO_voidDioSetPinValue+0x130>
    203a:	8c 81       	ldd	r24, Y+4	; 0x04
    203c:	9d 81       	ldd	r25, Y+5	; 0x05
    203e:	00 97       	sbiw	r24, 0x00	; 0
    2040:	69 f0       	breq	.+26     	; 0x205c <MDIO_voidDioSetPinValue+0x148>
    2042:	5f c0       	rjmp	.+190    	; 0x2102 <MDIO_voidDioSetPinValue+0x1ee>
    2044:	2c 81       	ldd	r18, Y+4	; 0x04
    2046:	3d 81       	ldd	r19, Y+5	; 0x05
    2048:	22 30       	cpi	r18, 0x02	; 2
    204a:	31 05       	cpc	r19, r1
    204c:	89 f1       	breq	.+98     	; 0x20b0 <MDIO_voidDioSetPinValue+0x19c>
    204e:	8c 81       	ldd	r24, Y+4	; 0x04
    2050:	9d 81       	ldd	r25, Y+5	; 0x05
    2052:	83 30       	cpi	r24, 0x03	; 3
    2054:	91 05       	cpc	r25, r1
    2056:	09 f4       	brne	.+2      	; 0x205a <MDIO_voidDioSetPinValue+0x146>
    2058:	40 c0       	rjmp	.+128    	; 0x20da <MDIO_voidDioSetPinValue+0x1c6>
    205a:	53 c0       	rjmp	.+166    	; 0x2102 <MDIO_voidDioSetPinValue+0x1ee>
		{
			case DIO_PORTA: CLR_BIT(PORTA, copy_u8Pin); break;
    205c:	ab e3       	ldi	r26, 0x3B	; 59
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	eb e3       	ldi	r30, 0x3B	; 59
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	48 2f       	mov	r20, r24
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	28 2f       	mov	r18, r24
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	02 2e       	mov	r0, r18
    2074:	02 c0       	rjmp	.+4      	; 0x207a <MDIO_voidDioSetPinValue+0x166>
    2076:	88 0f       	add	r24, r24
    2078:	99 1f       	adc	r25, r25
    207a:	0a 94       	dec	r0
    207c:	e2 f7       	brpl	.-8      	; 0x2076 <MDIO_voidDioSetPinValue+0x162>
    207e:	80 95       	com	r24
    2080:	84 23       	and	r24, r20
    2082:	8c 93       	st	X, r24
    2084:	3e c0       	rjmp	.+124    	; 0x2102 <MDIO_voidDioSetPinValue+0x1ee>
			case DIO_PORTB: CLR_BIT(PORTB, copy_u8Pin); break;
    2086:	a8 e3       	ldi	r26, 0x38	; 56
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	e8 e3       	ldi	r30, 0x38	; 56
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	48 2f       	mov	r20, r24
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	28 2f       	mov	r18, r24
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	02 2e       	mov	r0, r18
    209e:	02 c0       	rjmp	.+4      	; 0x20a4 <MDIO_voidDioSetPinValue+0x190>
    20a0:	88 0f       	add	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	0a 94       	dec	r0
    20a6:	e2 f7       	brpl	.-8      	; 0x20a0 <MDIO_voidDioSetPinValue+0x18c>
    20a8:	80 95       	com	r24
    20aa:	84 23       	and	r24, r20
    20ac:	8c 93       	st	X, r24
    20ae:	29 c0       	rjmp	.+82     	; 0x2102 <MDIO_voidDioSetPinValue+0x1ee>
			case DIO_PORTC: CLR_BIT(PORTC, copy_u8Pin); break;
    20b0:	a5 e3       	ldi	r26, 0x35	; 53
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	e5 e3       	ldi	r30, 0x35	; 53
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	48 2f       	mov	r20, r24
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	28 2f       	mov	r18, r24
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	02 2e       	mov	r0, r18
    20c8:	02 c0       	rjmp	.+4      	; 0x20ce <MDIO_voidDioSetPinValue+0x1ba>
    20ca:	88 0f       	add	r24, r24
    20cc:	99 1f       	adc	r25, r25
    20ce:	0a 94       	dec	r0
    20d0:	e2 f7       	brpl	.-8      	; 0x20ca <MDIO_voidDioSetPinValue+0x1b6>
    20d2:	80 95       	com	r24
    20d4:	84 23       	and	r24, r20
    20d6:	8c 93       	st	X, r24
    20d8:	14 c0       	rjmp	.+40     	; 0x2102 <MDIO_voidDioSetPinValue+0x1ee>
			case DIO_PORTD: CLR_BIT(PORTD, copy_u8Pin); break;
    20da:	a2 e3       	ldi	r26, 0x32	; 50
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	e2 e3       	ldi	r30, 0x32	; 50
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	48 2f       	mov	r20, r24
    20e6:	8a 81       	ldd	r24, Y+2	; 0x02
    20e8:	28 2f       	mov	r18, r24
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	02 2e       	mov	r0, r18
    20f2:	02 c0       	rjmp	.+4      	; 0x20f8 <MDIO_voidDioSetPinValue+0x1e4>
    20f4:	88 0f       	add	r24, r24
    20f6:	99 1f       	adc	r25, r25
    20f8:	0a 94       	dec	r0
    20fa:	e2 f7       	brpl	.-8      	; 0x20f4 <MDIO_voidDioSetPinValue+0x1e0>
    20fc:	80 95       	com	r24
    20fe:	84 23       	and	r24, r20
    2100:	8c 93       	st	X, r24
		}
	}
}
    2102:	27 96       	adiw	r28, 0x07	; 7
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	f8 94       	cli
    2108:	de bf       	out	0x3e, r29	; 62
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	cd bf       	out	0x3d, r28	; 61
    210e:	cf 91       	pop	r28
    2110:	df 91       	pop	r29
    2112:	08 95       	ret

00002114 <MDIO_u8DioGetPinValue>:

u8 MDIO_u8DioGetPinValue (u8 copy_u8Port, u8 copy_u8Pin)
{
    2114:	df 93       	push	r29
    2116:	cf 93       	push	r28
    2118:	00 d0       	rcall	.+0      	; 0x211a <MDIO_u8DioGetPinValue+0x6>
    211a:	00 d0       	rcall	.+0      	; 0x211c <MDIO_u8DioGetPinValue+0x8>
    211c:	0f 92       	push	r0
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
    2122:	8a 83       	std	Y+2, r24	; 0x02
    2124:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8Value;
	switch(copy_u8Port)
    2126:	8a 81       	ldd	r24, Y+2	; 0x02
    2128:	28 2f       	mov	r18, r24
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	3d 83       	std	Y+5, r19	; 0x05
    212e:	2c 83       	std	Y+4, r18	; 0x04
    2130:	4c 81       	ldd	r20, Y+4	; 0x04
    2132:	5d 81       	ldd	r21, Y+5	; 0x05
    2134:	41 30       	cpi	r20, 0x01	; 1
    2136:	51 05       	cpc	r21, r1
    2138:	41 f1       	breq	.+80     	; 0x218a <MDIO_u8DioGetPinValue+0x76>
    213a:	8c 81       	ldd	r24, Y+4	; 0x04
    213c:	9d 81       	ldd	r25, Y+5	; 0x05
    213e:	82 30       	cpi	r24, 0x02	; 2
    2140:	91 05       	cpc	r25, r1
    2142:	34 f4       	brge	.+12     	; 0x2150 <MDIO_u8DioGetPinValue+0x3c>
    2144:	2c 81       	ldd	r18, Y+4	; 0x04
    2146:	3d 81       	ldd	r19, Y+5	; 0x05
    2148:	21 15       	cp	r18, r1
    214a:	31 05       	cpc	r19, r1
    214c:	61 f0       	breq	.+24     	; 0x2166 <MDIO_u8DioGetPinValue+0x52>
    214e:	52 c0       	rjmp	.+164    	; 0x21f4 <MDIO_u8DioGetPinValue+0xe0>
    2150:	4c 81       	ldd	r20, Y+4	; 0x04
    2152:	5d 81       	ldd	r21, Y+5	; 0x05
    2154:	42 30       	cpi	r20, 0x02	; 2
    2156:	51 05       	cpc	r21, r1
    2158:	51 f1       	breq	.+84     	; 0x21ae <MDIO_u8DioGetPinValue+0x9a>
    215a:	8c 81       	ldd	r24, Y+4	; 0x04
    215c:	9d 81       	ldd	r25, Y+5	; 0x05
    215e:	83 30       	cpi	r24, 0x03	; 3
    2160:	91 05       	cpc	r25, r1
    2162:	b9 f1       	breq	.+110    	; 0x21d2 <MDIO_u8DioGetPinValue+0xbe>
    2164:	47 c0       	rjmp	.+142    	; 0x21f4 <MDIO_u8DioGetPinValue+0xe0>
		{
			case DIO_PORTA: L_u8Value = GET_BIT(PINA, copy_u8Pin); break;
    2166:	e9 e3       	ldi	r30, 0x39	; 57
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	28 2f       	mov	r18, r24
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	88 2f       	mov	r24, r24
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	a9 01       	movw	r20, r18
    2178:	02 c0       	rjmp	.+4      	; 0x217e <MDIO_u8DioGetPinValue+0x6a>
    217a:	55 95       	asr	r21
    217c:	47 95       	ror	r20
    217e:	8a 95       	dec	r24
    2180:	e2 f7       	brpl	.-8      	; 0x217a <MDIO_u8DioGetPinValue+0x66>
    2182:	ca 01       	movw	r24, r20
    2184:	81 70       	andi	r24, 0x01	; 1
    2186:	89 83       	std	Y+1, r24	; 0x01
    2188:	35 c0       	rjmp	.+106    	; 0x21f4 <MDIO_u8DioGetPinValue+0xe0>
			case DIO_PORTB: L_u8Value = GET_BIT(PINB, copy_u8Pin); break;
    218a:	e6 e3       	ldi	r30, 0x36	; 54
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	28 2f       	mov	r18, r24
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	8b 81       	ldd	r24, Y+3	; 0x03
    2196:	88 2f       	mov	r24, r24
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	a9 01       	movw	r20, r18
    219c:	02 c0       	rjmp	.+4      	; 0x21a2 <MDIO_u8DioGetPinValue+0x8e>
    219e:	55 95       	asr	r21
    21a0:	47 95       	ror	r20
    21a2:	8a 95       	dec	r24
    21a4:	e2 f7       	brpl	.-8      	; 0x219e <MDIO_u8DioGetPinValue+0x8a>
    21a6:	ca 01       	movw	r24, r20
    21a8:	81 70       	andi	r24, 0x01	; 1
    21aa:	89 83       	std	Y+1, r24	; 0x01
    21ac:	23 c0       	rjmp	.+70     	; 0x21f4 <MDIO_u8DioGetPinValue+0xe0>
			case DIO_PORTC: L_u8Value = GET_BIT(PINC, copy_u8Pin); break;
    21ae:	e3 e3       	ldi	r30, 0x33	; 51
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	28 2f       	mov	r18, r24
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	88 2f       	mov	r24, r24
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	a9 01       	movw	r20, r18
    21c0:	02 c0       	rjmp	.+4      	; 0x21c6 <MDIO_u8DioGetPinValue+0xb2>
    21c2:	55 95       	asr	r21
    21c4:	47 95       	ror	r20
    21c6:	8a 95       	dec	r24
    21c8:	e2 f7       	brpl	.-8      	; 0x21c2 <MDIO_u8DioGetPinValue+0xae>
    21ca:	ca 01       	movw	r24, r20
    21cc:	81 70       	andi	r24, 0x01	; 1
    21ce:	89 83       	std	Y+1, r24	; 0x01
    21d0:	11 c0       	rjmp	.+34     	; 0x21f4 <MDIO_u8DioGetPinValue+0xe0>
			case DIO_PORTD: L_u8Value = GET_BIT(PIND, copy_u8Pin); break;
    21d2:	e0 e3       	ldi	r30, 0x30	; 48
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	28 2f       	mov	r18, r24
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	8b 81       	ldd	r24, Y+3	; 0x03
    21de:	88 2f       	mov	r24, r24
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	a9 01       	movw	r20, r18
    21e4:	02 c0       	rjmp	.+4      	; 0x21ea <MDIO_u8DioGetPinValue+0xd6>
    21e6:	55 95       	asr	r21
    21e8:	47 95       	ror	r20
    21ea:	8a 95       	dec	r24
    21ec:	e2 f7       	brpl	.-8      	; 0x21e6 <MDIO_u8DioGetPinValue+0xd2>
    21ee:	ca 01       	movw	r24, r20
    21f0:	81 70       	andi	r24, 0x01	; 1
    21f2:	89 83       	std	Y+1, r24	; 0x01
		}
	return L_u8Value;
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	0f 90       	pop	r0
    21fe:	0f 90       	pop	r0
    2200:	cf 91       	pop	r28
    2202:	df 91       	pop	r29
    2204:	08 95       	ret

00002206 <MDIO_voidDioTogglePin>:

void MDIO_voidDioTogglePin (u8 copy_u8Port, u8 copy_u8Pin)
{
    2206:	df 93       	push	r29
    2208:	cf 93       	push	r28
    220a:	00 d0       	rcall	.+0      	; 0x220c <MDIO_voidDioTogglePin+0x6>
    220c:	00 d0       	rcall	.+0      	; 0x220e <MDIO_voidDioTogglePin+0x8>
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
    2212:	89 83       	std	Y+1, r24	; 0x01
    2214:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8Port)
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	28 2f       	mov	r18, r24
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	3c 83       	std	Y+4, r19	; 0x04
    221e:	2b 83       	std	Y+3, r18	; 0x03
    2220:	8b 81       	ldd	r24, Y+3	; 0x03
    2222:	9c 81       	ldd	r25, Y+4	; 0x04
    2224:	81 30       	cpi	r24, 0x01	; 1
    2226:	91 05       	cpc	r25, r1
    2228:	49 f1       	breq	.+82     	; 0x227c <MDIO_voidDioTogglePin+0x76>
    222a:	2b 81       	ldd	r18, Y+3	; 0x03
    222c:	3c 81       	ldd	r19, Y+4	; 0x04
    222e:	22 30       	cpi	r18, 0x02	; 2
    2230:	31 05       	cpc	r19, r1
    2232:	2c f4       	brge	.+10     	; 0x223e <MDIO_voidDioTogglePin+0x38>
    2234:	8b 81       	ldd	r24, Y+3	; 0x03
    2236:	9c 81       	ldd	r25, Y+4	; 0x04
    2238:	00 97       	sbiw	r24, 0x00	; 0
    223a:	61 f0       	breq	.+24     	; 0x2254 <MDIO_voidDioTogglePin+0x4e>
    223c:	5a c0       	rjmp	.+180    	; 0x22f2 <MDIO_voidDioTogglePin+0xec>
    223e:	2b 81       	ldd	r18, Y+3	; 0x03
    2240:	3c 81       	ldd	r19, Y+4	; 0x04
    2242:	22 30       	cpi	r18, 0x02	; 2
    2244:	31 05       	cpc	r19, r1
    2246:	71 f1       	breq	.+92     	; 0x22a4 <MDIO_voidDioTogglePin+0x9e>
    2248:	8b 81       	ldd	r24, Y+3	; 0x03
    224a:	9c 81       	ldd	r25, Y+4	; 0x04
    224c:	83 30       	cpi	r24, 0x03	; 3
    224e:	91 05       	cpc	r25, r1
    2250:	e9 f1       	breq	.+122    	; 0x22cc <MDIO_voidDioTogglePin+0xc6>
    2252:	4f c0       	rjmp	.+158    	; 0x22f2 <MDIO_voidDioTogglePin+0xec>
		{
			case DIO_PORTA: TOG_BIT(PORTA, copy_u8Pin); break;
    2254:	ab e3       	ldi	r26, 0x3B	; 59
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	eb e3       	ldi	r30, 0x3B	; 59
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	48 2f       	mov	r20, r24
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	28 2f       	mov	r18, r24
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	02 2e       	mov	r0, r18
    226c:	02 c0       	rjmp	.+4      	; 0x2272 <MDIO_voidDioTogglePin+0x6c>
    226e:	88 0f       	add	r24, r24
    2270:	99 1f       	adc	r25, r25
    2272:	0a 94       	dec	r0
    2274:	e2 f7       	brpl	.-8      	; 0x226e <MDIO_voidDioTogglePin+0x68>
    2276:	84 27       	eor	r24, r20
    2278:	8c 93       	st	X, r24
    227a:	3b c0       	rjmp	.+118    	; 0x22f2 <MDIO_voidDioTogglePin+0xec>
			case DIO_PORTB: TOG_BIT(PORTB, copy_u8Pin); break;
    227c:	a8 e3       	ldi	r26, 0x38	; 56
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	e8 e3       	ldi	r30, 0x38	; 56
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	48 2f       	mov	r20, r24
    2288:	8a 81       	ldd	r24, Y+2	; 0x02
    228a:	28 2f       	mov	r18, r24
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	02 2e       	mov	r0, r18
    2294:	02 c0       	rjmp	.+4      	; 0x229a <MDIO_voidDioTogglePin+0x94>
    2296:	88 0f       	add	r24, r24
    2298:	99 1f       	adc	r25, r25
    229a:	0a 94       	dec	r0
    229c:	e2 f7       	brpl	.-8      	; 0x2296 <MDIO_voidDioTogglePin+0x90>
    229e:	84 27       	eor	r24, r20
    22a0:	8c 93       	st	X, r24
    22a2:	27 c0       	rjmp	.+78     	; 0x22f2 <MDIO_voidDioTogglePin+0xec>
			case DIO_PORTC: TOG_BIT(PORTC, copy_u8Pin); break;
    22a4:	a5 e3       	ldi	r26, 0x35	; 53
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	e5 e3       	ldi	r30, 0x35	; 53
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	48 2f       	mov	r20, r24
    22b0:	8a 81       	ldd	r24, Y+2	; 0x02
    22b2:	28 2f       	mov	r18, r24
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	02 2e       	mov	r0, r18
    22bc:	02 c0       	rjmp	.+4      	; 0x22c2 <MDIO_voidDioTogglePin+0xbc>
    22be:	88 0f       	add	r24, r24
    22c0:	99 1f       	adc	r25, r25
    22c2:	0a 94       	dec	r0
    22c4:	e2 f7       	brpl	.-8      	; 0x22be <MDIO_voidDioTogglePin+0xb8>
    22c6:	84 27       	eor	r24, r20
    22c8:	8c 93       	st	X, r24
    22ca:	13 c0       	rjmp	.+38     	; 0x22f2 <MDIO_voidDioTogglePin+0xec>
			case DIO_PORTD: TOG_BIT(PORTD, copy_u8Pin); break;
    22cc:	a2 e3       	ldi	r26, 0x32	; 50
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	e2 e3       	ldi	r30, 0x32	; 50
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	48 2f       	mov	r20, r24
    22d8:	8a 81       	ldd	r24, Y+2	; 0x02
    22da:	28 2f       	mov	r18, r24
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	02 2e       	mov	r0, r18
    22e4:	02 c0       	rjmp	.+4      	; 0x22ea <MDIO_voidDioTogglePin+0xe4>
    22e6:	88 0f       	add	r24, r24
    22e8:	99 1f       	adc	r25, r25
    22ea:	0a 94       	dec	r0
    22ec:	e2 f7       	brpl	.-8      	; 0x22e6 <MDIO_voidDioTogglePin+0xe0>
    22ee:	84 27       	eor	r24, r20
    22f0:	8c 93       	st	X, r24
		}
}
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	cf 91       	pop	r28
    22fc:	df 91       	pop	r29
    22fe:	08 95       	ret

00002300 <MDIO_voidDioSetPortDirection>:

void MDIO_voidDioSetPortDirection (u8 copy_u8Port, u8 copy_u8Direction)
{
    2300:	df 93       	push	r29
    2302:	cf 93       	push	r28
    2304:	00 d0       	rcall	.+0      	; 0x2306 <MDIO_voidDioSetPortDirection+0x6>
    2306:	00 d0       	rcall	.+0      	; 0x2308 <MDIO_voidDioSetPortDirection+0x8>
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	89 83       	std	Y+1, r24	; 0x01
    230e:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8Port)
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	28 2f       	mov	r18, r24
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	3c 83       	std	Y+4, r19	; 0x04
    2318:	2b 83       	std	Y+3, r18	; 0x03
    231a:	8b 81       	ldd	r24, Y+3	; 0x03
    231c:	9c 81       	ldd	r25, Y+4	; 0x04
    231e:	81 30       	cpi	r24, 0x01	; 1
    2320:	91 05       	cpc	r25, r1
    2322:	d1 f0       	breq	.+52     	; 0x2358 <MDIO_voidDioSetPortDirection+0x58>
    2324:	2b 81       	ldd	r18, Y+3	; 0x03
    2326:	3c 81       	ldd	r19, Y+4	; 0x04
    2328:	22 30       	cpi	r18, 0x02	; 2
    232a:	31 05       	cpc	r19, r1
    232c:	2c f4       	brge	.+10     	; 0x2338 <MDIO_voidDioSetPortDirection+0x38>
    232e:	8b 81       	ldd	r24, Y+3	; 0x03
    2330:	9c 81       	ldd	r25, Y+4	; 0x04
    2332:	00 97       	sbiw	r24, 0x00	; 0
    2334:	61 f0       	breq	.+24     	; 0x234e <MDIO_voidDioSetPortDirection+0x4e>
    2336:	1e c0       	rjmp	.+60     	; 0x2374 <MDIO_voidDioSetPortDirection+0x74>
    2338:	2b 81       	ldd	r18, Y+3	; 0x03
    233a:	3c 81       	ldd	r19, Y+4	; 0x04
    233c:	22 30       	cpi	r18, 0x02	; 2
    233e:	31 05       	cpc	r19, r1
    2340:	81 f0       	breq	.+32     	; 0x2362 <MDIO_voidDioSetPortDirection+0x62>
    2342:	8b 81       	ldd	r24, Y+3	; 0x03
    2344:	9c 81       	ldd	r25, Y+4	; 0x04
    2346:	83 30       	cpi	r24, 0x03	; 3
    2348:	91 05       	cpc	r25, r1
    234a:	81 f0       	breq	.+32     	; 0x236c <MDIO_voidDioSetPortDirection+0x6c>
    234c:	13 c0       	rjmp	.+38     	; 0x2374 <MDIO_voidDioSetPortDirection+0x74>
		{
			case DIO_PORTA: DDRA = copy_u8Direction; break;
    234e:	ea e3       	ldi	r30, 0x3A	; 58
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	8a 81       	ldd	r24, Y+2	; 0x02
    2354:	80 83       	st	Z, r24
    2356:	0e c0       	rjmp	.+28     	; 0x2374 <MDIO_voidDioSetPortDirection+0x74>
			case DIO_PORTB: DDRB = copy_u8Direction; break;
    2358:	e7 e3       	ldi	r30, 0x37	; 55
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	8a 81       	ldd	r24, Y+2	; 0x02
    235e:	80 83       	st	Z, r24
    2360:	09 c0       	rjmp	.+18     	; 0x2374 <MDIO_voidDioSetPortDirection+0x74>
			case DIO_PORTC: DDRC = copy_u8Direction; break;
    2362:	e4 e3       	ldi	r30, 0x34	; 52
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	8a 81       	ldd	r24, Y+2	; 0x02
    2368:	80 83       	st	Z, r24
    236a:	04 c0       	rjmp	.+8      	; 0x2374 <MDIO_voidDioSetPortDirection+0x74>
			case DIO_PORTD: DDRD = copy_u8Direction; break;
    236c:	e1 e3       	ldi	r30, 0x31	; 49
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	8a 81       	ldd	r24, Y+2	; 0x02
    2372:	80 83       	st	Z, r24
		}
}
    2374:	0f 90       	pop	r0
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	08 95       	ret

00002382 <MDIO_voidDioSetPortValue>:

void MDIO_voidDioSetPortValue (u8 copy_u8Port, u8 copy_u8Value)
{
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	00 d0       	rcall	.+0      	; 0x2388 <MDIO_voidDioSetPortValue+0x6>
    2388:	00 d0       	rcall	.+0      	; 0x238a <MDIO_voidDioSetPortValue+0x8>
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	89 83       	std	Y+1, r24	; 0x01
    2390:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8Port)
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	28 2f       	mov	r18, r24
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	3c 83       	std	Y+4, r19	; 0x04
    239a:	2b 83       	std	Y+3, r18	; 0x03
    239c:	8b 81       	ldd	r24, Y+3	; 0x03
    239e:	9c 81       	ldd	r25, Y+4	; 0x04
    23a0:	81 30       	cpi	r24, 0x01	; 1
    23a2:	91 05       	cpc	r25, r1
    23a4:	d1 f0       	breq	.+52     	; 0x23da <MDIO_voidDioSetPortValue+0x58>
    23a6:	2b 81       	ldd	r18, Y+3	; 0x03
    23a8:	3c 81       	ldd	r19, Y+4	; 0x04
    23aa:	22 30       	cpi	r18, 0x02	; 2
    23ac:	31 05       	cpc	r19, r1
    23ae:	2c f4       	brge	.+10     	; 0x23ba <MDIO_voidDioSetPortValue+0x38>
    23b0:	8b 81       	ldd	r24, Y+3	; 0x03
    23b2:	9c 81       	ldd	r25, Y+4	; 0x04
    23b4:	00 97       	sbiw	r24, 0x00	; 0
    23b6:	61 f0       	breq	.+24     	; 0x23d0 <MDIO_voidDioSetPortValue+0x4e>
    23b8:	1e c0       	rjmp	.+60     	; 0x23f6 <MDIO_voidDioSetPortValue+0x74>
    23ba:	2b 81       	ldd	r18, Y+3	; 0x03
    23bc:	3c 81       	ldd	r19, Y+4	; 0x04
    23be:	22 30       	cpi	r18, 0x02	; 2
    23c0:	31 05       	cpc	r19, r1
    23c2:	81 f0       	breq	.+32     	; 0x23e4 <MDIO_voidDioSetPortValue+0x62>
    23c4:	8b 81       	ldd	r24, Y+3	; 0x03
    23c6:	9c 81       	ldd	r25, Y+4	; 0x04
    23c8:	83 30       	cpi	r24, 0x03	; 3
    23ca:	91 05       	cpc	r25, r1
    23cc:	81 f0       	breq	.+32     	; 0x23ee <MDIO_voidDioSetPortValue+0x6c>
    23ce:	13 c0       	rjmp	.+38     	; 0x23f6 <MDIO_voidDioSetPortValue+0x74>
		{
			case DIO_PORTA: PORTA = copy_u8Value;  break;
    23d0:	eb e3       	ldi	r30, 0x3B	; 59
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	8a 81       	ldd	r24, Y+2	; 0x02
    23d6:	80 83       	st	Z, r24
    23d8:	0e c0       	rjmp	.+28     	; 0x23f6 <MDIO_voidDioSetPortValue+0x74>
			case DIO_PORTB: PORTB = copy_u8Value;  break;
    23da:	e8 e3       	ldi	r30, 0x38	; 56
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	8a 81       	ldd	r24, Y+2	; 0x02
    23e0:	80 83       	st	Z, r24
    23e2:	09 c0       	rjmp	.+18     	; 0x23f6 <MDIO_voidDioSetPortValue+0x74>
			case DIO_PORTC: PORTC = copy_u8Value;  break;
    23e4:	e5 e3       	ldi	r30, 0x35	; 53
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ea:	80 83       	st	Z, r24
    23ec:	04 c0       	rjmp	.+8      	; 0x23f6 <MDIO_voidDioSetPortValue+0x74>
			case DIO_PORTD: PORTD = copy_u8Value;  break;
    23ee:	e2 e3       	ldi	r30, 0x32	; 50
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	8a 81       	ldd	r24, Y+2	; 0x02
    23f4:	80 83       	st	Z, r24
		}
}
    23f6:	0f 90       	pop	r0
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	cf 91       	pop	r28
    2400:	df 91       	pop	r29
    2402:	08 95       	ret

00002404 <HLCD_voidLcdInit>:
#include "../../MCAL/M_DIO/MDIO_Interface.h"
#include "LCD_Interface.h"


void HLCD_voidLcdInit()
{
    2404:	df 93       	push	r29
    2406:	cf 93       	push	r28
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
    240c:	e8 97       	sbiw	r28, 0x38	; 56
    240e:	0f b6       	in	r0, 0x3f	; 63
    2410:	f8 94       	cli
    2412:	de bf       	out	0x3e, r29	; 62
    2414:	0f be       	out	0x3f, r0	; 63
    2416:	cd bf       	out	0x3d, r28	; 61
	/*SET DATA_PORT AS OUT*/
	MDIO_voidDioSetPortDirection(LCD_DATA_PORT, 0xff);
    2418:	82 e0       	ldi	r24, 0x02	; 2
    241a:	6f ef       	ldi	r22, 0xFF	; 255
    241c:	0e 94 80 11 	call	0x2300	; 0x2300 <MDIO_voidDioSetPortDirection>
	MDIO_voidDioSetPinDirection(LCD_CONTROL_PORT, RS, 1);
    2420:	83 e0       	ldi	r24, 0x03	; 3
    2422:	60 e0       	ldi	r22, 0x00	; 0
    2424:	41 e0       	ldi	r20, 0x01	; 1
    2426:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <MDIO_voidDioSetPinDirection>
	MDIO_voidDioSetPinDirection(LCD_CONTROL_PORT, RW, 1);
    242a:	83 e0       	ldi	r24, 0x03	; 3
    242c:	61 e0       	ldi	r22, 0x01	; 1
    242e:	41 e0       	ldi	r20, 0x01	; 1
    2430:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <MDIO_voidDioSetPinDirection>
	MDIO_voidDioSetPinDirection(LCD_CONTROL_PORT, EN, 1);
    2434:	83 e0       	ldi	r24, 0x03	; 3
    2436:	62 e0       	ldi	r22, 0x02	; 2
    2438:	41 e0       	ldi	r20, 0x01	; 1
    243a:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <MDIO_voidDioSetPinDirection>
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	a0 ef       	ldi	r26, 0xF0	; 240
    2444:	b1 e4       	ldi	r27, 0x41	; 65
    2446:	8d ab       	std	Y+53, r24	; 0x35
    2448:	9e ab       	std	Y+54, r25	; 0x36
    244a:	af ab       	std	Y+55, r26	; 0x37
    244c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    244e:	6d a9       	ldd	r22, Y+53	; 0x35
    2450:	7e a9       	ldd	r23, Y+54	; 0x36
    2452:	8f a9       	ldd	r24, Y+55	; 0x37
    2454:	98 ad       	ldd	r25, Y+56	; 0x38
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	4a ef       	ldi	r20, 0xFA	; 250
    245c:	54 e4       	ldi	r21, 0x44	; 68
    245e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	89 ab       	std	Y+49, r24	; 0x31
    2468:	9a ab       	std	Y+50, r25	; 0x32
    246a:	ab ab       	std	Y+51, r26	; 0x33
    246c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    246e:	69 a9       	ldd	r22, Y+49	; 0x31
    2470:	7a a9       	ldd	r23, Y+50	; 0x32
    2472:	8b a9       	ldd	r24, Y+51	; 0x33
    2474:	9c a9       	ldd	r25, Y+52	; 0x34
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	40 e8       	ldi	r20, 0x80	; 128
    247c:	5f e3       	ldi	r21, 0x3F	; 63
    247e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2482:	88 23       	and	r24, r24
    2484:	2c f4       	brge	.+10     	; 0x2490 <HLCD_voidLcdInit+0x8c>
		__ticks = 1;
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	98 ab       	std	Y+48, r25	; 0x30
    248c:	8f a7       	std	Y+47, r24	; 0x2f
    248e:	3f c0       	rjmp	.+126    	; 0x250e <HLCD_voidLcdInit+0x10a>
	else if (__tmp > 65535)
    2490:	69 a9       	ldd	r22, Y+49	; 0x31
    2492:	7a a9       	ldd	r23, Y+50	; 0x32
    2494:	8b a9       	ldd	r24, Y+51	; 0x33
    2496:	9c a9       	ldd	r25, Y+52	; 0x34
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	3f ef       	ldi	r19, 0xFF	; 255
    249c:	4f e7       	ldi	r20, 0x7F	; 127
    249e:	57 e4       	ldi	r21, 0x47	; 71
    24a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24a4:	18 16       	cp	r1, r24
    24a6:	4c f5       	brge	.+82     	; 0x24fa <HLCD_voidLcdInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a8:	6d a9       	ldd	r22, Y+53	; 0x35
    24aa:	7e a9       	ldd	r23, Y+54	; 0x36
    24ac:	8f a9       	ldd	r24, Y+55	; 0x37
    24ae:	98 ad       	ldd	r25, Y+56	; 0x38
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	40 e2       	ldi	r20, 0x20	; 32
    24b6:	51 e4       	ldi	r21, 0x41	; 65
    24b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	bc 01       	movw	r22, r24
    24c2:	cd 01       	movw	r24, r26
    24c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	98 ab       	std	Y+48, r25	; 0x30
    24ce:	8f a7       	std	Y+47, r24	; 0x2f
    24d0:	0f c0       	rjmp	.+30     	; 0x24f0 <HLCD_voidLcdInit+0xec>
    24d2:	88 ec       	ldi	r24, 0xC8	; 200
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	9e a7       	std	Y+46, r25	; 0x2e
    24d8:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24da:	8d a5       	ldd	r24, Y+45	; 0x2d
    24dc:	9e a5       	ldd	r25, Y+46	; 0x2e
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	f1 f7       	brne	.-4      	; 0x24de <HLCD_voidLcdInit+0xda>
    24e2:	9e a7       	std	Y+46, r25	; 0x2e
    24e4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    24e8:	98 a9       	ldd	r25, Y+48	; 0x30
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	98 ab       	std	Y+48, r25	; 0x30
    24ee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    24f2:	98 a9       	ldd	r25, Y+48	; 0x30
    24f4:	00 97       	sbiw	r24, 0x00	; 0
    24f6:	69 f7       	brne	.-38     	; 0x24d2 <HLCD_voidLcdInit+0xce>
    24f8:	14 c0       	rjmp	.+40     	; 0x2522 <HLCD_voidLcdInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24fa:	69 a9       	ldd	r22, Y+49	; 0x31
    24fc:	7a a9       	ldd	r23, Y+50	; 0x32
    24fe:	8b a9       	ldd	r24, Y+51	; 0x33
    2500:	9c a9       	ldd	r25, Y+52	; 0x34
    2502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	98 ab       	std	Y+48, r25	; 0x30
    250c:	8f a7       	std	Y+47, r24	; 0x2f
    250e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2510:	98 a9       	ldd	r25, Y+48	; 0x30
    2512:	9c a7       	std	Y+44, r25	; 0x2c
    2514:	8b a7       	std	Y+43, r24	; 0x2b
    2516:	8b a5       	ldd	r24, Y+43	; 0x2b
    2518:	9c a5       	ldd	r25, Y+44	; 0x2c
    251a:	01 97       	sbiw	r24, 0x01	; 1
    251c:	f1 f7       	brne	.-4      	; 0x251a <HLCD_voidLcdInit+0x116>
    251e:	9c a7       	std	Y+44, r25	; 0x2c
    2520:	8b a7       	std	Y+43, r24	; 0x2b
	
	/*delay for 30 ms*/
	_delay_ms(30);
	HLCD_voidLcdSendCommand(LCD_FUNC_SET);
    2522:	88 e3       	ldi	r24, 0x38	; 56
    2524:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <HLCD_voidLcdSendCommand>
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	a0 e8       	ldi	r26, 0x80	; 128
    252e:	bf e3       	ldi	r27, 0x3F	; 63
    2530:	8f a3       	std	Y+39, r24	; 0x27
    2532:	98 a7       	std	Y+40, r25	; 0x28
    2534:	a9 a7       	std	Y+41, r26	; 0x29
    2536:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2538:	6f a1       	ldd	r22, Y+39	; 0x27
    253a:	78 a5       	ldd	r23, Y+40	; 0x28
    253c:	89 a5       	ldd	r24, Y+41	; 0x29
    253e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	4a ef       	ldi	r20, 0xFA	; 250
    2546:	54 e4       	ldi	r21, 0x44	; 68
    2548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	8b a3       	std	Y+35, r24	; 0x23
    2552:	9c a3       	std	Y+36, r25	; 0x24
    2554:	ad a3       	std	Y+37, r26	; 0x25
    2556:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2558:	6b a1       	ldd	r22, Y+35	; 0x23
    255a:	7c a1       	ldd	r23, Y+36	; 0x24
    255c:	8d a1       	ldd	r24, Y+37	; 0x25
    255e:	9e a1       	ldd	r25, Y+38	; 0x26
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	40 e8       	ldi	r20, 0x80	; 128
    2566:	5f e3       	ldi	r21, 0x3F	; 63
    2568:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    256c:	88 23       	and	r24, r24
    256e:	2c f4       	brge	.+10     	; 0x257a <HLCD_voidLcdInit+0x176>
		__ticks = 1;
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	9a a3       	std	Y+34, r25	; 0x22
    2576:	89 a3       	std	Y+33, r24	; 0x21
    2578:	3f c0       	rjmp	.+126    	; 0x25f8 <HLCD_voidLcdInit+0x1f4>
	else if (__tmp > 65535)
    257a:	6b a1       	ldd	r22, Y+35	; 0x23
    257c:	7c a1       	ldd	r23, Y+36	; 0x24
    257e:	8d a1       	ldd	r24, Y+37	; 0x25
    2580:	9e a1       	ldd	r25, Y+38	; 0x26
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	3f ef       	ldi	r19, 0xFF	; 255
    2586:	4f e7       	ldi	r20, 0x7F	; 127
    2588:	57 e4       	ldi	r21, 0x47	; 71
    258a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    258e:	18 16       	cp	r1, r24
    2590:	4c f5       	brge	.+82     	; 0x25e4 <HLCD_voidLcdInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2592:	6f a1       	ldd	r22, Y+39	; 0x27
    2594:	78 a5       	ldd	r23, Y+40	; 0x28
    2596:	89 a5       	ldd	r24, Y+41	; 0x29
    2598:	9a a5       	ldd	r25, Y+42	; 0x2a
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	40 e2       	ldi	r20, 0x20	; 32
    25a0:	51 e4       	ldi	r21, 0x41	; 65
    25a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	bc 01       	movw	r22, r24
    25ac:	cd 01       	movw	r24, r26
    25ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	9a a3       	std	Y+34, r25	; 0x22
    25b8:	89 a3       	std	Y+33, r24	; 0x21
    25ba:	0f c0       	rjmp	.+30     	; 0x25da <HLCD_voidLcdInit+0x1d6>
    25bc:	88 ec       	ldi	r24, 0xC8	; 200
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	98 a3       	std	Y+32, r25	; 0x20
    25c2:	8f 8f       	std	Y+31, r24	; 0x1f
    25c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25c6:	98 a1       	ldd	r25, Y+32	; 0x20
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	f1 f7       	brne	.-4      	; 0x25c8 <HLCD_voidLcdInit+0x1c4>
    25cc:	98 a3       	std	Y+32, r25	; 0x20
    25ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d0:	89 a1       	ldd	r24, Y+33	; 0x21
    25d2:	9a a1       	ldd	r25, Y+34	; 0x22
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	9a a3       	std	Y+34, r25	; 0x22
    25d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25da:	89 a1       	ldd	r24, Y+33	; 0x21
    25dc:	9a a1       	ldd	r25, Y+34	; 0x22
    25de:	00 97       	sbiw	r24, 0x00	; 0
    25e0:	69 f7       	brne	.-38     	; 0x25bc <HLCD_voidLcdInit+0x1b8>
    25e2:	14 c0       	rjmp	.+40     	; 0x260c <HLCD_voidLcdInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e4:	6b a1       	ldd	r22, Y+35	; 0x23
    25e6:	7c a1       	ldd	r23, Y+36	; 0x24
    25e8:	8d a1       	ldd	r24, Y+37	; 0x25
    25ea:	9e a1       	ldd	r25, Y+38	; 0x26
    25ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	9a a3       	std	Y+34, r25	; 0x22
    25f6:	89 a3       	std	Y+33, r24	; 0x21
    25f8:	89 a1       	ldd	r24, Y+33	; 0x21
    25fa:	9a a1       	ldd	r25, Y+34	; 0x22
    25fc:	9e 8f       	std	Y+30, r25	; 0x1e
    25fe:	8d 8f       	std	Y+29, r24	; 0x1d
    2600:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2602:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	f1 f7       	brne	.-4      	; 0x2604 <HLCD_voidLcdInit+0x200>
    2608:	9e 8f       	std	Y+30, r25	; 0x1e
    260a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*DISPLAY ON/OFF CTRL*/
	HLCD_voidLcdSendCommand(LCD_ONOFF);
    260c:	8e e0       	ldi	r24, 0x0E	; 14
    260e:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <HLCD_voidLcdSendCommand>
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	a0 e8       	ldi	r26, 0x80	; 128
    2618:	bf e3       	ldi	r27, 0x3F	; 63
    261a:	89 8f       	std	Y+25, r24	; 0x19
    261c:	9a 8f       	std	Y+26, r25	; 0x1a
    261e:	ab 8f       	std	Y+27, r26	; 0x1b
    2620:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2622:	69 8d       	ldd	r22, Y+25	; 0x19
    2624:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2626:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2628:	9c 8d       	ldd	r25, Y+28	; 0x1c
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	4a ef       	ldi	r20, 0xFA	; 250
    2630:	54 e4       	ldi	r21, 0x44	; 68
    2632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	8d 8b       	std	Y+21, r24	; 0x15
    263c:	9e 8b       	std	Y+22, r25	; 0x16
    263e:	af 8b       	std	Y+23, r26	; 0x17
    2640:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2642:	6d 89       	ldd	r22, Y+21	; 0x15
    2644:	7e 89       	ldd	r23, Y+22	; 0x16
    2646:	8f 89       	ldd	r24, Y+23	; 0x17
    2648:	98 8d       	ldd	r25, Y+24	; 0x18
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	40 e8       	ldi	r20, 0x80	; 128
    2650:	5f e3       	ldi	r21, 0x3F	; 63
    2652:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2656:	88 23       	and	r24, r24
    2658:	2c f4       	brge	.+10     	; 0x2664 <HLCD_voidLcdInit+0x260>
		__ticks = 1;
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	9c 8b       	std	Y+20, r25	; 0x14
    2660:	8b 8b       	std	Y+19, r24	; 0x13
    2662:	3f c0       	rjmp	.+126    	; 0x26e2 <HLCD_voidLcdInit+0x2de>
	else if (__tmp > 65535)
    2664:	6d 89       	ldd	r22, Y+21	; 0x15
    2666:	7e 89       	ldd	r23, Y+22	; 0x16
    2668:	8f 89       	ldd	r24, Y+23	; 0x17
    266a:	98 8d       	ldd	r25, Y+24	; 0x18
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	3f ef       	ldi	r19, 0xFF	; 255
    2670:	4f e7       	ldi	r20, 0x7F	; 127
    2672:	57 e4       	ldi	r21, 0x47	; 71
    2674:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2678:	18 16       	cp	r1, r24
    267a:	4c f5       	brge	.+82     	; 0x26ce <HLCD_voidLcdInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267c:	69 8d       	ldd	r22, Y+25	; 0x19
    267e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2680:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2682:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	40 e2       	ldi	r20, 0x20	; 32
    268a:	51 e4       	ldi	r21, 0x41	; 65
    268c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	bc 01       	movw	r22, r24
    2696:	cd 01       	movw	r24, r26
    2698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	9c 8b       	std	Y+20, r25	; 0x14
    26a2:	8b 8b       	std	Y+19, r24	; 0x13
    26a4:	0f c0       	rjmp	.+30     	; 0x26c4 <HLCD_voidLcdInit+0x2c0>
    26a6:	88 ec       	ldi	r24, 0xC8	; 200
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	9a 8b       	std	Y+18, r25	; 0x12
    26ac:	89 8b       	std	Y+17, r24	; 0x11
    26ae:	89 89       	ldd	r24, Y+17	; 0x11
    26b0:	9a 89       	ldd	r25, Y+18	; 0x12
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	f1 f7       	brne	.-4      	; 0x26b2 <HLCD_voidLcdInit+0x2ae>
    26b6:	9a 8b       	std	Y+18, r25	; 0x12
    26b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ba:	8b 89       	ldd	r24, Y+19	; 0x13
    26bc:	9c 89       	ldd	r25, Y+20	; 0x14
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	9c 8b       	std	Y+20, r25	; 0x14
    26c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c4:	8b 89       	ldd	r24, Y+19	; 0x13
    26c6:	9c 89       	ldd	r25, Y+20	; 0x14
    26c8:	00 97       	sbiw	r24, 0x00	; 0
    26ca:	69 f7       	brne	.-38     	; 0x26a6 <HLCD_voidLcdInit+0x2a2>
    26cc:	14 c0       	rjmp	.+40     	; 0x26f6 <HLCD_voidLcdInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ce:	6d 89       	ldd	r22, Y+21	; 0x15
    26d0:	7e 89       	ldd	r23, Y+22	; 0x16
    26d2:	8f 89       	ldd	r24, Y+23	; 0x17
    26d4:	98 8d       	ldd	r25, Y+24	; 0x18
    26d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	9c 8b       	std	Y+20, r25	; 0x14
    26e0:	8b 8b       	std	Y+19, r24	; 0x13
    26e2:	8b 89       	ldd	r24, Y+19	; 0x13
    26e4:	9c 89       	ldd	r25, Y+20	; 0x14
    26e6:	98 8b       	std	Y+16, r25	; 0x10
    26e8:	8f 87       	std	Y+15, r24	; 0x0f
    26ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    26ec:	98 89       	ldd	r25, Y+16	; 0x10
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	f1 f7       	brne	.-4      	; 0x26ee <HLCD_voidLcdInit+0x2ea>
    26f2:	98 8b       	std	Y+16, r25	; 0x10
    26f4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	HLCD_voidLcdSendCommand(LCD_CLEAR);
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <HLCD_voidLcdSendCommand>
    26fc:	80 e0       	ldi	r24, 0x00	; 0
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	a0 e0       	ldi	r26, 0x00	; 0
    2702:	b0 e4       	ldi	r27, 0x40	; 64
    2704:	8b 87       	std	Y+11, r24	; 0x0b
    2706:	9c 87       	std	Y+12, r25	; 0x0c
    2708:	ad 87       	std	Y+13, r26	; 0x0d
    270a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    270c:	6b 85       	ldd	r22, Y+11	; 0x0b
    270e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2710:	8d 85       	ldd	r24, Y+13	; 0x0d
    2712:	9e 85       	ldd	r25, Y+14	; 0x0e
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	4a ef       	ldi	r20, 0xFA	; 250
    271a:	54 e4       	ldi	r21, 0x44	; 68
    271c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2720:	dc 01       	movw	r26, r24
    2722:	cb 01       	movw	r24, r22
    2724:	8f 83       	std	Y+7, r24	; 0x07
    2726:	98 87       	std	Y+8, r25	; 0x08
    2728:	a9 87       	std	Y+9, r26	; 0x09
    272a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    272c:	6f 81       	ldd	r22, Y+7	; 0x07
    272e:	78 85       	ldd	r23, Y+8	; 0x08
    2730:	89 85       	ldd	r24, Y+9	; 0x09
    2732:	9a 85       	ldd	r25, Y+10	; 0x0a
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	40 e8       	ldi	r20, 0x80	; 128
    273a:	5f e3       	ldi	r21, 0x3F	; 63
    273c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2740:	88 23       	and	r24, r24
    2742:	2c f4       	brge	.+10     	; 0x274e <HLCD_voidLcdInit+0x34a>
		__ticks = 1;
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	9e 83       	std	Y+6, r25	; 0x06
    274a:	8d 83       	std	Y+5, r24	; 0x05
    274c:	3f c0       	rjmp	.+126    	; 0x27cc <HLCD_voidLcdInit+0x3c8>
	else if (__tmp > 65535)
    274e:	6f 81       	ldd	r22, Y+7	; 0x07
    2750:	78 85       	ldd	r23, Y+8	; 0x08
    2752:	89 85       	ldd	r24, Y+9	; 0x09
    2754:	9a 85       	ldd	r25, Y+10	; 0x0a
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	3f ef       	ldi	r19, 0xFF	; 255
    275a:	4f e7       	ldi	r20, 0x7F	; 127
    275c:	57 e4       	ldi	r21, 0x47	; 71
    275e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2762:	18 16       	cp	r1, r24
    2764:	4c f5       	brge	.+82     	; 0x27b8 <HLCD_voidLcdInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2766:	6b 85       	ldd	r22, Y+11	; 0x0b
    2768:	7c 85       	ldd	r23, Y+12	; 0x0c
    276a:	8d 85       	ldd	r24, Y+13	; 0x0d
    276c:	9e 85       	ldd	r25, Y+14	; 0x0e
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	40 e2       	ldi	r20, 0x20	; 32
    2774:	51 e4       	ldi	r21, 0x41	; 65
    2776:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	bc 01       	movw	r22, r24
    2780:	cd 01       	movw	r24, r26
    2782:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	9e 83       	std	Y+6, r25	; 0x06
    278c:	8d 83       	std	Y+5, r24	; 0x05
    278e:	0f c0       	rjmp	.+30     	; 0x27ae <HLCD_voidLcdInit+0x3aa>
    2790:	88 ec       	ldi	r24, 0xC8	; 200
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	9c 83       	std	Y+4, r25	; 0x04
    2796:	8b 83       	std	Y+3, r24	; 0x03
    2798:	8b 81       	ldd	r24, Y+3	; 0x03
    279a:	9c 81       	ldd	r25, Y+4	; 0x04
    279c:	01 97       	sbiw	r24, 0x01	; 1
    279e:	f1 f7       	brne	.-4      	; 0x279c <HLCD_voidLcdInit+0x398>
    27a0:	9c 83       	std	Y+4, r25	; 0x04
    27a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a4:	8d 81       	ldd	r24, Y+5	; 0x05
    27a6:	9e 81       	ldd	r25, Y+6	; 0x06
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	9e 83       	std	Y+6, r25	; 0x06
    27ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ae:	8d 81       	ldd	r24, Y+5	; 0x05
    27b0:	9e 81       	ldd	r25, Y+6	; 0x06
    27b2:	00 97       	sbiw	r24, 0x00	; 0
    27b4:	69 f7       	brne	.-38     	; 0x2790 <HLCD_voidLcdInit+0x38c>
    27b6:	14 c0       	rjmp	.+40     	; 0x27e0 <HLCD_voidLcdInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b8:	6f 81       	ldd	r22, Y+7	; 0x07
    27ba:	78 85       	ldd	r23, Y+8	; 0x08
    27bc:	89 85       	ldd	r24, Y+9	; 0x09
    27be:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	9e 83       	std	Y+6, r25	; 0x06
    27ca:	8d 83       	std	Y+5, r24	; 0x05
    27cc:	8d 81       	ldd	r24, Y+5	; 0x05
    27ce:	9e 81       	ldd	r25, Y+6	; 0x06
    27d0:	9a 83       	std	Y+2, r25	; 0x02
    27d2:	89 83       	std	Y+1, r24	; 0x01
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	9a 81       	ldd	r25, Y+2	; 0x02
    27d8:	01 97       	sbiw	r24, 0x01	; 1
    27da:	f1 f7       	brne	.-4      	; 0x27d8 <HLCD_voidLcdInit+0x3d4>
    27dc:	9a 83       	std	Y+2, r25	; 0x02
    27de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HLCD_voidLcdSendCommand(LCD_ENTRY);
    27e0:	86 e0       	ldi	r24, 0x06	; 6
    27e2:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <HLCD_voidLcdSendCommand>
}
    27e6:	e8 96       	adiw	r28, 0x38	; 56
    27e8:	0f b6       	in	r0, 0x3f	; 63
    27ea:	f8 94       	cli
    27ec:	de bf       	out	0x3e, r29	; 62
    27ee:	0f be       	out	0x3f, r0	; 63
    27f0:	cd bf       	out	0x3d, r28	; 61
    27f2:	cf 91       	pop	r28
    27f4:	df 91       	pop	r29
    27f6:	08 95       	ret

000027f8 <HLCD_voidLcdSendCommand>:

void HLCD_voidLcdSendCommand(u8 copy_u8Command)
{
    27f8:	df 93       	push	r29
    27fa:	cf 93       	push	r28
    27fc:	cd b7       	in	r28, 0x3d	; 61
    27fe:	de b7       	in	r29, 0x3e	; 62
    2800:	2f 97       	sbiw	r28, 0x0f	; 15
    2802:	0f b6       	in	r0, 0x3f	; 63
    2804:	f8 94       	cli
    2806:	de bf       	out	0x3e, r29	; 62
    2808:	0f be       	out	0x3f, r0	; 63
    280a:	cd bf       	out	0x3d, r28	; 61
    280c:	8f 87       	std	Y+15, r24	; 0x0f
	/*RS = 0*/
	MDIO_voidDioSetPinValue(LCD_CONTROL_PORT, RS, 0);
    280e:	83 e0       	ldi	r24, 0x03	; 3
    2810:	60 e0       	ldi	r22, 0x00	; 0
    2812:	40 e0       	ldi	r20, 0x00	; 0
    2814:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <MDIO_voidDioSetPinValue>
	/*RW = 0*/
	MDIO_voidDioSetPinValue(LCD_CONTROL_PORT, RW, 0);
    2818:	83 e0       	ldi	r24, 0x03	; 3
    281a:	61 e0       	ldi	r22, 0x01	; 1
    281c:	40 e0       	ldi	r20, 0x00	; 0
    281e:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <MDIO_voidDioSetPinValue>
	/*PUTTING COMMAND ON DATA PORT*/
	MDIO_voidDioSetPortValue(LCD_DATA_PORT,copy_u8Command);
    2822:	82 e0       	ldi	r24, 0x02	; 2
    2824:	6f 85       	ldd	r22, Y+15	; 0x0f
    2826:	0e 94 c1 11 	call	0x2382	; 0x2382 <MDIO_voidDioSetPortValue>
	/*ENABLE PULSE*/
	MDIO_voidDioSetPinValue(LCD_CONTROL_PORT, EN, 1);
    282a:	83 e0       	ldi	r24, 0x03	; 3
    282c:	62 e0       	ldi	r22, 0x02	; 2
    282e:	41 e0       	ldi	r20, 0x01	; 1
    2830:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <MDIO_voidDioSetPinValue>
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	a0 e0       	ldi	r26, 0x00	; 0
    283a:	b0 e4       	ldi	r27, 0x40	; 64
    283c:	8b 87       	std	Y+11, r24	; 0x0b
    283e:	9c 87       	std	Y+12, r25	; 0x0c
    2840:	ad 87       	std	Y+13, r26	; 0x0d
    2842:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2844:	6b 85       	ldd	r22, Y+11	; 0x0b
    2846:	7c 85       	ldd	r23, Y+12	; 0x0c
    2848:	8d 85       	ldd	r24, Y+13	; 0x0d
    284a:	9e 85       	ldd	r25, Y+14	; 0x0e
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	4a ef       	ldi	r20, 0xFA	; 250
    2852:	54 e4       	ldi	r21, 0x44	; 68
    2854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	8f 83       	std	Y+7, r24	; 0x07
    285e:	98 87       	std	Y+8, r25	; 0x08
    2860:	a9 87       	std	Y+9, r26	; 0x09
    2862:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2864:	6f 81       	ldd	r22, Y+7	; 0x07
    2866:	78 85       	ldd	r23, Y+8	; 0x08
    2868:	89 85       	ldd	r24, Y+9	; 0x09
    286a:	9a 85       	ldd	r25, Y+10	; 0x0a
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	40 e8       	ldi	r20, 0x80	; 128
    2872:	5f e3       	ldi	r21, 0x3F	; 63
    2874:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2878:	88 23       	and	r24, r24
    287a:	2c f4       	brge	.+10     	; 0x2886 <HLCD_voidLcdSendCommand+0x8e>
		__ticks = 1;
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	9e 83       	std	Y+6, r25	; 0x06
    2882:	8d 83       	std	Y+5, r24	; 0x05
    2884:	3f c0       	rjmp	.+126    	; 0x2904 <HLCD_voidLcdSendCommand+0x10c>
	else if (__tmp > 65535)
    2886:	6f 81       	ldd	r22, Y+7	; 0x07
    2888:	78 85       	ldd	r23, Y+8	; 0x08
    288a:	89 85       	ldd	r24, Y+9	; 0x09
    288c:	9a 85       	ldd	r25, Y+10	; 0x0a
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	3f ef       	ldi	r19, 0xFF	; 255
    2892:	4f e7       	ldi	r20, 0x7F	; 127
    2894:	57 e4       	ldi	r21, 0x47	; 71
    2896:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    289a:	18 16       	cp	r1, r24
    289c:	4c f5       	brge	.+82     	; 0x28f0 <HLCD_voidLcdSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    289e:	6b 85       	ldd	r22, Y+11	; 0x0b
    28a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    28a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	40 e2       	ldi	r20, 0x20	; 32
    28ac:	51 e4       	ldi	r21, 0x41	; 65
    28ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	bc 01       	movw	r22, r24
    28b8:	cd 01       	movw	r24, r26
    28ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	9e 83       	std	Y+6, r25	; 0x06
    28c4:	8d 83       	std	Y+5, r24	; 0x05
    28c6:	0f c0       	rjmp	.+30     	; 0x28e6 <HLCD_voidLcdSendCommand+0xee>
    28c8:	88 ec       	ldi	r24, 0xC8	; 200
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	9c 83       	std	Y+4, r25	; 0x04
    28ce:	8b 83       	std	Y+3, r24	; 0x03
    28d0:	8b 81       	ldd	r24, Y+3	; 0x03
    28d2:	9c 81       	ldd	r25, Y+4	; 0x04
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	f1 f7       	brne	.-4      	; 0x28d4 <HLCD_voidLcdSendCommand+0xdc>
    28d8:	9c 83       	std	Y+4, r25	; 0x04
    28da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28dc:	8d 81       	ldd	r24, Y+5	; 0x05
    28de:	9e 81       	ldd	r25, Y+6	; 0x06
    28e0:	01 97       	sbiw	r24, 0x01	; 1
    28e2:	9e 83       	std	Y+6, r25	; 0x06
    28e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e6:	8d 81       	ldd	r24, Y+5	; 0x05
    28e8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ea:	00 97       	sbiw	r24, 0x00	; 0
    28ec:	69 f7       	brne	.-38     	; 0x28c8 <HLCD_voidLcdSendCommand+0xd0>
    28ee:	14 c0       	rjmp	.+40     	; 0x2918 <HLCD_voidLcdSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f0:	6f 81       	ldd	r22, Y+7	; 0x07
    28f2:	78 85       	ldd	r23, Y+8	; 0x08
    28f4:	89 85       	ldd	r24, Y+9	; 0x09
    28f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	9e 83       	std	Y+6, r25	; 0x06
    2902:	8d 83       	std	Y+5, r24	; 0x05
    2904:	8d 81       	ldd	r24, Y+5	; 0x05
    2906:	9e 81       	ldd	r25, Y+6	; 0x06
    2908:	9a 83       	std	Y+2, r25	; 0x02
    290a:	89 83       	std	Y+1, r24	; 0x01
    290c:	89 81       	ldd	r24, Y+1	; 0x01
    290e:	9a 81       	ldd	r25, Y+2	; 0x02
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	f1 f7       	brne	.-4      	; 0x2910 <HLCD_voidLcdSendCommand+0x118>
    2914:	9a 83       	std	Y+2, r25	; 0x02
    2916:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidDioSetPinValue(LCD_CONTROL_PORT, EN, 0);
    2918:	83 e0       	ldi	r24, 0x03	; 3
    291a:	62 e0       	ldi	r22, 0x02	; 2
    291c:	40 e0       	ldi	r20, 0x00	; 0
    291e:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <MDIO_voidDioSetPinValue>
}
    2922:	2f 96       	adiw	r28, 0x0f	; 15
    2924:	0f b6       	in	r0, 0x3f	; 63
    2926:	f8 94       	cli
    2928:	de bf       	out	0x3e, r29	; 62
    292a:	0f be       	out	0x3f, r0	; 63
    292c:	cd bf       	out	0x3d, r28	; 61
    292e:	cf 91       	pop	r28
    2930:	df 91       	pop	r29
    2932:	08 95       	ret

00002934 <HLCD_voidLcdSendData>:

void HLCD_voidLcdSendData(u8 copy_u8Data)
{
    2934:	df 93       	push	r29
    2936:	cf 93       	push	r28
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62
    293c:	2f 97       	sbiw	r28, 0x0f	; 15
    293e:	0f b6       	in	r0, 0x3f	; 63
    2940:	f8 94       	cli
    2942:	de bf       	out	0x3e, r29	; 62
    2944:	0f be       	out	0x3f, r0	; 63
    2946:	cd bf       	out	0x3d, r28	; 61
    2948:	8f 87       	std	Y+15, r24	; 0x0f
	/*RS = 1*/
	MDIO_voidDioSetPinValue(LCD_CONTROL_PORT, RS, 1);
    294a:	83 e0       	ldi	r24, 0x03	; 3
    294c:	60 e0       	ldi	r22, 0x00	; 0
    294e:	41 e0       	ldi	r20, 0x01	; 1
    2950:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <MDIO_voidDioSetPinValue>
	/*RW = 0*/
	MDIO_voidDioSetPinValue(LCD_CONTROL_PORT, RW, 0);
    2954:	83 e0       	ldi	r24, 0x03	; 3
    2956:	61 e0       	ldi	r22, 0x01	; 1
    2958:	40 e0       	ldi	r20, 0x00	; 0
    295a:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <MDIO_voidDioSetPinValue>
	/*PUTTING COMMAND ON DATA PORT*/
	MDIO_voidDioSetPortValue(LCD_DATA_PORT,copy_u8Data);
    295e:	82 e0       	ldi	r24, 0x02	; 2
    2960:	6f 85       	ldd	r22, Y+15	; 0x0f
    2962:	0e 94 c1 11 	call	0x2382	; 0x2382 <MDIO_voidDioSetPortValue>
	/*ENABLE PULSE*/
	MDIO_voidDioSetPinValue(LCD_CONTROL_PORT, EN, 1);
    2966:	83 e0       	ldi	r24, 0x03	; 3
    2968:	62 e0       	ldi	r22, 0x02	; 2
    296a:	41 e0       	ldi	r20, 0x01	; 1
    296c:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <MDIO_voidDioSetPinValue>
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	a0 e0       	ldi	r26, 0x00	; 0
    2976:	b0 e4       	ldi	r27, 0x40	; 64
    2978:	8b 87       	std	Y+11, r24	; 0x0b
    297a:	9c 87       	std	Y+12, r25	; 0x0c
    297c:	ad 87       	std	Y+13, r26	; 0x0d
    297e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2980:	6b 85       	ldd	r22, Y+11	; 0x0b
    2982:	7c 85       	ldd	r23, Y+12	; 0x0c
    2984:	8d 85       	ldd	r24, Y+13	; 0x0d
    2986:	9e 85       	ldd	r25, Y+14	; 0x0e
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	4a ef       	ldi	r20, 0xFA	; 250
    298e:	54 e4       	ldi	r21, 0x44	; 68
    2990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	8f 83       	std	Y+7, r24	; 0x07
    299a:	98 87       	std	Y+8, r25	; 0x08
    299c:	a9 87       	std	Y+9, r26	; 0x09
    299e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29a0:	6f 81       	ldd	r22, Y+7	; 0x07
    29a2:	78 85       	ldd	r23, Y+8	; 0x08
    29a4:	89 85       	ldd	r24, Y+9	; 0x09
    29a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	40 e8       	ldi	r20, 0x80	; 128
    29ae:	5f e3       	ldi	r21, 0x3F	; 63
    29b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29b4:	88 23       	and	r24, r24
    29b6:	2c f4       	brge	.+10     	; 0x29c2 <HLCD_voidLcdSendData+0x8e>
		__ticks = 1;
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	9e 83       	std	Y+6, r25	; 0x06
    29be:	8d 83       	std	Y+5, r24	; 0x05
    29c0:	3f c0       	rjmp	.+126    	; 0x2a40 <HLCD_voidLcdSendData+0x10c>
	else if (__tmp > 65535)
    29c2:	6f 81       	ldd	r22, Y+7	; 0x07
    29c4:	78 85       	ldd	r23, Y+8	; 0x08
    29c6:	89 85       	ldd	r24, Y+9	; 0x09
    29c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	3f ef       	ldi	r19, 0xFF	; 255
    29ce:	4f e7       	ldi	r20, 0x7F	; 127
    29d0:	57 e4       	ldi	r21, 0x47	; 71
    29d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29d6:	18 16       	cp	r1, r24
    29d8:	4c f5       	brge	.+82     	; 0x2a2c <HLCD_voidLcdSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29da:	6b 85       	ldd	r22, Y+11	; 0x0b
    29dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    29de:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	40 e2       	ldi	r20, 0x20	; 32
    29e8:	51 e4       	ldi	r21, 0x41	; 65
    29ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	bc 01       	movw	r22, r24
    29f4:	cd 01       	movw	r24, r26
    29f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	9e 83       	std	Y+6, r25	; 0x06
    2a00:	8d 83       	std	Y+5, r24	; 0x05
    2a02:	0f c0       	rjmp	.+30     	; 0x2a22 <HLCD_voidLcdSendData+0xee>
    2a04:	88 ec       	ldi	r24, 0xC8	; 200
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	9c 83       	std	Y+4, r25	; 0x04
    2a0a:	8b 83       	std	Y+3, r24	; 0x03
    2a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	f1 f7       	brne	.-4      	; 0x2a10 <HLCD_voidLcdSendData+0xdc>
    2a14:	9c 83       	std	Y+4, r25	; 0x04
    2a16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a18:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a1c:	01 97       	sbiw	r24, 0x01	; 1
    2a1e:	9e 83       	std	Y+6, r25	; 0x06
    2a20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a22:	8d 81       	ldd	r24, Y+5	; 0x05
    2a24:	9e 81       	ldd	r25, Y+6	; 0x06
    2a26:	00 97       	sbiw	r24, 0x00	; 0
    2a28:	69 f7       	brne	.-38     	; 0x2a04 <HLCD_voidLcdSendData+0xd0>
    2a2a:	14 c0       	rjmp	.+40     	; 0x2a54 <HLCD_voidLcdSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a2e:	78 85       	ldd	r23, Y+8	; 0x08
    2a30:	89 85       	ldd	r24, Y+9	; 0x09
    2a32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	9e 83       	std	Y+6, r25	; 0x06
    2a3e:	8d 83       	std	Y+5, r24	; 0x05
    2a40:	8d 81       	ldd	r24, Y+5	; 0x05
    2a42:	9e 81       	ldd	r25, Y+6	; 0x06
    2a44:	9a 83       	std	Y+2, r25	; 0x02
    2a46:	89 83       	std	Y+1, r24	; 0x01
    2a48:	89 81       	ldd	r24, Y+1	; 0x01
    2a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a4c:	01 97       	sbiw	r24, 0x01	; 1
    2a4e:	f1 f7       	brne	.-4      	; 0x2a4c <HLCD_voidLcdSendData+0x118>
    2a50:	9a 83       	std	Y+2, r25	; 0x02
    2a52:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidDioSetPinValue(LCD_CONTROL_PORT, EN, 0);
    2a54:	83 e0       	ldi	r24, 0x03	; 3
    2a56:	62 e0       	ldi	r22, 0x02	; 2
    2a58:	40 e0       	ldi	r20, 0x00	; 0
    2a5a:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <MDIO_voidDioSetPinValue>
}
    2a5e:	2f 96       	adiw	r28, 0x0f	; 15
    2a60:	0f b6       	in	r0, 0x3f	; 63
    2a62:	f8 94       	cli
    2a64:	de bf       	out	0x3e, r29	; 62
    2a66:	0f be       	out	0x3f, r0	; 63
    2a68:	cd bf       	out	0x3d, r28	; 61
    2a6a:	cf 91       	pop	r28
    2a6c:	df 91       	pop	r29
    2a6e:	08 95       	ret

00002a70 <HLCD_voidLcdSendString>:

void HLCD_voidLcdSendString(u8 *copy_u8String)
{
    2a70:	df 93       	push	r29
    2a72:	cf 93       	push	r28
    2a74:	00 d0       	rcall	.+0      	; 0x2a76 <HLCD_voidLcdSendString+0x6>
    2a76:	0f 92       	push	r0
    2a78:	cd b7       	in	r28, 0x3d	; 61
    2a7a:	de b7       	in	r29, 0x3e	; 62
    2a7c:	9b 83       	std	Y+3, r25	; 0x03
    2a7e:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_u8Counter;
	for (L_u8Counter = 0; copy_u8String[L_u8Counter] != '\0'; L_u8Counter++ )
    2a80:	19 82       	std	Y+1, r1	; 0x01
    2a82:	0e c0       	rjmp	.+28     	; 0x2aa0 <HLCD_voidLcdSendString+0x30>
	{
	HLCD_voidLcdSendData((u8*)copy_u8String[L_u8Counter]);
    2a84:	89 81       	ldd	r24, Y+1	; 0x01
    2a86:	28 2f       	mov	r18, r24
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a8e:	fc 01       	movw	r30, r24
    2a90:	e2 0f       	add	r30, r18
    2a92:	f3 1f       	adc	r31, r19
    2a94:	80 81       	ld	r24, Z
    2a96:	0e 94 9a 14 	call	0x2934	; 0x2934 <HLCD_voidLcdSendData>
}

void HLCD_voidLcdSendString(u8 *copy_u8String)
{
	u8 L_u8Counter;
	for (L_u8Counter = 0; copy_u8String[L_u8Counter] != '\0'; L_u8Counter++ )
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
    2a9c:	8f 5f       	subi	r24, 0xFF	; 255
    2a9e:	89 83       	std	Y+1, r24	; 0x01
    2aa0:	89 81       	ldd	r24, Y+1	; 0x01
    2aa2:	28 2f       	mov	r18, r24
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa8:	9b 81       	ldd	r25, Y+3	; 0x03
    2aaa:	fc 01       	movw	r30, r24
    2aac:	e2 0f       	add	r30, r18
    2aae:	f3 1f       	adc	r31, r19
    2ab0:	80 81       	ld	r24, Z
    2ab2:	88 23       	and	r24, r24
    2ab4:	39 f7       	brne	.-50     	; 0x2a84 <HLCD_voidLcdSendString+0x14>
	{
	HLCD_voidLcdSendData((u8*)copy_u8String[L_u8Counter]);
	}
}
    2ab6:	0f 90       	pop	r0
    2ab8:	0f 90       	pop	r0
    2aba:	0f 90       	pop	r0
    2abc:	cf 91       	pop	r28
    2abe:	df 91       	pop	r29
    2ac0:	08 95       	ret

00002ac2 <HLCD_voidLcdSetLocation>:


void HLCD_voidLcdSetLocation(u8 copy_u8LineNum, u8 copy_u8CharNum)
{
    2ac2:	df 93       	push	r29
    2ac4:	cf 93       	push	r28
    2ac6:	00 d0       	rcall	.+0      	; 0x2ac8 <HLCD_voidLcdSetLocation+0x6>
    2ac8:	00 d0       	rcall	.+0      	; 0x2aca <HLCD_voidLcdSetLocation+0x8>
    2aca:	cd b7       	in	r28, 0x3d	; 61
    2acc:	de b7       	in	r29, 0x3e	; 62
    2ace:	89 83       	std	Y+1, r24	; 0x01
    2ad0:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8LineNum)
    2ad2:	89 81       	ldd	r24, Y+1	; 0x01
    2ad4:	28 2f       	mov	r18, r24
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	3c 83       	std	Y+4, r19	; 0x04
    2ada:	2b 83       	std	Y+3, r18	; 0x03
    2adc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ade:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae0:	00 97       	sbiw	r24, 0x00	; 0
    2ae2:	31 f0       	breq	.+12     	; 0x2af0 <HLCD_voidLcdSetLocation+0x2e>
    2ae4:	2b 81       	ldd	r18, Y+3	; 0x03
    2ae6:	3c 81       	ldd	r19, Y+4	; 0x04
    2ae8:	21 30       	cpi	r18, 0x01	; 1
    2aea:	31 05       	cpc	r19, r1
    2aec:	31 f0       	breq	.+12     	; 0x2afa <HLCD_voidLcdSetLocation+0x38>
    2aee:	09 c0       	rjmp	.+18     	; 0x2b02 <HLCD_voidLcdSetLocation+0x40>
	{
	case 0: HLCD_voidLcdSendCommand(0x80 + copy_u8CharNum); break;
    2af0:	8a 81       	ldd	r24, Y+2	; 0x02
    2af2:	80 58       	subi	r24, 0x80	; 128
    2af4:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <HLCD_voidLcdSendCommand>
    2af8:	04 c0       	rjmp	.+8      	; 0x2b02 <HLCD_voidLcdSetLocation+0x40>
	case 1: HLCD_voidLcdSendCommand(0xc0 + copy_u8CharNum); break;
    2afa:	8a 81       	ldd	r24, Y+2	; 0x02
    2afc:	80 54       	subi	r24, 0x40	; 64
    2afe:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <HLCD_voidLcdSendCommand>
	}

}
    2b02:	0f 90       	pop	r0
    2b04:	0f 90       	pop	r0
    2b06:	0f 90       	pop	r0
    2b08:	0f 90       	pop	r0
    2b0a:	cf 91       	pop	r28
    2b0c:	df 91       	pop	r29
    2b0e:	08 95       	ret

00002b10 <HLCD_voidLcdSendIntValue>:

void HLCD_voidLcdSendIntValue(u32 copy_u32Data)
{
    2b10:	df 93       	push	r29
    2b12:	cf 93       	push	r28
    2b14:	cd b7       	in	r28, 0x3d	; 61
    2b16:	de b7       	in	r29, 0x3e	; 62
    2b18:	2c 97       	sbiw	r28, 0x0c	; 12
    2b1a:	0f b6       	in	r0, 0x3f	; 63
    2b1c:	f8 94       	cli
    2b1e:	de bf       	out	0x3e, r29	; 62
    2b20:	0f be       	out	0x3f, r0	; 63
    2b22:	cd bf       	out	0x3d, r28	; 61
    2b24:	69 87       	std	Y+9, r22	; 0x09
    2b26:	7a 87       	std	Y+10, r23	; 0x0a
    2b28:	8b 87       	std	Y+11, r24	; 0x0b
    2b2a:	9c 87       	std	Y+12, r25	; 0x0c
	u32 L_u8Carrier;
	u32 L_u32Divider;
	if (copy_u32Data >= 0 && copy_u32Data < 10 ) //For single digit number
    2b2c:	89 85       	ldd	r24, Y+9	; 0x09
    2b2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b30:	ab 85       	ldd	r26, Y+11	; 0x0b
    2b32:	bc 85       	ldd	r27, Y+12	; 0x0c
    2b34:	8a 30       	cpi	r24, 0x0A	; 10
    2b36:	91 05       	cpc	r25, r1
    2b38:	a1 05       	cpc	r26, r1
    2b3a:	b1 05       	cpc	r27, r1
    2b3c:	28 f4       	brcc	.+10     	; 0x2b48 <HLCD_voidLcdSendIntValue+0x38>
	{
		HLCD_voidLcdSendData(48 + copy_u32Data);
    2b3e:	89 85       	ldd	r24, Y+9	; 0x09
    2b40:	80 5d       	subi	r24, 0xD0	; 208
    2b42:	0e 94 9a 14 	call	0x2934	; 0x2934 <HLCD_voidLcdSendData>
    2b46:	18 c1       	rjmp	.+560    	; 0x2d78 <HLCD_voidLcdSendIntValue+0x268>
	}
	else
	{
		L_u32Divider = 1;
    2b48:	81 e0       	ldi	r24, 0x01	; 1
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	a0 e0       	ldi	r26, 0x00	; 0
    2b4e:	b0 e0       	ldi	r27, 0x00	; 0
    2b50:	89 83       	std	Y+1, r24	; 0x01
    2b52:	9a 83       	std	Y+2, r25	; 0x02
    2b54:	ab 83       	std	Y+3, r26	; 0x03
    2b56:	bc 83       	std	Y+4, r27	; 0x04
			HLCD_voidLcdSendData('-');
			copy_u32Data = copy_u32Data * -1;
		}
		while (1)
		{
			if(copy_u32Data > L_u32Divider)
    2b58:	29 85       	ldd	r18, Y+9	; 0x09
    2b5a:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b5c:	4b 85       	ldd	r20, Y+11	; 0x0b
    2b5e:	5c 85       	ldd	r21, Y+12	; 0x0c
    2b60:	89 81       	ldd	r24, Y+1	; 0x01
    2b62:	9a 81       	ldd	r25, Y+2	; 0x02
    2b64:	ab 81       	ldd	r26, Y+3	; 0x03
    2b66:	bc 81       	ldd	r27, Y+4	; 0x04
    2b68:	82 17       	cp	r24, r18
    2b6a:	93 07       	cpc	r25, r19
    2b6c:	a4 07       	cpc	r26, r20
    2b6e:	b5 07       	cpc	r27, r21
    2b70:	98 f7       	brcc	.-26     	; 0x2b58 <HLCD_voidLcdSendIntValue+0x48>
			{
				L_u32Divider = L_u32Divider * 10;
    2b72:	89 81       	ldd	r24, Y+1	; 0x01
    2b74:	9a 81       	ldd	r25, Y+2	; 0x02
    2b76:	ab 81       	ldd	r26, Y+3	; 0x03
    2b78:	bc 81       	ldd	r27, Y+4	; 0x04
    2b7a:	2a e0       	ldi	r18, 0x0A	; 10
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	40 e0       	ldi	r20, 0x00	; 0
    2b80:	50 e0       	ldi	r21, 0x00	; 0
    2b82:	bc 01       	movw	r22, r24
    2b84:	cd 01       	movw	r24, r26
    2b86:	0e 94 15 18 	call	0x302a	; 0x302a <__mulsi3>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	89 83       	std	Y+1, r24	; 0x01
    2b90:	9a 83       	std	Y+2, r25	; 0x02
    2b92:	ab 83       	std	Y+3, r26	; 0x03
    2b94:	bc 83       	std	Y+4, r27	; 0x04
				if(copy_u32Data < L_u32Divider * 10)
    2b96:	89 81       	ldd	r24, Y+1	; 0x01
    2b98:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9a:	ab 81       	ldd	r26, Y+3	; 0x03
    2b9c:	bc 81       	ldd	r27, Y+4	; 0x04
    2b9e:	2a e0       	ldi	r18, 0x0A	; 10
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	40 e0       	ldi	r20, 0x00	; 0
    2ba4:	50 e0       	ldi	r21, 0x00	; 0
    2ba6:	bc 01       	movw	r22, r24
    2ba8:	cd 01       	movw	r24, r26
    2baa:	0e 94 15 18 	call	0x302a	; 0x302a <__mulsi3>
    2bae:	9b 01       	movw	r18, r22
    2bb0:	ac 01       	movw	r20, r24
    2bb2:	89 85       	ldd	r24, Y+9	; 0x09
    2bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb6:	ab 85       	ldd	r26, Y+11	; 0x0b
    2bb8:	bc 85       	ldd	r27, Y+12	; 0x0c
    2bba:	82 17       	cp	r24, r18
    2bbc:	93 07       	cpc	r25, r19
    2bbe:	a4 07       	cpc	r26, r20
    2bc0:	b5 07       	cpc	r27, r21
    2bc2:	50 f6       	brcc	.-108    	; 0x2b58 <HLCD_voidLcdSendIntValue+0x48>
			}
		}
		//Printing Sequence
		while(1)
		{
			if (copy_u32Data < 10 && (copy_u32Data >= L_u32Divider || copy_u32Data == 0 ))
    2bc4:	89 85       	ldd	r24, Y+9	; 0x09
    2bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc8:	ab 85       	ldd	r26, Y+11	; 0x0b
    2bca:	bc 85       	ldd	r27, Y+12	; 0x0c
    2bcc:	8a 30       	cpi	r24, 0x0A	; 10
    2bce:	91 05       	cpc	r25, r1
    2bd0:	a1 05       	cpc	r26, r1
    2bd2:	b1 05       	cpc	r27, r1
    2bd4:	d0 f4       	brcc	.+52     	; 0x2c0a <HLCD_voidLcdSendIntValue+0xfa>
    2bd6:	29 85       	ldd	r18, Y+9	; 0x09
    2bd8:	3a 85       	ldd	r19, Y+10	; 0x0a
    2bda:	4b 85       	ldd	r20, Y+11	; 0x0b
    2bdc:	5c 85       	ldd	r21, Y+12	; 0x0c
    2bde:	89 81       	ldd	r24, Y+1	; 0x01
    2be0:	9a 81       	ldd	r25, Y+2	; 0x02
    2be2:	ab 81       	ldd	r26, Y+3	; 0x03
    2be4:	bc 81       	ldd	r27, Y+4	; 0x04
    2be6:	28 17       	cp	r18, r24
    2be8:	39 07       	cpc	r19, r25
    2bea:	4a 07       	cpc	r20, r26
    2bec:	5b 07       	cpc	r21, r27
    2bee:	40 f4       	brcc	.+16     	; 0x2c00 <HLCD_voidLcdSendIntValue+0xf0>
    2bf0:	89 85       	ldd	r24, Y+9	; 0x09
    2bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bf4:	ab 85       	ldd	r26, Y+11	; 0x0b
    2bf6:	bc 85       	ldd	r27, Y+12	; 0x0c
    2bf8:	00 97       	sbiw	r24, 0x00	; 0
    2bfa:	a1 05       	cpc	r26, r1
    2bfc:	b1 05       	cpc	r27, r1
    2bfe:	29 f4       	brne	.+10     	; 0x2c0a <HLCD_voidLcdSendIntValue+0xfa>
			{
				HLCD_voidLcdSendData(48 + copy_u32Data);
    2c00:	89 85       	ldd	r24, Y+9	; 0x09
    2c02:	80 5d       	subi	r24, 0xD0	; 208
    2c04:	0e 94 9a 14 	call	0x2934	; 0x2934 <HLCD_voidLcdSendData>
    2c08:	b7 c0       	rjmp	.+366    	; 0x2d78 <HLCD_voidLcdSendIntValue+0x268>
				break;
			}

			else
			{
				L_u8Carrier = copy_u32Data / L_u32Divider;
    2c0a:	89 85       	ldd	r24, Y+9	; 0x09
    2c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c0e:	ab 85       	ldd	r26, Y+11	; 0x0b
    2c10:	bc 85       	ldd	r27, Y+12	; 0x0c
    2c12:	29 81       	ldd	r18, Y+1	; 0x01
    2c14:	3a 81       	ldd	r19, Y+2	; 0x02
    2c16:	4b 81       	ldd	r20, Y+3	; 0x03
    2c18:	5c 81       	ldd	r21, Y+4	; 0x04
    2c1a:	bc 01       	movw	r22, r24
    2c1c:	cd 01       	movw	r24, r26
    2c1e:	0e 94 34 18 	call	0x3068	; 0x3068 <__udivmodsi4>
    2c22:	da 01       	movw	r26, r20
    2c24:	c9 01       	movw	r24, r18
    2c26:	8d 83       	std	Y+5, r24	; 0x05
    2c28:	9e 83       	std	Y+6, r25	; 0x06
    2c2a:	af 83       	std	Y+7, r26	; 0x07
    2c2c:	b8 87       	std	Y+8, r27	; 0x08
				HLCD_voidLcdSendData(48 + L_u8Carrier);
    2c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c30:	80 5d       	subi	r24, 0xD0	; 208
    2c32:	0e 94 9a 14 	call	0x2934	; 0x2934 <HLCD_voidLcdSendData>
				L_u8Carrier = copy_u32Data % L_u32Divider;
    2c36:	89 85       	ldd	r24, Y+9	; 0x09
    2c38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c3a:	ab 85       	ldd	r26, Y+11	; 0x0b
    2c3c:	bc 85       	ldd	r27, Y+12	; 0x0c
    2c3e:	29 81       	ldd	r18, Y+1	; 0x01
    2c40:	3a 81       	ldd	r19, Y+2	; 0x02
    2c42:	4b 81       	ldd	r20, Y+3	; 0x03
    2c44:	5c 81       	ldd	r21, Y+4	; 0x04
    2c46:	bc 01       	movw	r22, r24
    2c48:	cd 01       	movw	r24, r26
    2c4a:	0e 94 34 18 	call	0x3068	; 0x3068 <__udivmodsi4>
    2c4e:	dc 01       	movw	r26, r24
    2c50:	cb 01       	movw	r24, r22
    2c52:	8d 83       	std	Y+5, r24	; 0x05
    2c54:	9e 83       	std	Y+6, r25	; 0x06
    2c56:	af 83       	std	Y+7, r26	; 0x07
    2c58:	b8 87       	std	Y+8, r27	; 0x08
				if(L_u8Carrier < L_u32Divider && L_u8Carrier >= L_u32Divider / 10 )
    2c5a:	2d 81       	ldd	r18, Y+5	; 0x05
    2c5c:	3e 81       	ldd	r19, Y+6	; 0x06
    2c5e:	4f 81       	ldd	r20, Y+7	; 0x07
    2c60:	58 85       	ldd	r21, Y+8	; 0x08
    2c62:	89 81       	ldd	r24, Y+1	; 0x01
    2c64:	9a 81       	ldd	r25, Y+2	; 0x02
    2c66:	ab 81       	ldd	r26, Y+3	; 0x03
    2c68:	bc 81       	ldd	r27, Y+4	; 0x04
    2c6a:	28 17       	cp	r18, r24
    2c6c:	39 07       	cpc	r19, r25
    2c6e:	4a 07       	cpc	r20, r26
    2c70:	5b 07       	cpc	r21, r27
    2c72:	a0 f5       	brcc	.+104    	; 0x2cdc <HLCD_voidLcdSendIntValue+0x1cc>
    2c74:	89 81       	ldd	r24, Y+1	; 0x01
    2c76:	9a 81       	ldd	r25, Y+2	; 0x02
    2c78:	ab 81       	ldd	r26, Y+3	; 0x03
    2c7a:	bc 81       	ldd	r27, Y+4	; 0x04
    2c7c:	2a e0       	ldi	r18, 0x0A	; 10
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	40 e0       	ldi	r20, 0x00	; 0
    2c82:	50 e0       	ldi	r21, 0x00	; 0
    2c84:	bc 01       	movw	r22, r24
    2c86:	cd 01       	movw	r24, r26
    2c88:	0e 94 34 18 	call	0x3068	; 0x3068 <__udivmodsi4>
    2c8c:	da 01       	movw	r26, r20
    2c8e:	c9 01       	movw	r24, r18
    2c90:	9c 01       	movw	r18, r24
    2c92:	ad 01       	movw	r20, r26
    2c94:	8d 81       	ldd	r24, Y+5	; 0x05
    2c96:	9e 81       	ldd	r25, Y+6	; 0x06
    2c98:	af 81       	ldd	r26, Y+7	; 0x07
    2c9a:	b8 85       	ldd	r27, Y+8	; 0x08
    2c9c:	82 17       	cp	r24, r18
    2c9e:	93 07       	cpc	r25, r19
    2ca0:	a4 07       	cpc	r26, r20
    2ca2:	b5 07       	cpc	r27, r21
    2ca4:	d8 f0       	brcs	.+54     	; 0x2cdc <HLCD_voidLcdSendIntValue+0x1cc>
				{
					copy_u32Data = L_u8Carrier;
    2ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    2caa:	af 81       	ldd	r26, Y+7	; 0x07
    2cac:	b8 85       	ldd	r27, Y+8	; 0x08
    2cae:	89 87       	std	Y+9, r24	; 0x09
    2cb0:	9a 87       	std	Y+10, r25	; 0x0a
    2cb2:	ab 87       	std	Y+11, r26	; 0x0b
    2cb4:	bc 87       	std	Y+12, r27	; 0x0c
					L_u32Divider = L_u32Divider / 10;
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
    2cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cba:	ab 81       	ldd	r26, Y+3	; 0x03
    2cbc:	bc 81       	ldd	r27, Y+4	; 0x04
    2cbe:	2a e0       	ldi	r18, 0x0A	; 10
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	40 e0       	ldi	r20, 0x00	; 0
    2cc4:	50 e0       	ldi	r21, 0x00	; 0
    2cc6:	bc 01       	movw	r22, r24
    2cc8:	cd 01       	movw	r24, r26
    2cca:	0e 94 34 18 	call	0x3068	; 0x3068 <__udivmodsi4>
    2cce:	da 01       	movw	r26, r20
    2cd0:	c9 01       	movw	r24, r18
    2cd2:	89 83       	std	Y+1, r24	; 0x01
    2cd4:	9a 83       	std	Y+2, r25	; 0x02
    2cd6:	ab 83       	std	Y+3, r26	; 0x03
    2cd8:	bc 83       	std	Y+4, r27	; 0x04
    2cda:	74 cf       	rjmp	.-280    	; 0x2bc4 <HLCD_voidLcdSendIntValue+0xb4>
				}
				else
				{
					if (L_u32Divider > 10)
    2cdc:	89 81       	ldd	r24, Y+1	; 0x01
    2cde:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce0:	ab 81       	ldd	r26, Y+3	; 0x03
    2ce2:	bc 81       	ldd	r27, Y+4	; 0x04
    2ce4:	8b 30       	cpi	r24, 0x0B	; 11
    2ce6:	91 05       	cpc	r25, r1
    2ce8:	a1 05       	cpc	r26, r1
    2cea:	b1 05       	cpc	r27, r1
    2cec:	08 f4       	brcc	.+2      	; 0x2cf0 <HLCD_voidLcdSendIntValue+0x1e0>
    2cee:	41 c0       	rjmp	.+130    	; 0x2d72 <HLCD_voidLcdSendIntValue+0x262>
					{
						HLCD_voidLcdSendData(48);
    2cf0:	80 e3       	ldi	r24, 0x30	; 48
    2cf2:	0e 94 9a 14 	call	0x2934	; 0x2934 <HLCD_voidLcdSendData>
						copy_u32Data = L_u8Carrier;
    2cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cfa:	af 81       	ldd	r26, Y+7	; 0x07
    2cfc:	b8 85       	ldd	r27, Y+8	; 0x08
    2cfe:	89 87       	std	Y+9, r24	; 0x09
    2d00:	9a 87       	std	Y+10, r25	; 0x0a
    2d02:	ab 87       	std	Y+11, r26	; 0x0b
    2d04:	bc 87       	std	Y+12, r27	; 0x0c
						L_u32Divider = L_u32Divider / 100;
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	9a 81       	ldd	r25, Y+2	; 0x02
    2d0a:	ab 81       	ldd	r26, Y+3	; 0x03
    2d0c:	bc 81       	ldd	r27, Y+4	; 0x04
    2d0e:	24 e6       	ldi	r18, 0x64	; 100
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	40 e0       	ldi	r20, 0x00	; 0
    2d14:	50 e0       	ldi	r21, 0x00	; 0
    2d16:	bc 01       	movw	r22, r24
    2d18:	cd 01       	movw	r24, r26
    2d1a:	0e 94 34 18 	call	0x3068	; 0x3068 <__udivmodsi4>
    2d1e:	da 01       	movw	r26, r20
    2d20:	c9 01       	movw	r24, r18
    2d22:	89 83       	std	Y+1, r24	; 0x01
    2d24:	9a 83       	std	Y+2, r25	; 0x02
    2d26:	ab 83       	std	Y+3, r26	; 0x03
    2d28:	bc 83       	std	Y+4, r27	; 0x04
						if (copy_u32Data < L_u32Divider)
    2d2a:	29 85       	ldd	r18, Y+9	; 0x09
    2d2c:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d2e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2d30:	5c 85       	ldd	r21, Y+12	; 0x0c
    2d32:	89 81       	ldd	r24, Y+1	; 0x01
    2d34:	9a 81       	ldd	r25, Y+2	; 0x02
    2d36:	ab 81       	ldd	r26, Y+3	; 0x03
    2d38:	bc 81       	ldd	r27, Y+4	; 0x04
    2d3a:	28 17       	cp	r18, r24
    2d3c:	39 07       	cpc	r19, r25
    2d3e:	4a 07       	cpc	r20, r26
    2d40:	5b 07       	cpc	r21, r27
    2d42:	08 f0       	brcs	.+2      	; 0x2d46 <HLCD_voidLcdSendIntValue+0x236>
    2d44:	3f cf       	rjmp	.-386    	; 0x2bc4 <HLCD_voidLcdSendIntValue+0xb4>
						{
							HLCD_voidLcdSendData(48);
    2d46:	80 e3       	ldi	r24, 0x30	; 48
    2d48:	0e 94 9a 14 	call	0x2934	; 0x2934 <HLCD_voidLcdSendData>
							L_u32Divider = L_u32Divider / 10;
    2d4c:	89 81       	ldd	r24, Y+1	; 0x01
    2d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d50:	ab 81       	ldd	r26, Y+3	; 0x03
    2d52:	bc 81       	ldd	r27, Y+4	; 0x04
    2d54:	2a e0       	ldi	r18, 0x0A	; 10
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	40 e0       	ldi	r20, 0x00	; 0
    2d5a:	50 e0       	ldi	r21, 0x00	; 0
    2d5c:	bc 01       	movw	r22, r24
    2d5e:	cd 01       	movw	r24, r26
    2d60:	0e 94 34 18 	call	0x3068	; 0x3068 <__udivmodsi4>
    2d64:	da 01       	movw	r26, r20
    2d66:	c9 01       	movw	r24, r18
    2d68:	89 83       	std	Y+1, r24	; 0x01
    2d6a:	9a 83       	std	Y+2, r25	; 0x02
    2d6c:	ab 83       	std	Y+3, r26	; 0x03
    2d6e:	bc 83       	std	Y+4, r27	; 0x04
    2d70:	29 cf       	rjmp	.-430    	; 0x2bc4 <HLCD_voidLcdSendIntValue+0xb4>
						}
					}
					else
					{
						HLCD_voidLcdSendData(48);
    2d72:	80 e3       	ldi	r24, 0x30	; 48
    2d74:	0e 94 9a 14 	call	0x2934	; 0x2934 <HLCD_voidLcdSendData>
//	do
//	{
//
//	}
//	while(copy_u32Data != 0);
}
    2d78:	2c 96       	adiw	r28, 0x0c	; 12
    2d7a:	0f b6       	in	r0, 0x3f	; 63
    2d7c:	f8 94       	cli
    2d7e:	de bf       	out	0x3e, r29	; 62
    2d80:	0f be       	out	0x3f, r0	; 63
    2d82:	cd bf       	out	0x3d, r28	; 61
    2d84:	cf 91       	pop	r28
    2d86:	df 91       	pop	r29
    2d88:	08 95       	ret

00002d8a <HLCD_voidLcdSendInteger>:

void HLCD_voidLcdSendInteger(u32 copy_u32Data)
{
    2d8a:	df 93       	push	r29
    2d8c:	cf 93       	push	r28
    2d8e:	cd b7       	in	r28, 0x3d	; 61
    2d90:	de b7       	in	r29, 0x3e	; 62
    2d92:	64 97       	sbiw	r28, 0x14	; 20
    2d94:	0f b6       	in	r0, 0x3f	; 63
    2d96:	f8 94       	cli
    2d98:	de bf       	out	0x3e, r29	; 62
    2d9a:	0f be       	out	0x3f, r0	; 63
    2d9c:	cd bf       	out	0x3d, r28	; 61
    2d9e:	69 8b       	std	Y+17, r22	; 0x11
    2da0:	7a 8b       	std	Y+18, r23	; 0x12
    2da2:	8b 8b       	std	Y+19, r24	; 0x13
    2da4:	9c 8b       	std	Y+20, r25	; 0x14
	s8 L_Au8NumberCarrier [16] ;
	itoa(copy_u32Data, (s8*)L_Au8NumberCarrier, 10);
    2da6:	89 89       	ldd	r24, Y+17	; 0x11
    2da8:	9a 89       	ldd	r25, Y+18	; 0x12
    2daa:	9e 01       	movw	r18, r28
    2dac:	2f 5f       	subi	r18, 0xFF	; 255
    2dae:	3f 4f       	sbci	r19, 0xFF	; 255
    2db0:	b9 01       	movw	r22, r18
    2db2:	4a e0       	ldi	r20, 0x0A	; 10
    2db4:	50 e0       	ldi	r21, 0x00	; 0
    2db6:	0e 94 8d 18 	call	0x311a	; 0x311a <itoa>
	HLCD_voidLcdSendString((s8*)L_Au8NumberCarrier);
    2dba:	ce 01       	movw	r24, r28
    2dbc:	01 96       	adiw	r24, 0x01	; 1
    2dbe:	0e 94 38 15 	call	0x2a70	; 0x2a70 <HLCD_voidLcdSendString>
}
    2dc2:	64 96       	adiw	r28, 0x14	; 20
    2dc4:	0f b6       	in	r0, 0x3f	; 63
    2dc6:	f8 94       	cli
    2dc8:	de bf       	out	0x3e, r29	; 62
    2dca:	0f be       	out	0x3f, r0	; 63
    2dcc:	cd bf       	out	0x3d, r28	; 61
    2dce:	cf 91       	pop	r28
    2dd0:	df 91       	pop	r29
    2dd2:	08 95       	ret

00002dd4 <HKPD_voidKPDInt>:
u8 KPD_u8Arr [4][4] = KPD_KEYS;
u8 KPD_u8RowArr [4] = {KPD_R1_PIN, KPD_R2_PIN, KPD_R3_PIN, KPD_R4_PIN};
u8 KPD_u8ColArr [4] = {KPD_C1_PIN, KPD_C2_PIN, KPD_C3_PIN, KPD_C4_PIN};

void HKPD_voidKPDInt(void)
{
    2dd4:	df 93       	push	r29
    2dd6:	cf 93       	push	r28
    2dd8:	cd b7       	in	r28, 0x3d	; 61
    2dda:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidDioSetPortDirection(KPD_PORT, 0x0f);
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	6f e0       	ldi	r22, 0x0F	; 15
    2de0:	0e 94 80 11 	call	0x2300	; 0x2300 <MDIO_voidDioSetPortDirection>
	MDIO_voidDioSetPortValue(KPD_PORT, 0xff);
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	6f ef       	ldi	r22, 0xFF	; 255
    2de8:	0e 94 c1 11 	call	0x2382	; 0x2382 <MDIO_voidDioSetPortValue>
}
    2dec:	cf 91       	pop	r28
    2dee:	df 91       	pop	r29
    2df0:	08 95       	ret

00002df2 <HKPD_u8KPDGetKeyValue>:



u8 HKPD_u8KPDGetKeyValue(void)
{
    2df2:	df 93       	push	r29
    2df4:	cf 93       	push	r28
    2df6:	cd b7       	in	r28, 0x3d	; 61
    2df8:	de b7       	in	r29, 0x3e	; 62
    2dfa:	64 97       	sbiw	r28, 0x14	; 20
    2dfc:	0f b6       	in	r0, 0x3f	; 63
    2dfe:	f8 94       	cli
    2e00:	de bf       	out	0x3e, r29	; 62
    2e02:	0f be       	out	0x3f, r0	; 63
    2e04:	cd bf       	out	0x3d, r28	; 61
	u8 L_u8RowCount, L_u8ColCount, L_u8GetPin, L_u8ReturnedKey;
	u8 L_u8Flag = 0;
    2e06:	1f 86       	std	Y+15, r1	; 0x0f
	/*LOOP FOR ROWS*/
	for (L_u8RowCount = 0; L_u8RowCount < 4; L_u8RowCount ++)
    2e08:	1b 8a       	std	Y+19, r1	; 0x13
    2e0a:	da c0       	rjmp	.+436    	; 0x2fc0 <HKPD_u8KPDGetKeyValue+0x1ce>
	{
		/*Activate COLS*/
		MDIO_voidDioSetPinValue(KPD_PORT, KPD_u8RowArr[L_u8RowCount], 0);
    2e0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e0e:	88 2f       	mov	r24, r24
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	fc 01       	movw	r30, r24
    2e14:	e8 58       	subi	r30, 0x88	; 136
    2e16:	fe 4f       	sbci	r31, 0xFE	; 254
    2e18:	90 81       	ld	r25, Z
    2e1a:	81 e0       	ldi	r24, 0x01	; 1
    2e1c:	69 2f       	mov	r22, r25
    2e1e:	40 e0       	ldi	r20, 0x00	; 0
    2e20:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <MDIO_voidDioSetPinValue>

		/*LOOP FOR ROWS*/
		for (L_u8ColCount = 0; L_u8ColCount < 4; L_u8ColCount ++)
    2e24:	1a 8a       	std	Y+18, r1	; 0x12
    2e26:	b6 c0       	rjmp	.+364    	; 0x2f94 <HKPD_u8KPDGetKeyValue+0x1a2>
		{
			L_u8GetPin = MDIO_u8DioGetPinValue(KPD_PORT, KPD_u8ColArr[L_u8ColCount]);
    2e28:	8a 89       	ldd	r24, Y+18	; 0x12
    2e2a:	88 2f       	mov	r24, r24
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	fc 01       	movw	r30, r24
    2e30:	e4 58       	subi	r30, 0x84	; 132
    2e32:	fe 4f       	sbci	r31, 0xFE	; 254
    2e34:	90 81       	ld	r25, Z
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	69 2f       	mov	r22, r25
    2e3a:	0e 94 8a 10 	call	0x2114	; 0x2114 <MDIO_u8DioGetPinValue>
    2e3e:	89 8b       	std	Y+17, r24	; 0x11
			if (L_u8GetPin == 0)
    2e40:	89 89       	ldd	r24, Y+17	; 0x11
    2e42:	88 23       	and	r24, r24
    2e44:	09 f0       	breq	.+2      	; 0x2e48 <HKPD_u8KPDGetKeyValue+0x56>
    2e46:	a3 c0       	rjmp	.+326    	; 0x2f8e <HKPD_u8KPDGetKeyValue+0x19c>
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	a0 ea       	ldi	r26, 0xA0	; 160
    2e4e:	b1 e4       	ldi	r27, 0x41	; 65
    2e50:	8b 87       	std	Y+11, r24	; 0x0b
    2e52:	9c 87       	std	Y+12, r25	; 0x0c
    2e54:	ad 87       	std	Y+13, r26	; 0x0d
    2e56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	4a ef       	ldi	r20, 0xFA	; 250
    2e66:	54 e4       	ldi	r21, 0x44	; 68
    2e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	8f 83       	std	Y+7, r24	; 0x07
    2e72:	98 87       	std	Y+8, r25	; 0x08
    2e74:	a9 87       	std	Y+9, r26	; 0x09
    2e76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e78:	6f 81       	ldd	r22, Y+7	; 0x07
    2e7a:	78 85       	ldd	r23, Y+8	; 0x08
    2e7c:	89 85       	ldd	r24, Y+9	; 0x09
    2e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	40 e8       	ldi	r20, 0x80	; 128
    2e86:	5f e3       	ldi	r21, 0x3F	; 63
    2e88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e8c:	88 23       	and	r24, r24
    2e8e:	2c f4       	brge	.+10     	; 0x2e9a <HKPD_u8KPDGetKeyValue+0xa8>
		__ticks = 1;
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	9e 83       	std	Y+6, r25	; 0x06
    2e96:	8d 83       	std	Y+5, r24	; 0x05
    2e98:	3f c0       	rjmp	.+126    	; 0x2f18 <HKPD_u8KPDGetKeyValue+0x126>
	else if (__tmp > 65535)
    2e9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e9c:	78 85       	ldd	r23, Y+8	; 0x08
    2e9e:	89 85       	ldd	r24, Y+9	; 0x09
    2ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	3f ef       	ldi	r19, 0xFF	; 255
    2ea6:	4f e7       	ldi	r20, 0x7F	; 127
    2ea8:	57 e4       	ldi	r21, 0x47	; 71
    2eaa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eae:	18 16       	cp	r1, r24
    2eb0:	4c f5       	brge	.+82     	; 0x2f04 <HKPD_u8KPDGetKeyValue+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	40 e2       	ldi	r20, 0x20	; 32
    2ec0:	51 e4       	ldi	r21, 0x41	; 65
    2ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	bc 01       	movw	r22, r24
    2ecc:	cd 01       	movw	r24, r26
    2ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed2:	dc 01       	movw	r26, r24
    2ed4:	cb 01       	movw	r24, r22
    2ed6:	9e 83       	std	Y+6, r25	; 0x06
    2ed8:	8d 83       	std	Y+5, r24	; 0x05
    2eda:	0f c0       	rjmp	.+30     	; 0x2efa <HKPD_u8KPDGetKeyValue+0x108>
    2edc:	88 ec       	ldi	r24, 0xC8	; 200
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	9c 83       	std	Y+4, r25	; 0x04
    2ee2:	8b 83       	std	Y+3, r24	; 0x03
    2ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee8:	01 97       	sbiw	r24, 0x01	; 1
    2eea:	f1 f7       	brne	.-4      	; 0x2ee8 <HKPD_u8KPDGetKeyValue+0xf6>
    2eec:	9c 83       	std	Y+4, r25	; 0x04
    2eee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef4:	01 97       	sbiw	r24, 0x01	; 1
    2ef6:	9e 83       	std	Y+6, r25	; 0x06
    2ef8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2efa:	8d 81       	ldd	r24, Y+5	; 0x05
    2efc:	9e 81       	ldd	r25, Y+6	; 0x06
    2efe:	00 97       	sbiw	r24, 0x00	; 0
    2f00:	69 f7       	brne	.-38     	; 0x2edc <HKPD_u8KPDGetKeyValue+0xea>
    2f02:	14 c0       	rjmp	.+40     	; 0x2f2c <HKPD_u8KPDGetKeyValue+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f04:	6f 81       	ldd	r22, Y+7	; 0x07
    2f06:	78 85       	ldd	r23, Y+8	; 0x08
    2f08:	89 85       	ldd	r24, Y+9	; 0x09
    2f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f10:	dc 01       	movw	r26, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	9e 83       	std	Y+6, r25	; 0x06
    2f16:	8d 83       	std	Y+5, r24	; 0x05
    2f18:	8d 81       	ldd	r24, Y+5	; 0x05
    2f1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f1c:	9a 83       	std	Y+2, r25	; 0x02
    2f1e:	89 83       	std	Y+1, r24	; 0x01
    2f20:	89 81       	ldd	r24, Y+1	; 0x01
    2f22:	9a 81       	ldd	r25, Y+2	; 0x02
    2f24:	01 97       	sbiw	r24, 0x01	; 1
    2f26:	f1 f7       	brne	.-4      	; 0x2f24 <HKPD_u8KPDGetKeyValue+0x132>
    2f28:	9a 83       	std	Y+2, r25	; 0x02
    2f2a:	89 83       	std	Y+1, r24	; 0x01
			{
				/*DEBOUNC*/
				_delay_ms(20);
				L_u8GetPin = MDIO_u8DioGetPinValue(KPD_PORT, KPD_u8ColArr[L_u8ColCount]);
    2f2c:	8a 89       	ldd	r24, Y+18	; 0x12
    2f2e:	88 2f       	mov	r24, r24
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	fc 01       	movw	r30, r24
    2f34:	e4 58       	subi	r30, 0x84	; 132
    2f36:	fe 4f       	sbci	r31, 0xFE	; 254
    2f38:	90 81       	ld	r25, Z
    2f3a:	81 e0       	ldi	r24, 0x01	; 1
    2f3c:	69 2f       	mov	r22, r25
    2f3e:	0e 94 8a 10 	call	0x2114	; 0x2114 <MDIO_u8DioGetPinValue>
    2f42:	89 8b       	std	Y+17, r24	; 0x11
    2f44:	0c c0       	rjmp	.+24     	; 0x2f5e <HKPD_u8KPDGetKeyValue+0x16c>
				while(L_u8GetPin == 0)
				{
					L_u8GetPin = MDIO_u8DioGetPinValue(KPD_PORT, KPD_u8ColArr[L_u8ColCount]);
    2f46:	8a 89       	ldd	r24, Y+18	; 0x12
    2f48:	88 2f       	mov	r24, r24
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	fc 01       	movw	r30, r24
    2f4e:	e4 58       	subi	r30, 0x84	; 132
    2f50:	fe 4f       	sbci	r31, 0xFE	; 254
    2f52:	90 81       	ld	r25, Z
    2f54:	81 e0       	ldi	r24, 0x01	; 1
    2f56:	69 2f       	mov	r22, r25
    2f58:	0e 94 8a 10 	call	0x2114	; 0x2114 <MDIO_u8DioGetPinValue>
    2f5c:	89 8b       	std	Y+17, r24	; 0x11
			if (L_u8GetPin == 0)
			{
				/*DEBOUNC*/
				_delay_ms(20);
				L_u8GetPin = MDIO_u8DioGetPinValue(KPD_PORT, KPD_u8ColArr[L_u8ColCount]);
				while(L_u8GetPin == 0)
    2f5e:	89 89       	ldd	r24, Y+17	; 0x11
    2f60:	88 23       	and	r24, r24
    2f62:	89 f3       	breq	.-30     	; 0x2f46 <HKPD_u8KPDGetKeyValue+0x154>
				{
					L_u8GetPin = MDIO_u8DioGetPinValue(KPD_PORT, KPD_u8ColArr[L_u8ColCount]);
				}
				L_u8ReturnedKey = KPD_u8Arr[L_u8RowCount][L_u8ColCount];
    2f64:	8b 89       	ldd	r24, Y+19	; 0x13
    2f66:	48 2f       	mov	r20, r24
    2f68:	50 e0       	ldi	r21, 0x00	; 0
    2f6a:	8a 89       	ldd	r24, Y+18	; 0x12
    2f6c:	28 2f       	mov	r18, r24
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	ca 01       	movw	r24, r20
    2f72:	88 0f       	add	r24, r24
    2f74:	99 1f       	adc	r25, r25
    2f76:	88 0f       	add	r24, r24
    2f78:	99 1f       	adc	r25, r25
    2f7a:	82 0f       	add	r24, r18
    2f7c:	93 1f       	adc	r25, r19
    2f7e:	fc 01       	movw	r30, r24
    2f80:	e8 59       	subi	r30, 0x98	; 152
    2f82:	fe 4f       	sbci	r31, 0xFE	; 254
    2f84:	80 81       	ld	r24, Z
    2f86:	88 8b       	std	Y+16, r24	; 0x10
				L_u8Flag = 1;
    2f88:	81 e0       	ldi	r24, 0x01	; 1
    2f8a:	8f 87       	std	Y+15, r24	; 0x0f
    2f8c:	07 c0       	rjmp	.+14     	; 0x2f9c <HKPD_u8KPDGetKeyValue+0x1aa>
	{
		/*Activate COLS*/
		MDIO_voidDioSetPinValue(KPD_PORT, KPD_u8RowArr[L_u8RowCount], 0);

		/*LOOP FOR ROWS*/
		for (L_u8ColCount = 0; L_u8ColCount < 4; L_u8ColCount ++)
    2f8e:	8a 89       	ldd	r24, Y+18	; 0x12
    2f90:	8f 5f       	subi	r24, 0xFF	; 255
    2f92:	8a 8b       	std	Y+18, r24	; 0x12
    2f94:	8a 89       	ldd	r24, Y+18	; 0x12
    2f96:	84 30       	cpi	r24, 0x04	; 4
    2f98:	08 f4       	brcc	.+2      	; 0x2f9c <HKPD_u8KPDGetKeyValue+0x1aa>
    2f9a:	46 cf       	rjmp	.-372    	; 0x2e28 <HKPD_u8KPDGetKeyValue+0x36>
				L_u8Flag = 1;
				break;
			}
		}
		/*DEACTIVATING COL*/
		MDIO_voidDioSetPinValue(KPD_PORT, KPD_u8RowArr[L_u8RowCount], 1);
    2f9c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f9e:	88 2f       	mov	r24, r24
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	fc 01       	movw	r30, r24
    2fa4:	e8 58       	subi	r30, 0x88	; 136
    2fa6:	fe 4f       	sbci	r31, 0xFE	; 254
    2fa8:	90 81       	ld	r25, Z
    2faa:	81 e0       	ldi	r24, 0x01	; 1
    2fac:	69 2f       	mov	r22, r25
    2fae:	41 e0       	ldi	r20, 0x01	; 1
    2fb0:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <MDIO_voidDioSetPinValue>
		if (L_u8Flag == 1)
    2fb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fb6:	81 30       	cpi	r24, 0x01	; 1
    2fb8:	39 f0       	breq	.+14     	; 0x2fc8 <HKPD_u8KPDGetKeyValue+0x1d6>
u8 HKPD_u8KPDGetKeyValue(void)
{
	u8 L_u8RowCount, L_u8ColCount, L_u8GetPin, L_u8ReturnedKey;
	u8 L_u8Flag = 0;
	/*LOOP FOR ROWS*/
	for (L_u8RowCount = 0; L_u8RowCount < 4; L_u8RowCount ++)
    2fba:	8b 89       	ldd	r24, Y+19	; 0x13
    2fbc:	8f 5f       	subi	r24, 0xFF	; 255
    2fbe:	8b 8b       	std	Y+19, r24	; 0x13
    2fc0:	8b 89       	ldd	r24, Y+19	; 0x13
    2fc2:	84 30       	cpi	r24, 0x04	; 4
    2fc4:	08 f4       	brcc	.+2      	; 0x2fc8 <HKPD_u8KPDGetKeyValue+0x1d6>
    2fc6:	22 cf       	rjmp	.-444    	; 0x2e0c <HKPD_u8KPDGetKeyValue+0x1a>
		{
			break;
		}

	}
	if (L_u8Flag == 1)
    2fc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fca:	81 30       	cpi	r24, 0x01	; 1
    2fcc:	19 f4       	brne	.+6      	; 0x2fd4 <HKPD_u8KPDGetKeyValue+0x1e2>
		return L_u8ReturnedKey;
    2fce:	88 89       	ldd	r24, Y+16	; 0x10
    2fd0:	8c 8b       	std	Y+20, r24	; 0x14
    2fd2:	02 c0       	rjmp	.+4      	; 0x2fd8 <HKPD_u8KPDGetKeyValue+0x1e6>
	else
		return 0xff;
    2fd4:	8f ef       	ldi	r24, 0xFF	; 255
    2fd6:	8c 8b       	std	Y+20, r24	; 0x14
    2fd8:	8c 89       	ldd	r24, Y+20	; 0x14
}
    2fda:	64 96       	adiw	r28, 0x14	; 20
    2fdc:	0f b6       	in	r0, 0x3f	; 63
    2fde:	f8 94       	cli
    2fe0:	de bf       	out	0x3e, r29	; 62
    2fe2:	0f be       	out	0x3f, r0	; 63
    2fe4:	cd bf       	out	0x3d, r28	; 61
    2fe6:	cf 91       	pop	r28
    2fe8:	df 91       	pop	r29
    2fea:	08 95       	ret

00002fec <main>:
#include "MCAL/M_DIO/MDIO_Interface.h"

#include "HAL/H_KEYPAD/KEYPAD_Interface.h"

int main (void)
{
    2fec:	df 93       	push	r29
    2fee:	cf 93       	push	r28
    2ff0:	0f 92       	push	r0
    2ff2:	cd b7       	in	r28, 0x3d	; 61
    2ff4:	de b7       	in	r29, 0x3e	; 62
	u8  L_u8KPDPress = KPD_u8_KEY_NOT_PRESSED;
    2ff6:	8f ef       	ldi	r24, 0xFF	; 255
    2ff8:	89 83       	std	Y+1, r24	; 0x01

	MDIO_voidDioSetPinDirection(DIO_PORTD, DIO_PIN_0, DIO_IN); //RX PIN
    2ffa:	83 e0       	ldi	r24, 0x03	; 3
    2ffc:	60 e0       	ldi	r22, 0x00	; 0
    2ffe:	40 e0       	ldi	r20, 0x00	; 0
    3000:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <MDIO_voidDioSetPinDirection>
	MDIO_voidDioSetPinDirection(DIO_PORTD, DIO_PIN_1, DIO_IN); //TX PIN
    3004:	83 e0       	ldi	r24, 0x03	; 3
    3006:	61 e0       	ldi	r22, 0x01	; 1
    3008:	40 e0       	ldi	r20, 0x00	; 0
    300a:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <MDIO_voidDioSetPinDirection>

	HKPD_voidKPDInt();
    300e:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <HKPD_voidKPDInt>
	UART_voidInit();
    3012:	0e 94 47 07 	call	0xe8e	; 0xe8e <UART_voidInit>

	while(1)
	{
		L_u8KPDPress = HKPD_u8KPDGetKeyValue();
    3016:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <HKPD_u8KPDGetKeyValue>
    301a:	89 83       	std	Y+1, r24	; 0x01
		if (L_u8KPDPress != KPD_u8_KEY_NOT_PRESSED)
    301c:	89 81       	ldd	r24, Y+1	; 0x01
    301e:	8f 3f       	cpi	r24, 0xFF	; 255
    3020:	d1 f3       	breq	.-12     	; 0x3016 <main+0x2a>
		{
			UART_voidSendData(L_u8KPDPress);
    3022:	89 81       	ldd	r24, Y+1	; 0x01
    3024:	0e 94 af 07 	call	0xf5e	; 0xf5e <UART_voidSendData>
    3028:	f6 cf       	rjmp	.-20     	; 0x3016 <main+0x2a>

0000302a <__mulsi3>:
    302a:	62 9f       	mul	r22, r18
    302c:	d0 01       	movw	r26, r0
    302e:	73 9f       	mul	r23, r19
    3030:	f0 01       	movw	r30, r0
    3032:	82 9f       	mul	r24, r18
    3034:	e0 0d       	add	r30, r0
    3036:	f1 1d       	adc	r31, r1
    3038:	64 9f       	mul	r22, r20
    303a:	e0 0d       	add	r30, r0
    303c:	f1 1d       	adc	r31, r1
    303e:	92 9f       	mul	r25, r18
    3040:	f0 0d       	add	r31, r0
    3042:	83 9f       	mul	r24, r19
    3044:	f0 0d       	add	r31, r0
    3046:	74 9f       	mul	r23, r20
    3048:	f0 0d       	add	r31, r0
    304a:	65 9f       	mul	r22, r21
    304c:	f0 0d       	add	r31, r0
    304e:	99 27       	eor	r25, r25
    3050:	72 9f       	mul	r23, r18
    3052:	b0 0d       	add	r27, r0
    3054:	e1 1d       	adc	r30, r1
    3056:	f9 1f       	adc	r31, r25
    3058:	63 9f       	mul	r22, r19
    305a:	b0 0d       	add	r27, r0
    305c:	e1 1d       	adc	r30, r1
    305e:	f9 1f       	adc	r31, r25
    3060:	bd 01       	movw	r22, r26
    3062:	cf 01       	movw	r24, r30
    3064:	11 24       	eor	r1, r1
    3066:	08 95       	ret

00003068 <__udivmodsi4>:
    3068:	a1 e2       	ldi	r26, 0x21	; 33
    306a:	1a 2e       	mov	r1, r26
    306c:	aa 1b       	sub	r26, r26
    306e:	bb 1b       	sub	r27, r27
    3070:	fd 01       	movw	r30, r26
    3072:	0d c0       	rjmp	.+26     	; 0x308e <__udivmodsi4_ep>

00003074 <__udivmodsi4_loop>:
    3074:	aa 1f       	adc	r26, r26
    3076:	bb 1f       	adc	r27, r27
    3078:	ee 1f       	adc	r30, r30
    307a:	ff 1f       	adc	r31, r31
    307c:	a2 17       	cp	r26, r18
    307e:	b3 07       	cpc	r27, r19
    3080:	e4 07       	cpc	r30, r20
    3082:	f5 07       	cpc	r31, r21
    3084:	20 f0       	brcs	.+8      	; 0x308e <__udivmodsi4_ep>
    3086:	a2 1b       	sub	r26, r18
    3088:	b3 0b       	sbc	r27, r19
    308a:	e4 0b       	sbc	r30, r20
    308c:	f5 0b       	sbc	r31, r21

0000308e <__udivmodsi4_ep>:
    308e:	66 1f       	adc	r22, r22
    3090:	77 1f       	adc	r23, r23
    3092:	88 1f       	adc	r24, r24
    3094:	99 1f       	adc	r25, r25
    3096:	1a 94       	dec	r1
    3098:	69 f7       	brne	.-38     	; 0x3074 <__udivmodsi4_loop>
    309a:	60 95       	com	r22
    309c:	70 95       	com	r23
    309e:	80 95       	com	r24
    30a0:	90 95       	com	r25
    30a2:	9b 01       	movw	r18, r22
    30a4:	ac 01       	movw	r20, r24
    30a6:	bd 01       	movw	r22, r26
    30a8:	cf 01       	movw	r24, r30
    30aa:	08 95       	ret

000030ac <__prologue_saves__>:
    30ac:	2f 92       	push	r2
    30ae:	3f 92       	push	r3
    30b0:	4f 92       	push	r4
    30b2:	5f 92       	push	r5
    30b4:	6f 92       	push	r6
    30b6:	7f 92       	push	r7
    30b8:	8f 92       	push	r8
    30ba:	9f 92       	push	r9
    30bc:	af 92       	push	r10
    30be:	bf 92       	push	r11
    30c0:	cf 92       	push	r12
    30c2:	df 92       	push	r13
    30c4:	ef 92       	push	r14
    30c6:	ff 92       	push	r15
    30c8:	0f 93       	push	r16
    30ca:	1f 93       	push	r17
    30cc:	cf 93       	push	r28
    30ce:	df 93       	push	r29
    30d0:	cd b7       	in	r28, 0x3d	; 61
    30d2:	de b7       	in	r29, 0x3e	; 62
    30d4:	ca 1b       	sub	r28, r26
    30d6:	db 0b       	sbc	r29, r27
    30d8:	0f b6       	in	r0, 0x3f	; 63
    30da:	f8 94       	cli
    30dc:	de bf       	out	0x3e, r29	; 62
    30de:	0f be       	out	0x3f, r0	; 63
    30e0:	cd bf       	out	0x3d, r28	; 61
    30e2:	09 94       	ijmp

000030e4 <__epilogue_restores__>:
    30e4:	2a 88       	ldd	r2, Y+18	; 0x12
    30e6:	39 88       	ldd	r3, Y+17	; 0x11
    30e8:	48 88       	ldd	r4, Y+16	; 0x10
    30ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    30ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    30ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    30f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    30f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    30f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    30f6:	b9 84       	ldd	r11, Y+9	; 0x09
    30f8:	c8 84       	ldd	r12, Y+8	; 0x08
    30fa:	df 80       	ldd	r13, Y+7	; 0x07
    30fc:	ee 80       	ldd	r14, Y+6	; 0x06
    30fe:	fd 80       	ldd	r15, Y+5	; 0x05
    3100:	0c 81       	ldd	r16, Y+4	; 0x04
    3102:	1b 81       	ldd	r17, Y+3	; 0x03
    3104:	aa 81       	ldd	r26, Y+2	; 0x02
    3106:	b9 81       	ldd	r27, Y+1	; 0x01
    3108:	ce 0f       	add	r28, r30
    310a:	d1 1d       	adc	r29, r1
    310c:	0f b6       	in	r0, 0x3f	; 63
    310e:	f8 94       	cli
    3110:	de bf       	out	0x3e, r29	; 62
    3112:	0f be       	out	0x3f, r0	; 63
    3114:	cd bf       	out	0x3d, r28	; 61
    3116:	ed 01       	movw	r28, r26
    3118:	08 95       	ret

0000311a <itoa>:
    311a:	fb 01       	movw	r30, r22
    311c:	9f 01       	movw	r18, r30
    311e:	e8 94       	clt
    3120:	42 30       	cpi	r20, 0x02	; 2
    3122:	c4 f0       	brlt	.+48     	; 0x3154 <itoa+0x3a>
    3124:	45 32       	cpi	r20, 0x25	; 37
    3126:	b4 f4       	brge	.+44     	; 0x3154 <itoa+0x3a>
    3128:	4a 30       	cpi	r20, 0x0A	; 10
    312a:	29 f4       	brne	.+10     	; 0x3136 <itoa+0x1c>
    312c:	97 fb       	bst	r25, 7
    312e:	1e f4       	brtc	.+6      	; 0x3136 <itoa+0x1c>
    3130:	90 95       	com	r25
    3132:	81 95       	neg	r24
    3134:	9f 4f       	sbci	r25, 0xFF	; 255
    3136:	64 2f       	mov	r22, r20
    3138:	77 27       	eor	r23, r23
    313a:	0e 94 be 18 	call	0x317c	; 0x317c <__udivmodhi4>
    313e:	80 5d       	subi	r24, 0xD0	; 208
    3140:	8a 33       	cpi	r24, 0x3A	; 58
    3142:	0c f0       	brlt	.+2      	; 0x3146 <itoa+0x2c>
    3144:	89 5d       	subi	r24, 0xD9	; 217
    3146:	81 93       	st	Z+, r24
    3148:	cb 01       	movw	r24, r22
    314a:	00 97       	sbiw	r24, 0x00	; 0
    314c:	a1 f7       	brne	.-24     	; 0x3136 <itoa+0x1c>
    314e:	16 f4       	brtc	.+4      	; 0x3154 <itoa+0x3a>
    3150:	5d e2       	ldi	r21, 0x2D	; 45
    3152:	51 93       	st	Z+, r21
    3154:	10 82       	st	Z, r1
    3156:	c9 01       	movw	r24, r18
    3158:	0c 94 ae 18 	jmp	0x315c	; 0x315c <strrev>

0000315c <strrev>:
    315c:	dc 01       	movw	r26, r24
    315e:	fc 01       	movw	r30, r24
    3160:	67 2f       	mov	r22, r23
    3162:	71 91       	ld	r23, Z+
    3164:	77 23       	and	r23, r23
    3166:	e1 f7       	brne	.-8      	; 0x3160 <strrev+0x4>
    3168:	32 97       	sbiw	r30, 0x02	; 2
    316a:	04 c0       	rjmp	.+8      	; 0x3174 <strrev+0x18>
    316c:	7c 91       	ld	r23, X
    316e:	6d 93       	st	X+, r22
    3170:	70 83       	st	Z, r23
    3172:	62 91       	ld	r22, -Z
    3174:	ae 17       	cp	r26, r30
    3176:	bf 07       	cpc	r27, r31
    3178:	c8 f3       	brcs	.-14     	; 0x316c <strrev+0x10>
    317a:	08 95       	ret

0000317c <__udivmodhi4>:
    317c:	aa 1b       	sub	r26, r26
    317e:	bb 1b       	sub	r27, r27
    3180:	51 e1       	ldi	r21, 0x11	; 17
    3182:	07 c0       	rjmp	.+14     	; 0x3192 <__udivmodhi4_ep>

00003184 <__udivmodhi4_loop>:
    3184:	aa 1f       	adc	r26, r26
    3186:	bb 1f       	adc	r27, r27
    3188:	a6 17       	cp	r26, r22
    318a:	b7 07       	cpc	r27, r23
    318c:	10 f0       	brcs	.+4      	; 0x3192 <__udivmodhi4_ep>
    318e:	a6 1b       	sub	r26, r22
    3190:	b7 0b       	sbc	r27, r23

00003192 <__udivmodhi4_ep>:
    3192:	88 1f       	adc	r24, r24
    3194:	99 1f       	adc	r25, r25
    3196:	5a 95       	dec	r21
    3198:	a9 f7       	brne	.-22     	; 0x3184 <__udivmodhi4_loop>
    319a:	80 95       	com	r24
    319c:	90 95       	com	r25
    319e:	bc 01       	movw	r22, r24
    31a0:	cd 01       	movw	r24, r26
    31a2:	08 95       	ret

000031a4 <_exit>:
    31a4:	f8 94       	cli

000031a6 <__stop_program>:
    31a6:	ff cf       	rjmp	.-2      	; 0x31a6 <__stop_program>
