
Smart_Project_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004896  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001c8  00800060  00004896  0000492a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  00800228  00800228  00004af2  2**0
                  ALLOC
  3 .stab         00003f54  00000000  00000000  00004af4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001897  00000000  00000000  00008a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  0000a2df  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000296  00000000  00000000  0000a51f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002cf1  00000000  00000000  0000a7b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000018d7  00000000  00000000  0000d4a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001689  00000000  00000000  0000ed7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000260  00000000  00000000  00010408  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000369  00000000  00000000  00010668  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000e30  00000000  00000000  000109d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011801  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <__vector_1>
       8:	0c 94 be 10 	jmp	0x217c	; 0x217c <__vector_2>
       c:	0c 94 f1 10 	jmp	0x21e2	; 0x21e2 <__vector_3>
      10:	0c 94 90 0f 	jmp	0x1f20	; 0x1f20 <__vector_4>
      14:	0c 94 25 0f 	jmp	0x1e4a	; 0x1e4a <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 df 0b 	jmp	0x17be	; 0x17be <__vector_10>
      2c:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e9       	ldi	r30, 0x96	; 150
      68:	f8 e4       	ldi	r31, 0x48	; 72
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 32       	cpi	r26, 0x28	; 40
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a8 e2       	ldi	r26, 0x28	; 40
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 35       	cpi	r26, 0x5C	; 92
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <main>
      8a:	0c 94 49 24 	jmp	0x4892	; 0x4892 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 1c 03 	call	0x638	; 0x638 <__subsf3>
     1bc:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <__floatundisf>:
     1e8:	a2 e0       	ldi	r26, 0x02	; 2
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ea ef       	ldi	r30, 0xFA	; 250
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	0c 94 12 24 	jmp	0x4824	; 0x4824 <__prologue_saves__>
     1f4:	12 2f       	mov	r17, r18
     1f6:	b3 2e       	mov	r11, r19
     1f8:	a4 2e       	mov	r10, r20
     1fa:	95 2e       	mov	r9, r21
     1fc:	86 2e       	mov	r8, r22
     1fe:	37 2e       	mov	r3, r23
     200:	28 2e       	mov	r2, r24
     202:	9a 83       	std	Y+2, r25	; 0x02
     204:	c2 2e       	mov	r12, r18
     206:	d3 2e       	mov	r13, r19
     208:	e4 2e       	mov	r14, r20
     20a:	f5 2e       	mov	r15, r21
     20c:	a7 01       	movw	r20, r14
     20e:	96 01       	movw	r18, r12
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	70 e0       	ldi	r23, 0x00	; 0
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	21 17       	cp	r18, r17
     21a:	a1 f4       	brne	.+40     	; 0x244 <__floatundisf+0x5c>
     21c:	3b 15       	cp	r19, r11
     21e:	91 f4       	brne	.+36     	; 0x244 <__floatundisf+0x5c>
     220:	4a 15       	cp	r20, r10
     222:	81 f4       	brne	.+32     	; 0x244 <__floatundisf+0x5c>
     224:	59 15       	cp	r21, r9
     226:	71 f4       	brne	.+28     	; 0x244 <__floatundisf+0x5c>
     228:	68 15       	cp	r22, r8
     22a:	61 f4       	brne	.+24     	; 0x244 <__floatundisf+0x5c>
     22c:	73 15       	cp	r23, r3
     22e:	51 f4       	brne	.+20     	; 0x244 <__floatundisf+0x5c>
     230:	82 15       	cp	r24, r2
     232:	41 f4       	brne	.+16     	; 0x244 <__floatundisf+0x5c>
     234:	aa 81       	ldd	r26, Y+2	; 0x02
     236:	9a 17       	cp	r25, r26
     238:	29 f4       	brne	.+10     	; 0x244 <__floatundisf+0x5c>
     23a:	c7 01       	movw	r24, r14
     23c:	b6 01       	movw	r22, r12
     23e:	0e 94 92 06 	call	0xd24	; 0xd24 <__floatunsisf>
     242:	aa c0       	rjmp	.+340    	; 0x398 <__floatundisf+0x1b0>
     244:	21 2f       	mov	r18, r17
     246:	3b 2d       	mov	r19, r11
     248:	4a 2d       	mov	r20, r10
     24a:	59 2d       	mov	r21, r9
     24c:	68 2d       	mov	r22, r8
     24e:	73 2d       	mov	r23, r3
     250:	82 2d       	mov	r24, r2
     252:	9a 81       	ldd	r25, Y+2	; 0x02
     254:	00 e2       	ldi	r16, 0x20	; 32
     256:	0e 94 0b 07 	call	0xe16	; 0xe16 <__lshrdi3>
     25a:	c9 01       	movw	r24, r18
     25c:	da 01       	movw	r26, r20
     25e:	80 30       	cpi	r24, 0x00	; 0
     260:	e0 e0       	ldi	r30, 0x00	; 0
     262:	9e 07       	cpc	r25, r30
     264:	e1 e0       	ldi	r30, 0x01	; 1
     266:	ae 07       	cpc	r26, r30
     268:	e0 e0       	ldi	r30, 0x00	; 0
     26a:	be 07       	cpc	r27, r30
     26c:	80 f4       	brcc	.+32     	; 0x28e <__floatundisf+0xa6>
     26e:	8f 3f       	cpi	r24, 0xFF	; 255
     270:	91 05       	cpc	r25, r1
     272:	a1 05       	cpc	r26, r1
     274:	b1 05       	cpc	r27, r1
     276:	31 f0       	breq	.+12     	; 0x284 <__floatundisf+0x9c>
     278:	28 f0       	brcs	.+10     	; 0x284 <__floatundisf+0x9c>
     27a:	28 e0       	ldi	r18, 0x08	; 8
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	40 e0       	ldi	r20, 0x00	; 0
     280:	50 e0       	ldi	r21, 0x00	; 0
     282:	16 c0       	rjmp	.+44     	; 0x2b0 <__floatundisf+0xc8>
     284:	20 e0       	ldi	r18, 0x00	; 0
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	50 e0       	ldi	r21, 0x00	; 0
     28c:	11 c0       	rjmp	.+34     	; 0x2b0 <__floatundisf+0xc8>
     28e:	80 30       	cpi	r24, 0x00	; 0
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	9f 07       	cpc	r25, r31
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	af 07       	cpc	r26, r31
     298:	f1 e0       	ldi	r31, 0x01	; 1
     29a:	bf 07       	cpc	r27, r31
     29c:	28 f0       	brcs	.+10     	; 0x2a8 <__floatundisf+0xc0>
     29e:	28 e1       	ldi	r18, 0x18	; 24
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	40 e0       	ldi	r20, 0x00	; 0
     2a4:	50 e0       	ldi	r21, 0x00	; 0
     2a6:	04 c0       	rjmp	.+8      	; 0x2b0 <__floatundisf+0xc8>
     2a8:	20 e1       	ldi	r18, 0x10	; 16
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	40 e0       	ldi	r20, 0x00	; 0
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	02 2e       	mov	r0, r18
     2b2:	04 c0       	rjmp	.+8      	; 0x2bc <__floatundisf+0xd4>
     2b4:	b6 95       	lsr	r27
     2b6:	a7 95       	ror	r26
     2b8:	97 95       	ror	r25
     2ba:	87 95       	ror	r24
     2bc:	0a 94       	dec	r0
     2be:	d2 f7       	brpl	.-12     	; 0x2b4 <__floatundisf+0xcc>
     2c0:	fc 01       	movw	r30, r24
     2c2:	e1 5f       	subi	r30, 0xF1	; 241
     2c4:	fe 4f       	sbci	r31, 0xFE	; 254
     2c6:	80 81       	ld	r24, Z
     2c8:	29 01       	movw	r4, r18
     2ca:	3a 01       	movw	r6, r20
     2cc:	48 0e       	add	r4, r24
     2ce:	51 1c       	adc	r5, r1
     2d0:	61 1c       	adc	r6, r1
     2d2:	71 1c       	adc	r7, r1
     2d4:	49 82       	std	Y+1, r4	; 0x01
     2d6:	21 2f       	mov	r18, r17
     2d8:	3b 2d       	mov	r19, r11
     2da:	4a 2d       	mov	r20, r10
     2dc:	59 2d       	mov	r21, r9
     2de:	68 2d       	mov	r22, r8
     2e0:	73 2d       	mov	r23, r3
     2e2:	82 2d       	mov	r24, r2
     2e4:	9a 81       	ldd	r25, Y+2	; 0x02
     2e6:	04 2d       	mov	r16, r4
     2e8:	0e 94 0b 07 	call	0xe16	; 0xe16 <__lshrdi3>
     2ec:	c9 01       	movw	r24, r18
     2ee:	da 01       	movw	r26, r20
     2f0:	4c 01       	movw	r8, r24
     2f2:	5d 01       	movw	r10, r26
     2f4:	80 e2       	ldi	r24, 0x20	; 32
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	84 19       	sub	r24, r4
     2fa:	95 09       	sbc	r25, r5
     2fc:	04 c0       	rjmp	.+8      	; 0x306 <__floatundisf+0x11e>
     2fe:	cc 0c       	add	r12, r12
     300:	dd 1c       	adc	r13, r13
     302:	ee 1c       	adc	r14, r14
     304:	ff 1c       	adc	r15, r15
     306:	8a 95       	dec	r24
     308:	d2 f7       	brpl	.-12     	; 0x2fe <__floatundisf+0x116>
     30a:	c1 14       	cp	r12, r1
     30c:	d1 04       	cpc	r13, r1
     30e:	e1 04       	cpc	r14, r1
     310:	f1 04       	cpc	r15, r1
     312:	41 f0       	breq	.+16     	; 0x324 <__floatundisf+0x13c>
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	a0 e0       	ldi	r26, 0x00	; 0
     31a:	b0 e0       	ldi	r27, 0x00	; 0
     31c:	88 2a       	or	r8, r24
     31e:	99 2a       	or	r9, r25
     320:	aa 2a       	or	r10, r26
     322:	bb 2a       	or	r11, r27
     324:	90 e2       	ldi	r25, 0x20	; 32
     326:	49 16       	cp	r4, r25
     328:	51 04       	cpc	r5, r1
     32a:	61 04       	cpc	r6, r1
     32c:	71 04       	cpc	r7, r1
     32e:	59 f4       	brne	.+22     	; 0x346 <__floatundisf+0x15e>
     330:	0f 2e       	mov	r0, r31
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	ef 2e       	mov	r14, r31
     336:	f0 e0       	ldi	r31, 0x00	; 0
     338:	ff 2e       	mov	r15, r31
     33a:	f0 e8       	ldi	r31, 0x80	; 128
     33c:	0f 2f       	mov	r16, r31
     33e:	ff e4       	ldi	r31, 0x4F	; 79
     340:	1f 2f       	mov	r17, r31
     342:	f0 2d       	mov	r31, r0
     344:	21 c0       	rjmp	.+66     	; 0x388 <__floatundisf+0x1a0>
     346:	af e1       	ldi	r26, 0x1F	; 31
     348:	4a 16       	cp	r4, r26
     34a:	51 04       	cpc	r5, r1
     34c:	61 04       	cpc	r6, r1
     34e:	71 04       	cpc	r7, r1
     350:	59 f4       	brne	.+22     	; 0x368 <__floatundisf+0x180>
     352:	0f 2e       	mov	r0, r31
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	ef 2e       	mov	r14, r31
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	ff 2e       	mov	r15, r31
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	0f 2f       	mov	r16, r31
     360:	ff e4       	ldi	r31, 0x4F	; 79
     362:	1f 2f       	mov	r17, r31
     364:	f0 2d       	mov	r31, r0
     366:	10 c0       	rjmp	.+32     	; 0x388 <__floatundisf+0x1a0>
     368:	61 e0       	ldi	r22, 0x01	; 1
     36a:	70 e0       	ldi	r23, 0x00	; 0
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	09 80       	ldd	r0, Y+1	; 0x01
     372:	04 c0       	rjmp	.+8      	; 0x37c <__floatundisf+0x194>
     374:	66 0f       	add	r22, r22
     376:	77 1f       	adc	r23, r23
     378:	88 1f       	adc	r24, r24
     37a:	99 1f       	adc	r25, r25
     37c:	0a 94       	dec	r0
     37e:	d2 f7       	brpl	.-12     	; 0x374 <__floatundisf+0x18c>
     380:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__floatsisf>
     384:	7b 01       	movw	r14, r22
     386:	8c 01       	movw	r16, r24
     388:	c5 01       	movw	r24, r10
     38a:	b4 01       	movw	r22, r8
     38c:	0e 94 92 06 	call	0xd24	; 0xd24 <__floatunsisf>
     390:	a8 01       	movw	r20, r16
     392:	97 01       	movw	r18, r14
     394:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
     398:	22 96       	adiw	r28, 0x02	; 2
     39a:	e2 e1       	ldi	r30, 0x12	; 18
     39c:	0c 94 2e 24 	jmp	0x485c	; 0x485c <__epilogue_restores__>

000003a0 <_fpadd_parts>:
     3a0:	a0 e0       	ldi	r26, 0x00	; 0
     3a2:	b0 e0       	ldi	r27, 0x00	; 0
     3a4:	e6 ed       	ldi	r30, 0xD6	; 214
     3a6:	f1 e0       	ldi	r31, 0x01	; 1
     3a8:	0c 94 12 24 	jmp	0x4824	; 0x4824 <__prologue_saves__>
     3ac:	dc 01       	movw	r26, r24
     3ae:	2b 01       	movw	r4, r22
     3b0:	fa 01       	movw	r30, r20
     3b2:	9c 91       	ld	r25, X
     3b4:	92 30       	cpi	r25, 0x02	; 2
     3b6:	08 f4       	brcc	.+2      	; 0x3ba <_fpadd_parts+0x1a>
     3b8:	39 c1       	rjmp	.+626    	; 0x62c <_fpadd_parts+0x28c>
     3ba:	eb 01       	movw	r28, r22
     3bc:	88 81       	ld	r24, Y
     3be:	82 30       	cpi	r24, 0x02	; 2
     3c0:	08 f4       	brcc	.+2      	; 0x3c4 <_fpadd_parts+0x24>
     3c2:	33 c1       	rjmp	.+614    	; 0x62a <_fpadd_parts+0x28a>
     3c4:	94 30       	cpi	r25, 0x04	; 4
     3c6:	69 f4       	brne	.+26     	; 0x3e2 <_fpadd_parts+0x42>
     3c8:	84 30       	cpi	r24, 0x04	; 4
     3ca:	09 f0       	breq	.+2      	; 0x3ce <_fpadd_parts+0x2e>
     3cc:	2f c1       	rjmp	.+606    	; 0x62c <_fpadd_parts+0x28c>
     3ce:	11 96       	adiw	r26, 0x01	; 1
     3d0:	9c 91       	ld	r25, X
     3d2:	11 97       	sbiw	r26, 0x01	; 1
     3d4:	89 81       	ldd	r24, Y+1	; 0x01
     3d6:	98 17       	cp	r25, r24
     3d8:	09 f4       	brne	.+2      	; 0x3dc <_fpadd_parts+0x3c>
     3da:	28 c1       	rjmp	.+592    	; 0x62c <_fpadd_parts+0x28c>
     3dc:	a7 e0       	ldi	r26, 0x07	; 7
     3de:	b1 e0       	ldi	r27, 0x01	; 1
     3e0:	25 c1       	rjmp	.+586    	; 0x62c <_fpadd_parts+0x28c>
     3e2:	84 30       	cpi	r24, 0x04	; 4
     3e4:	09 f4       	brne	.+2      	; 0x3e8 <_fpadd_parts+0x48>
     3e6:	21 c1       	rjmp	.+578    	; 0x62a <_fpadd_parts+0x28a>
     3e8:	82 30       	cpi	r24, 0x02	; 2
     3ea:	a9 f4       	brne	.+42     	; 0x416 <_fpadd_parts+0x76>
     3ec:	92 30       	cpi	r25, 0x02	; 2
     3ee:	09 f0       	breq	.+2      	; 0x3f2 <_fpadd_parts+0x52>
     3f0:	1d c1       	rjmp	.+570    	; 0x62c <_fpadd_parts+0x28c>
     3f2:	9a 01       	movw	r18, r20
     3f4:	ad 01       	movw	r20, r26
     3f6:	88 e0       	ldi	r24, 0x08	; 8
     3f8:	ea 01       	movw	r28, r20
     3fa:	09 90       	ld	r0, Y+
     3fc:	ae 01       	movw	r20, r28
     3fe:	e9 01       	movw	r28, r18
     400:	09 92       	st	Y+, r0
     402:	9e 01       	movw	r18, r28
     404:	81 50       	subi	r24, 0x01	; 1
     406:	c1 f7       	brne	.-16     	; 0x3f8 <_fpadd_parts+0x58>
     408:	e2 01       	movw	r28, r4
     40a:	89 81       	ldd	r24, Y+1	; 0x01
     40c:	11 96       	adiw	r26, 0x01	; 1
     40e:	9c 91       	ld	r25, X
     410:	89 23       	and	r24, r25
     412:	81 83       	std	Z+1, r24	; 0x01
     414:	08 c1       	rjmp	.+528    	; 0x626 <_fpadd_parts+0x286>
     416:	92 30       	cpi	r25, 0x02	; 2
     418:	09 f4       	brne	.+2      	; 0x41c <_fpadd_parts+0x7c>
     41a:	07 c1       	rjmp	.+526    	; 0x62a <_fpadd_parts+0x28a>
     41c:	12 96       	adiw	r26, 0x02	; 2
     41e:	2d 90       	ld	r2, X+
     420:	3c 90       	ld	r3, X
     422:	13 97       	sbiw	r26, 0x03	; 3
     424:	eb 01       	movw	r28, r22
     426:	8a 81       	ldd	r24, Y+2	; 0x02
     428:	9b 81       	ldd	r25, Y+3	; 0x03
     42a:	14 96       	adiw	r26, 0x04	; 4
     42c:	ad 90       	ld	r10, X+
     42e:	bd 90       	ld	r11, X+
     430:	cd 90       	ld	r12, X+
     432:	dc 90       	ld	r13, X
     434:	17 97       	sbiw	r26, 0x07	; 7
     436:	ec 80       	ldd	r14, Y+4	; 0x04
     438:	fd 80       	ldd	r15, Y+5	; 0x05
     43a:	0e 81       	ldd	r16, Y+6	; 0x06
     43c:	1f 81       	ldd	r17, Y+7	; 0x07
     43e:	91 01       	movw	r18, r2
     440:	28 1b       	sub	r18, r24
     442:	39 0b       	sbc	r19, r25
     444:	b9 01       	movw	r22, r18
     446:	37 ff       	sbrs	r19, 7
     448:	04 c0       	rjmp	.+8      	; 0x452 <_fpadd_parts+0xb2>
     44a:	66 27       	eor	r22, r22
     44c:	77 27       	eor	r23, r23
     44e:	62 1b       	sub	r22, r18
     450:	73 0b       	sbc	r23, r19
     452:	60 32       	cpi	r22, 0x20	; 32
     454:	71 05       	cpc	r23, r1
     456:	0c f0       	brlt	.+2      	; 0x45a <_fpadd_parts+0xba>
     458:	61 c0       	rjmp	.+194    	; 0x51c <_fpadd_parts+0x17c>
     45a:	12 16       	cp	r1, r18
     45c:	13 06       	cpc	r1, r19
     45e:	6c f5       	brge	.+90     	; 0x4ba <_fpadd_parts+0x11a>
     460:	37 01       	movw	r6, r14
     462:	48 01       	movw	r8, r16
     464:	06 2e       	mov	r0, r22
     466:	04 c0       	rjmp	.+8      	; 0x470 <_fpadd_parts+0xd0>
     468:	96 94       	lsr	r9
     46a:	87 94       	ror	r8
     46c:	77 94       	ror	r7
     46e:	67 94       	ror	r6
     470:	0a 94       	dec	r0
     472:	d2 f7       	brpl	.-12     	; 0x468 <_fpadd_parts+0xc8>
     474:	21 e0       	ldi	r18, 0x01	; 1
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	40 e0       	ldi	r20, 0x00	; 0
     47a:	50 e0       	ldi	r21, 0x00	; 0
     47c:	04 c0       	rjmp	.+8      	; 0x486 <_fpadd_parts+0xe6>
     47e:	22 0f       	add	r18, r18
     480:	33 1f       	adc	r19, r19
     482:	44 1f       	adc	r20, r20
     484:	55 1f       	adc	r21, r21
     486:	6a 95       	dec	r22
     488:	d2 f7       	brpl	.-12     	; 0x47e <_fpadd_parts+0xde>
     48a:	21 50       	subi	r18, 0x01	; 1
     48c:	30 40       	sbci	r19, 0x00	; 0
     48e:	40 40       	sbci	r20, 0x00	; 0
     490:	50 40       	sbci	r21, 0x00	; 0
     492:	2e 21       	and	r18, r14
     494:	3f 21       	and	r19, r15
     496:	40 23       	and	r20, r16
     498:	51 23       	and	r21, r17
     49a:	21 15       	cp	r18, r1
     49c:	31 05       	cpc	r19, r1
     49e:	41 05       	cpc	r20, r1
     4a0:	51 05       	cpc	r21, r1
     4a2:	21 f0       	breq	.+8      	; 0x4ac <_fpadd_parts+0x10c>
     4a4:	21 e0       	ldi	r18, 0x01	; 1
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	40 e0       	ldi	r20, 0x00	; 0
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	79 01       	movw	r14, r18
     4ae:	8a 01       	movw	r16, r20
     4b0:	e6 28       	or	r14, r6
     4b2:	f7 28       	or	r15, r7
     4b4:	08 29       	or	r16, r8
     4b6:	19 29       	or	r17, r9
     4b8:	3c c0       	rjmp	.+120    	; 0x532 <_fpadd_parts+0x192>
     4ba:	23 2b       	or	r18, r19
     4bc:	d1 f1       	breq	.+116    	; 0x532 <_fpadd_parts+0x192>
     4be:	26 0e       	add	r2, r22
     4c0:	37 1e       	adc	r3, r23
     4c2:	35 01       	movw	r6, r10
     4c4:	46 01       	movw	r8, r12
     4c6:	06 2e       	mov	r0, r22
     4c8:	04 c0       	rjmp	.+8      	; 0x4d2 <_fpadd_parts+0x132>
     4ca:	96 94       	lsr	r9
     4cc:	87 94       	ror	r8
     4ce:	77 94       	ror	r7
     4d0:	67 94       	ror	r6
     4d2:	0a 94       	dec	r0
     4d4:	d2 f7       	brpl	.-12     	; 0x4ca <_fpadd_parts+0x12a>
     4d6:	21 e0       	ldi	r18, 0x01	; 1
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	40 e0       	ldi	r20, 0x00	; 0
     4dc:	50 e0       	ldi	r21, 0x00	; 0
     4de:	04 c0       	rjmp	.+8      	; 0x4e8 <_fpadd_parts+0x148>
     4e0:	22 0f       	add	r18, r18
     4e2:	33 1f       	adc	r19, r19
     4e4:	44 1f       	adc	r20, r20
     4e6:	55 1f       	adc	r21, r21
     4e8:	6a 95       	dec	r22
     4ea:	d2 f7       	brpl	.-12     	; 0x4e0 <_fpadd_parts+0x140>
     4ec:	21 50       	subi	r18, 0x01	; 1
     4ee:	30 40       	sbci	r19, 0x00	; 0
     4f0:	40 40       	sbci	r20, 0x00	; 0
     4f2:	50 40       	sbci	r21, 0x00	; 0
     4f4:	2a 21       	and	r18, r10
     4f6:	3b 21       	and	r19, r11
     4f8:	4c 21       	and	r20, r12
     4fa:	5d 21       	and	r21, r13
     4fc:	21 15       	cp	r18, r1
     4fe:	31 05       	cpc	r19, r1
     500:	41 05       	cpc	r20, r1
     502:	51 05       	cpc	r21, r1
     504:	21 f0       	breq	.+8      	; 0x50e <_fpadd_parts+0x16e>
     506:	21 e0       	ldi	r18, 0x01	; 1
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	40 e0       	ldi	r20, 0x00	; 0
     50c:	50 e0       	ldi	r21, 0x00	; 0
     50e:	59 01       	movw	r10, r18
     510:	6a 01       	movw	r12, r20
     512:	a6 28       	or	r10, r6
     514:	b7 28       	or	r11, r7
     516:	c8 28       	or	r12, r8
     518:	d9 28       	or	r13, r9
     51a:	0b c0       	rjmp	.+22     	; 0x532 <_fpadd_parts+0x192>
     51c:	82 15       	cp	r24, r2
     51e:	93 05       	cpc	r25, r3
     520:	2c f0       	brlt	.+10     	; 0x52c <_fpadd_parts+0x18c>
     522:	1c 01       	movw	r2, r24
     524:	aa 24       	eor	r10, r10
     526:	bb 24       	eor	r11, r11
     528:	65 01       	movw	r12, r10
     52a:	03 c0       	rjmp	.+6      	; 0x532 <_fpadd_parts+0x192>
     52c:	ee 24       	eor	r14, r14
     52e:	ff 24       	eor	r15, r15
     530:	87 01       	movw	r16, r14
     532:	11 96       	adiw	r26, 0x01	; 1
     534:	9c 91       	ld	r25, X
     536:	d2 01       	movw	r26, r4
     538:	11 96       	adiw	r26, 0x01	; 1
     53a:	8c 91       	ld	r24, X
     53c:	98 17       	cp	r25, r24
     53e:	09 f4       	brne	.+2      	; 0x542 <_fpadd_parts+0x1a2>
     540:	45 c0       	rjmp	.+138    	; 0x5cc <_fpadd_parts+0x22c>
     542:	99 23       	and	r25, r25
     544:	39 f0       	breq	.+14     	; 0x554 <_fpadd_parts+0x1b4>
     546:	a8 01       	movw	r20, r16
     548:	97 01       	movw	r18, r14
     54a:	2a 19       	sub	r18, r10
     54c:	3b 09       	sbc	r19, r11
     54e:	4c 09       	sbc	r20, r12
     550:	5d 09       	sbc	r21, r13
     552:	06 c0       	rjmp	.+12     	; 0x560 <_fpadd_parts+0x1c0>
     554:	a6 01       	movw	r20, r12
     556:	95 01       	movw	r18, r10
     558:	2e 19       	sub	r18, r14
     55a:	3f 09       	sbc	r19, r15
     55c:	40 0b       	sbc	r20, r16
     55e:	51 0b       	sbc	r21, r17
     560:	57 fd       	sbrc	r21, 7
     562:	08 c0       	rjmp	.+16     	; 0x574 <_fpadd_parts+0x1d4>
     564:	11 82       	std	Z+1, r1	; 0x01
     566:	33 82       	std	Z+3, r3	; 0x03
     568:	22 82       	std	Z+2, r2	; 0x02
     56a:	24 83       	std	Z+4, r18	; 0x04
     56c:	35 83       	std	Z+5, r19	; 0x05
     56e:	46 83       	std	Z+6, r20	; 0x06
     570:	57 83       	std	Z+7, r21	; 0x07
     572:	1d c0       	rjmp	.+58     	; 0x5ae <_fpadd_parts+0x20e>
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	81 83       	std	Z+1, r24	; 0x01
     578:	33 82       	std	Z+3, r3	; 0x03
     57a:	22 82       	std	Z+2, r2	; 0x02
     57c:	88 27       	eor	r24, r24
     57e:	99 27       	eor	r25, r25
     580:	dc 01       	movw	r26, r24
     582:	82 1b       	sub	r24, r18
     584:	93 0b       	sbc	r25, r19
     586:	a4 0b       	sbc	r26, r20
     588:	b5 0b       	sbc	r27, r21
     58a:	84 83       	std	Z+4, r24	; 0x04
     58c:	95 83       	std	Z+5, r25	; 0x05
     58e:	a6 83       	std	Z+6, r26	; 0x06
     590:	b7 83       	std	Z+7, r27	; 0x07
     592:	0d c0       	rjmp	.+26     	; 0x5ae <_fpadd_parts+0x20e>
     594:	22 0f       	add	r18, r18
     596:	33 1f       	adc	r19, r19
     598:	44 1f       	adc	r20, r20
     59a:	55 1f       	adc	r21, r21
     59c:	24 83       	std	Z+4, r18	; 0x04
     59e:	35 83       	std	Z+5, r19	; 0x05
     5a0:	46 83       	std	Z+6, r20	; 0x06
     5a2:	57 83       	std	Z+7, r21	; 0x07
     5a4:	82 81       	ldd	r24, Z+2	; 0x02
     5a6:	93 81       	ldd	r25, Z+3	; 0x03
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	93 83       	std	Z+3, r25	; 0x03
     5ac:	82 83       	std	Z+2, r24	; 0x02
     5ae:	24 81       	ldd	r18, Z+4	; 0x04
     5b0:	35 81       	ldd	r19, Z+5	; 0x05
     5b2:	46 81       	ldd	r20, Z+6	; 0x06
     5b4:	57 81       	ldd	r21, Z+7	; 0x07
     5b6:	da 01       	movw	r26, r20
     5b8:	c9 01       	movw	r24, r18
     5ba:	01 97       	sbiw	r24, 0x01	; 1
     5bc:	a1 09       	sbc	r26, r1
     5be:	b1 09       	sbc	r27, r1
     5c0:	8f 5f       	subi	r24, 0xFF	; 255
     5c2:	9f 4f       	sbci	r25, 0xFF	; 255
     5c4:	af 4f       	sbci	r26, 0xFF	; 255
     5c6:	bf 43       	sbci	r27, 0x3F	; 63
     5c8:	28 f3       	brcs	.-54     	; 0x594 <_fpadd_parts+0x1f4>
     5ca:	0b c0       	rjmp	.+22     	; 0x5e2 <_fpadd_parts+0x242>
     5cc:	91 83       	std	Z+1, r25	; 0x01
     5ce:	33 82       	std	Z+3, r3	; 0x03
     5d0:	22 82       	std	Z+2, r2	; 0x02
     5d2:	ea 0c       	add	r14, r10
     5d4:	fb 1c       	adc	r15, r11
     5d6:	0c 1d       	adc	r16, r12
     5d8:	1d 1d       	adc	r17, r13
     5da:	e4 82       	std	Z+4, r14	; 0x04
     5dc:	f5 82       	std	Z+5, r15	; 0x05
     5de:	06 83       	std	Z+6, r16	; 0x06
     5e0:	17 83       	std	Z+7, r17	; 0x07
     5e2:	83 e0       	ldi	r24, 0x03	; 3
     5e4:	80 83       	st	Z, r24
     5e6:	24 81       	ldd	r18, Z+4	; 0x04
     5e8:	35 81       	ldd	r19, Z+5	; 0x05
     5ea:	46 81       	ldd	r20, Z+6	; 0x06
     5ec:	57 81       	ldd	r21, Z+7	; 0x07
     5ee:	57 ff       	sbrs	r21, 7
     5f0:	1a c0       	rjmp	.+52     	; 0x626 <_fpadd_parts+0x286>
     5f2:	c9 01       	movw	r24, r18
     5f4:	aa 27       	eor	r26, r26
     5f6:	97 fd       	sbrc	r25, 7
     5f8:	a0 95       	com	r26
     5fa:	ba 2f       	mov	r27, r26
     5fc:	81 70       	andi	r24, 0x01	; 1
     5fe:	90 70       	andi	r25, 0x00	; 0
     600:	a0 70       	andi	r26, 0x00	; 0
     602:	b0 70       	andi	r27, 0x00	; 0
     604:	56 95       	lsr	r21
     606:	47 95       	ror	r20
     608:	37 95       	ror	r19
     60a:	27 95       	ror	r18
     60c:	82 2b       	or	r24, r18
     60e:	93 2b       	or	r25, r19
     610:	a4 2b       	or	r26, r20
     612:	b5 2b       	or	r27, r21
     614:	84 83       	std	Z+4, r24	; 0x04
     616:	95 83       	std	Z+5, r25	; 0x05
     618:	a6 83       	std	Z+6, r26	; 0x06
     61a:	b7 83       	std	Z+7, r27	; 0x07
     61c:	82 81       	ldd	r24, Z+2	; 0x02
     61e:	93 81       	ldd	r25, Z+3	; 0x03
     620:	01 96       	adiw	r24, 0x01	; 1
     622:	93 83       	std	Z+3, r25	; 0x03
     624:	82 83       	std	Z+2, r24	; 0x02
     626:	df 01       	movw	r26, r30
     628:	01 c0       	rjmp	.+2      	; 0x62c <_fpadd_parts+0x28c>
     62a:	d2 01       	movw	r26, r4
     62c:	cd 01       	movw	r24, r26
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62
     632:	e2 e1       	ldi	r30, 0x12	; 18
     634:	0c 94 2e 24 	jmp	0x485c	; 0x485c <__epilogue_restores__>

00000638 <__subsf3>:
     638:	a0 e2       	ldi	r26, 0x20	; 32
     63a:	b0 e0       	ldi	r27, 0x00	; 0
     63c:	e2 e2       	ldi	r30, 0x22	; 34
     63e:	f3 e0       	ldi	r31, 0x03	; 3
     640:	0c 94 1e 24 	jmp	0x483c	; 0x483c <__prologue_saves__+0x18>
     644:	69 83       	std	Y+1, r22	; 0x01
     646:	7a 83       	std	Y+2, r23	; 0x02
     648:	8b 83       	std	Y+3, r24	; 0x03
     64a:	9c 83       	std	Y+4, r25	; 0x04
     64c:	2d 83       	std	Y+5, r18	; 0x05
     64e:	3e 83       	std	Y+6, r19	; 0x06
     650:	4f 83       	std	Y+7, r20	; 0x07
     652:	58 87       	std	Y+8, r21	; 0x08
     654:	e9 e0       	ldi	r30, 0x09	; 9
     656:	ee 2e       	mov	r14, r30
     658:	f1 2c       	mov	r15, r1
     65a:	ec 0e       	add	r14, r28
     65c:	fd 1e       	adc	r15, r29
     65e:	ce 01       	movw	r24, r28
     660:	01 96       	adiw	r24, 0x01	; 1
     662:	b7 01       	movw	r22, r14
     664:	0e 94 ae 08 	call	0x115c	; 0x115c <__unpack_f>
     668:	8e 01       	movw	r16, r28
     66a:	0f 5e       	subi	r16, 0xEF	; 239
     66c:	1f 4f       	sbci	r17, 0xFF	; 255
     66e:	ce 01       	movw	r24, r28
     670:	05 96       	adiw	r24, 0x05	; 5
     672:	b8 01       	movw	r22, r16
     674:	0e 94 ae 08 	call	0x115c	; 0x115c <__unpack_f>
     678:	8a 89       	ldd	r24, Y+18	; 0x12
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	89 27       	eor	r24, r25
     67e:	8a 8b       	std	Y+18, r24	; 0x12
     680:	c7 01       	movw	r24, r14
     682:	b8 01       	movw	r22, r16
     684:	ae 01       	movw	r20, r28
     686:	47 5e       	subi	r20, 0xE7	; 231
     688:	5f 4f       	sbci	r21, 0xFF	; 255
     68a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_fpadd_parts>
     68e:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__pack_f>
     692:	a0 96       	adiw	r28, 0x20	; 32
     694:	e6 e0       	ldi	r30, 0x06	; 6
     696:	0c 94 3a 24 	jmp	0x4874	; 0x4874 <__epilogue_restores__+0x18>

0000069a <__addsf3>:
     69a:	a0 e2       	ldi	r26, 0x20	; 32
     69c:	b0 e0       	ldi	r27, 0x00	; 0
     69e:	e3 e5       	ldi	r30, 0x53	; 83
     6a0:	f3 e0       	ldi	r31, 0x03	; 3
     6a2:	0c 94 1e 24 	jmp	0x483c	; 0x483c <__prologue_saves__+0x18>
     6a6:	69 83       	std	Y+1, r22	; 0x01
     6a8:	7a 83       	std	Y+2, r23	; 0x02
     6aa:	8b 83       	std	Y+3, r24	; 0x03
     6ac:	9c 83       	std	Y+4, r25	; 0x04
     6ae:	2d 83       	std	Y+5, r18	; 0x05
     6b0:	3e 83       	std	Y+6, r19	; 0x06
     6b2:	4f 83       	std	Y+7, r20	; 0x07
     6b4:	58 87       	std	Y+8, r21	; 0x08
     6b6:	f9 e0       	ldi	r31, 0x09	; 9
     6b8:	ef 2e       	mov	r14, r31
     6ba:	f1 2c       	mov	r15, r1
     6bc:	ec 0e       	add	r14, r28
     6be:	fd 1e       	adc	r15, r29
     6c0:	ce 01       	movw	r24, r28
     6c2:	01 96       	adiw	r24, 0x01	; 1
     6c4:	b7 01       	movw	r22, r14
     6c6:	0e 94 ae 08 	call	0x115c	; 0x115c <__unpack_f>
     6ca:	8e 01       	movw	r16, r28
     6cc:	0f 5e       	subi	r16, 0xEF	; 239
     6ce:	1f 4f       	sbci	r17, 0xFF	; 255
     6d0:	ce 01       	movw	r24, r28
     6d2:	05 96       	adiw	r24, 0x05	; 5
     6d4:	b8 01       	movw	r22, r16
     6d6:	0e 94 ae 08 	call	0x115c	; 0x115c <__unpack_f>
     6da:	c7 01       	movw	r24, r14
     6dc:	b8 01       	movw	r22, r16
     6de:	ae 01       	movw	r20, r28
     6e0:	47 5e       	subi	r20, 0xE7	; 231
     6e2:	5f 4f       	sbci	r21, 0xFF	; 255
     6e4:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_fpadd_parts>
     6e8:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__pack_f>
     6ec:	a0 96       	adiw	r28, 0x20	; 32
     6ee:	e6 e0       	ldi	r30, 0x06	; 6
     6f0:	0c 94 3a 24 	jmp	0x4874	; 0x4874 <__epilogue_restores__+0x18>

000006f4 <__mulsf3>:
     6f4:	a0 e2       	ldi	r26, 0x20	; 32
     6f6:	b0 e0       	ldi	r27, 0x00	; 0
     6f8:	e0 e8       	ldi	r30, 0x80	; 128
     6fa:	f3 e0       	ldi	r31, 0x03	; 3
     6fc:	0c 94 12 24 	jmp	0x4824	; 0x4824 <__prologue_saves__>
     700:	69 83       	std	Y+1, r22	; 0x01
     702:	7a 83       	std	Y+2, r23	; 0x02
     704:	8b 83       	std	Y+3, r24	; 0x03
     706:	9c 83       	std	Y+4, r25	; 0x04
     708:	2d 83       	std	Y+5, r18	; 0x05
     70a:	3e 83       	std	Y+6, r19	; 0x06
     70c:	4f 83       	std	Y+7, r20	; 0x07
     70e:	58 87       	std	Y+8, r21	; 0x08
     710:	ce 01       	movw	r24, r28
     712:	01 96       	adiw	r24, 0x01	; 1
     714:	be 01       	movw	r22, r28
     716:	67 5f       	subi	r22, 0xF7	; 247
     718:	7f 4f       	sbci	r23, 0xFF	; 255
     71a:	0e 94 ae 08 	call	0x115c	; 0x115c <__unpack_f>
     71e:	ce 01       	movw	r24, r28
     720:	05 96       	adiw	r24, 0x05	; 5
     722:	be 01       	movw	r22, r28
     724:	6f 5e       	subi	r22, 0xEF	; 239
     726:	7f 4f       	sbci	r23, 0xFF	; 255
     728:	0e 94 ae 08 	call	0x115c	; 0x115c <__unpack_f>
     72c:	99 85       	ldd	r25, Y+9	; 0x09
     72e:	92 30       	cpi	r25, 0x02	; 2
     730:	88 f0       	brcs	.+34     	; 0x754 <__mulsf3+0x60>
     732:	89 89       	ldd	r24, Y+17	; 0x11
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	c8 f0       	brcs	.+50     	; 0x76a <__mulsf3+0x76>
     738:	94 30       	cpi	r25, 0x04	; 4
     73a:	19 f4       	brne	.+6      	; 0x742 <__mulsf3+0x4e>
     73c:	82 30       	cpi	r24, 0x02	; 2
     73e:	51 f4       	brne	.+20     	; 0x754 <__mulsf3+0x60>
     740:	04 c0       	rjmp	.+8      	; 0x74a <__mulsf3+0x56>
     742:	84 30       	cpi	r24, 0x04	; 4
     744:	29 f4       	brne	.+10     	; 0x750 <__mulsf3+0x5c>
     746:	92 30       	cpi	r25, 0x02	; 2
     748:	81 f4       	brne	.+32     	; 0x76a <__mulsf3+0x76>
     74a:	87 e0       	ldi	r24, 0x07	; 7
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	c6 c0       	rjmp	.+396    	; 0x8dc <__stack+0x7d>
     750:	92 30       	cpi	r25, 0x02	; 2
     752:	49 f4       	brne	.+18     	; 0x766 <__mulsf3+0x72>
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	9a 85       	ldd	r25, Y+10	; 0x0a
     758:	8a 89       	ldd	r24, Y+18	; 0x12
     75a:	98 13       	cpse	r25, r24
     75c:	21 e0       	ldi	r18, 0x01	; 1
     75e:	2a 87       	std	Y+10, r18	; 0x0a
     760:	ce 01       	movw	r24, r28
     762:	09 96       	adiw	r24, 0x09	; 9
     764:	bb c0       	rjmp	.+374    	; 0x8dc <__stack+0x7d>
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	49 f4       	brne	.+18     	; 0x77c <__mulsf3+0x88>
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	9a 85       	ldd	r25, Y+10	; 0x0a
     76e:	8a 89       	ldd	r24, Y+18	; 0x12
     770:	98 13       	cpse	r25, r24
     772:	21 e0       	ldi	r18, 0x01	; 1
     774:	2a 8b       	std	Y+18, r18	; 0x12
     776:	ce 01       	movw	r24, r28
     778:	41 96       	adiw	r24, 0x11	; 17
     77a:	b0 c0       	rjmp	.+352    	; 0x8dc <__stack+0x7d>
     77c:	2d 84       	ldd	r2, Y+13	; 0x0d
     77e:	3e 84       	ldd	r3, Y+14	; 0x0e
     780:	4f 84       	ldd	r4, Y+15	; 0x0f
     782:	58 88       	ldd	r5, Y+16	; 0x10
     784:	6d 88       	ldd	r6, Y+21	; 0x15
     786:	7e 88       	ldd	r7, Y+22	; 0x16
     788:	8f 88       	ldd	r8, Y+23	; 0x17
     78a:	98 8c       	ldd	r9, Y+24	; 0x18
     78c:	ee 24       	eor	r14, r14
     78e:	ff 24       	eor	r15, r15
     790:	87 01       	movw	r16, r14
     792:	aa 24       	eor	r10, r10
     794:	bb 24       	eor	r11, r11
     796:	65 01       	movw	r12, r10
     798:	40 e0       	ldi	r20, 0x00	; 0
     79a:	50 e0       	ldi	r21, 0x00	; 0
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	e0 e0       	ldi	r30, 0x00	; 0
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	c1 01       	movw	r24, r2
     7a6:	81 70       	andi	r24, 0x01	; 1
     7a8:	90 70       	andi	r25, 0x00	; 0
     7aa:	89 2b       	or	r24, r25
     7ac:	e9 f0       	breq	.+58     	; 0x7e8 <__mulsf3+0xf4>
     7ae:	e6 0c       	add	r14, r6
     7b0:	f7 1c       	adc	r15, r7
     7b2:	08 1d       	adc	r16, r8
     7b4:	19 1d       	adc	r17, r9
     7b6:	9a 01       	movw	r18, r20
     7b8:	ab 01       	movw	r20, r22
     7ba:	2a 0d       	add	r18, r10
     7bc:	3b 1d       	adc	r19, r11
     7be:	4c 1d       	adc	r20, r12
     7c0:	5d 1d       	adc	r21, r13
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	a0 e0       	ldi	r26, 0x00	; 0
     7c8:	b0 e0       	ldi	r27, 0x00	; 0
     7ca:	e6 14       	cp	r14, r6
     7cc:	f7 04       	cpc	r15, r7
     7ce:	08 05       	cpc	r16, r8
     7d0:	19 05       	cpc	r17, r9
     7d2:	20 f4       	brcc	.+8      	; 0x7dc <__mulsf3+0xe8>
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	a0 e0       	ldi	r26, 0x00	; 0
     7da:	b0 e0       	ldi	r27, 0x00	; 0
     7dc:	ba 01       	movw	r22, r20
     7de:	a9 01       	movw	r20, r18
     7e0:	48 0f       	add	r20, r24
     7e2:	59 1f       	adc	r21, r25
     7e4:	6a 1f       	adc	r22, r26
     7e6:	7b 1f       	adc	r23, r27
     7e8:	aa 0c       	add	r10, r10
     7ea:	bb 1c       	adc	r11, r11
     7ec:	cc 1c       	adc	r12, r12
     7ee:	dd 1c       	adc	r13, r13
     7f0:	97 fe       	sbrs	r9, 7
     7f2:	08 c0       	rjmp	.+16     	; 0x804 <__mulsf3+0x110>
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	a0 e0       	ldi	r26, 0x00	; 0
     7fa:	b0 e0       	ldi	r27, 0x00	; 0
     7fc:	a8 2a       	or	r10, r24
     7fe:	b9 2a       	or	r11, r25
     800:	ca 2a       	or	r12, r26
     802:	db 2a       	or	r13, r27
     804:	31 96       	adiw	r30, 0x01	; 1
     806:	e0 32       	cpi	r30, 0x20	; 32
     808:	f1 05       	cpc	r31, r1
     80a:	49 f0       	breq	.+18     	; 0x81e <__mulsf3+0x12a>
     80c:	66 0c       	add	r6, r6
     80e:	77 1c       	adc	r7, r7
     810:	88 1c       	adc	r8, r8
     812:	99 1c       	adc	r9, r9
     814:	56 94       	lsr	r5
     816:	47 94       	ror	r4
     818:	37 94       	ror	r3
     81a:	27 94       	ror	r2
     81c:	c3 cf       	rjmp	.-122    	; 0x7a4 <__mulsf3+0xb0>
     81e:	fa 85       	ldd	r31, Y+10	; 0x0a
     820:	ea 89       	ldd	r30, Y+18	; 0x12
     822:	2b 89       	ldd	r18, Y+19	; 0x13
     824:	3c 89       	ldd	r19, Y+20	; 0x14
     826:	8b 85       	ldd	r24, Y+11	; 0x0b
     828:	9c 85       	ldd	r25, Y+12	; 0x0c
     82a:	28 0f       	add	r18, r24
     82c:	39 1f       	adc	r19, r25
     82e:	2e 5f       	subi	r18, 0xFE	; 254
     830:	3f 4f       	sbci	r19, 0xFF	; 255
     832:	17 c0       	rjmp	.+46     	; 0x862 <__stack+0x3>
     834:	ca 01       	movw	r24, r20
     836:	81 70       	andi	r24, 0x01	; 1
     838:	90 70       	andi	r25, 0x00	; 0
     83a:	89 2b       	or	r24, r25
     83c:	61 f0       	breq	.+24     	; 0x856 <__mulsf3+0x162>
     83e:	16 95       	lsr	r17
     840:	07 95       	ror	r16
     842:	f7 94       	ror	r15
     844:	e7 94       	ror	r14
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	a0 e0       	ldi	r26, 0x00	; 0
     84c:	b0 e8       	ldi	r27, 0x80	; 128
     84e:	e8 2a       	or	r14, r24
     850:	f9 2a       	or	r15, r25
     852:	0a 2b       	or	r16, r26
     854:	1b 2b       	or	r17, r27
     856:	76 95       	lsr	r23
     858:	67 95       	ror	r22
     85a:	57 95       	ror	r21
     85c:	47 95       	ror	r20
     85e:	2f 5f       	subi	r18, 0xFF	; 255
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	77 fd       	sbrc	r23, 7
     864:	e7 cf       	rjmp	.-50     	; 0x834 <__mulsf3+0x140>
     866:	0c c0       	rjmp	.+24     	; 0x880 <__stack+0x21>
     868:	44 0f       	add	r20, r20
     86a:	55 1f       	adc	r21, r21
     86c:	66 1f       	adc	r22, r22
     86e:	77 1f       	adc	r23, r23
     870:	17 fd       	sbrc	r17, 7
     872:	41 60       	ori	r20, 0x01	; 1
     874:	ee 0c       	add	r14, r14
     876:	ff 1c       	adc	r15, r15
     878:	00 1f       	adc	r16, r16
     87a:	11 1f       	adc	r17, r17
     87c:	21 50       	subi	r18, 0x01	; 1
     87e:	30 40       	sbci	r19, 0x00	; 0
     880:	40 30       	cpi	r20, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	59 07       	cpc	r21, r25
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	69 07       	cpc	r22, r25
     88a:	90 e4       	ldi	r25, 0x40	; 64
     88c:	79 07       	cpc	r23, r25
     88e:	60 f3       	brcs	.-40     	; 0x868 <__stack+0x9>
     890:	2b 8f       	std	Y+27, r18	; 0x1b
     892:	3c 8f       	std	Y+28, r19	; 0x1c
     894:	db 01       	movw	r26, r22
     896:	ca 01       	movw	r24, r20
     898:	8f 77       	andi	r24, 0x7F	; 127
     89a:	90 70       	andi	r25, 0x00	; 0
     89c:	a0 70       	andi	r26, 0x00	; 0
     89e:	b0 70       	andi	r27, 0x00	; 0
     8a0:	80 34       	cpi	r24, 0x40	; 64
     8a2:	91 05       	cpc	r25, r1
     8a4:	a1 05       	cpc	r26, r1
     8a6:	b1 05       	cpc	r27, r1
     8a8:	61 f4       	brne	.+24     	; 0x8c2 <__stack+0x63>
     8aa:	47 fd       	sbrc	r20, 7
     8ac:	0a c0       	rjmp	.+20     	; 0x8c2 <__stack+0x63>
     8ae:	e1 14       	cp	r14, r1
     8b0:	f1 04       	cpc	r15, r1
     8b2:	01 05       	cpc	r16, r1
     8b4:	11 05       	cpc	r17, r1
     8b6:	29 f0       	breq	.+10     	; 0x8c2 <__stack+0x63>
     8b8:	40 5c       	subi	r20, 0xC0	; 192
     8ba:	5f 4f       	sbci	r21, 0xFF	; 255
     8bc:	6f 4f       	sbci	r22, 0xFF	; 255
     8be:	7f 4f       	sbci	r23, 0xFF	; 255
     8c0:	40 78       	andi	r20, 0x80	; 128
     8c2:	1a 8e       	std	Y+26, r1	; 0x1a
     8c4:	fe 17       	cp	r31, r30
     8c6:	11 f0       	breq	.+4      	; 0x8cc <__stack+0x6d>
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	8a 8f       	std	Y+26, r24	; 0x1a
     8cc:	4d 8f       	std	Y+29, r20	; 0x1d
     8ce:	5e 8f       	std	Y+30, r21	; 0x1e
     8d0:	6f 8f       	std	Y+31, r22	; 0x1f
     8d2:	78 a3       	std	Y+32, r23	; 0x20
     8d4:	83 e0       	ldi	r24, 0x03	; 3
     8d6:	89 8f       	std	Y+25, r24	; 0x19
     8d8:	ce 01       	movw	r24, r28
     8da:	49 96       	adiw	r24, 0x19	; 25
     8dc:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__pack_f>
     8e0:	a0 96       	adiw	r28, 0x20	; 32
     8e2:	e2 e1       	ldi	r30, 0x12	; 18
     8e4:	0c 94 2e 24 	jmp	0x485c	; 0x485c <__epilogue_restores__>

000008e8 <__divsf3>:
     8e8:	a8 e1       	ldi	r26, 0x18	; 24
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	ea e7       	ldi	r30, 0x7A	; 122
     8ee:	f4 e0       	ldi	r31, 0x04	; 4
     8f0:	0c 94 1a 24 	jmp	0x4834	; 0x4834 <__prologue_saves__+0x10>
     8f4:	69 83       	std	Y+1, r22	; 0x01
     8f6:	7a 83       	std	Y+2, r23	; 0x02
     8f8:	8b 83       	std	Y+3, r24	; 0x03
     8fa:	9c 83       	std	Y+4, r25	; 0x04
     8fc:	2d 83       	std	Y+5, r18	; 0x05
     8fe:	3e 83       	std	Y+6, r19	; 0x06
     900:	4f 83       	std	Y+7, r20	; 0x07
     902:	58 87       	std	Y+8, r21	; 0x08
     904:	b9 e0       	ldi	r27, 0x09	; 9
     906:	eb 2e       	mov	r14, r27
     908:	f1 2c       	mov	r15, r1
     90a:	ec 0e       	add	r14, r28
     90c:	fd 1e       	adc	r15, r29
     90e:	ce 01       	movw	r24, r28
     910:	01 96       	adiw	r24, 0x01	; 1
     912:	b7 01       	movw	r22, r14
     914:	0e 94 ae 08 	call	0x115c	; 0x115c <__unpack_f>
     918:	8e 01       	movw	r16, r28
     91a:	0f 5e       	subi	r16, 0xEF	; 239
     91c:	1f 4f       	sbci	r17, 0xFF	; 255
     91e:	ce 01       	movw	r24, r28
     920:	05 96       	adiw	r24, 0x05	; 5
     922:	b8 01       	movw	r22, r16
     924:	0e 94 ae 08 	call	0x115c	; 0x115c <__unpack_f>
     928:	29 85       	ldd	r18, Y+9	; 0x09
     92a:	22 30       	cpi	r18, 0x02	; 2
     92c:	08 f4       	brcc	.+2      	; 0x930 <__divsf3+0x48>
     92e:	7e c0       	rjmp	.+252    	; 0xa2c <__divsf3+0x144>
     930:	39 89       	ldd	r19, Y+17	; 0x11
     932:	32 30       	cpi	r19, 0x02	; 2
     934:	10 f4       	brcc	.+4      	; 0x93a <__divsf3+0x52>
     936:	b8 01       	movw	r22, r16
     938:	7c c0       	rjmp	.+248    	; 0xa32 <__divsf3+0x14a>
     93a:	8a 85       	ldd	r24, Y+10	; 0x0a
     93c:	9a 89       	ldd	r25, Y+18	; 0x12
     93e:	89 27       	eor	r24, r25
     940:	8a 87       	std	Y+10, r24	; 0x0a
     942:	24 30       	cpi	r18, 0x04	; 4
     944:	11 f0       	breq	.+4      	; 0x94a <__divsf3+0x62>
     946:	22 30       	cpi	r18, 0x02	; 2
     948:	31 f4       	brne	.+12     	; 0x956 <__divsf3+0x6e>
     94a:	23 17       	cp	r18, r19
     94c:	09 f0       	breq	.+2      	; 0x950 <__divsf3+0x68>
     94e:	6e c0       	rjmp	.+220    	; 0xa2c <__divsf3+0x144>
     950:	67 e0       	ldi	r22, 0x07	; 7
     952:	71 e0       	ldi	r23, 0x01	; 1
     954:	6e c0       	rjmp	.+220    	; 0xa32 <__divsf3+0x14a>
     956:	34 30       	cpi	r19, 0x04	; 4
     958:	39 f4       	brne	.+14     	; 0x968 <__divsf3+0x80>
     95a:	1d 86       	std	Y+13, r1	; 0x0d
     95c:	1e 86       	std	Y+14, r1	; 0x0e
     95e:	1f 86       	std	Y+15, r1	; 0x0f
     960:	18 8a       	std	Y+16, r1	; 0x10
     962:	1c 86       	std	Y+12, r1	; 0x0c
     964:	1b 86       	std	Y+11, r1	; 0x0b
     966:	04 c0       	rjmp	.+8      	; 0x970 <__divsf3+0x88>
     968:	32 30       	cpi	r19, 0x02	; 2
     96a:	21 f4       	brne	.+8      	; 0x974 <__divsf3+0x8c>
     96c:	84 e0       	ldi	r24, 0x04	; 4
     96e:	89 87       	std	Y+9, r24	; 0x09
     970:	b7 01       	movw	r22, r14
     972:	5f c0       	rjmp	.+190    	; 0xa32 <__divsf3+0x14a>
     974:	2b 85       	ldd	r18, Y+11	; 0x0b
     976:	3c 85       	ldd	r19, Y+12	; 0x0c
     978:	8b 89       	ldd	r24, Y+19	; 0x13
     97a:	9c 89       	ldd	r25, Y+20	; 0x14
     97c:	28 1b       	sub	r18, r24
     97e:	39 0b       	sbc	r19, r25
     980:	3c 87       	std	Y+12, r19	; 0x0c
     982:	2b 87       	std	Y+11, r18	; 0x0b
     984:	ed 84       	ldd	r14, Y+13	; 0x0d
     986:	fe 84       	ldd	r15, Y+14	; 0x0e
     988:	0f 85       	ldd	r16, Y+15	; 0x0f
     98a:	18 89       	ldd	r17, Y+16	; 0x10
     98c:	ad 88       	ldd	r10, Y+21	; 0x15
     98e:	be 88       	ldd	r11, Y+22	; 0x16
     990:	cf 88       	ldd	r12, Y+23	; 0x17
     992:	d8 8c       	ldd	r13, Y+24	; 0x18
     994:	ea 14       	cp	r14, r10
     996:	fb 04       	cpc	r15, r11
     998:	0c 05       	cpc	r16, r12
     99a:	1d 05       	cpc	r17, r13
     99c:	40 f4       	brcc	.+16     	; 0x9ae <__divsf3+0xc6>
     99e:	ee 0c       	add	r14, r14
     9a0:	ff 1c       	adc	r15, r15
     9a2:	00 1f       	adc	r16, r16
     9a4:	11 1f       	adc	r17, r17
     9a6:	21 50       	subi	r18, 0x01	; 1
     9a8:	30 40       	sbci	r19, 0x00	; 0
     9aa:	3c 87       	std	Y+12, r19	; 0x0c
     9ac:	2b 87       	std	Y+11, r18	; 0x0b
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	a0 e0       	ldi	r26, 0x00	; 0
     9bc:	b0 e4       	ldi	r27, 0x40	; 64
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	ea 14       	cp	r14, r10
     9c4:	fb 04       	cpc	r15, r11
     9c6:	0c 05       	cpc	r16, r12
     9c8:	1d 05       	cpc	r17, r13
     9ca:	40 f0       	brcs	.+16     	; 0x9dc <__divsf3+0xf4>
     9cc:	28 2b       	or	r18, r24
     9ce:	39 2b       	or	r19, r25
     9d0:	4a 2b       	or	r20, r26
     9d2:	5b 2b       	or	r21, r27
     9d4:	ea 18       	sub	r14, r10
     9d6:	fb 08       	sbc	r15, r11
     9d8:	0c 09       	sbc	r16, r12
     9da:	1d 09       	sbc	r17, r13
     9dc:	b6 95       	lsr	r27
     9de:	a7 95       	ror	r26
     9e0:	97 95       	ror	r25
     9e2:	87 95       	ror	r24
     9e4:	ee 0c       	add	r14, r14
     9e6:	ff 1c       	adc	r15, r15
     9e8:	00 1f       	adc	r16, r16
     9ea:	11 1f       	adc	r17, r17
     9ec:	6f 5f       	subi	r22, 0xFF	; 255
     9ee:	7f 4f       	sbci	r23, 0xFF	; 255
     9f0:	6f 31       	cpi	r22, 0x1F	; 31
     9f2:	71 05       	cpc	r23, r1
     9f4:	31 f7       	brne	.-52     	; 0x9c2 <__divsf3+0xda>
     9f6:	da 01       	movw	r26, r20
     9f8:	c9 01       	movw	r24, r18
     9fa:	8f 77       	andi	r24, 0x7F	; 127
     9fc:	90 70       	andi	r25, 0x00	; 0
     9fe:	a0 70       	andi	r26, 0x00	; 0
     a00:	b0 70       	andi	r27, 0x00	; 0
     a02:	80 34       	cpi	r24, 0x40	; 64
     a04:	91 05       	cpc	r25, r1
     a06:	a1 05       	cpc	r26, r1
     a08:	b1 05       	cpc	r27, r1
     a0a:	61 f4       	brne	.+24     	; 0xa24 <__divsf3+0x13c>
     a0c:	27 fd       	sbrc	r18, 7
     a0e:	0a c0       	rjmp	.+20     	; 0xa24 <__divsf3+0x13c>
     a10:	e1 14       	cp	r14, r1
     a12:	f1 04       	cpc	r15, r1
     a14:	01 05       	cpc	r16, r1
     a16:	11 05       	cpc	r17, r1
     a18:	29 f0       	breq	.+10     	; 0xa24 <__divsf3+0x13c>
     a1a:	20 5c       	subi	r18, 0xC0	; 192
     a1c:	3f 4f       	sbci	r19, 0xFF	; 255
     a1e:	4f 4f       	sbci	r20, 0xFF	; 255
     a20:	5f 4f       	sbci	r21, 0xFF	; 255
     a22:	20 78       	andi	r18, 0x80	; 128
     a24:	2d 87       	std	Y+13, r18	; 0x0d
     a26:	3e 87       	std	Y+14, r19	; 0x0e
     a28:	4f 87       	std	Y+15, r20	; 0x0f
     a2a:	58 8b       	std	Y+16, r21	; 0x10
     a2c:	be 01       	movw	r22, r28
     a2e:	67 5f       	subi	r22, 0xF7	; 247
     a30:	7f 4f       	sbci	r23, 0xFF	; 255
     a32:	cb 01       	movw	r24, r22
     a34:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__pack_f>
     a38:	68 96       	adiw	r28, 0x18	; 24
     a3a:	ea e0       	ldi	r30, 0x0A	; 10
     a3c:	0c 94 36 24 	jmp	0x486c	; 0x486c <__epilogue_restores__+0x10>

00000a40 <__gtsf2>:
     a40:	a8 e1       	ldi	r26, 0x18	; 24
     a42:	b0 e0       	ldi	r27, 0x00	; 0
     a44:	e6 e2       	ldi	r30, 0x26	; 38
     a46:	f5 e0       	ldi	r31, 0x05	; 5
     a48:	0c 94 1e 24 	jmp	0x483c	; 0x483c <__prologue_saves__+0x18>
     a4c:	69 83       	std	Y+1, r22	; 0x01
     a4e:	7a 83       	std	Y+2, r23	; 0x02
     a50:	8b 83       	std	Y+3, r24	; 0x03
     a52:	9c 83       	std	Y+4, r25	; 0x04
     a54:	2d 83       	std	Y+5, r18	; 0x05
     a56:	3e 83       	std	Y+6, r19	; 0x06
     a58:	4f 83       	std	Y+7, r20	; 0x07
     a5a:	58 87       	std	Y+8, r21	; 0x08
     a5c:	89 e0       	ldi	r24, 0x09	; 9
     a5e:	e8 2e       	mov	r14, r24
     a60:	f1 2c       	mov	r15, r1
     a62:	ec 0e       	add	r14, r28
     a64:	fd 1e       	adc	r15, r29
     a66:	ce 01       	movw	r24, r28
     a68:	01 96       	adiw	r24, 0x01	; 1
     a6a:	b7 01       	movw	r22, r14
     a6c:	0e 94 ae 08 	call	0x115c	; 0x115c <__unpack_f>
     a70:	8e 01       	movw	r16, r28
     a72:	0f 5e       	subi	r16, 0xEF	; 239
     a74:	1f 4f       	sbci	r17, 0xFF	; 255
     a76:	ce 01       	movw	r24, r28
     a78:	05 96       	adiw	r24, 0x05	; 5
     a7a:	b8 01       	movw	r22, r16
     a7c:	0e 94 ae 08 	call	0x115c	; 0x115c <__unpack_f>
     a80:	89 85       	ldd	r24, Y+9	; 0x09
     a82:	82 30       	cpi	r24, 0x02	; 2
     a84:	40 f0       	brcs	.+16     	; 0xa96 <__gtsf2+0x56>
     a86:	89 89       	ldd	r24, Y+17	; 0x11
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	28 f0       	brcs	.+10     	; 0xa96 <__gtsf2+0x56>
     a8c:	c7 01       	movw	r24, r14
     a8e:	b8 01       	movw	r22, r16
     a90:	0e 94 26 09 	call	0x124c	; 0x124c <__fpcmp_parts_f>
     a94:	01 c0       	rjmp	.+2      	; 0xa98 <__gtsf2+0x58>
     a96:	8f ef       	ldi	r24, 0xFF	; 255
     a98:	68 96       	adiw	r28, 0x18	; 24
     a9a:	e6 e0       	ldi	r30, 0x06	; 6
     a9c:	0c 94 3a 24 	jmp	0x4874	; 0x4874 <__epilogue_restores__+0x18>

00000aa0 <__gesf2>:
     aa0:	a8 e1       	ldi	r26, 0x18	; 24
     aa2:	b0 e0       	ldi	r27, 0x00	; 0
     aa4:	e6 e5       	ldi	r30, 0x56	; 86
     aa6:	f5 e0       	ldi	r31, 0x05	; 5
     aa8:	0c 94 1e 24 	jmp	0x483c	; 0x483c <__prologue_saves__+0x18>
     aac:	69 83       	std	Y+1, r22	; 0x01
     aae:	7a 83       	std	Y+2, r23	; 0x02
     ab0:	8b 83       	std	Y+3, r24	; 0x03
     ab2:	9c 83       	std	Y+4, r25	; 0x04
     ab4:	2d 83       	std	Y+5, r18	; 0x05
     ab6:	3e 83       	std	Y+6, r19	; 0x06
     ab8:	4f 83       	std	Y+7, r20	; 0x07
     aba:	58 87       	std	Y+8, r21	; 0x08
     abc:	89 e0       	ldi	r24, 0x09	; 9
     abe:	e8 2e       	mov	r14, r24
     ac0:	f1 2c       	mov	r15, r1
     ac2:	ec 0e       	add	r14, r28
     ac4:	fd 1e       	adc	r15, r29
     ac6:	ce 01       	movw	r24, r28
     ac8:	01 96       	adiw	r24, 0x01	; 1
     aca:	b7 01       	movw	r22, r14
     acc:	0e 94 ae 08 	call	0x115c	; 0x115c <__unpack_f>
     ad0:	8e 01       	movw	r16, r28
     ad2:	0f 5e       	subi	r16, 0xEF	; 239
     ad4:	1f 4f       	sbci	r17, 0xFF	; 255
     ad6:	ce 01       	movw	r24, r28
     ad8:	05 96       	adiw	r24, 0x05	; 5
     ada:	b8 01       	movw	r22, r16
     adc:	0e 94 ae 08 	call	0x115c	; 0x115c <__unpack_f>
     ae0:	89 85       	ldd	r24, Y+9	; 0x09
     ae2:	82 30       	cpi	r24, 0x02	; 2
     ae4:	40 f0       	brcs	.+16     	; 0xaf6 <__gesf2+0x56>
     ae6:	89 89       	ldd	r24, Y+17	; 0x11
     ae8:	82 30       	cpi	r24, 0x02	; 2
     aea:	28 f0       	brcs	.+10     	; 0xaf6 <__gesf2+0x56>
     aec:	c7 01       	movw	r24, r14
     aee:	b8 01       	movw	r22, r16
     af0:	0e 94 26 09 	call	0x124c	; 0x124c <__fpcmp_parts_f>
     af4:	01 c0       	rjmp	.+2      	; 0xaf8 <__gesf2+0x58>
     af6:	8f ef       	ldi	r24, 0xFF	; 255
     af8:	68 96       	adiw	r28, 0x18	; 24
     afa:	e6 e0       	ldi	r30, 0x06	; 6
     afc:	0c 94 3a 24 	jmp	0x4874	; 0x4874 <__epilogue_restores__+0x18>

00000b00 <__ltsf2>:
     b00:	a8 e1       	ldi	r26, 0x18	; 24
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	e6 e8       	ldi	r30, 0x86	; 134
     b06:	f5 e0       	ldi	r31, 0x05	; 5
     b08:	0c 94 1e 24 	jmp	0x483c	; 0x483c <__prologue_saves__+0x18>
     b0c:	69 83       	std	Y+1, r22	; 0x01
     b0e:	7a 83       	std	Y+2, r23	; 0x02
     b10:	8b 83       	std	Y+3, r24	; 0x03
     b12:	9c 83       	std	Y+4, r25	; 0x04
     b14:	2d 83       	std	Y+5, r18	; 0x05
     b16:	3e 83       	std	Y+6, r19	; 0x06
     b18:	4f 83       	std	Y+7, r20	; 0x07
     b1a:	58 87       	std	Y+8, r21	; 0x08
     b1c:	89 e0       	ldi	r24, 0x09	; 9
     b1e:	e8 2e       	mov	r14, r24
     b20:	f1 2c       	mov	r15, r1
     b22:	ec 0e       	add	r14, r28
     b24:	fd 1e       	adc	r15, r29
     b26:	ce 01       	movw	r24, r28
     b28:	01 96       	adiw	r24, 0x01	; 1
     b2a:	b7 01       	movw	r22, r14
     b2c:	0e 94 ae 08 	call	0x115c	; 0x115c <__unpack_f>
     b30:	8e 01       	movw	r16, r28
     b32:	0f 5e       	subi	r16, 0xEF	; 239
     b34:	1f 4f       	sbci	r17, 0xFF	; 255
     b36:	ce 01       	movw	r24, r28
     b38:	05 96       	adiw	r24, 0x05	; 5
     b3a:	b8 01       	movw	r22, r16
     b3c:	0e 94 ae 08 	call	0x115c	; 0x115c <__unpack_f>
     b40:	89 85       	ldd	r24, Y+9	; 0x09
     b42:	82 30       	cpi	r24, 0x02	; 2
     b44:	40 f0       	brcs	.+16     	; 0xb56 <__ltsf2+0x56>
     b46:	89 89       	ldd	r24, Y+17	; 0x11
     b48:	82 30       	cpi	r24, 0x02	; 2
     b4a:	28 f0       	brcs	.+10     	; 0xb56 <__ltsf2+0x56>
     b4c:	c7 01       	movw	r24, r14
     b4e:	b8 01       	movw	r22, r16
     b50:	0e 94 26 09 	call	0x124c	; 0x124c <__fpcmp_parts_f>
     b54:	01 c0       	rjmp	.+2      	; 0xb58 <__ltsf2+0x58>
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	68 96       	adiw	r28, 0x18	; 24
     b5a:	e6 e0       	ldi	r30, 0x06	; 6
     b5c:	0c 94 3a 24 	jmp	0x4874	; 0x4874 <__epilogue_restores__+0x18>

00000b60 <__lesf2>:
     b60:	a8 e1       	ldi	r26, 0x18	; 24
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	e6 eb       	ldi	r30, 0xB6	; 182
     b66:	f5 e0       	ldi	r31, 0x05	; 5
     b68:	0c 94 1e 24 	jmp	0x483c	; 0x483c <__prologue_saves__+0x18>
     b6c:	69 83       	std	Y+1, r22	; 0x01
     b6e:	7a 83       	std	Y+2, r23	; 0x02
     b70:	8b 83       	std	Y+3, r24	; 0x03
     b72:	9c 83       	std	Y+4, r25	; 0x04
     b74:	2d 83       	std	Y+5, r18	; 0x05
     b76:	3e 83       	std	Y+6, r19	; 0x06
     b78:	4f 83       	std	Y+7, r20	; 0x07
     b7a:	58 87       	std	Y+8, r21	; 0x08
     b7c:	89 e0       	ldi	r24, 0x09	; 9
     b7e:	e8 2e       	mov	r14, r24
     b80:	f1 2c       	mov	r15, r1
     b82:	ec 0e       	add	r14, r28
     b84:	fd 1e       	adc	r15, r29
     b86:	ce 01       	movw	r24, r28
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	b7 01       	movw	r22, r14
     b8c:	0e 94 ae 08 	call	0x115c	; 0x115c <__unpack_f>
     b90:	8e 01       	movw	r16, r28
     b92:	0f 5e       	subi	r16, 0xEF	; 239
     b94:	1f 4f       	sbci	r17, 0xFF	; 255
     b96:	ce 01       	movw	r24, r28
     b98:	05 96       	adiw	r24, 0x05	; 5
     b9a:	b8 01       	movw	r22, r16
     b9c:	0e 94 ae 08 	call	0x115c	; 0x115c <__unpack_f>
     ba0:	89 85       	ldd	r24, Y+9	; 0x09
     ba2:	82 30       	cpi	r24, 0x02	; 2
     ba4:	40 f0       	brcs	.+16     	; 0xbb6 <__lesf2+0x56>
     ba6:	89 89       	ldd	r24, Y+17	; 0x11
     ba8:	82 30       	cpi	r24, 0x02	; 2
     baa:	28 f0       	brcs	.+10     	; 0xbb6 <__lesf2+0x56>
     bac:	c7 01       	movw	r24, r14
     bae:	b8 01       	movw	r22, r16
     bb0:	0e 94 26 09 	call	0x124c	; 0x124c <__fpcmp_parts_f>
     bb4:	01 c0       	rjmp	.+2      	; 0xbb8 <__lesf2+0x58>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	68 96       	adiw	r28, 0x18	; 24
     bba:	e6 e0       	ldi	r30, 0x06	; 6
     bbc:	0c 94 3a 24 	jmp	0x4874	; 0x4874 <__epilogue_restores__+0x18>

00000bc0 <__floatsisf>:
     bc0:	a8 e0       	ldi	r26, 0x08	; 8
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e6 ee       	ldi	r30, 0xE6	; 230
     bc6:	f5 e0       	ldi	r31, 0x05	; 5
     bc8:	0c 94 1b 24 	jmp	0x4836	; 0x4836 <__prologue_saves__+0x12>
     bcc:	9b 01       	movw	r18, r22
     bce:	ac 01       	movw	r20, r24
     bd0:	83 e0       	ldi	r24, 0x03	; 3
     bd2:	89 83       	std	Y+1, r24	; 0x01
     bd4:	da 01       	movw	r26, r20
     bd6:	c9 01       	movw	r24, r18
     bd8:	88 27       	eor	r24, r24
     bda:	b7 fd       	sbrc	r27, 7
     bdc:	83 95       	inc	r24
     bde:	99 27       	eor	r25, r25
     be0:	aa 27       	eor	r26, r26
     be2:	bb 27       	eor	r27, r27
     be4:	b8 2e       	mov	r11, r24
     be6:	21 15       	cp	r18, r1
     be8:	31 05       	cpc	r19, r1
     bea:	41 05       	cpc	r20, r1
     bec:	51 05       	cpc	r21, r1
     bee:	19 f4       	brne	.+6      	; 0xbf6 <__floatsisf+0x36>
     bf0:	82 e0       	ldi	r24, 0x02	; 2
     bf2:	89 83       	std	Y+1, r24	; 0x01
     bf4:	3a c0       	rjmp	.+116    	; 0xc6a <__floatsisf+0xaa>
     bf6:	88 23       	and	r24, r24
     bf8:	a9 f0       	breq	.+42     	; 0xc24 <__floatsisf+0x64>
     bfa:	20 30       	cpi	r18, 0x00	; 0
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	38 07       	cpc	r19, r24
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	48 07       	cpc	r20, r24
     c04:	80 e8       	ldi	r24, 0x80	; 128
     c06:	58 07       	cpc	r21, r24
     c08:	29 f4       	brne	.+10     	; 0xc14 <__floatsisf+0x54>
     c0a:	60 e0       	ldi	r22, 0x00	; 0
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	9f ec       	ldi	r25, 0xCF	; 207
     c12:	30 c0       	rjmp	.+96     	; 0xc74 <__floatsisf+0xb4>
     c14:	ee 24       	eor	r14, r14
     c16:	ff 24       	eor	r15, r15
     c18:	87 01       	movw	r16, r14
     c1a:	e2 1a       	sub	r14, r18
     c1c:	f3 0a       	sbc	r15, r19
     c1e:	04 0b       	sbc	r16, r20
     c20:	15 0b       	sbc	r17, r21
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <__floatsisf+0x68>
     c24:	79 01       	movw	r14, r18
     c26:	8a 01       	movw	r16, r20
     c28:	8e e1       	ldi	r24, 0x1E	; 30
     c2a:	c8 2e       	mov	r12, r24
     c2c:	d1 2c       	mov	r13, r1
     c2e:	dc 82       	std	Y+4, r13	; 0x04
     c30:	cb 82       	std	Y+3, r12	; 0x03
     c32:	ed 82       	std	Y+5, r14	; 0x05
     c34:	fe 82       	std	Y+6, r15	; 0x06
     c36:	0f 83       	std	Y+7, r16	; 0x07
     c38:	18 87       	std	Y+8, r17	; 0x08
     c3a:	c8 01       	movw	r24, r16
     c3c:	b7 01       	movw	r22, r14
     c3e:	0e 94 8a 07 	call	0xf14	; 0xf14 <__clzsi2>
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	18 16       	cp	r1, r24
     c46:	19 06       	cpc	r1, r25
     c48:	84 f4       	brge	.+32     	; 0xc6a <__floatsisf+0xaa>
     c4a:	08 2e       	mov	r0, r24
     c4c:	04 c0       	rjmp	.+8      	; 0xc56 <__floatsisf+0x96>
     c4e:	ee 0c       	add	r14, r14
     c50:	ff 1c       	adc	r15, r15
     c52:	00 1f       	adc	r16, r16
     c54:	11 1f       	adc	r17, r17
     c56:	0a 94       	dec	r0
     c58:	d2 f7       	brpl	.-12     	; 0xc4e <__floatsisf+0x8e>
     c5a:	ed 82       	std	Y+5, r14	; 0x05
     c5c:	fe 82       	std	Y+6, r15	; 0x06
     c5e:	0f 83       	std	Y+7, r16	; 0x07
     c60:	18 87       	std	Y+8, r17	; 0x08
     c62:	c8 1a       	sub	r12, r24
     c64:	d9 0a       	sbc	r13, r25
     c66:	dc 82       	std	Y+4, r13	; 0x04
     c68:	cb 82       	std	Y+3, r12	; 0x03
     c6a:	ba 82       	std	Y+2, r11	; 0x02
     c6c:	ce 01       	movw	r24, r28
     c6e:	01 96       	adiw	r24, 0x01	; 1
     c70:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__pack_f>
     c74:	28 96       	adiw	r28, 0x08	; 8
     c76:	e9 e0       	ldi	r30, 0x09	; 9
     c78:	0c 94 37 24 	jmp	0x486e	; 0x486e <__epilogue_restores__+0x12>

00000c7c <__fixsfsi>:
     c7c:	ac e0       	ldi	r26, 0x0C	; 12
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	e4 e4       	ldi	r30, 0x44	; 68
     c82:	f6 e0       	ldi	r31, 0x06	; 6
     c84:	0c 94 22 24 	jmp	0x4844	; 0x4844 <__prologue_saves__+0x20>
     c88:	69 83       	std	Y+1, r22	; 0x01
     c8a:	7a 83       	std	Y+2, r23	; 0x02
     c8c:	8b 83       	std	Y+3, r24	; 0x03
     c8e:	9c 83       	std	Y+4, r25	; 0x04
     c90:	ce 01       	movw	r24, r28
     c92:	01 96       	adiw	r24, 0x01	; 1
     c94:	be 01       	movw	r22, r28
     c96:	6b 5f       	subi	r22, 0xFB	; 251
     c98:	7f 4f       	sbci	r23, 0xFF	; 255
     c9a:	0e 94 ae 08 	call	0x115c	; 0x115c <__unpack_f>
     c9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ca0:	82 30       	cpi	r24, 0x02	; 2
     ca2:	61 f1       	breq	.+88     	; 0xcfc <__fixsfsi+0x80>
     ca4:	82 30       	cpi	r24, 0x02	; 2
     ca6:	50 f1       	brcs	.+84     	; 0xcfc <__fixsfsi+0x80>
     ca8:	84 30       	cpi	r24, 0x04	; 4
     caa:	21 f4       	brne	.+8      	; 0xcb4 <__fixsfsi+0x38>
     cac:	8e 81       	ldd	r24, Y+6	; 0x06
     cae:	88 23       	and	r24, r24
     cb0:	51 f1       	breq	.+84     	; 0xd06 <__fixsfsi+0x8a>
     cb2:	2e c0       	rjmp	.+92     	; 0xd10 <__fixsfsi+0x94>
     cb4:	2f 81       	ldd	r18, Y+7	; 0x07
     cb6:	38 85       	ldd	r19, Y+8	; 0x08
     cb8:	37 fd       	sbrc	r19, 7
     cba:	20 c0       	rjmp	.+64     	; 0xcfc <__fixsfsi+0x80>
     cbc:	6e 81       	ldd	r22, Y+6	; 0x06
     cbe:	2f 31       	cpi	r18, 0x1F	; 31
     cc0:	31 05       	cpc	r19, r1
     cc2:	1c f0       	brlt	.+6      	; 0xcca <__fixsfsi+0x4e>
     cc4:	66 23       	and	r22, r22
     cc6:	f9 f0       	breq	.+62     	; 0xd06 <__fixsfsi+0x8a>
     cc8:	23 c0       	rjmp	.+70     	; 0xd10 <__fixsfsi+0x94>
     cca:	8e e1       	ldi	r24, 0x1E	; 30
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	82 1b       	sub	r24, r18
     cd0:	93 0b       	sbc	r25, r19
     cd2:	29 85       	ldd	r18, Y+9	; 0x09
     cd4:	3a 85       	ldd	r19, Y+10	; 0x0a
     cd6:	4b 85       	ldd	r20, Y+11	; 0x0b
     cd8:	5c 85       	ldd	r21, Y+12	; 0x0c
     cda:	04 c0       	rjmp	.+8      	; 0xce4 <__fixsfsi+0x68>
     cdc:	56 95       	lsr	r21
     cde:	47 95       	ror	r20
     ce0:	37 95       	ror	r19
     ce2:	27 95       	ror	r18
     ce4:	8a 95       	dec	r24
     ce6:	d2 f7       	brpl	.-12     	; 0xcdc <__fixsfsi+0x60>
     ce8:	66 23       	and	r22, r22
     cea:	b1 f0       	breq	.+44     	; 0xd18 <__fixsfsi+0x9c>
     cec:	50 95       	com	r21
     cee:	40 95       	com	r20
     cf0:	30 95       	com	r19
     cf2:	21 95       	neg	r18
     cf4:	3f 4f       	sbci	r19, 0xFF	; 255
     cf6:	4f 4f       	sbci	r20, 0xFF	; 255
     cf8:	5f 4f       	sbci	r21, 0xFF	; 255
     cfa:	0e c0       	rjmp	.+28     	; 0xd18 <__fixsfsi+0x9c>
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	40 e0       	ldi	r20, 0x00	; 0
     d02:	50 e0       	ldi	r21, 0x00	; 0
     d04:	09 c0       	rjmp	.+18     	; 0xd18 <__fixsfsi+0x9c>
     d06:	2f ef       	ldi	r18, 0xFF	; 255
     d08:	3f ef       	ldi	r19, 0xFF	; 255
     d0a:	4f ef       	ldi	r20, 0xFF	; 255
     d0c:	5f e7       	ldi	r21, 0x7F	; 127
     d0e:	04 c0       	rjmp	.+8      	; 0xd18 <__fixsfsi+0x9c>
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	40 e0       	ldi	r20, 0x00	; 0
     d16:	50 e8       	ldi	r21, 0x80	; 128
     d18:	b9 01       	movw	r22, r18
     d1a:	ca 01       	movw	r24, r20
     d1c:	2c 96       	adiw	r28, 0x0c	; 12
     d1e:	e2 e0       	ldi	r30, 0x02	; 2
     d20:	0c 94 3e 24 	jmp	0x487c	; 0x487c <__epilogue_restores__+0x20>

00000d24 <__floatunsisf>:
     d24:	a8 e0       	ldi	r26, 0x08	; 8
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e8 e9       	ldi	r30, 0x98	; 152
     d2a:	f6 e0       	ldi	r31, 0x06	; 6
     d2c:	0c 94 1a 24 	jmp	0x4834	; 0x4834 <__prologue_saves__+0x10>
     d30:	7b 01       	movw	r14, r22
     d32:	8c 01       	movw	r16, r24
     d34:	61 15       	cp	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	81 05       	cpc	r24, r1
     d3a:	91 05       	cpc	r25, r1
     d3c:	19 f4       	brne	.+6      	; 0xd44 <__floatunsisf+0x20>
     d3e:	82 e0       	ldi	r24, 0x02	; 2
     d40:	89 83       	std	Y+1, r24	; 0x01
     d42:	60 c0       	rjmp	.+192    	; 0xe04 <__floatunsisf+0xe0>
     d44:	83 e0       	ldi	r24, 0x03	; 3
     d46:	89 83       	std	Y+1, r24	; 0x01
     d48:	8e e1       	ldi	r24, 0x1E	; 30
     d4a:	c8 2e       	mov	r12, r24
     d4c:	d1 2c       	mov	r13, r1
     d4e:	dc 82       	std	Y+4, r13	; 0x04
     d50:	cb 82       	std	Y+3, r12	; 0x03
     d52:	ed 82       	std	Y+5, r14	; 0x05
     d54:	fe 82       	std	Y+6, r15	; 0x06
     d56:	0f 83       	std	Y+7, r16	; 0x07
     d58:	18 87       	std	Y+8, r17	; 0x08
     d5a:	c8 01       	movw	r24, r16
     d5c:	b7 01       	movw	r22, r14
     d5e:	0e 94 8a 07 	call	0xf14	; 0xf14 <__clzsi2>
     d62:	fc 01       	movw	r30, r24
     d64:	31 97       	sbiw	r30, 0x01	; 1
     d66:	f7 ff       	sbrs	r31, 7
     d68:	3b c0       	rjmp	.+118    	; 0xde0 <__floatunsisf+0xbc>
     d6a:	22 27       	eor	r18, r18
     d6c:	33 27       	eor	r19, r19
     d6e:	2e 1b       	sub	r18, r30
     d70:	3f 0b       	sbc	r19, r31
     d72:	57 01       	movw	r10, r14
     d74:	68 01       	movw	r12, r16
     d76:	02 2e       	mov	r0, r18
     d78:	04 c0       	rjmp	.+8      	; 0xd82 <__floatunsisf+0x5e>
     d7a:	d6 94       	lsr	r13
     d7c:	c7 94       	ror	r12
     d7e:	b7 94       	ror	r11
     d80:	a7 94       	ror	r10
     d82:	0a 94       	dec	r0
     d84:	d2 f7       	brpl	.-12     	; 0xd7a <__floatunsisf+0x56>
     d86:	40 e0       	ldi	r20, 0x00	; 0
     d88:	50 e0       	ldi	r21, 0x00	; 0
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	a0 e0       	ldi	r26, 0x00	; 0
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	04 c0       	rjmp	.+8      	; 0xda0 <__floatunsisf+0x7c>
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	aa 1f       	adc	r26, r26
     d9e:	bb 1f       	adc	r27, r27
     da0:	2a 95       	dec	r18
     da2:	d2 f7       	brpl	.-12     	; 0xd98 <__floatunsisf+0x74>
     da4:	01 97       	sbiw	r24, 0x01	; 1
     da6:	a1 09       	sbc	r26, r1
     da8:	b1 09       	sbc	r27, r1
     daa:	8e 21       	and	r24, r14
     dac:	9f 21       	and	r25, r15
     dae:	a0 23       	and	r26, r16
     db0:	b1 23       	and	r27, r17
     db2:	00 97       	sbiw	r24, 0x00	; 0
     db4:	a1 05       	cpc	r26, r1
     db6:	b1 05       	cpc	r27, r1
     db8:	21 f0       	breq	.+8      	; 0xdc2 <__floatunsisf+0x9e>
     dba:	41 e0       	ldi	r20, 0x01	; 1
     dbc:	50 e0       	ldi	r21, 0x00	; 0
     dbe:	60 e0       	ldi	r22, 0x00	; 0
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	4a 29       	or	r20, r10
     dc4:	5b 29       	or	r21, r11
     dc6:	6c 29       	or	r22, r12
     dc8:	7d 29       	or	r23, r13
     dca:	4d 83       	std	Y+5, r20	; 0x05
     dcc:	5e 83       	std	Y+6, r21	; 0x06
     dce:	6f 83       	std	Y+7, r22	; 0x07
     dd0:	78 87       	std	Y+8, r23	; 0x08
     dd2:	8e e1       	ldi	r24, 0x1E	; 30
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	8e 1b       	sub	r24, r30
     dd8:	9f 0b       	sbc	r25, r31
     dda:	9c 83       	std	Y+4, r25	; 0x04
     ddc:	8b 83       	std	Y+3, r24	; 0x03
     dde:	12 c0       	rjmp	.+36     	; 0xe04 <__floatunsisf+0xe0>
     de0:	30 97       	sbiw	r30, 0x00	; 0
     de2:	81 f0       	breq	.+32     	; 0xe04 <__floatunsisf+0xe0>
     de4:	0e 2e       	mov	r0, r30
     de6:	04 c0       	rjmp	.+8      	; 0xdf0 <__floatunsisf+0xcc>
     de8:	ee 0c       	add	r14, r14
     dea:	ff 1c       	adc	r15, r15
     dec:	00 1f       	adc	r16, r16
     dee:	11 1f       	adc	r17, r17
     df0:	0a 94       	dec	r0
     df2:	d2 f7       	brpl	.-12     	; 0xde8 <__floatunsisf+0xc4>
     df4:	ed 82       	std	Y+5, r14	; 0x05
     df6:	fe 82       	std	Y+6, r15	; 0x06
     df8:	0f 83       	std	Y+7, r16	; 0x07
     dfa:	18 87       	std	Y+8, r17	; 0x08
     dfc:	ce 1a       	sub	r12, r30
     dfe:	df 0a       	sbc	r13, r31
     e00:	dc 82       	std	Y+4, r13	; 0x04
     e02:	cb 82       	std	Y+3, r12	; 0x03
     e04:	1a 82       	std	Y+2, r1	; 0x02
     e06:	ce 01       	movw	r24, r28
     e08:	01 96       	adiw	r24, 0x01	; 1
     e0a:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__pack_f>
     e0e:	28 96       	adiw	r28, 0x08	; 8
     e10:	ea e0       	ldi	r30, 0x0A	; 10
     e12:	0c 94 36 24 	jmp	0x486c	; 0x486c <__epilogue_restores__+0x10>

00000e16 <__lshrdi3>:
     e16:	ef 92       	push	r14
     e18:	ff 92       	push	r15
     e1a:	0f 93       	push	r16
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	60 97       	sbiw	r28, 0x10	; 16
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	f8 94       	cli
     e2a:	de bf       	out	0x3e, r29	; 62
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	cd bf       	out	0x3d, r28	; 61
     e30:	a8 2f       	mov	r26, r24
     e32:	00 23       	and	r16, r16
     e34:	09 f4       	brne	.+2      	; 0xe38 <__lshrdi3+0x22>
     e36:	61 c0       	rjmp	.+194    	; 0xefa <__lshrdi3+0xe4>
     e38:	7e 01       	movw	r14, r28
     e3a:	08 94       	sec
     e3c:	e1 1c       	adc	r14, r1
     e3e:	f1 1c       	adc	r15, r1
     e40:	88 e0       	ldi	r24, 0x08	; 8
     e42:	f7 01       	movw	r30, r14
     e44:	11 92       	st	Z+, r1
     e46:	8a 95       	dec	r24
     e48:	e9 f7       	brne	.-6      	; 0xe44 <__lshrdi3+0x2e>
     e4a:	29 83       	std	Y+1, r18	; 0x01
     e4c:	3a 83       	std	Y+2, r19	; 0x02
     e4e:	4b 83       	std	Y+3, r20	; 0x03
     e50:	5c 83       	std	Y+4, r21	; 0x04
     e52:	6d 83       	std	Y+5, r22	; 0x05
     e54:	7e 83       	std	Y+6, r23	; 0x06
     e56:	af 83       	std	Y+7, r26	; 0x07
     e58:	98 87       	std	Y+8, r25	; 0x08
     e5a:	80 e2       	ldi	r24, 0x20	; 32
     e5c:	80 1b       	sub	r24, r16
     e5e:	e8 2f       	mov	r30, r24
     e60:	ff 27       	eor	r31, r31
     e62:	e7 fd       	sbrc	r30, 7
     e64:	f0 95       	com	r31
     e66:	4d 81       	ldd	r20, Y+5	; 0x05
     e68:	5e 81       	ldd	r21, Y+6	; 0x06
     e6a:	6f 81       	ldd	r22, Y+7	; 0x07
     e6c:	78 85       	ldd	r23, Y+8	; 0x08
     e6e:	18 16       	cp	r1, r24
     e70:	84 f0       	brlt	.+32     	; 0xe92 <__lshrdi3+0x7c>
     e72:	1d 86       	std	Y+13, r1	; 0x0d
     e74:	1e 86       	std	Y+14, r1	; 0x0e
     e76:	1f 86       	std	Y+15, r1	; 0x0f
     e78:	18 8a       	std	Y+16, r1	; 0x10
     e7a:	88 27       	eor	r24, r24
     e7c:	99 27       	eor	r25, r25
     e7e:	8e 1b       	sub	r24, r30
     e80:	9f 0b       	sbc	r25, r31
     e82:	04 c0       	rjmp	.+8      	; 0xe8c <__lshrdi3+0x76>
     e84:	76 95       	lsr	r23
     e86:	67 95       	ror	r22
     e88:	57 95       	ror	r21
     e8a:	47 95       	ror	r20
     e8c:	8a 95       	dec	r24
     e8e:	d2 f7       	brpl	.-12     	; 0xe84 <__lshrdi3+0x6e>
     e90:	28 c0       	rjmp	.+80     	; 0xee2 <__lshrdi3+0xcc>
     e92:	20 2f       	mov	r18, r16
     e94:	33 27       	eor	r19, r19
     e96:	27 fd       	sbrc	r18, 7
     e98:	30 95       	com	r19
     e9a:	db 01       	movw	r26, r22
     e9c:	ca 01       	movw	r24, r20
     e9e:	02 2e       	mov	r0, r18
     ea0:	04 c0       	rjmp	.+8      	; 0xeaa <__lshrdi3+0x94>
     ea2:	b6 95       	lsr	r27
     ea4:	a7 95       	ror	r26
     ea6:	97 95       	ror	r25
     ea8:	87 95       	ror	r24
     eaa:	0a 94       	dec	r0
     eac:	d2 f7       	brpl	.-12     	; 0xea2 <__lshrdi3+0x8c>
     eae:	8d 87       	std	Y+13, r24	; 0x0d
     eb0:	9e 87       	std	Y+14, r25	; 0x0e
     eb2:	af 87       	std	Y+15, r26	; 0x0f
     eb4:	b8 8b       	std	Y+16, r27	; 0x10
     eb6:	04 c0       	rjmp	.+8      	; 0xec0 <__lshrdi3+0xaa>
     eb8:	44 0f       	add	r20, r20
     eba:	55 1f       	adc	r21, r21
     ebc:	66 1f       	adc	r22, r22
     ebe:	77 1f       	adc	r23, r23
     ec0:	ea 95       	dec	r30
     ec2:	d2 f7       	brpl	.-12     	; 0xeb8 <__lshrdi3+0xa2>
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	9a 81       	ldd	r25, Y+2	; 0x02
     ec8:	ab 81       	ldd	r26, Y+3	; 0x03
     eca:	bc 81       	ldd	r27, Y+4	; 0x04
     ecc:	04 c0       	rjmp	.+8      	; 0xed6 <__lshrdi3+0xc0>
     ece:	b6 95       	lsr	r27
     ed0:	a7 95       	ror	r26
     ed2:	97 95       	ror	r25
     ed4:	87 95       	ror	r24
     ed6:	2a 95       	dec	r18
     ed8:	d2 f7       	brpl	.-12     	; 0xece <__lshrdi3+0xb8>
     eda:	48 2b       	or	r20, r24
     edc:	59 2b       	or	r21, r25
     ede:	6a 2b       	or	r22, r26
     ee0:	7b 2b       	or	r23, r27
     ee2:	49 87       	std	Y+9, r20	; 0x09
     ee4:	5a 87       	std	Y+10, r21	; 0x0a
     ee6:	6b 87       	std	Y+11, r22	; 0x0b
     ee8:	7c 87       	std	Y+12, r23	; 0x0c
     eea:	29 85       	ldd	r18, Y+9	; 0x09
     eec:	3a 85       	ldd	r19, Y+10	; 0x0a
     eee:	4b 85       	ldd	r20, Y+11	; 0x0b
     ef0:	5c 85       	ldd	r21, Y+12	; 0x0c
     ef2:	6d 85       	ldd	r22, Y+13	; 0x0d
     ef4:	7e 85       	ldd	r23, Y+14	; 0x0e
     ef6:	af 85       	ldd	r26, Y+15	; 0x0f
     ef8:	98 89       	ldd	r25, Y+16	; 0x10
     efa:	8a 2f       	mov	r24, r26
     efc:	60 96       	adiw	r28, 0x10	; 16
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	f8 94       	cli
     f02:	de bf       	out	0x3e, r29	; 62
     f04:	0f be       	out	0x3f, r0	; 63
     f06:	cd bf       	out	0x3d, r28	; 61
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	0f 91       	pop	r16
     f0e:	ff 90       	pop	r15
     f10:	ef 90       	pop	r14
     f12:	08 95       	ret

00000f14 <__clzsi2>:
     f14:	ef 92       	push	r14
     f16:	ff 92       	push	r15
     f18:	0f 93       	push	r16
     f1a:	1f 93       	push	r17
     f1c:	7b 01       	movw	r14, r22
     f1e:	8c 01       	movw	r16, r24
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	e8 16       	cp	r14, r24
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	f8 06       	cpc	r15, r24
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	08 07       	cpc	r16, r24
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	18 07       	cpc	r17, r24
     f30:	88 f4       	brcc	.+34     	; 0xf54 <__clzsi2+0x40>
     f32:	8f ef       	ldi	r24, 0xFF	; 255
     f34:	e8 16       	cp	r14, r24
     f36:	f1 04       	cpc	r15, r1
     f38:	01 05       	cpc	r16, r1
     f3a:	11 05       	cpc	r17, r1
     f3c:	31 f0       	breq	.+12     	; 0xf4a <__clzsi2+0x36>
     f3e:	28 f0       	brcs	.+10     	; 0xf4a <__clzsi2+0x36>
     f40:	88 e0       	ldi	r24, 0x08	; 8
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	a0 e0       	ldi	r26, 0x00	; 0
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	17 c0       	rjmp	.+46     	; 0xf78 <__clzsi2+0x64>
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	a0 e0       	ldi	r26, 0x00	; 0
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	12 c0       	rjmp	.+36     	; 0xf78 <__clzsi2+0x64>
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	e8 16       	cp	r14, r24
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	f8 06       	cpc	r15, r24
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	08 07       	cpc	r16, r24
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	18 07       	cpc	r17, r24
     f64:	28 f0       	brcs	.+10     	; 0xf70 <__clzsi2+0x5c>
     f66:	88 e1       	ldi	r24, 0x18	; 24
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	a0 e0       	ldi	r26, 0x00	; 0
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	04 c0       	rjmp	.+8      	; 0xf78 <__clzsi2+0x64>
     f70:	80 e1       	ldi	r24, 0x10	; 16
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	a0 e0       	ldi	r26, 0x00	; 0
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	20 e2       	ldi	r18, 0x20	; 32
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	28 1b       	sub	r18, r24
     f82:	39 0b       	sbc	r19, r25
     f84:	4a 0b       	sbc	r20, r26
     f86:	5b 0b       	sbc	r21, r27
     f88:	04 c0       	rjmp	.+8      	; 0xf92 <__clzsi2+0x7e>
     f8a:	16 95       	lsr	r17
     f8c:	07 95       	ror	r16
     f8e:	f7 94       	ror	r15
     f90:	e7 94       	ror	r14
     f92:	8a 95       	dec	r24
     f94:	d2 f7       	brpl	.-12     	; 0xf8a <__clzsi2+0x76>
     f96:	f7 01       	movw	r30, r14
     f98:	e1 5f       	subi	r30, 0xF1	; 241
     f9a:	fe 4f       	sbci	r31, 0xFE	; 254
     f9c:	80 81       	ld	r24, Z
     f9e:	28 1b       	sub	r18, r24
     fa0:	31 09       	sbc	r19, r1
     fa2:	41 09       	sbc	r20, r1
     fa4:	51 09       	sbc	r21, r1
     fa6:	c9 01       	movw	r24, r18
     fa8:	1f 91       	pop	r17
     faa:	0f 91       	pop	r16
     fac:	ff 90       	pop	r15
     fae:	ef 90       	pop	r14
     fb0:	08 95       	ret

00000fb2 <__pack_f>:
     fb2:	df 92       	push	r13
     fb4:	ef 92       	push	r14
     fb6:	ff 92       	push	r15
     fb8:	0f 93       	push	r16
     fba:	1f 93       	push	r17
     fbc:	fc 01       	movw	r30, r24
     fbe:	e4 80       	ldd	r14, Z+4	; 0x04
     fc0:	f5 80       	ldd	r15, Z+5	; 0x05
     fc2:	06 81       	ldd	r16, Z+6	; 0x06
     fc4:	17 81       	ldd	r17, Z+7	; 0x07
     fc6:	d1 80       	ldd	r13, Z+1	; 0x01
     fc8:	80 81       	ld	r24, Z
     fca:	82 30       	cpi	r24, 0x02	; 2
     fcc:	48 f4       	brcc	.+18     	; 0xfe0 <__pack_f+0x2e>
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	a0 e1       	ldi	r26, 0x10	; 16
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e8 2a       	or	r14, r24
     fd8:	f9 2a       	or	r15, r25
     fda:	0a 2b       	or	r16, r26
     fdc:	1b 2b       	or	r17, r27
     fde:	a5 c0       	rjmp	.+330    	; 0x112a <__pack_f+0x178>
     fe0:	84 30       	cpi	r24, 0x04	; 4
     fe2:	09 f4       	brne	.+2      	; 0xfe6 <__pack_f+0x34>
     fe4:	9f c0       	rjmp	.+318    	; 0x1124 <__pack_f+0x172>
     fe6:	82 30       	cpi	r24, 0x02	; 2
     fe8:	21 f4       	brne	.+8      	; 0xff2 <__pack_f+0x40>
     fea:	ee 24       	eor	r14, r14
     fec:	ff 24       	eor	r15, r15
     fee:	87 01       	movw	r16, r14
     ff0:	05 c0       	rjmp	.+10     	; 0xffc <__pack_f+0x4a>
     ff2:	e1 14       	cp	r14, r1
     ff4:	f1 04       	cpc	r15, r1
     ff6:	01 05       	cpc	r16, r1
     ff8:	11 05       	cpc	r17, r1
     ffa:	19 f4       	brne	.+6      	; 0x1002 <__pack_f+0x50>
     ffc:	e0 e0       	ldi	r30, 0x00	; 0
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	96 c0       	rjmp	.+300    	; 0x112e <__pack_f+0x17c>
    1002:	62 81       	ldd	r22, Z+2	; 0x02
    1004:	73 81       	ldd	r23, Z+3	; 0x03
    1006:	9f ef       	ldi	r25, 0xFF	; 255
    1008:	62 38       	cpi	r22, 0x82	; 130
    100a:	79 07       	cpc	r23, r25
    100c:	0c f0       	brlt	.+2      	; 0x1010 <__pack_f+0x5e>
    100e:	5b c0       	rjmp	.+182    	; 0x10c6 <__pack_f+0x114>
    1010:	22 e8       	ldi	r18, 0x82	; 130
    1012:	3f ef       	ldi	r19, 0xFF	; 255
    1014:	26 1b       	sub	r18, r22
    1016:	37 0b       	sbc	r19, r23
    1018:	2a 31       	cpi	r18, 0x1A	; 26
    101a:	31 05       	cpc	r19, r1
    101c:	2c f0       	brlt	.+10     	; 0x1028 <__pack_f+0x76>
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	40 e0       	ldi	r20, 0x00	; 0
    1024:	50 e0       	ldi	r21, 0x00	; 0
    1026:	2a c0       	rjmp	.+84     	; 0x107c <__pack_f+0xca>
    1028:	b8 01       	movw	r22, r16
    102a:	a7 01       	movw	r20, r14
    102c:	02 2e       	mov	r0, r18
    102e:	04 c0       	rjmp	.+8      	; 0x1038 <__pack_f+0x86>
    1030:	76 95       	lsr	r23
    1032:	67 95       	ror	r22
    1034:	57 95       	ror	r21
    1036:	47 95       	ror	r20
    1038:	0a 94       	dec	r0
    103a:	d2 f7       	brpl	.-12     	; 0x1030 <__pack_f+0x7e>
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	a0 e0       	ldi	r26, 0x00	; 0
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	04 c0       	rjmp	.+8      	; 0x104e <__pack_f+0x9c>
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	aa 1f       	adc	r26, r26
    104c:	bb 1f       	adc	r27, r27
    104e:	2a 95       	dec	r18
    1050:	d2 f7       	brpl	.-12     	; 0x1046 <__pack_f+0x94>
    1052:	01 97       	sbiw	r24, 0x01	; 1
    1054:	a1 09       	sbc	r26, r1
    1056:	b1 09       	sbc	r27, r1
    1058:	8e 21       	and	r24, r14
    105a:	9f 21       	and	r25, r15
    105c:	a0 23       	and	r26, r16
    105e:	b1 23       	and	r27, r17
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	a1 05       	cpc	r26, r1
    1064:	b1 05       	cpc	r27, r1
    1066:	21 f0       	breq	.+8      	; 0x1070 <__pack_f+0xbe>
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	a0 e0       	ldi	r26, 0x00	; 0
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	9a 01       	movw	r18, r20
    1072:	ab 01       	movw	r20, r22
    1074:	28 2b       	or	r18, r24
    1076:	39 2b       	or	r19, r25
    1078:	4a 2b       	or	r20, r26
    107a:	5b 2b       	or	r21, r27
    107c:	da 01       	movw	r26, r20
    107e:	c9 01       	movw	r24, r18
    1080:	8f 77       	andi	r24, 0x7F	; 127
    1082:	90 70       	andi	r25, 0x00	; 0
    1084:	a0 70       	andi	r26, 0x00	; 0
    1086:	b0 70       	andi	r27, 0x00	; 0
    1088:	80 34       	cpi	r24, 0x40	; 64
    108a:	91 05       	cpc	r25, r1
    108c:	a1 05       	cpc	r26, r1
    108e:	b1 05       	cpc	r27, r1
    1090:	39 f4       	brne	.+14     	; 0x10a0 <__pack_f+0xee>
    1092:	27 ff       	sbrs	r18, 7
    1094:	09 c0       	rjmp	.+18     	; 0x10a8 <__pack_f+0xf6>
    1096:	20 5c       	subi	r18, 0xC0	; 192
    1098:	3f 4f       	sbci	r19, 0xFF	; 255
    109a:	4f 4f       	sbci	r20, 0xFF	; 255
    109c:	5f 4f       	sbci	r21, 0xFF	; 255
    109e:	04 c0       	rjmp	.+8      	; 0x10a8 <__pack_f+0xf6>
    10a0:	21 5c       	subi	r18, 0xC1	; 193
    10a2:	3f 4f       	sbci	r19, 0xFF	; 255
    10a4:	4f 4f       	sbci	r20, 0xFF	; 255
    10a6:	5f 4f       	sbci	r21, 0xFF	; 255
    10a8:	e0 e0       	ldi	r30, 0x00	; 0
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	20 30       	cpi	r18, 0x00	; 0
    10ae:	a0 e0       	ldi	r26, 0x00	; 0
    10b0:	3a 07       	cpc	r19, r26
    10b2:	a0 e0       	ldi	r26, 0x00	; 0
    10b4:	4a 07       	cpc	r20, r26
    10b6:	a0 e4       	ldi	r26, 0x40	; 64
    10b8:	5a 07       	cpc	r21, r26
    10ba:	10 f0       	brcs	.+4      	; 0x10c0 <__pack_f+0x10e>
    10bc:	e1 e0       	ldi	r30, 0x01	; 1
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	79 01       	movw	r14, r18
    10c2:	8a 01       	movw	r16, r20
    10c4:	27 c0       	rjmp	.+78     	; 0x1114 <__pack_f+0x162>
    10c6:	60 38       	cpi	r22, 0x80	; 128
    10c8:	71 05       	cpc	r23, r1
    10ca:	64 f5       	brge	.+88     	; 0x1124 <__pack_f+0x172>
    10cc:	fb 01       	movw	r30, r22
    10ce:	e1 58       	subi	r30, 0x81	; 129
    10d0:	ff 4f       	sbci	r31, 0xFF	; 255
    10d2:	d8 01       	movw	r26, r16
    10d4:	c7 01       	movw	r24, r14
    10d6:	8f 77       	andi	r24, 0x7F	; 127
    10d8:	90 70       	andi	r25, 0x00	; 0
    10da:	a0 70       	andi	r26, 0x00	; 0
    10dc:	b0 70       	andi	r27, 0x00	; 0
    10de:	80 34       	cpi	r24, 0x40	; 64
    10e0:	91 05       	cpc	r25, r1
    10e2:	a1 05       	cpc	r26, r1
    10e4:	b1 05       	cpc	r27, r1
    10e6:	39 f4       	brne	.+14     	; 0x10f6 <__pack_f+0x144>
    10e8:	e7 fe       	sbrs	r14, 7
    10ea:	0d c0       	rjmp	.+26     	; 0x1106 <__pack_f+0x154>
    10ec:	80 e4       	ldi	r24, 0x40	; 64
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	a0 e0       	ldi	r26, 0x00	; 0
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	04 c0       	rjmp	.+8      	; 0x10fe <__pack_f+0x14c>
    10f6:	8f e3       	ldi	r24, 0x3F	; 63
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	a0 e0       	ldi	r26, 0x00	; 0
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e8 0e       	add	r14, r24
    1100:	f9 1e       	adc	r15, r25
    1102:	0a 1f       	adc	r16, r26
    1104:	1b 1f       	adc	r17, r27
    1106:	17 ff       	sbrs	r17, 7
    1108:	05 c0       	rjmp	.+10     	; 0x1114 <__pack_f+0x162>
    110a:	16 95       	lsr	r17
    110c:	07 95       	ror	r16
    110e:	f7 94       	ror	r15
    1110:	e7 94       	ror	r14
    1112:	31 96       	adiw	r30, 0x01	; 1
    1114:	87 e0       	ldi	r24, 0x07	; 7
    1116:	16 95       	lsr	r17
    1118:	07 95       	ror	r16
    111a:	f7 94       	ror	r15
    111c:	e7 94       	ror	r14
    111e:	8a 95       	dec	r24
    1120:	d1 f7       	brne	.-12     	; 0x1116 <__pack_f+0x164>
    1122:	05 c0       	rjmp	.+10     	; 0x112e <__pack_f+0x17c>
    1124:	ee 24       	eor	r14, r14
    1126:	ff 24       	eor	r15, r15
    1128:	87 01       	movw	r16, r14
    112a:	ef ef       	ldi	r30, 0xFF	; 255
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	6e 2f       	mov	r22, r30
    1130:	67 95       	ror	r22
    1132:	66 27       	eor	r22, r22
    1134:	67 95       	ror	r22
    1136:	90 2f       	mov	r25, r16
    1138:	9f 77       	andi	r25, 0x7F	; 127
    113a:	d7 94       	ror	r13
    113c:	dd 24       	eor	r13, r13
    113e:	d7 94       	ror	r13
    1140:	8e 2f       	mov	r24, r30
    1142:	86 95       	lsr	r24
    1144:	49 2f       	mov	r20, r25
    1146:	46 2b       	or	r20, r22
    1148:	58 2f       	mov	r21, r24
    114a:	5d 29       	or	r21, r13
    114c:	b7 01       	movw	r22, r14
    114e:	ca 01       	movw	r24, r20
    1150:	1f 91       	pop	r17
    1152:	0f 91       	pop	r16
    1154:	ff 90       	pop	r15
    1156:	ef 90       	pop	r14
    1158:	df 90       	pop	r13
    115a:	08 95       	ret

0000115c <__unpack_f>:
    115c:	fc 01       	movw	r30, r24
    115e:	db 01       	movw	r26, r22
    1160:	40 81       	ld	r20, Z
    1162:	51 81       	ldd	r21, Z+1	; 0x01
    1164:	22 81       	ldd	r18, Z+2	; 0x02
    1166:	62 2f       	mov	r22, r18
    1168:	6f 77       	andi	r22, 0x7F	; 127
    116a:	70 e0       	ldi	r23, 0x00	; 0
    116c:	22 1f       	adc	r18, r18
    116e:	22 27       	eor	r18, r18
    1170:	22 1f       	adc	r18, r18
    1172:	93 81       	ldd	r25, Z+3	; 0x03
    1174:	89 2f       	mov	r24, r25
    1176:	88 0f       	add	r24, r24
    1178:	82 2b       	or	r24, r18
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	99 1f       	adc	r25, r25
    1180:	99 27       	eor	r25, r25
    1182:	99 1f       	adc	r25, r25
    1184:	11 96       	adiw	r26, 0x01	; 1
    1186:	9c 93       	st	X, r25
    1188:	11 97       	sbiw	r26, 0x01	; 1
    118a:	21 15       	cp	r18, r1
    118c:	31 05       	cpc	r19, r1
    118e:	a9 f5       	brne	.+106    	; 0x11fa <__unpack_f+0x9e>
    1190:	41 15       	cp	r20, r1
    1192:	51 05       	cpc	r21, r1
    1194:	61 05       	cpc	r22, r1
    1196:	71 05       	cpc	r23, r1
    1198:	11 f4       	brne	.+4      	; 0x119e <__unpack_f+0x42>
    119a:	82 e0       	ldi	r24, 0x02	; 2
    119c:	37 c0       	rjmp	.+110    	; 0x120c <__unpack_f+0xb0>
    119e:	82 e8       	ldi	r24, 0x82	; 130
    11a0:	9f ef       	ldi	r25, 0xFF	; 255
    11a2:	13 96       	adiw	r26, 0x03	; 3
    11a4:	9c 93       	st	X, r25
    11a6:	8e 93       	st	-X, r24
    11a8:	12 97       	sbiw	r26, 0x02	; 2
    11aa:	9a 01       	movw	r18, r20
    11ac:	ab 01       	movw	r20, r22
    11ae:	67 e0       	ldi	r22, 0x07	; 7
    11b0:	22 0f       	add	r18, r18
    11b2:	33 1f       	adc	r19, r19
    11b4:	44 1f       	adc	r20, r20
    11b6:	55 1f       	adc	r21, r21
    11b8:	6a 95       	dec	r22
    11ba:	d1 f7       	brne	.-12     	; 0x11b0 <__unpack_f+0x54>
    11bc:	83 e0       	ldi	r24, 0x03	; 3
    11be:	8c 93       	st	X, r24
    11c0:	0d c0       	rjmp	.+26     	; 0x11dc <__unpack_f+0x80>
    11c2:	22 0f       	add	r18, r18
    11c4:	33 1f       	adc	r19, r19
    11c6:	44 1f       	adc	r20, r20
    11c8:	55 1f       	adc	r21, r21
    11ca:	12 96       	adiw	r26, 0x02	; 2
    11cc:	8d 91       	ld	r24, X+
    11ce:	9c 91       	ld	r25, X
    11d0:	13 97       	sbiw	r26, 0x03	; 3
    11d2:	01 97       	sbiw	r24, 0x01	; 1
    11d4:	13 96       	adiw	r26, 0x03	; 3
    11d6:	9c 93       	st	X, r25
    11d8:	8e 93       	st	-X, r24
    11da:	12 97       	sbiw	r26, 0x02	; 2
    11dc:	20 30       	cpi	r18, 0x00	; 0
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	38 07       	cpc	r19, r24
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	48 07       	cpc	r20, r24
    11e6:	80 e4       	ldi	r24, 0x40	; 64
    11e8:	58 07       	cpc	r21, r24
    11ea:	58 f3       	brcs	.-42     	; 0x11c2 <__unpack_f+0x66>
    11ec:	14 96       	adiw	r26, 0x04	; 4
    11ee:	2d 93       	st	X+, r18
    11f0:	3d 93       	st	X+, r19
    11f2:	4d 93       	st	X+, r20
    11f4:	5c 93       	st	X, r21
    11f6:	17 97       	sbiw	r26, 0x07	; 7
    11f8:	08 95       	ret
    11fa:	2f 3f       	cpi	r18, 0xFF	; 255
    11fc:	31 05       	cpc	r19, r1
    11fe:	79 f4       	brne	.+30     	; 0x121e <__unpack_f+0xc2>
    1200:	41 15       	cp	r20, r1
    1202:	51 05       	cpc	r21, r1
    1204:	61 05       	cpc	r22, r1
    1206:	71 05       	cpc	r23, r1
    1208:	19 f4       	brne	.+6      	; 0x1210 <__unpack_f+0xb4>
    120a:	84 e0       	ldi	r24, 0x04	; 4
    120c:	8c 93       	st	X, r24
    120e:	08 95       	ret
    1210:	64 ff       	sbrs	r22, 4
    1212:	03 c0       	rjmp	.+6      	; 0x121a <__unpack_f+0xbe>
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	8c 93       	st	X, r24
    1218:	12 c0       	rjmp	.+36     	; 0x123e <__unpack_f+0xe2>
    121a:	1c 92       	st	X, r1
    121c:	10 c0       	rjmp	.+32     	; 0x123e <__unpack_f+0xe2>
    121e:	2f 57       	subi	r18, 0x7F	; 127
    1220:	30 40       	sbci	r19, 0x00	; 0
    1222:	13 96       	adiw	r26, 0x03	; 3
    1224:	3c 93       	st	X, r19
    1226:	2e 93       	st	-X, r18
    1228:	12 97       	sbiw	r26, 0x02	; 2
    122a:	83 e0       	ldi	r24, 0x03	; 3
    122c:	8c 93       	st	X, r24
    122e:	87 e0       	ldi	r24, 0x07	; 7
    1230:	44 0f       	add	r20, r20
    1232:	55 1f       	adc	r21, r21
    1234:	66 1f       	adc	r22, r22
    1236:	77 1f       	adc	r23, r23
    1238:	8a 95       	dec	r24
    123a:	d1 f7       	brne	.-12     	; 0x1230 <__unpack_f+0xd4>
    123c:	70 64       	ori	r23, 0x40	; 64
    123e:	14 96       	adiw	r26, 0x04	; 4
    1240:	4d 93       	st	X+, r20
    1242:	5d 93       	st	X+, r21
    1244:	6d 93       	st	X+, r22
    1246:	7c 93       	st	X, r23
    1248:	17 97       	sbiw	r26, 0x07	; 7
    124a:	08 95       	ret

0000124c <__fpcmp_parts_f>:
    124c:	1f 93       	push	r17
    124e:	dc 01       	movw	r26, r24
    1250:	fb 01       	movw	r30, r22
    1252:	9c 91       	ld	r25, X
    1254:	92 30       	cpi	r25, 0x02	; 2
    1256:	08 f4       	brcc	.+2      	; 0x125a <__fpcmp_parts_f+0xe>
    1258:	47 c0       	rjmp	.+142    	; 0x12e8 <__fpcmp_parts_f+0x9c>
    125a:	80 81       	ld	r24, Z
    125c:	82 30       	cpi	r24, 0x02	; 2
    125e:	08 f4       	brcc	.+2      	; 0x1262 <__fpcmp_parts_f+0x16>
    1260:	43 c0       	rjmp	.+134    	; 0x12e8 <__fpcmp_parts_f+0x9c>
    1262:	94 30       	cpi	r25, 0x04	; 4
    1264:	51 f4       	brne	.+20     	; 0x127a <__fpcmp_parts_f+0x2e>
    1266:	11 96       	adiw	r26, 0x01	; 1
    1268:	1c 91       	ld	r17, X
    126a:	84 30       	cpi	r24, 0x04	; 4
    126c:	99 f5       	brne	.+102    	; 0x12d4 <__fpcmp_parts_f+0x88>
    126e:	81 81       	ldd	r24, Z+1	; 0x01
    1270:	68 2f       	mov	r22, r24
    1272:	70 e0       	ldi	r23, 0x00	; 0
    1274:	61 1b       	sub	r22, r17
    1276:	71 09       	sbc	r23, r1
    1278:	3f c0       	rjmp	.+126    	; 0x12f8 <__fpcmp_parts_f+0xac>
    127a:	84 30       	cpi	r24, 0x04	; 4
    127c:	21 f0       	breq	.+8      	; 0x1286 <__fpcmp_parts_f+0x3a>
    127e:	92 30       	cpi	r25, 0x02	; 2
    1280:	31 f4       	brne	.+12     	; 0x128e <__fpcmp_parts_f+0x42>
    1282:	82 30       	cpi	r24, 0x02	; 2
    1284:	b9 f1       	breq	.+110    	; 0x12f4 <__fpcmp_parts_f+0xa8>
    1286:	81 81       	ldd	r24, Z+1	; 0x01
    1288:	88 23       	and	r24, r24
    128a:	89 f1       	breq	.+98     	; 0x12ee <__fpcmp_parts_f+0xa2>
    128c:	2d c0       	rjmp	.+90     	; 0x12e8 <__fpcmp_parts_f+0x9c>
    128e:	11 96       	adiw	r26, 0x01	; 1
    1290:	1c 91       	ld	r17, X
    1292:	11 97       	sbiw	r26, 0x01	; 1
    1294:	82 30       	cpi	r24, 0x02	; 2
    1296:	f1 f0       	breq	.+60     	; 0x12d4 <__fpcmp_parts_f+0x88>
    1298:	81 81       	ldd	r24, Z+1	; 0x01
    129a:	18 17       	cp	r17, r24
    129c:	d9 f4       	brne	.+54     	; 0x12d4 <__fpcmp_parts_f+0x88>
    129e:	12 96       	adiw	r26, 0x02	; 2
    12a0:	2d 91       	ld	r18, X+
    12a2:	3c 91       	ld	r19, X
    12a4:	13 97       	sbiw	r26, 0x03	; 3
    12a6:	82 81       	ldd	r24, Z+2	; 0x02
    12a8:	93 81       	ldd	r25, Z+3	; 0x03
    12aa:	82 17       	cp	r24, r18
    12ac:	93 07       	cpc	r25, r19
    12ae:	94 f0       	brlt	.+36     	; 0x12d4 <__fpcmp_parts_f+0x88>
    12b0:	28 17       	cp	r18, r24
    12b2:	39 07       	cpc	r19, r25
    12b4:	bc f0       	brlt	.+46     	; 0x12e4 <__fpcmp_parts_f+0x98>
    12b6:	14 96       	adiw	r26, 0x04	; 4
    12b8:	8d 91       	ld	r24, X+
    12ba:	9d 91       	ld	r25, X+
    12bc:	0d 90       	ld	r0, X+
    12be:	bc 91       	ld	r27, X
    12c0:	a0 2d       	mov	r26, r0
    12c2:	24 81       	ldd	r18, Z+4	; 0x04
    12c4:	35 81       	ldd	r19, Z+5	; 0x05
    12c6:	46 81       	ldd	r20, Z+6	; 0x06
    12c8:	57 81       	ldd	r21, Z+7	; 0x07
    12ca:	28 17       	cp	r18, r24
    12cc:	39 07       	cpc	r19, r25
    12ce:	4a 07       	cpc	r20, r26
    12d0:	5b 07       	cpc	r21, r27
    12d2:	18 f4       	brcc	.+6      	; 0x12da <__fpcmp_parts_f+0x8e>
    12d4:	11 23       	and	r17, r17
    12d6:	41 f0       	breq	.+16     	; 0x12e8 <__fpcmp_parts_f+0x9c>
    12d8:	0a c0       	rjmp	.+20     	; 0x12ee <__fpcmp_parts_f+0xa2>
    12da:	82 17       	cp	r24, r18
    12dc:	93 07       	cpc	r25, r19
    12de:	a4 07       	cpc	r26, r20
    12e0:	b5 07       	cpc	r27, r21
    12e2:	40 f4       	brcc	.+16     	; 0x12f4 <__fpcmp_parts_f+0xa8>
    12e4:	11 23       	and	r17, r17
    12e6:	19 f0       	breq	.+6      	; 0x12ee <__fpcmp_parts_f+0xa2>
    12e8:	61 e0       	ldi	r22, 0x01	; 1
    12ea:	70 e0       	ldi	r23, 0x00	; 0
    12ec:	05 c0       	rjmp	.+10     	; 0x12f8 <__fpcmp_parts_f+0xac>
    12ee:	6f ef       	ldi	r22, 0xFF	; 255
    12f0:	7f ef       	ldi	r23, 0xFF	; 255
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <__fpcmp_parts_f+0xac>
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	cb 01       	movw	r24, r22
    12fa:	1f 91       	pop	r17
    12fc:	08 95       	ret

000012fe <MTIMER_voidTimer0OVFInit>:
////////////////////////////////////////////////////////////////////////////////////////



void MTIMER_voidTimer0OVFInit(void)
{
    12fe:	df 93       	push	r29
    1300:	cf 93       	push	r28
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE NORMAL MODE*/
		CLR_BIT(TCCR0, WGM00);
    1306:	a3 e5       	ldi	r26, 0x53	; 83
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	e3 e5       	ldi	r30, 0x53	; 83
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	8f 7b       	andi	r24, 0xBF	; 191
    1312:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, WGM01);
    1314:	a3 e5       	ldi	r26, 0x53	; 83
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e3 e5       	ldi	r30, 0x53	; 83
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	87 7f       	andi	r24, 0xF7	; 247
    1320:	8c 93       	st	X, r24

		SET_BIT(TIMSK, TOIE0);
    1322:	a9 e5       	ldi	r26, 0x59	; 89
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e9 e5       	ldi	r30, 0x59	; 89
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	81 60       	ori	r24, 0x01	; 1
    132e:	8c 93       	st	X, r24
#elif 	CLK == EIGHT
		TCCR0 = (TCCR0 & 0xf8) | 0x02;
#elif 	CLK == SIXTYFOUR
		TCCR0 = (TCCR0 & 0xf8) | 0x03;
#elif 	CLK == TWOFIFTYSIX
		TCCR0 = (TCCR0 & 0xf8) | 0x04;
    1330:	a3 e5       	ldi	r26, 0x53	; 83
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e3 e5       	ldi	r30, 0x53	; 83
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	88 7f       	andi	r24, 0xF8	; 248
    133c:	84 60       	ori	r24, 0x04	; 4
    133e:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xf8) | 0x06;
#elif 	CLK == EXTERN_RISING
		TCCR0 = (TCCR0 & 0xf8) | 0x07;
#endif

}
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <MTIMER_voidTimer0OVFDelay>:

void MTIMER_voidTimer0OVFDelay(u32 copy_u32Delay_ms)
{
    1346:	ef 92       	push	r14
    1348:	ff 92       	push	r15
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
    134e:	df 93       	push	r29
    1350:	cf 93       	push	r28
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
    1356:	61 97       	sbiw	r28, 0x11	; 17
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	f8 94       	cli
    135c:	de bf       	out	0x3e, r29	; 62
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	cd bf       	out	0x3d, r28	; 61
    1362:	6e 87       	std	Y+14, r22	; 0x0e
    1364:	7f 87       	std	Y+15, r23	; 0x0f
    1366:	88 8b       	std	Y+16, r24	; 0x10
    1368:	99 8b       	std	Y+17, r25	; 0x11
	f32 L_f32MaxCompare;
	f32 L_f32OverFlowCount;
	u32 L_u32Carry;
	u8 L_u8Offset;

	G_u8Check = 0;
    136a:	10 92 45 02 	sts	0x0245, r1
	MTIMER_voidTimer0OVFInit();
    136e:	0e 94 7f 09 	call	0x12fe	; 0x12fe <MTIMER_voidTimer0OVFInit>
		L_f32MaxCompare = L_f32MaxCompare * 256 * 8;
#elif 	CLK == SIXTYFOUR
		L_f32MaxCompare = (1000000.0) / F_CPU;
		L_f32MaxCompare = L_f32MaxCompare * 256 * 64;
#elif 	CLK == TWOFIFTYSIX
		L_f32MaxCompare = (1000000.0) / F_CPU;
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	a0 e0       	ldi	r26, 0x00	; 0
    1378:	be e3       	ldi	r27, 0x3E	; 62
    137a:	8a 87       	std	Y+10, r24	; 0x0a
    137c:	9b 87       	std	Y+11, r25	; 0x0b
    137e:	ac 87       	std	Y+12, r26	; 0x0c
    1380:	bd 87       	std	Y+13, r27	; 0x0d
		L_f32MaxCompare = L_f32MaxCompare * 256 * 256;
    1382:	6a 85       	ldd	r22, Y+10	; 0x0a
    1384:	7b 85       	ldd	r23, Y+11	; 0x0b
    1386:	8c 85       	ldd	r24, Y+12	; 0x0c
    1388:	9d 85       	ldd	r25, Y+13	; 0x0d
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	40 e8       	ldi	r20, 0x80	; 128
    1390:	53 e4       	ldi	r21, 0x43	; 67
    1392:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	bc 01       	movw	r22, r24
    139c:	cd 01       	movw	r24, r26
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	40 e8       	ldi	r20, 0x80	; 128
    13a4:	53 e4       	ldi	r21, 0x43	; 67
    13a6:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    13aa:	dc 01       	movw	r26, r24
    13ac:	cb 01       	movw	r24, r22
    13ae:	8a 87       	std	Y+10, r24	; 0x0a
    13b0:	9b 87       	std	Y+11, r25	; 0x0b
    13b2:	ac 87       	std	Y+12, r26	; 0x0c
    13b4:	bd 87       	std	Y+13, r27	; 0x0d
		L_f32MaxCompare = L_f32MaxCompare * 256 * 1024;

#endif


	if (copy_u32Delay_ms * 1000  <= L_f32MaxCompare)
    13b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    13b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    13ba:	a8 89       	ldd	r26, Y+16	; 0x10
    13bc:	b9 89       	ldd	r27, Y+17	; 0x11
    13be:	28 ee       	ldi	r18, 0xE8	; 232
    13c0:	33 e0       	ldi	r19, 0x03	; 3
    13c2:	40 e0       	ldi	r20, 0x00	; 0
    13c4:	50 e0       	ldi	r21, 0x00	; 0
    13c6:	bc 01       	movw	r22, r24
    13c8:	cd 01       	movw	r24, r26
    13ca:	0e 94 aa 23 	call	0x4754	; 0x4754 <__mulsi3>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	bc 01       	movw	r22, r24
    13d4:	cd 01       	movw	r24, r26
    13d6:	0e 94 92 06 	call	0xd24	; 0xd24 <__floatunsisf>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	bc 01       	movw	r22, r24
    13e0:	cd 01       	movw	r24, r26
    13e2:	2a 85       	ldd	r18, Y+10	; 0x0a
    13e4:	3b 85       	ldd	r19, Y+11	; 0x0b
    13e6:	4c 85       	ldd	r20, Y+12	; 0x0c
    13e8:	5d 85       	ldd	r21, Y+13	; 0x0d
    13ea:	0e 94 b0 05 	call	0xb60	; 0xb60 <__lesf2>
    13ee:	18 16       	cp	r1, r24
    13f0:	0c f4       	brge	.+2      	; 0x13f4 <MTIMER_voidTimer0OVFDelay+0xae>
    13f2:	49 c0       	rjmp	.+146    	; 0x1486 <MTIMER_voidTimer0OVFDelay+0x140>
		{
			L_f32OverFlowCount = (copy_u32Delay_ms / (L_f32MaxCompare/1000.0));
    13f4:	6e 85       	ldd	r22, Y+14	; 0x0e
    13f6:	7f 85       	ldd	r23, Y+15	; 0x0f
    13f8:	88 89       	ldd	r24, Y+16	; 0x10
    13fa:	99 89       	ldd	r25, Y+17	; 0x11
    13fc:	0e 94 92 06 	call	0xd24	; 0xd24 <__floatunsisf>
    1400:	7b 01       	movw	r14, r22
    1402:	8c 01       	movw	r16, r24
    1404:	6a 85       	ldd	r22, Y+10	; 0x0a
    1406:	7b 85       	ldd	r23, Y+11	; 0x0b
    1408:	8c 85       	ldd	r24, Y+12	; 0x0c
    140a:	9d 85       	ldd	r25, Y+13	; 0x0d
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	4a e7       	ldi	r20, 0x7A	; 122
    1412:	54 e4       	ldi	r21, 0x44	; 68
    1414:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    1418:	dc 01       	movw	r26, r24
    141a:	cb 01       	movw	r24, r22
    141c:	9c 01       	movw	r18, r24
    141e:	ad 01       	movw	r20, r26
    1420:	c8 01       	movw	r24, r16
    1422:	b7 01       	movw	r22, r14
    1424:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	8e 83       	std	Y+6, r24	; 0x06
    142e:	9f 83       	std	Y+7, r25	; 0x07
    1430:	a8 87       	std	Y+8, r26	; 0x08
    1432:	b9 87       	std	Y+9, r27	; 0x09
			L_u8Offset = L_f32OverFlowCount * 256.0;
    1434:	6e 81       	ldd	r22, Y+6	; 0x06
    1436:	7f 81       	ldd	r23, Y+7	; 0x07
    1438:	88 85       	ldd	r24, Y+8	; 0x08
    143a:	99 85       	ldd	r25, Y+9	; 0x09
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	40 e8       	ldi	r20, 0x80	; 128
    1442:	53 e4       	ldi	r21, 0x43	; 67
    1444:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	bc 01       	movw	r22, r24
    144e:	cd 01       	movw	r24, r26
    1450:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1454:	dc 01       	movw	r26, r24
    1456:	cb 01       	movw	r24, r22
    1458:	89 83       	std	Y+1, r24	; 0x01
			G_u32Overflows = 1;
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	a0 e0       	ldi	r26, 0x00	; 0
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	80 93 41 02 	sts	0x0241, r24
    1466:	90 93 42 02 	sts	0x0242, r25
    146a:	a0 93 43 02 	sts	0x0243, r26
    146e:	b0 93 44 02 	sts	0x0244, r27
			G_u8Reg = 256 - L_u8Offset;
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	81 95       	neg	r24
    1476:	80 93 40 02 	sts	0x0240, r24
			TCNT0 = G_u8Reg;
    147a:	e2 e5       	ldi	r30, 0x52	; 82
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 91 40 02 	lds	r24, 0x0240
    1482:	80 83       	st	Z, r24
    1484:	7f c0       	rjmp	.+254    	; 0x1584 <MTIMER_voidTimer0OVFDelay+0x23e>
		}
	else
		{
			L_f32OverFlowCount = (copy_u32Delay_ms / (L_f32MaxCompare/1000.0));
    1486:	6e 85       	ldd	r22, Y+14	; 0x0e
    1488:	7f 85       	ldd	r23, Y+15	; 0x0f
    148a:	88 89       	ldd	r24, Y+16	; 0x10
    148c:	99 89       	ldd	r25, Y+17	; 0x11
    148e:	0e 94 92 06 	call	0xd24	; 0xd24 <__floatunsisf>
    1492:	7b 01       	movw	r14, r22
    1494:	8c 01       	movw	r16, r24
    1496:	6a 85       	ldd	r22, Y+10	; 0x0a
    1498:	7b 85       	ldd	r23, Y+11	; 0x0b
    149a:	8c 85       	ldd	r24, Y+12	; 0x0c
    149c:	9d 85       	ldd	r25, Y+13	; 0x0d
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	4a e7       	ldi	r20, 0x7A	; 122
    14a4:	54 e4       	ldi	r21, 0x44	; 68
    14a6:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    14aa:	dc 01       	movw	r26, r24
    14ac:	cb 01       	movw	r24, r22
    14ae:	9c 01       	movw	r18, r24
    14b0:	ad 01       	movw	r20, r26
    14b2:	c8 01       	movw	r24, r16
    14b4:	b7 01       	movw	r22, r14
    14b6:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    14ba:	dc 01       	movw	r26, r24
    14bc:	cb 01       	movw	r24, r22
    14be:	8e 83       	std	Y+6, r24	; 0x06
    14c0:	9f 83       	std	Y+7, r25	; 0x07
    14c2:	a8 87       	std	Y+8, r26	; 0x08
    14c4:	b9 87       	std	Y+9, r27	; 0x09
			L_u32Carry = (copy_u32Delay_ms / (L_f32MaxCompare/1000));
    14c6:	6e 85       	ldd	r22, Y+14	; 0x0e
    14c8:	7f 85       	ldd	r23, Y+15	; 0x0f
    14ca:	88 89       	ldd	r24, Y+16	; 0x10
    14cc:	99 89       	ldd	r25, Y+17	; 0x11
    14ce:	0e 94 92 06 	call	0xd24	; 0xd24 <__floatunsisf>
    14d2:	7b 01       	movw	r14, r22
    14d4:	8c 01       	movw	r16, r24
    14d6:	6a 85       	ldd	r22, Y+10	; 0x0a
    14d8:	7b 85       	ldd	r23, Y+11	; 0x0b
    14da:	8c 85       	ldd	r24, Y+12	; 0x0c
    14dc:	9d 85       	ldd	r25, Y+13	; 0x0d
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	4a e7       	ldi	r20, 0x7A	; 122
    14e4:	54 e4       	ldi	r21, 0x44	; 68
    14e6:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	9c 01       	movw	r18, r24
    14f0:	ad 01       	movw	r20, r26
    14f2:	c8 01       	movw	r24, r16
    14f4:	b7 01       	movw	r22, r14
    14f6:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	bc 01       	movw	r22, r24
    1500:	cd 01       	movw	r24, r26
    1502:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	8a 83       	std	Y+2, r24	; 0x02
    150c:	9b 83       	std	Y+3, r25	; 0x03
    150e:	ac 83       	std	Y+4, r26	; 0x04
    1510:	bd 83       	std	Y+5, r27	; 0x05

			L_u8Offset = (L_f32OverFlowCount - L_u32Carry) * 256.0;
    1512:	6a 81       	ldd	r22, Y+2	; 0x02
    1514:	7b 81       	ldd	r23, Y+3	; 0x03
    1516:	8c 81       	ldd	r24, Y+4	; 0x04
    1518:	9d 81       	ldd	r25, Y+5	; 0x05
    151a:	0e 94 92 06 	call	0xd24	; 0xd24 <__floatunsisf>
    151e:	9b 01       	movw	r18, r22
    1520:	ac 01       	movw	r20, r24
    1522:	6e 81       	ldd	r22, Y+6	; 0x06
    1524:	7f 81       	ldd	r23, Y+7	; 0x07
    1526:	88 85       	ldd	r24, Y+8	; 0x08
    1528:	99 85       	ldd	r25, Y+9	; 0x09
    152a:	0e 94 1c 03 	call	0x638	; 0x638 <__subsf3>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	bc 01       	movw	r22, r24
    1534:	cd 01       	movw	r24, r26
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	40 e8       	ldi	r20, 0x80	; 128
    153c:	53 e4       	ldi	r21, 0x43	; 67
    153e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    1542:	dc 01       	movw	r26, r24
    1544:	cb 01       	movw	r24, r22
    1546:	bc 01       	movw	r22, r24
    1548:	cd 01       	movw	r24, r26
    154a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	89 83       	std	Y+1, r24	; 0x01
			G_u32Overflows = L_u32Carry +1 ;
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	9b 81       	ldd	r25, Y+3	; 0x03
    1558:	ac 81       	ldd	r26, Y+4	; 0x04
    155a:	bd 81       	ldd	r27, Y+5	; 0x05
    155c:	01 96       	adiw	r24, 0x01	; 1
    155e:	a1 1d       	adc	r26, r1
    1560:	b1 1d       	adc	r27, r1
    1562:	80 93 41 02 	sts	0x0241, r24
    1566:	90 93 42 02 	sts	0x0242, r25
    156a:	a0 93 43 02 	sts	0x0243, r26
    156e:	b0 93 44 02 	sts	0x0244, r27
			G_u8Reg = 256 - L_u8Offset;
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	81 95       	neg	r24
    1576:	80 93 40 02 	sts	0x0240, r24
			TCNT0 = G_u8Reg;
    157a:	e2 e5       	ldi	r30, 0x52	; 82
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 91 40 02 	lds	r24, 0x0240
    1582:	80 83       	st	Z, r24
		}

		while (GET_BIT(TIFR, TOV0) == 0 && G_u8Check == 0);
    1584:	e8 e5       	ldi	r30, 0x58	; 88
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	88 2f       	mov	r24, r24
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	81 70       	andi	r24, 0x01	; 1
    1590:	90 70       	andi	r25, 0x00	; 0
    1592:	00 97       	sbiw	r24, 0x00	; 0
    1594:	21 f4       	brne	.+8      	; 0x159e <MTIMER_voidTimer0OVFDelay+0x258>
    1596:	80 91 45 02 	lds	r24, 0x0245
    159a:	88 23       	and	r24, r24
    159c:	99 f3       	breq	.-26     	; 0x1584 <MTIMER_voidTimer0OVFDelay+0x23e>
}
    159e:	61 96       	adiw	r28, 0x11	; 17
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	de bf       	out	0x3e, r29	; 62
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	cd bf       	out	0x3d, r28	; 61
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	1f 91       	pop	r17
    15b0:	0f 91       	pop	r16
    15b2:	ff 90       	pop	r15
    15b4:	ef 90       	pop	r14
    15b6:	08 95       	ret

000015b8 <MTIMER_voidTimer0OVFSetCallBack>:

void MTIMER_voidTimer0OVFSetCallBack ( void (*copy_PFvoidTimer0OVF) (void))
{
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	00 d0       	rcall	.+0      	; 0x15be <MTIMER_voidTimer0OVFSetCallBack+0x6>
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	9a 83       	std	Y+2, r25	; 0x02
    15c4:	89 83       	std	Y+1, r24	; 0x01
	TIMER_PFTIMER0OVF = copy_PFvoidTimer0OVF ;
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ca:	90 93 29 02 	sts	0x0229, r25
    15ce:	80 93 28 02 	sts	0x0228, r24
}
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <MTIMER_voidTimer0COMPInit>:



void MTIMER_voidTimer0COMPInit(void)
{
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE CTC MODE*/
		CLR_BIT(TCCR0, WGM00);
    15e4:	a3 e5       	ldi	r26, 0x53	; 83
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e3 e5       	ldi	r30, 0x53	; 83
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	8f 7b       	andi	r24, 0xBF	; 191
    15f0:	8c 93       	st	X, r24
		SET_BIT(TCCR0, WGM01);
    15f2:	a3 e5       	ldi	r26, 0x53	; 83
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e3 e5       	ldi	r30, 0x53	; 83
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	88 60       	ori	r24, 0x08	; 8
    15fe:	8c 93       	st	X, r24

		SET_BIT(TIMSK, OCIE0);
    1600:	a9 e5       	ldi	r26, 0x59	; 89
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e9 e5       	ldi	r30, 0x59	; 89
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	82 60       	ori	r24, 0x02	; 2
    160c:	8c 93       	st	X, r24
#elif 	CLK == EIGHT
		TCCR0 = (TCCR0 & 0xf8) | 0x02;
#elif 	CLK == SIXTYFOUR
		TCCR0 = (TCCR0 & 0xf8) | 0x03;
#elif 	CLK == TWOFIFTYSIX
		TCCR0 = (TCCR0 & 0xf8) | 0x04;
    160e:	a3 e5       	ldi	r26, 0x53	; 83
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	e3 e5       	ldi	r30, 0x53	; 83
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	88 7f       	andi	r24, 0xF8	; 248
    161a:	84 60       	ori	r24, 0x04	; 4
    161c:	8c 93       	st	X, r24
#elif 	CLK == EXTERN_FALLING
		TCCR0 = (TCCR0 & 0xf8) | 0x06;
#elif 	CLK == EXTERN_RISING
		TCCR0 = (TCCR0 & 0xf8) | 0x07;
#endif
}
    161e:	cf 91       	pop	r28
    1620:	df 91       	pop	r29
    1622:	08 95       	ret

00001624 <MTIMER_voidTimer0COMPDelay>:


void MTIMER_voidTimer0COMPDelay(u8 copy_u8Offset, u32 copy_u32Counts)
{
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	00 d0       	rcall	.+0      	; 0x162a <MTIMER_voidTimer0COMPDelay+0x6>
    162a:	00 d0       	rcall	.+0      	; 0x162c <MTIMER_voidTimer0COMPDelay+0x8>
    162c:	0f 92       	push	r0
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	4a 83       	std	Y+2, r20	; 0x02
    1636:	5b 83       	std	Y+3, r21	; 0x03
    1638:	6c 83       	std	Y+4, r22	; 0x04
    163a:	7d 83       	std	Y+5, r23	; 0x05
	G_u8Check = 0;
    163c:	10 92 45 02 	sts	0x0245, r1
	G_u32Overflows = copy_u32Counts;
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	9b 81       	ldd	r25, Y+3	; 0x03
    1644:	ac 81       	ldd	r26, Y+4	; 0x04
    1646:	bd 81       	ldd	r27, Y+5	; 0x05
    1648:	80 93 41 02 	sts	0x0241, r24
    164c:	90 93 42 02 	sts	0x0242, r25
    1650:	a0 93 43 02 	sts	0x0243, r26
    1654:	b0 93 44 02 	sts	0x0244, r27
	if (copy_u32Counts == 1)
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	9b 81       	ldd	r25, Y+3	; 0x03
    165c:	ac 81       	ldd	r26, Y+4	; 0x04
    165e:	bd 81       	ldd	r27, Y+5	; 0x05
    1660:	81 30       	cpi	r24, 0x01	; 1
    1662:	91 05       	cpc	r25, r1
    1664:	a1 05       	cpc	r26, r1
    1666:	b1 05       	cpc	r27, r1
    1668:	29 f4       	brne	.+10     	; 0x1674 <MTIMER_voidTimer0COMPDelay+0x50>
	{
		OCR0 = copy_u8Offset;
    166a:	ec e5       	ldi	r30, 0x5C	; 92
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	80 83       	st	Z, r24
    1672:	10 c0       	rjmp	.+32     	; 0x1694 <MTIMER_voidTimer0COMPDelay+0x70>
	}
	else if (copy_u32Counts > 1)
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	9b 81       	ldd	r25, Y+3	; 0x03
    1678:	ac 81       	ldd	r26, Y+4	; 0x04
    167a:	bd 81       	ldd	r27, Y+5	; 0x05
    167c:	82 30       	cpi	r24, 0x02	; 2
    167e:	91 05       	cpc	r25, r1
    1680:	a1 05       	cpc	r26, r1
    1682:	b1 05       	cpc	r27, r1
    1684:	38 f0       	brcs	.+14     	; 0x1694 <MTIMER_voidTimer0COMPDelay+0x70>
	{
		G_u8Reg = copy_u8Offset;
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	80 93 40 02 	sts	0x0240, r24
		OCR0 = 255;
    168c:	ec e5       	ldi	r30, 0x5C	; 92
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	8f ef       	ldi	r24, 0xFF	; 255
    1692:	80 83       	st	Z, r24
	}
	MTIMER_voidTimer0COMPInit();
    1694:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <MTIMER_voidTimer0COMPInit>
	while (GET_BIT(TIFR, OCF0) == 0  &&  G_u8Check == 0);
    1698:	e8 e5       	ldi	r30, 0x58	; 88
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	86 95       	lsr	r24
    16a0:	88 2f       	mov	r24, r24
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	81 70       	andi	r24, 0x01	; 1
    16a6:	90 70       	andi	r25, 0x00	; 0
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	21 f4       	brne	.+8      	; 0x16b4 <MTIMER_voidTimer0COMPDelay+0x90>
    16ac:	80 91 45 02 	lds	r24, 0x0245
    16b0:	88 23       	and	r24, r24
    16b2:	91 f3       	breq	.-28     	; 0x1698 <MTIMER_voidTimer0COMPDelay+0x74>
	//TCCR0 = 0;
}
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	cf 91       	pop	r28
    16c0:	df 91       	pop	r29
    16c2:	08 95       	ret

000016c4 <MTIMER_voidTimer0COMPSetCallBack>:




void MTIMER_voidTimer0COMPSetCallBack ( void (*copy_PFvoidTimer0COMP) (void))
{
    16c4:	df 93       	push	r29
    16c6:	cf 93       	push	r28
    16c8:	00 d0       	rcall	.+0      	; 0x16ca <MTIMER_voidTimer0COMPSetCallBack+0x6>
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	9a 83       	std	Y+2, r25	; 0x02
    16d0:	89 83       	std	Y+1, r24	; 0x01
	TIMER_PFTIMER0COMP = copy_PFvoidTimer0COMP ;
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	9a 81       	ldd	r25, Y+2	; 0x02
    16d6:	90 93 2b 02 	sts	0x022B, r25
    16da:	80 93 2a 02 	sts	0x022A, r24
}
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <__vector_11>:


ISR (TIMER0_OVF_vect)
{
    16e8:	1f 92       	push	r1
    16ea:	0f 92       	push	r0
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	0f 92       	push	r0
    16f0:	11 24       	eor	r1, r1
    16f2:	2f 93       	push	r18
    16f4:	3f 93       	push	r19
    16f6:	4f 93       	push	r20
    16f8:	5f 93       	push	r21
    16fa:	6f 93       	push	r22
    16fc:	7f 93       	push	r23
    16fe:	8f 93       	push	r24
    1700:	9f 93       	push	r25
    1702:	af 93       	push	r26
    1704:	bf 93       	push	r27
    1706:	ef 93       	push	r30
    1708:	ff 93       	push	r31
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
	static u32 L_u32OVFCounter = 0 ;
	L_u32OVFCounter ++ ;
    1712:	80 91 30 02 	lds	r24, 0x0230
    1716:	90 91 31 02 	lds	r25, 0x0231
    171a:	a0 91 32 02 	lds	r26, 0x0232
    171e:	b0 91 33 02 	lds	r27, 0x0233
    1722:	01 96       	adiw	r24, 0x01	; 1
    1724:	a1 1d       	adc	r26, r1
    1726:	b1 1d       	adc	r27, r1
    1728:	80 93 30 02 	sts	0x0230, r24
    172c:	90 93 31 02 	sts	0x0231, r25
    1730:	a0 93 32 02 	sts	0x0232, r26
    1734:	b0 93 33 02 	sts	0x0233, r27
	if (L_u32OVFCounter == G_u32Overflows)
    1738:	20 91 30 02 	lds	r18, 0x0230
    173c:	30 91 31 02 	lds	r19, 0x0231
    1740:	40 91 32 02 	lds	r20, 0x0232
    1744:	50 91 33 02 	lds	r21, 0x0233
    1748:	80 91 41 02 	lds	r24, 0x0241
    174c:	90 91 42 02 	lds	r25, 0x0242
    1750:	a0 91 43 02 	lds	r26, 0x0243
    1754:	b0 91 44 02 	lds	r27, 0x0244
    1758:	28 17       	cp	r18, r24
    175a:	39 07       	cpc	r19, r25
    175c:	4a 07       	cpc	r20, r26
    175e:	5b 07       	cpc	r21, r27
    1760:	d9 f4       	brne	.+54     	; 0x1798 <__vector_11+0xb0>
	{
		L_u32OVFCounter = 0 ;
    1762:	10 92 30 02 	sts	0x0230, r1
    1766:	10 92 31 02 	sts	0x0231, r1
    176a:	10 92 32 02 	sts	0x0232, r1
    176e:	10 92 33 02 	sts	0x0233, r1
		TCNT0 = G_u8Reg;
    1772:	e2 e5       	ldi	r30, 0x52	; 82
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 91 40 02 	lds	r24, 0x0240
    177a:	80 83       	st	Z, r24
		if(TIMER_PFTIMER0OVF != NULL)
    177c:	80 91 28 02 	lds	r24, 0x0228
    1780:	90 91 29 02 	lds	r25, 0x0229
    1784:	00 97       	sbiw	r24, 0x00	; 0
    1786:	29 f0       	breq	.+10     	; 0x1792 <__vector_11+0xaa>
			TIMER_PFTIMER0OVF() ;
    1788:	e0 91 28 02 	lds	r30, 0x0228
    178c:	f0 91 29 02 	lds	r31, 0x0229
    1790:	09 95       	icall
		G_u8Check = 1;
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	80 93 45 02 	sts	0x0245, r24
	}
}
    1798:	cf 91       	pop	r28
    179a:	df 91       	pop	r29
    179c:	ff 91       	pop	r31
    179e:	ef 91       	pop	r30
    17a0:	bf 91       	pop	r27
    17a2:	af 91       	pop	r26
    17a4:	9f 91       	pop	r25
    17a6:	8f 91       	pop	r24
    17a8:	7f 91       	pop	r23
    17aa:	6f 91       	pop	r22
    17ac:	5f 91       	pop	r21
    17ae:	4f 91       	pop	r20
    17b0:	3f 91       	pop	r19
    17b2:	2f 91       	pop	r18
    17b4:	0f 90       	pop	r0
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	0f 90       	pop	r0
    17ba:	1f 90       	pop	r1
    17bc:	18 95       	reti

000017be <__vector_10>:

ISR (TIMER0_COMP_vect)
{
    17be:	1f 92       	push	r1
    17c0:	0f 92       	push	r0
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	0f 92       	push	r0
    17c6:	11 24       	eor	r1, r1
    17c8:	2f 93       	push	r18
    17ca:	3f 93       	push	r19
    17cc:	4f 93       	push	r20
    17ce:	5f 93       	push	r21
    17d0:	6f 93       	push	r22
    17d2:	7f 93       	push	r23
    17d4:	8f 93       	push	r24
    17d6:	9f 93       	push	r25
    17d8:	af 93       	push	r26
    17da:	bf 93       	push	r27
    17dc:	ef 93       	push	r30
    17de:	ff 93       	push	r31
    17e0:	df 93       	push	r29
    17e2:	cf 93       	push	r28
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
	static u32 G_u32CompCounter = 0;
	G_u32CompCounter ++ ;
    17e8:	80 91 34 02 	lds	r24, 0x0234
    17ec:	90 91 35 02 	lds	r25, 0x0235
    17f0:	a0 91 36 02 	lds	r26, 0x0236
    17f4:	b0 91 37 02 	lds	r27, 0x0237
    17f8:	01 96       	adiw	r24, 0x01	; 1
    17fa:	a1 1d       	adc	r26, r1
    17fc:	b1 1d       	adc	r27, r1
    17fe:	80 93 34 02 	sts	0x0234, r24
    1802:	90 93 35 02 	sts	0x0235, r25
    1806:	a0 93 36 02 	sts	0x0236, r26
    180a:	b0 93 37 02 	sts	0x0237, r27
	if( G_u32Overflows ==  G_u32CompCounter)
    180e:	20 91 41 02 	lds	r18, 0x0241
    1812:	30 91 42 02 	lds	r19, 0x0242
    1816:	40 91 43 02 	lds	r20, 0x0243
    181a:	50 91 44 02 	lds	r21, 0x0244
    181e:	80 91 34 02 	lds	r24, 0x0234
    1822:	90 91 35 02 	lds	r25, 0x0235
    1826:	a0 91 36 02 	lds	r26, 0x0236
    182a:	b0 91 37 02 	lds	r27, 0x0237
    182e:	28 17       	cp	r18, r24
    1830:	39 07       	cpc	r19, r25
    1832:	4a 07       	cpc	r20, r26
    1834:	5b 07       	cpc	r21, r27
    1836:	b9 f4       	brne	.+46     	; 0x1866 <__vector_10+0xa8>
	{
		if( TIMER_PFTIMER0COMP != NULL )
    1838:	80 91 2a 02 	lds	r24, 0x022A
    183c:	90 91 2b 02 	lds	r25, 0x022B
    1840:	00 97       	sbiw	r24, 0x00	; 0
    1842:	29 f0       	breq	.+10     	; 0x184e <__vector_10+0x90>
			TIMER_PFTIMER0COMP() ;
    1844:	e0 91 2a 02 	lds	r30, 0x022A
    1848:	f0 91 2b 02 	lds	r31, 0x022B
    184c:	09 95       	icall
		G_u32CompCounter = 0 ;
    184e:	10 92 34 02 	sts	0x0234, r1
    1852:	10 92 35 02 	sts	0x0235, r1
    1856:	10 92 36 02 	sts	0x0236, r1
    185a:	10 92 37 02 	sts	0x0237, r1
		G_u8Check = 1;
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	80 93 45 02 	sts	0x0245, r24
    1864:	3a c0       	rjmp	.+116    	; 0x18da <__vector_10+0x11c>
	}
	else if(G_u32Overflows == G_u32CompCounter + 1)
    1866:	80 91 34 02 	lds	r24, 0x0234
    186a:	90 91 35 02 	lds	r25, 0x0235
    186e:	a0 91 36 02 	lds	r26, 0x0236
    1872:	b0 91 37 02 	lds	r27, 0x0237
    1876:	9c 01       	movw	r18, r24
    1878:	ad 01       	movw	r20, r26
    187a:	2f 5f       	subi	r18, 0xFF	; 255
    187c:	3f 4f       	sbci	r19, 0xFF	; 255
    187e:	4f 4f       	sbci	r20, 0xFF	; 255
    1880:	5f 4f       	sbci	r21, 0xFF	; 255
    1882:	80 91 41 02 	lds	r24, 0x0241
    1886:	90 91 42 02 	lds	r25, 0x0242
    188a:	a0 91 43 02 	lds	r26, 0x0243
    188e:	b0 91 44 02 	lds	r27, 0x0244
    1892:	28 17       	cp	r18, r24
    1894:	39 07       	cpc	r19, r25
    1896:	4a 07       	cpc	r20, r26
    1898:	5b 07       	cpc	r21, r27
    189a:	31 f4       	brne	.+12     	; 0x18a8 <__vector_10+0xea>
	{
		OCR0 = G_u8Reg;
    189c:	ec e5       	ldi	r30, 0x5C	; 92
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 91 40 02 	lds	r24, 0x0240
    18a4:	80 83       	st	Z, r24
    18a6:	19 c0       	rjmp	.+50     	; 0x18da <__vector_10+0x11c>
	}
	else if (G_u32Overflows != G_u32CompCounter)
    18a8:	20 91 41 02 	lds	r18, 0x0241
    18ac:	30 91 42 02 	lds	r19, 0x0242
    18b0:	40 91 43 02 	lds	r20, 0x0243
    18b4:	50 91 44 02 	lds	r21, 0x0244
    18b8:	80 91 34 02 	lds	r24, 0x0234
    18bc:	90 91 35 02 	lds	r25, 0x0235
    18c0:	a0 91 36 02 	lds	r26, 0x0236
    18c4:	b0 91 37 02 	lds	r27, 0x0237
    18c8:	28 17       	cp	r18, r24
    18ca:	39 07       	cpc	r19, r25
    18cc:	4a 07       	cpc	r20, r26
    18ce:	5b 07       	cpc	r21, r27
    18d0:	21 f0       	breq	.+8      	; 0x18da <__vector_10+0x11c>
	{
		OCR0 = 255;
    18d2:	ec e5       	ldi	r30, 0x5C	; 92
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	8f ef       	ldi	r24, 0xFF	; 255
    18d8:	80 83       	st	Z, r24
	}

}
    18da:	cf 91       	pop	r28
    18dc:	df 91       	pop	r29
    18de:	ff 91       	pop	r31
    18e0:	ef 91       	pop	r30
    18e2:	bf 91       	pop	r27
    18e4:	af 91       	pop	r26
    18e6:	9f 91       	pop	r25
    18e8:	8f 91       	pop	r24
    18ea:	7f 91       	pop	r23
    18ec:	6f 91       	pop	r22
    18ee:	5f 91       	pop	r21
    18f0:	4f 91       	pop	r20
    18f2:	3f 91       	pop	r19
    18f4:	2f 91       	pop	r18
    18f6:	0f 90       	pop	r0
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	0f 90       	pop	r0
    18fc:	1f 90       	pop	r1
    18fe:	18 95       	reti

00001900 <MTIMER_voidTimer0FPWMInit>:


void MTIMER_voidTimer0FPWMInit()
{
    1900:	df 93       	push	r29
    1902:	cf 93       	push	r28
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE FPWM MODE*/
		SET_BIT(TCCR0, WGM00);
    1908:	a3 e5       	ldi	r26, 0x53	; 83
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	e3 e5       	ldi	r30, 0x53	; 83
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	80 64       	ori	r24, 0x40	; 64
    1914:	8c 93       	st	X, r24
		SET_BIT(TCCR0, WGM01);
    1916:	a3 e5       	ldi	r26, 0x53	; 83
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	e3 e5       	ldi	r30, 0x53	; 83
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	88 60       	ori	r24, 0x08	; 8
    1922:	8c 93       	st	X, r24

		SET_BIT(TCCR0, COM00);
    1924:	a3 e5       	ldi	r26, 0x53	; 83
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	e3 e5       	ldi	r30, 0x53	; 83
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	80 61       	ori	r24, 0x10	; 16
    1930:	8c 93       	st	X, r24
		SET_BIT(TCCR0, COM01);
    1932:	a3 e5       	ldi	r26, 0x53	; 83
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	e3 e5       	ldi	r30, 0x53	; 83
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	80 62       	ori	r24, 0x20	; 32
    193e:	8c 93       	st	X, r24
#elif 	CLK == EIGHT
		TCCR0 = (TCCR0 & 0xf8) | 0x02;
#elif 	CLK == SIXTYFOUR
		TCCR0 = (TCCR0 & 0xf8) | 0x03;
#elif 	CLK == TWOFIFTYSIX
		TCCR0 = (TCCR0 & 0xf8) | 0x04;
    1940:	a3 e5       	ldi	r26, 0x53	; 83
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	e3 e5       	ldi	r30, 0x53	; 83
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	88 7f       	andi	r24, 0xF8	; 248
    194c:	84 60       	ori	r24, 0x04	; 4
    194e:	8c 93       	st	X, r24
#elif 	CLK == EXTERN_FALLING
		TCCR0 = (TCCR0 & 0xf8) | 0x06;
#elif 	CLK == EXTERN_RISING
		TCCR0 = (TCCR0 & 0xf8) | 0x07;
#endif
}
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <MTIMER_voidTimer0FPWMWrite>:

void MTIMER_voidTimer0FPWMWrite(u8 copy_u8Value)
{
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	0f 92       	push	r0
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    1960:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = copy_u8Value;
    1962:	ec e5       	ldi	r30, 0x5C	; 92
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	80 83       	st	Z, r24

}
    196a:	0f 90       	pop	r0
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <MTIMER_voidTimer1FPWM_ICR_INIT>:
/////////////////////////////////////////////////////////////////////////////////////////
void MTIMER_voidTimer1FPWM_ICR_INIT (void)
{
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSING FWPM W/ ICR*/

	CLR_BIT(TCCR1A,WGM10);
    197a:	af e4       	ldi	r26, 0x4F	; 79
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	ef e4       	ldi	r30, 0x4F	; 79
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	8e 7f       	andi	r24, 0xFE	; 254
    1986:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    1988:	af e4       	ldi	r26, 0x4F	; 79
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	ef e4       	ldi	r30, 0x4F	; 79
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	82 60       	ori	r24, 0x02	; 2
    1994:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    1996:	ae e4       	ldi	r26, 0x4E	; 78
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	ee e4       	ldi	r30, 0x4E	; 78
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	88 60       	ori	r24, 0x08	; 8
    19a2:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    19a4:	ae e4       	ldi	r26, 0x4E	; 78
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	ee e4       	ldi	r30, 0x4E	; 78
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	80 61       	ori	r24, 0x10	; 16
    19b0:	8c 93       	st	X, r24

	/* CLEAR OC1A */
	CLR_BIT(TCCR1A, COM1A0);
    19b2:	af e4       	ldi	r26, 0x4F	; 79
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	ef e4       	ldi	r30, 0x4F	; 79
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	8f 7b       	andi	r24, 0xBF	; 191
    19be:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1A1);
    19c0:	af e4       	ldi	r26, 0x4F	; 79
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	ef e4       	ldi	r30, 0x4F	; 79
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	80 68       	ori	r24, 0x80	; 128
    19cc:	8c 93       	st	X, r24

	/*FREQUENCY CONTROL*/
#if		CLK_ONE == ONE
		TCCR1B = (TCCR1B & 0xf8) | 0x01;
    19ce:	ae e4       	ldi	r26, 0x4E	; 78
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	ee e4       	ldi	r30, 0x4E	; 78
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	88 7f       	andi	r24, 0xF8	; 248
    19da:	81 60       	ori	r24, 0x01	; 1
    19dc:	8c 93       	st	X, r24
		TCCR1B = (TCCR1B & 0xf8) | 0x07;
#endif


	/* ICR1 */
	ICR1 = 19999;
    19de:	e6 e4       	ldi	r30, 0x46	; 70
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	8f e1       	ldi	r24, 0x1F	; 31
    19e4:	9e e4       	ldi	r25, 0x4E	; 78
    19e6:	91 83       	std	Z+1, r25	; 0x01
    19e8:	80 83       	st	Z, r24
	/*N.B. Regarding FREQ and ICR1
	 * At mode 14, TIMER1 works in FPWM mode,
	 * with the value of ICR1 controlling
	 *the top value, hence, the frequency of PWM
	 * */
}
    19ea:	cf 91       	pop	r28
    19ec:	df 91       	pop	r29
    19ee:	08 95       	ret

000019f0 <MTIMER_voidTimer2COMPInit>:

////////////////////////////////////////////////////////////////////////////////////////

void MTIMER_voidTimer2COMPInit(void)

{
    19f0:	df 93       	push	r29
    19f2:	cf 93       	push	r28
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE CTC MODE*/
		CLR_BIT(TCCR2, WGM20);
    19f8:	a5 e4       	ldi	r26, 0x45	; 69
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e5 e4       	ldi	r30, 0x45	; 69
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	8f 7b       	andi	r24, 0xBF	; 191
    1a04:	8c 93       	st	X, r24
		SET_BIT(TCCR2, WGM21);
    1a06:	a5 e4       	ldi	r26, 0x45	; 69
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	e5 e4       	ldi	r30, 0x45	; 69
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	88 60       	ori	r24, 0x08	; 8
    1a12:	8c 93       	st	X, r24

		SET_BIT(TIMSK, OCIE2);
    1a14:	a9 e5       	ldi	r26, 0x59	; 89
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	e9 e5       	ldi	r30, 0x59	; 89
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	80 68       	ori	r24, 0x80	; 128
    1a20:	8c 93       	st	X, r24
		TCCR2 |= (1<<2);
		//TCCR2 = (TCCR2 & 0xf8) | 0x04;
#elif 	CLK == ONETWENTYEIGHT
		TCCR2 = (TCCR2 & 0xf8) | 0x05;
#elif 	CLK == TWOFIFTYSIX
		TCCR2 = (TCCR2 & 0xf8) | 0x06;
    1a22:	a5 e4       	ldi	r26, 0x45	; 69
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e5 e4       	ldi	r30, 0x45	; 69
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	88 7f       	andi	r24, 0xF8	; 248
    1a2e:	86 60       	ori	r24, 0x06	; 6
    1a30:	8c 93       	st	X, r24
#elif 	CLK == TENTWENTYFOUR
		TCCR2 = (TCCR2 & 0xf8) | 0x07;
#endif

}
    1a32:	cf 91       	pop	r28
    1a34:	df 91       	pop	r29
    1a36:	08 95       	ret

00001a38 <MTIMER_voidTimer2COMPDelay>:

void MTIMER_voidTimer2COMPDelay(u8 copy_u8Offset, u32 copy_u32Counts)
{
    1a38:	df 93       	push	r29
    1a3a:	cf 93       	push	r28
    1a3c:	00 d0       	rcall	.+0      	; 0x1a3e <MTIMER_voidTimer2COMPDelay+0x6>
    1a3e:	00 d0       	rcall	.+0      	; 0x1a40 <MTIMER_voidTimer2COMPDelay+0x8>
    1a40:	0f 92       	push	r0
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	89 83       	std	Y+1, r24	; 0x01
    1a48:	4a 83       	std	Y+2, r20	; 0x02
    1a4a:	5b 83       	std	Y+3, r21	; 0x03
    1a4c:	6c 83       	std	Y+4, r22	; 0x04
    1a4e:	7d 83       	std	Y+5, r23	; 0x05
	G_u8Check = 0;
    1a50:	10 92 45 02 	sts	0x0245, r1
	G_u32Overflows = copy_u32Counts;
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	9b 81       	ldd	r25, Y+3	; 0x03
    1a58:	ac 81       	ldd	r26, Y+4	; 0x04
    1a5a:	bd 81       	ldd	r27, Y+5	; 0x05
    1a5c:	80 93 41 02 	sts	0x0241, r24
    1a60:	90 93 42 02 	sts	0x0242, r25
    1a64:	a0 93 43 02 	sts	0x0243, r26
    1a68:	b0 93 44 02 	sts	0x0244, r27
	if (copy_u32Counts == 1)
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a70:	ac 81       	ldd	r26, Y+4	; 0x04
    1a72:	bd 81       	ldd	r27, Y+5	; 0x05
    1a74:	81 30       	cpi	r24, 0x01	; 1
    1a76:	91 05       	cpc	r25, r1
    1a78:	a1 05       	cpc	r26, r1
    1a7a:	b1 05       	cpc	r27, r1
    1a7c:	29 f4       	brne	.+10     	; 0x1a88 <MTIMER_voidTimer2COMPDelay+0x50>
	{
		OCR2 = copy_u8Offset;
    1a7e:	e3 e4       	ldi	r30, 0x43	; 67
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	80 83       	st	Z, r24
    1a86:	10 c0       	rjmp	.+32     	; 0x1aa8 <MTIMER_voidTimer2COMPDelay+0x70>
	}
	else if (copy_u32Counts > 1)
    1a88:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a8c:	ac 81       	ldd	r26, Y+4	; 0x04
    1a8e:	bd 81       	ldd	r27, Y+5	; 0x05
    1a90:	82 30       	cpi	r24, 0x02	; 2
    1a92:	91 05       	cpc	r25, r1
    1a94:	a1 05       	cpc	r26, r1
    1a96:	b1 05       	cpc	r27, r1
    1a98:	38 f0       	brcs	.+14     	; 0x1aa8 <MTIMER_voidTimer2COMPDelay+0x70>
	{
		G_u8Reg = copy_u8Offset;
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01
    1a9c:	80 93 40 02 	sts	0x0240, r24
		OCR2 = 255;
    1aa0:	e3 e4       	ldi	r30, 0x43	; 67
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	8f ef       	ldi	r24, 0xFF	; 255
    1aa6:	80 83       	st	Z, r24

	}
	MTIMER_voidTimer2COMPInit();
    1aa8:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <MTIMER_voidTimer2COMPInit>
	while (GET_BIT(TIFR, OCF2) == 0  &&  G_u8Check == 0);
    1aac:	e8 e5       	ldi	r30, 0x58	; 88
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	88 23       	and	r24, r24
    1ab4:	24 f0       	brlt	.+8      	; 0x1abe <MTIMER_voidTimer2COMPDelay+0x86>
    1ab6:	80 91 45 02 	lds	r24, 0x0245
    1aba:	88 23       	and	r24, r24
    1abc:	b9 f3       	breq	.-18     	; 0x1aac <MTIMER_voidTimer2COMPDelay+0x74>
	}
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	08 95       	ret

00001ace <MTIMER_voidTimer2COMPSetCallBack>:

void MTIMER_voidTimer2COMPSetCallBack ( void (*copy_PFvoidTimer2COMP) (void))
{
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	00 d0       	rcall	.+0      	; 0x1ad4 <MTIMER_voidTimer2COMPSetCallBack+0x6>
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
    1ad8:	9a 83       	std	Y+2, r25	; 0x02
    1ada:	89 83       	std	Y+1, r24	; 0x01
	TIMER_PFTIMER2COMP = copy_PFvoidTimer2COMP ;
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae0:	90 93 2f 02 	sts	0x022F, r25
    1ae4:	80 93 2e 02 	sts	0x022E, r24
}
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	08 95       	ret

00001af2 <MTIMER_voidTimer2OVFInit>:


void MTIMER_voidTimer2OVFInit(void)

{
    1af2:	df 93       	push	r29
    1af4:	cf 93       	push	r28
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE NORMAL MODE*/
		CLR_BIT(TCCR2, WGM20);
    1afa:	a5 e4       	ldi	r26, 0x45	; 69
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	e5 e4       	ldi	r30, 0x45	; 69
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	8f 7b       	andi	r24, 0xBF	; 191
    1b06:	8c 93       	st	X, r24
		CLR_BIT(TCCR2, WGM21);
    1b08:	a5 e4       	ldi	r26, 0x45	; 69
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e5 e4       	ldi	r30, 0x45	; 69
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	87 7f       	andi	r24, 0xF7	; 247
    1b14:	8c 93       	st	X, r24

		SET_BIT(TIMSK, TOIE2);
    1b16:	a9 e5       	ldi	r26, 0x59	; 89
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e9 e5       	ldi	r30, 0x59	; 89
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	80 64       	ori	r24, 0x40	; 64
    1b22:	8c 93       	st	X, r24
		TCCR2 |= (1<<2);
		//TCCR2 = (TCCR2 & 0xf8) | 0x04;
#elif 	CLK == ONETWENTYEIGHT
		TCCR2 = (TCCR2 & 0xf8) | 0x05;
#elif 	CLK == TWOFIFTYSIX
		TCCR2 = (TCCR2 & 0xf8) | 0x06;
    1b24:	a5 e4       	ldi	r26, 0x45	; 69
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e5 e4       	ldi	r30, 0x45	; 69
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	88 7f       	andi	r24, 0xF8	; 248
    1b30:	86 60       	ori	r24, 0x06	; 6
    1b32:	8c 93       	st	X, r24
#elif 	CLK == TENTWENTYFOUR
		TCCR2 = (TCCR2 & 0xf8) | 0x07;
#endif

}
    1b34:	cf 91       	pop	r28
    1b36:	df 91       	pop	r29
    1b38:	08 95       	ret

00001b3a <MTIMER_voidTimer2OVFDelay>:

void MTIMER_voidTimer2OVFDelay(u32 copy_u32Delay_ms)
{
    1b3a:	ef 92       	push	r14
    1b3c:	ff 92       	push	r15
    1b3e:	0f 93       	push	r16
    1b40:	1f 93       	push	r17
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	61 97       	sbiw	r28, 0x11	; 17
    1b4c:	0f b6       	in	r0, 0x3f	; 63
    1b4e:	f8 94       	cli
    1b50:	de bf       	out	0x3e, r29	; 62
    1b52:	0f be       	out	0x3f, r0	; 63
    1b54:	cd bf       	out	0x3d, r28	; 61
    1b56:	6e 87       	std	Y+14, r22	; 0x0e
    1b58:	7f 87       	std	Y+15, r23	; 0x0f
    1b5a:	88 8b       	std	Y+16, r24	; 0x10
    1b5c:	99 8b       	std	Y+17, r25	; 0x11
	f32 L_f32MaxCompare;
	f32 L_f32OverFlowCount;
	u32 L_u32Carry;
	u8 L_u8Offset;

	G_u8Check = 0;
    1b5e:	10 92 45 02 	sts	0x0245, r1

	MTIMER_voidTimer2OVFInit();
    1b62:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <MTIMER_voidTimer2OVFInit>
		L_f32MaxCompare = L_f32MaxCompare * 256 * 64;
#elif 	CLK == ONETWENTYEIGHT
		L_f32MaxCompare = (1000000.0) / F_CPU;
		L_f32MaxCompare = L_f32MaxCompare * 256 * 128;
#elif 	CLK == TWOFIFTYSIX
		L_f32MaxCompare = (1000000.0) / F_CPU;
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	a0 e0       	ldi	r26, 0x00	; 0
    1b6c:	be e3       	ldi	r27, 0x3E	; 62
    1b6e:	8a 87       	std	Y+10, r24	; 0x0a
    1b70:	9b 87       	std	Y+11, r25	; 0x0b
    1b72:	ac 87       	std	Y+12, r26	; 0x0c
    1b74:	bd 87       	std	Y+13, r27	; 0x0d
		L_f32MaxCompare = L_f32MaxCompare * 256 * 256;
    1b76:	6a 85       	ldd	r22, Y+10	; 0x0a
    1b78:	7b 85       	ldd	r23, Y+11	; 0x0b
    1b7a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b7c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	40 e8       	ldi	r20, 0x80	; 128
    1b84:	53 e4       	ldi	r21, 0x43	; 67
    1b86:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	bc 01       	movw	r22, r24
    1b90:	cd 01       	movw	r24, r26
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	40 e8       	ldi	r20, 0x80	; 128
    1b98:	53 e4       	ldi	r21, 0x43	; 67
    1b9a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	8a 87       	std	Y+10, r24	; 0x0a
    1ba4:	9b 87       	std	Y+11, r25	; 0x0b
    1ba6:	ac 87       	std	Y+12, r26	; 0x0c
    1ba8:	bd 87       	std	Y+13, r27	; 0x0d
		L_f32MaxCompare = L_f32MaxCompare * 256 * 1024;

#endif


	if (copy_u32Delay_ms * 1000  <= L_f32MaxCompare)
    1baa:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bac:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bae:	a8 89       	ldd	r26, Y+16	; 0x10
    1bb0:	b9 89       	ldd	r27, Y+17	; 0x11
    1bb2:	28 ee       	ldi	r18, 0xE8	; 232
    1bb4:	33 e0       	ldi	r19, 0x03	; 3
    1bb6:	40 e0       	ldi	r20, 0x00	; 0
    1bb8:	50 e0       	ldi	r21, 0x00	; 0
    1bba:	bc 01       	movw	r22, r24
    1bbc:	cd 01       	movw	r24, r26
    1bbe:	0e 94 aa 23 	call	0x4754	; 0x4754 <__mulsi3>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	bc 01       	movw	r22, r24
    1bc8:	cd 01       	movw	r24, r26
    1bca:	0e 94 92 06 	call	0xd24	; 0xd24 <__floatunsisf>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	bc 01       	movw	r22, r24
    1bd4:	cd 01       	movw	r24, r26
    1bd6:	2a 85       	ldd	r18, Y+10	; 0x0a
    1bd8:	3b 85       	ldd	r19, Y+11	; 0x0b
    1bda:	4c 85       	ldd	r20, Y+12	; 0x0c
    1bdc:	5d 85       	ldd	r21, Y+13	; 0x0d
    1bde:	0e 94 b0 05 	call	0xb60	; 0xb60 <__lesf2>
    1be2:	18 16       	cp	r1, r24
    1be4:	0c f4       	brge	.+2      	; 0x1be8 <MTIMER_voidTimer2OVFDelay+0xae>
    1be6:	49 c0       	rjmp	.+146    	; 0x1c7a <MTIMER_voidTimer2OVFDelay+0x140>
		{
			L_f32OverFlowCount = (copy_u32Delay_ms / (L_f32MaxCompare/1000.0));
    1be8:	6e 85       	ldd	r22, Y+14	; 0x0e
    1bea:	7f 85       	ldd	r23, Y+15	; 0x0f
    1bec:	88 89       	ldd	r24, Y+16	; 0x10
    1bee:	99 89       	ldd	r25, Y+17	; 0x11
    1bf0:	0e 94 92 06 	call	0xd24	; 0xd24 <__floatunsisf>
    1bf4:	7b 01       	movw	r14, r22
    1bf6:	8c 01       	movw	r16, r24
    1bf8:	6a 85       	ldd	r22, Y+10	; 0x0a
    1bfa:	7b 85       	ldd	r23, Y+11	; 0x0b
    1bfc:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bfe:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	4a e7       	ldi	r20, 0x7A	; 122
    1c06:	54 e4       	ldi	r21, 0x44	; 68
    1c08:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	9c 01       	movw	r18, r24
    1c12:	ad 01       	movw	r20, r26
    1c14:	c8 01       	movw	r24, r16
    1c16:	b7 01       	movw	r22, r14
    1c18:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	8e 83       	std	Y+6, r24	; 0x06
    1c22:	9f 83       	std	Y+7, r25	; 0x07
    1c24:	a8 87       	std	Y+8, r26	; 0x08
    1c26:	b9 87       	std	Y+9, r27	; 0x09
			L_u8Offset = L_f32OverFlowCount * 256.0;
    1c28:	6e 81       	ldd	r22, Y+6	; 0x06
    1c2a:	7f 81       	ldd	r23, Y+7	; 0x07
    1c2c:	88 85       	ldd	r24, Y+8	; 0x08
    1c2e:	99 85       	ldd	r25, Y+9	; 0x09
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	40 e8       	ldi	r20, 0x80	; 128
    1c36:	53 e4       	ldi	r21, 0x43	; 67
    1c38:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	bc 01       	movw	r22, r24
    1c42:	cd 01       	movw	r24, r26
    1c44:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	89 83       	std	Y+1, r24	; 0x01
			G_u32Overflows = 1;
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	a0 e0       	ldi	r26, 0x00	; 0
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	80 93 41 02 	sts	0x0241, r24
    1c5a:	90 93 42 02 	sts	0x0242, r25
    1c5e:	a0 93 43 02 	sts	0x0243, r26
    1c62:	b0 93 44 02 	sts	0x0244, r27
			G_u8Reg = 256 - L_u8Offset;
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
    1c68:	81 95       	neg	r24
    1c6a:	80 93 40 02 	sts	0x0240, r24
			TCNT2 = G_u8Reg;
    1c6e:	e4 e4       	ldi	r30, 0x44	; 68
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 91 40 02 	lds	r24, 0x0240
    1c76:	80 83       	st	Z, r24
    1c78:	7f c0       	rjmp	.+254    	; 0x1d78 <MTIMER_voidTimer2OVFDelay+0x23e>
		}
	else
	{
		L_f32OverFlowCount = (copy_u32Delay_ms / (L_f32MaxCompare/1000.0));
    1c7a:	6e 85       	ldd	r22, Y+14	; 0x0e
    1c7c:	7f 85       	ldd	r23, Y+15	; 0x0f
    1c7e:	88 89       	ldd	r24, Y+16	; 0x10
    1c80:	99 89       	ldd	r25, Y+17	; 0x11
    1c82:	0e 94 92 06 	call	0xd24	; 0xd24 <__floatunsisf>
    1c86:	7b 01       	movw	r14, r22
    1c88:	8c 01       	movw	r16, r24
    1c8a:	6a 85       	ldd	r22, Y+10	; 0x0a
    1c8c:	7b 85       	ldd	r23, Y+11	; 0x0b
    1c8e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c90:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	4a e7       	ldi	r20, 0x7A	; 122
    1c98:	54 e4       	ldi	r21, 0x44	; 68
    1c9a:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	9c 01       	movw	r18, r24
    1ca4:	ad 01       	movw	r20, r26
    1ca6:	c8 01       	movw	r24, r16
    1ca8:	b7 01       	movw	r22, r14
    1caa:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	8e 83       	std	Y+6, r24	; 0x06
    1cb4:	9f 83       	std	Y+7, r25	; 0x07
    1cb6:	a8 87       	std	Y+8, r26	; 0x08
    1cb8:	b9 87       	std	Y+9, r27	; 0x09
		L_u32Carry = (copy_u32Delay_ms / (L_f32MaxCompare/1000));
    1cba:	6e 85       	ldd	r22, Y+14	; 0x0e
    1cbc:	7f 85       	ldd	r23, Y+15	; 0x0f
    1cbe:	88 89       	ldd	r24, Y+16	; 0x10
    1cc0:	99 89       	ldd	r25, Y+17	; 0x11
    1cc2:	0e 94 92 06 	call	0xd24	; 0xd24 <__floatunsisf>
    1cc6:	7b 01       	movw	r14, r22
    1cc8:	8c 01       	movw	r16, r24
    1cca:	6a 85       	ldd	r22, Y+10	; 0x0a
    1ccc:	7b 85       	ldd	r23, Y+11	; 0x0b
    1cce:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cd0:	9d 85       	ldd	r25, Y+13	; 0x0d
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	4a e7       	ldi	r20, 0x7A	; 122
    1cd8:	54 e4       	ldi	r21, 0x44	; 68
    1cda:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	9c 01       	movw	r18, r24
    1ce4:	ad 01       	movw	r20, r26
    1ce6:	c8 01       	movw	r24, r16
    1ce8:	b7 01       	movw	r22, r14
    1cea:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	bc 01       	movw	r22, r24
    1cf4:	cd 01       	movw	r24, r26
    1cf6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	8a 83       	std	Y+2, r24	; 0x02
    1d00:	9b 83       	std	Y+3, r25	; 0x03
    1d02:	ac 83       	std	Y+4, r26	; 0x04
    1d04:	bd 83       	std	Y+5, r27	; 0x05

		L_u8Offset = (L_f32OverFlowCount - L_u32Carry) * 256.0;
    1d06:	6a 81       	ldd	r22, Y+2	; 0x02
    1d08:	7b 81       	ldd	r23, Y+3	; 0x03
    1d0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d0e:	0e 94 92 06 	call	0xd24	; 0xd24 <__floatunsisf>
    1d12:	9b 01       	movw	r18, r22
    1d14:	ac 01       	movw	r20, r24
    1d16:	6e 81       	ldd	r22, Y+6	; 0x06
    1d18:	7f 81       	ldd	r23, Y+7	; 0x07
    1d1a:	88 85       	ldd	r24, Y+8	; 0x08
    1d1c:	99 85       	ldd	r25, Y+9	; 0x09
    1d1e:	0e 94 1c 03 	call	0x638	; 0x638 <__subsf3>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	bc 01       	movw	r22, r24
    1d28:	cd 01       	movw	r24, r26
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	40 e8       	ldi	r20, 0x80	; 128
    1d30:	53 e4       	ldi	r21, 0x43	; 67
    1d32:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	bc 01       	movw	r22, r24
    1d3c:	cd 01       	movw	r24, r26
    1d3e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	89 83       	std	Y+1, r24	; 0x01
		G_u32Overflows = L_u32Carry +1 ;
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d4c:	ac 81       	ldd	r26, Y+4	; 0x04
    1d4e:	bd 81       	ldd	r27, Y+5	; 0x05
    1d50:	01 96       	adiw	r24, 0x01	; 1
    1d52:	a1 1d       	adc	r26, r1
    1d54:	b1 1d       	adc	r27, r1
    1d56:	80 93 41 02 	sts	0x0241, r24
    1d5a:	90 93 42 02 	sts	0x0242, r25
    1d5e:	a0 93 43 02 	sts	0x0243, r26
    1d62:	b0 93 44 02 	sts	0x0244, r27
		G_u8Reg = 256 - L_u8Offset;
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	81 95       	neg	r24
    1d6a:	80 93 40 02 	sts	0x0240, r24
		TCNT2 = G_u8Reg;
    1d6e:	e4 e4       	ldi	r30, 0x44	; 68
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 91 40 02 	lds	r24, 0x0240
    1d76:	80 83       	st	Z, r24

	}

	while (GET_BIT(TIFR, TOV2) == 0 && G_u8Check == 0);
    1d78:	e8 e5       	ldi	r30, 0x58	; 88
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	82 95       	swap	r24
    1d80:	86 95       	lsr	r24
    1d82:	86 95       	lsr	r24
    1d84:	83 70       	andi	r24, 0x03	; 3
    1d86:	88 2f       	mov	r24, r24
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	81 70       	andi	r24, 0x01	; 1
    1d8c:	90 70       	andi	r25, 0x00	; 0
    1d8e:	00 97       	sbiw	r24, 0x00	; 0
    1d90:	21 f4       	brne	.+8      	; 0x1d9a <MTIMER_voidTimer2OVFDelay+0x260>
    1d92:	80 91 45 02 	lds	r24, 0x0245
    1d96:	88 23       	and	r24, r24
    1d98:	79 f3       	breq	.-34     	; 0x1d78 <MTIMER_voidTimer2OVFDelay+0x23e>
}
    1d9a:	61 96       	adiw	r28, 0x11	; 17
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	f8 94       	cli
    1da0:	de bf       	out	0x3e, r29	; 62
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	cd bf       	out	0x3d, r28	; 61
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	1f 91       	pop	r17
    1dac:	0f 91       	pop	r16
    1dae:	ff 90       	pop	r15
    1db0:	ef 90       	pop	r14
    1db2:	08 95       	ret

00001db4 <MTIMER_voidTimer2OVFSetCallBack>:

void MTIMER_voidTimer2OVFSetCallBack ( void (*copy_PFvoidTimer2OVF) (void))
{
    1db4:	df 93       	push	r29
    1db6:	cf 93       	push	r28
    1db8:	00 d0       	rcall	.+0      	; 0x1dba <MTIMER_voidTimer2OVFSetCallBack+0x6>
    1dba:	cd b7       	in	r28, 0x3d	; 61
    1dbc:	de b7       	in	r29, 0x3e	; 62
    1dbe:	9a 83       	std	Y+2, r25	; 0x02
    1dc0:	89 83       	std	Y+1, r24	; 0x01
	TIMER_PFTIMER2OVF = copy_PFvoidTimer2OVF ;
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc6:	90 93 2d 02 	sts	0x022D, r25
    1dca:	80 93 2c 02 	sts	0x022C, r24
}
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	08 95       	ret

00001dd8 <MTIMER_voidTimer2FPWMInit>:


void MTIMER_voidTimer2FPWMInit()
{
    1dd8:	df 93       	push	r29
    1dda:	cf 93       	push	r28
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
	/*CHOOSE FPWM MODE*/
		SET_BIT(TCCR2, WGM20);
    1de0:	a5 e4       	ldi	r26, 0x45	; 69
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e5 e4       	ldi	r30, 0x45	; 69
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	80 64       	ori	r24, 0x40	; 64
    1dec:	8c 93       	st	X, r24
		SET_BIT(TCCR2, WGM21);
    1dee:	a5 e4       	ldi	r26, 0x45	; 69
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e5 e4       	ldi	r30, 0x45	; 69
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	88 60       	ori	r24, 0x08	; 8
    1dfa:	8c 93       	st	X, r24

		CLR_BIT(TCCR2, COM20);
    1dfc:	a5 e4       	ldi	r26, 0x45	; 69
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	e5 e4       	ldi	r30, 0x45	; 69
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	8f 7e       	andi	r24, 0xEF	; 239
    1e08:	8c 93       	st	X, r24
		SET_BIT(TCCR2, COM21);
    1e0a:	a5 e4       	ldi	r26, 0x45	; 69
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	e5 e4       	ldi	r30, 0x45	; 69
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	80 62       	ori	r24, 0x20	; 32
    1e16:	8c 93       	st	X, r24
		TCCR2 |= (1<<2);
		//TCCR2 = (TCCR2 & 0xf8) | 0x04;
#elif 	CLK == ONETWENTYEIGHT
		TCCR2 = (TCCR2 & 0xf8) | 0x05;
#elif 	CLK == TWOFIFTYSIX
		TCCR2 = (TCCR2 & 0xf8) | 0x06;
    1e18:	a5 e4       	ldi	r26, 0x45	; 69
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e5 e4       	ldi	r30, 0x45	; 69
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	88 7f       	andi	r24, 0xF8	; 248
    1e24:	86 60       	ori	r24, 0x06	; 6
    1e26:	8c 93       	st	X, r24
#elif 	CLK == TENTWENTYFOUR
		TCCR2 = (TCCR2 & 0xf8) | 0x07;
#endif
}
    1e28:	cf 91       	pop	r28
    1e2a:	df 91       	pop	r29
    1e2c:	08 95       	ret

00001e2e <MTIMER_voidTimer2FPWMWrite>:


void MTIMER_voidTimer2FPWMWrite(u8 copy_u8Value)
{
    1e2e:	df 93       	push	r29
    1e30:	cf 93       	push	r28
    1e32:	0f 92       	push	r0
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
    1e38:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = copy_u8Value;
    1e3a:	e3 e4       	ldi	r30, 0x43	; 67
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	89 81       	ldd	r24, Y+1	; 0x01
    1e40:	80 83       	st	Z, r24
}
    1e42:	0f 90       	pop	r0
    1e44:	cf 91       	pop	r28
    1e46:	df 91       	pop	r29
    1e48:	08 95       	ret

00001e4a <__vector_5>:




ISR (TIMER2_OVF_vect)
{
    1e4a:	1f 92       	push	r1
    1e4c:	0f 92       	push	r0
    1e4e:	0f b6       	in	r0, 0x3f	; 63
    1e50:	0f 92       	push	r0
    1e52:	11 24       	eor	r1, r1
    1e54:	2f 93       	push	r18
    1e56:	3f 93       	push	r19
    1e58:	4f 93       	push	r20
    1e5a:	5f 93       	push	r21
    1e5c:	6f 93       	push	r22
    1e5e:	7f 93       	push	r23
    1e60:	8f 93       	push	r24
    1e62:	9f 93       	push	r25
    1e64:	af 93       	push	r26
    1e66:	bf 93       	push	r27
    1e68:	ef 93       	push	r30
    1e6a:	ff 93       	push	r31
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	cd b7       	in	r28, 0x3d	; 61
    1e72:	de b7       	in	r29, 0x3e	; 62
	static u32 L_u32OVFCounter = 0 ;
	L_u32OVFCounter ++ ;
    1e74:	80 91 38 02 	lds	r24, 0x0238
    1e78:	90 91 39 02 	lds	r25, 0x0239
    1e7c:	a0 91 3a 02 	lds	r26, 0x023A
    1e80:	b0 91 3b 02 	lds	r27, 0x023B
    1e84:	01 96       	adiw	r24, 0x01	; 1
    1e86:	a1 1d       	adc	r26, r1
    1e88:	b1 1d       	adc	r27, r1
    1e8a:	80 93 38 02 	sts	0x0238, r24
    1e8e:	90 93 39 02 	sts	0x0239, r25
    1e92:	a0 93 3a 02 	sts	0x023A, r26
    1e96:	b0 93 3b 02 	sts	0x023B, r27
	if (L_u32OVFCounter == G_u32Overflows)
    1e9a:	20 91 38 02 	lds	r18, 0x0238
    1e9e:	30 91 39 02 	lds	r19, 0x0239
    1ea2:	40 91 3a 02 	lds	r20, 0x023A
    1ea6:	50 91 3b 02 	lds	r21, 0x023B
    1eaa:	80 91 41 02 	lds	r24, 0x0241
    1eae:	90 91 42 02 	lds	r25, 0x0242
    1eb2:	a0 91 43 02 	lds	r26, 0x0243
    1eb6:	b0 91 44 02 	lds	r27, 0x0244
    1eba:	28 17       	cp	r18, r24
    1ebc:	39 07       	cpc	r19, r25
    1ebe:	4a 07       	cpc	r20, r26
    1ec0:	5b 07       	cpc	r21, r27
    1ec2:	d9 f4       	brne	.+54     	; 0x1efa <__vector_5+0xb0>
	{
		L_u32OVFCounter = 0 ;
    1ec4:	10 92 38 02 	sts	0x0238, r1
    1ec8:	10 92 39 02 	sts	0x0239, r1
    1ecc:	10 92 3a 02 	sts	0x023A, r1
    1ed0:	10 92 3b 02 	sts	0x023B, r1
		TCNT2 = G_u8Reg;
    1ed4:	e4 e4       	ldi	r30, 0x44	; 68
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 91 40 02 	lds	r24, 0x0240
    1edc:	80 83       	st	Z, r24
		if ( TIMER_PFTIMER2OVF != NULL )
    1ede:	80 91 2c 02 	lds	r24, 0x022C
    1ee2:	90 91 2d 02 	lds	r25, 0x022D
    1ee6:	00 97       	sbiw	r24, 0x00	; 0
    1ee8:	29 f0       	breq	.+10     	; 0x1ef4 <__vector_5+0xaa>
			TIMER_PFTIMER2OVF() ;
    1eea:	e0 91 2c 02 	lds	r30, 0x022C
    1eee:	f0 91 2d 02 	lds	r31, 0x022D
    1ef2:	09 95       	icall
		G_u8Check = 1;
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	80 93 45 02 	sts	0x0245, r24
	}
}
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	ff 91       	pop	r31
    1f00:	ef 91       	pop	r30
    1f02:	bf 91       	pop	r27
    1f04:	af 91       	pop	r26
    1f06:	9f 91       	pop	r25
    1f08:	8f 91       	pop	r24
    1f0a:	7f 91       	pop	r23
    1f0c:	6f 91       	pop	r22
    1f0e:	5f 91       	pop	r21
    1f10:	4f 91       	pop	r20
    1f12:	3f 91       	pop	r19
    1f14:	2f 91       	pop	r18
    1f16:	0f 90       	pop	r0
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	0f 90       	pop	r0
    1f1c:	1f 90       	pop	r1
    1f1e:	18 95       	reti

00001f20 <__vector_4>:


ISR (TIMER2_COMP_vect)
{
    1f20:	1f 92       	push	r1
    1f22:	0f 92       	push	r0
    1f24:	0f b6       	in	r0, 0x3f	; 63
    1f26:	0f 92       	push	r0
    1f28:	11 24       	eor	r1, r1
    1f2a:	2f 93       	push	r18
    1f2c:	3f 93       	push	r19
    1f2e:	4f 93       	push	r20
    1f30:	5f 93       	push	r21
    1f32:	6f 93       	push	r22
    1f34:	7f 93       	push	r23
    1f36:	8f 93       	push	r24
    1f38:	9f 93       	push	r25
    1f3a:	af 93       	push	r26
    1f3c:	bf 93       	push	r27
    1f3e:	ef 93       	push	r30
    1f40:	ff 93       	push	r31
    1f42:	df 93       	push	r29
    1f44:	cf 93       	push	r28
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
	static u32 G_u32CompCounter = 0;
	G_u32CompCounter ++ ;
    1f4a:	80 91 3c 02 	lds	r24, 0x023C
    1f4e:	90 91 3d 02 	lds	r25, 0x023D
    1f52:	a0 91 3e 02 	lds	r26, 0x023E
    1f56:	b0 91 3f 02 	lds	r27, 0x023F
    1f5a:	01 96       	adiw	r24, 0x01	; 1
    1f5c:	a1 1d       	adc	r26, r1
    1f5e:	b1 1d       	adc	r27, r1
    1f60:	80 93 3c 02 	sts	0x023C, r24
    1f64:	90 93 3d 02 	sts	0x023D, r25
    1f68:	a0 93 3e 02 	sts	0x023E, r26
    1f6c:	b0 93 3f 02 	sts	0x023F, r27
	if( G_u32CompCounter == G_u32Overflows )
    1f70:	20 91 3c 02 	lds	r18, 0x023C
    1f74:	30 91 3d 02 	lds	r19, 0x023D
    1f78:	40 91 3e 02 	lds	r20, 0x023E
    1f7c:	50 91 3f 02 	lds	r21, 0x023F
    1f80:	80 91 41 02 	lds	r24, 0x0241
    1f84:	90 91 42 02 	lds	r25, 0x0242
    1f88:	a0 91 43 02 	lds	r26, 0x0243
    1f8c:	b0 91 44 02 	lds	r27, 0x0244
    1f90:	28 17       	cp	r18, r24
    1f92:	39 07       	cpc	r19, r25
    1f94:	4a 07       	cpc	r20, r26
    1f96:	5b 07       	cpc	r21, r27
    1f98:	b9 f4       	brne	.+46     	; 0x1fc8 <__vector_4+0xa8>
	{
		if(TIMER_PFTIMER2COMP != NULL)
    1f9a:	80 91 2e 02 	lds	r24, 0x022E
    1f9e:	90 91 2f 02 	lds	r25, 0x022F
    1fa2:	00 97       	sbiw	r24, 0x00	; 0
    1fa4:	29 f0       	breq	.+10     	; 0x1fb0 <__vector_4+0x90>
			TIMER_PFTIMER2COMP() ;
    1fa6:	e0 91 2e 02 	lds	r30, 0x022E
    1faa:	f0 91 2f 02 	lds	r31, 0x022F
    1fae:	09 95       	icall
		G_u32CompCounter = 0 ;
    1fb0:	10 92 3c 02 	sts	0x023C, r1
    1fb4:	10 92 3d 02 	sts	0x023D, r1
    1fb8:	10 92 3e 02 	sts	0x023E, r1
    1fbc:	10 92 3f 02 	sts	0x023F, r1
		G_u8Check = 1;
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	80 93 45 02 	sts	0x0245, r24
    1fc6:	3a c0       	rjmp	.+116    	; 0x203c <__vector_4+0x11c>
	}
	else if(G_u32CompCounter == G_u32Overflows - 1)
    1fc8:	80 91 41 02 	lds	r24, 0x0241
    1fcc:	90 91 42 02 	lds	r25, 0x0242
    1fd0:	a0 91 43 02 	lds	r26, 0x0243
    1fd4:	b0 91 44 02 	lds	r27, 0x0244
    1fd8:	9c 01       	movw	r18, r24
    1fda:	ad 01       	movw	r20, r26
    1fdc:	21 50       	subi	r18, 0x01	; 1
    1fde:	30 40       	sbci	r19, 0x00	; 0
    1fe0:	40 40       	sbci	r20, 0x00	; 0
    1fe2:	50 40       	sbci	r21, 0x00	; 0
    1fe4:	80 91 3c 02 	lds	r24, 0x023C
    1fe8:	90 91 3d 02 	lds	r25, 0x023D
    1fec:	a0 91 3e 02 	lds	r26, 0x023E
    1ff0:	b0 91 3f 02 	lds	r27, 0x023F
    1ff4:	28 17       	cp	r18, r24
    1ff6:	39 07       	cpc	r19, r25
    1ff8:	4a 07       	cpc	r20, r26
    1ffa:	5b 07       	cpc	r21, r27
    1ffc:	31 f4       	brne	.+12     	; 0x200a <__vector_4+0xea>
	{
		OCR2 = G_u8Reg;
    1ffe:	e3 e4       	ldi	r30, 0x43	; 67
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 91 40 02 	lds	r24, 0x0240
    2006:	80 83       	st	Z, r24
    2008:	19 c0       	rjmp	.+50     	; 0x203c <__vector_4+0x11c>
	}
	else if (G_u32CompCounter != G_u32Overflows)
    200a:	20 91 3c 02 	lds	r18, 0x023C
    200e:	30 91 3d 02 	lds	r19, 0x023D
    2012:	40 91 3e 02 	lds	r20, 0x023E
    2016:	50 91 3f 02 	lds	r21, 0x023F
    201a:	80 91 41 02 	lds	r24, 0x0241
    201e:	90 91 42 02 	lds	r25, 0x0242
    2022:	a0 91 43 02 	lds	r26, 0x0243
    2026:	b0 91 44 02 	lds	r27, 0x0244
    202a:	28 17       	cp	r18, r24
    202c:	39 07       	cpc	r19, r25
    202e:	4a 07       	cpc	r20, r26
    2030:	5b 07       	cpc	r21, r27
    2032:	21 f0       	breq	.+8      	; 0x203c <__vector_4+0x11c>
	{
		OCR2 = 255;
    2034:	e3 e4       	ldi	r30, 0x43	; 67
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	8f ef       	ldi	r24, 0xFF	; 255
    203a:	80 83       	st	Z, r24
	}

}
    203c:	cf 91       	pop	r28
    203e:	df 91       	pop	r29
    2040:	ff 91       	pop	r31
    2042:	ef 91       	pop	r30
    2044:	bf 91       	pop	r27
    2046:	af 91       	pop	r26
    2048:	9f 91       	pop	r25
    204a:	8f 91       	pop	r24
    204c:	7f 91       	pop	r23
    204e:	6f 91       	pop	r22
    2050:	5f 91       	pop	r21
    2052:	4f 91       	pop	r20
    2054:	3f 91       	pop	r19
    2056:	2f 91       	pop	r18
    2058:	0f 90       	pop	r0
    205a:	0f be       	out	0x3f, r0	; 63
    205c:	0f 90       	pop	r0
    205e:	1f 90       	pop	r1
    2060:	18 95       	reti

00002062 <EXTI_voidInit>:

#define NULL ((void *)0)
static void (*EXTI_pf_EXTI[3])(void) = {NULL, NULL, NULL};

void EXTI_voidInit(void)
{
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
#if EXTI_INDEX_0 == INT0
	SET_BIT(GICR, GICR_INT0);
    206a:	ab e5       	ldi	r26, 0x5B	; 91
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	eb e5       	ldi	r30, 0x5B	; 91
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	80 64       	ori	r24, 0x40	; 64
    2076:	8c 93       	st	X, r24
//CHOOSE CLOCK
#if EXTI_CLOCK_0 == LOW_LEVEL
	CLR_BIT(MCUCR,MCUCR_ISC00);
	CLR_BIT(MCUCR,MCUCR_ISC01);
#elif EXTI_CLOCK_0 == ANY_LOGICAL
	SET_BIT(MCUCR,MCUCR_ISC00);
    2078:	a5 e5       	ldi	r26, 0x55	; 85
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	e5 e5       	ldi	r30, 0x55	; 85
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
    2082:	81 60       	ori	r24, 0x01	; 1
    2084:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC01);
    2086:	a5 e5       	ldi	r26, 0x55	; 85
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	e5 e5       	ldi	r30, 0x55	; 85
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	8d 7f       	andi	r24, 0xFD	; 253
    2092:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
#endif
#endif

#if EXIT_INDEX_1== INT1
	SET_BIT(GICR, GICR_INT1);
    2094:	ab e5       	ldi	r26, 0x5B	; 91
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	eb e5       	ldi	r30, 0x5B	; 91
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	80 68       	ori	r24, 0x80	; 128
    20a0:	8c 93       	st	X, r24
//CHOOSE CLOCK
#if EXTI_CLOCK_1 == LOW_LEVEL
	CLR_BIT(MCUCR,MCUCR_ISC10);
	CLR_BIT(MCUCR,MCUCR_ISC11);
#elif EXTI_CLOCK_1 == ANY_LOGICAL
	SET_BIT(MCUCR,MCUCR_ISC10);
    20a2:	a5 e5       	ldi	r26, 0x55	; 85
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	e5 e5       	ldi	r30, 0x55	; 85
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	84 60       	ori	r24, 0x04	; 4
    20ae:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC11);
    20b0:	a5 e5       	ldi	r26, 0x55	; 85
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	e5 e5       	ldi	r30, 0x55	; 85
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	87 7f       	andi	r24, 0xF7	; 247
    20bc:	8c 93       	st	X, r24
	CLR_BIT(MCUCSR, MCUCSR_ISC2);
#elif EXTI_CLOCK_2 == RAISING
	SET_BIT(MCUCSR, MCUCSR_ISC2);
#endif
#endif
}
    20be:	cf 91       	pop	r28
    20c0:	df 91       	pop	r29
    20c2:	08 95       	ret

000020c4 <EXTI_voidGIE>:


void EXTI_voidGIE(void)
{
    20c4:	df 93       	push	r29
    20c6:	cf 93       	push	r28
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
#if GIE == ENABLE
	SET_BIT(SREG, SREG_PIN);
    20cc:	af e5       	ldi	r26, 0x5F	; 95
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	ef e5       	ldi	r30, 0x5F	; 95
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	80 68       	ori	r24, 0x80	; 128
    20d8:	8c 93       	st	X, r24
#elif GIE == DISABLE
	CLR_BIT(SREG, SREG_PIN);
#endif
}
    20da:	cf 91       	pop	r28
    20dc:	df 91       	pop	r29
    20de:	08 95       	ret

000020e0 <EXTI_voidEXTISetCallBack>:

void EXTI_voidEXTISetCallBack(u8 copy_u8EXTIIndex, void (*copy_pf)(void))
{
    20e0:	df 93       	push	r29
    20e2:	cf 93       	push	r28
    20e4:	00 d0       	rcall	.+0      	; 0x20e6 <EXTI_voidEXTISetCallBack+0x6>
    20e6:	0f 92       	push	r0
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
    20ec:	89 83       	std	Y+1, r24	; 0x01
    20ee:	7b 83       	std	Y+3, r23	; 0x03
    20f0:	6a 83       	std	Y+2, r22	; 0x02
	EXTI_pf_EXTI[copy_u8EXTIIndex] = copy_pf;
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
    20f4:	88 2f       	mov	r24, r24
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	88 0f       	add	r24, r24
    20fa:	99 1f       	adc	r25, r25
    20fc:	fc 01       	movw	r30, r24
    20fe:	ea 5b       	subi	r30, 0xBA	; 186
    2100:	fd 4f       	sbci	r31, 0xFD	; 253
    2102:	8a 81       	ldd	r24, Y+2	; 0x02
    2104:	9b 81       	ldd	r25, Y+3	; 0x03
    2106:	91 83       	std	Z+1, r25	; 0x01
    2108:	80 83       	st	Z, r24
}
    210a:	0f 90       	pop	r0
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	cf 91       	pop	r28
    2112:	df 91       	pop	r29
    2114:	08 95       	ret

00002116 <__vector_1>:

ISR(INT0_vect)
{
    2116:	1f 92       	push	r1
    2118:	0f 92       	push	r0
    211a:	0f b6       	in	r0, 0x3f	; 63
    211c:	0f 92       	push	r0
    211e:	11 24       	eor	r1, r1
    2120:	2f 93       	push	r18
    2122:	3f 93       	push	r19
    2124:	4f 93       	push	r20
    2126:	5f 93       	push	r21
    2128:	6f 93       	push	r22
    212a:	7f 93       	push	r23
    212c:	8f 93       	push	r24
    212e:	9f 93       	push	r25
    2130:	af 93       	push	r26
    2132:	bf 93       	push	r27
    2134:	ef 93       	push	r30
    2136:	ff 93       	push	r31
    2138:	df 93       	push	r29
    213a:	cf 93       	push	r28
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
	if ( EXTI_pf_EXTI[0] != NULL )
    2140:	80 91 46 02 	lds	r24, 0x0246
    2144:	90 91 47 02 	lds	r25, 0x0247
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	29 f0       	breq	.+10     	; 0x2156 <__vector_1+0x40>
	{
		EXTI_pf_EXTI[0]();
    214c:	e0 91 46 02 	lds	r30, 0x0246
    2150:	f0 91 47 02 	lds	r31, 0x0247
    2154:	09 95       	icall
	}
}
    2156:	cf 91       	pop	r28
    2158:	df 91       	pop	r29
    215a:	ff 91       	pop	r31
    215c:	ef 91       	pop	r30
    215e:	bf 91       	pop	r27
    2160:	af 91       	pop	r26
    2162:	9f 91       	pop	r25
    2164:	8f 91       	pop	r24
    2166:	7f 91       	pop	r23
    2168:	6f 91       	pop	r22
    216a:	5f 91       	pop	r21
    216c:	4f 91       	pop	r20
    216e:	3f 91       	pop	r19
    2170:	2f 91       	pop	r18
    2172:	0f 90       	pop	r0
    2174:	0f be       	out	0x3f, r0	; 63
    2176:	0f 90       	pop	r0
    2178:	1f 90       	pop	r1
    217a:	18 95       	reti

0000217c <__vector_2>:

ISR(INT1_vect)
{
    217c:	1f 92       	push	r1
    217e:	0f 92       	push	r0
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	0f 92       	push	r0
    2184:	11 24       	eor	r1, r1
    2186:	2f 93       	push	r18
    2188:	3f 93       	push	r19
    218a:	4f 93       	push	r20
    218c:	5f 93       	push	r21
    218e:	6f 93       	push	r22
    2190:	7f 93       	push	r23
    2192:	8f 93       	push	r24
    2194:	9f 93       	push	r25
    2196:	af 93       	push	r26
    2198:	bf 93       	push	r27
    219a:	ef 93       	push	r30
    219c:	ff 93       	push	r31
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
	if ( EXTI_pf_EXTI[1] != NULL )
    21a6:	80 91 48 02 	lds	r24, 0x0248
    21aa:	90 91 49 02 	lds	r25, 0x0249
    21ae:	00 97       	sbiw	r24, 0x00	; 0
    21b0:	29 f0       	breq	.+10     	; 0x21bc <__vector_2+0x40>
	{
		EXTI_pf_EXTI[1]();
    21b2:	e0 91 48 02 	lds	r30, 0x0248
    21b6:	f0 91 49 02 	lds	r31, 0x0249
    21ba:	09 95       	icall
	}
}
    21bc:	cf 91       	pop	r28
    21be:	df 91       	pop	r29
    21c0:	ff 91       	pop	r31
    21c2:	ef 91       	pop	r30
    21c4:	bf 91       	pop	r27
    21c6:	af 91       	pop	r26
    21c8:	9f 91       	pop	r25
    21ca:	8f 91       	pop	r24
    21cc:	7f 91       	pop	r23
    21ce:	6f 91       	pop	r22
    21d0:	5f 91       	pop	r21
    21d2:	4f 91       	pop	r20
    21d4:	3f 91       	pop	r19
    21d6:	2f 91       	pop	r18
    21d8:	0f 90       	pop	r0
    21da:	0f be       	out	0x3f, r0	; 63
    21dc:	0f 90       	pop	r0
    21de:	1f 90       	pop	r1
    21e0:	18 95       	reti

000021e2 <__vector_3>:

ISR(INT2_vect)
{
    21e2:	1f 92       	push	r1
    21e4:	0f 92       	push	r0
    21e6:	0f b6       	in	r0, 0x3f	; 63
    21e8:	0f 92       	push	r0
    21ea:	11 24       	eor	r1, r1
    21ec:	2f 93       	push	r18
    21ee:	3f 93       	push	r19
    21f0:	4f 93       	push	r20
    21f2:	5f 93       	push	r21
    21f4:	6f 93       	push	r22
    21f6:	7f 93       	push	r23
    21f8:	8f 93       	push	r24
    21fa:	9f 93       	push	r25
    21fc:	af 93       	push	r26
    21fe:	bf 93       	push	r27
    2200:	ef 93       	push	r30
    2202:	ff 93       	push	r31
    2204:	df 93       	push	r29
    2206:	cf 93       	push	r28
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
	if ( EXTI_pf_EXTI[2] != NULL )
    220c:	80 91 4a 02 	lds	r24, 0x024A
    2210:	90 91 4b 02 	lds	r25, 0x024B
    2214:	00 97       	sbiw	r24, 0x00	; 0
    2216:	29 f0       	breq	.+10     	; 0x2222 <__vector_3+0x40>
	{
		EXTI_pf_EXTI[2]();
    2218:	e0 91 4a 02 	lds	r30, 0x024A
    221c:	f0 91 4b 02 	lds	r31, 0x024B
    2220:	09 95       	icall
	}
}
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	ff 91       	pop	r31
    2228:	ef 91       	pop	r30
    222a:	bf 91       	pop	r27
    222c:	af 91       	pop	r26
    222e:	9f 91       	pop	r25
    2230:	8f 91       	pop	r24
    2232:	7f 91       	pop	r23
    2234:	6f 91       	pop	r22
    2236:	5f 91       	pop	r21
    2238:	4f 91       	pop	r20
    223a:	3f 91       	pop	r19
    223c:	2f 91       	pop	r18
    223e:	0f 90       	pop	r0
    2240:	0f be       	out	0x3f, r0	; 63
    2242:	0f 90       	pop	r0
    2244:	1f 90       	pop	r1
    2246:	18 95       	reti

00002248 <DIO_voidSetPinDirection>:
#include"../../LIB/STD_TYPES.h"
#include"../../LIB/BIT_MATH.h"
#include<avr/io.h>
#include"DIO_Interface.h"

void DIO_voidSetPinDirection(u8 copy_u8port, u8 copy_u8pin, u8 copy_u8Direction){
    2248:	df 93       	push	r29
    224a:	cf 93       	push	r28
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	27 97       	sbiw	r28, 0x07	; 7
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	f8 94       	cli
    2256:	de bf       	out	0x3e, r29	; 62
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	cd bf       	out	0x3d, r28	; 61
    225c:	89 83       	std	Y+1, r24	; 0x01
    225e:	6a 83       	std	Y+2, r22	; 0x02
    2260:	4b 83       	std	Y+3, r20	; 0x03
	
	if (copy_u8Direction == 0 ){
    2262:	8b 81       	ldd	r24, Y+3	; 0x03
    2264:	88 23       	and	r24, r24
    2266:	09 f0       	breq	.+2      	; 0x226a <DIO_voidSetPinDirection+0x22>
    2268:	74 c0       	rjmp	.+232    	; 0x2352 <DIO_voidSetPinDirection+0x10a>
		switch (copy_u8port){
    226a:	89 81       	ldd	r24, Y+1	; 0x01
    226c:	28 2f       	mov	r18, r24
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	3f 83       	std	Y+7, r19	; 0x07
    2272:	2e 83       	std	Y+6, r18	; 0x06
    2274:	8e 81       	ldd	r24, Y+6	; 0x06
    2276:	9f 81       	ldd	r25, Y+7	; 0x07
    2278:	81 30       	cpi	r24, 0x01	; 1
    227a:	91 05       	cpc	r25, r1
    227c:	59 f1       	breq	.+86     	; 0x22d4 <DIO_voidSetPinDirection+0x8c>
    227e:	2e 81       	ldd	r18, Y+6	; 0x06
    2280:	3f 81       	ldd	r19, Y+7	; 0x07
    2282:	22 30       	cpi	r18, 0x02	; 2
    2284:	31 05       	cpc	r19, r1
    2286:	2c f4       	brge	.+10     	; 0x2292 <DIO_voidSetPinDirection+0x4a>
    2288:	8e 81       	ldd	r24, Y+6	; 0x06
    228a:	9f 81       	ldd	r25, Y+7	; 0x07
    228c:	00 97       	sbiw	r24, 0x00	; 0
    228e:	69 f0       	breq	.+26     	; 0x22aa <DIO_voidSetPinDirection+0x62>
    2290:	d2 c0       	rjmp	.+420    	; 0x2436 <DIO_voidSetPinDirection+0x1ee>
    2292:	2e 81       	ldd	r18, Y+6	; 0x06
    2294:	3f 81       	ldd	r19, Y+7	; 0x07
    2296:	22 30       	cpi	r18, 0x02	; 2
    2298:	31 05       	cpc	r19, r1
    229a:	89 f1       	breq	.+98     	; 0x22fe <DIO_voidSetPinDirection+0xb6>
    229c:	8e 81       	ldd	r24, Y+6	; 0x06
    229e:	9f 81       	ldd	r25, Y+7	; 0x07
    22a0:	83 30       	cpi	r24, 0x03	; 3
    22a2:	91 05       	cpc	r25, r1
    22a4:	09 f4       	brne	.+2      	; 0x22a8 <DIO_voidSetPinDirection+0x60>
    22a6:	40 c0       	rjmp	.+128    	; 0x2328 <DIO_voidSetPinDirection+0xe0>
    22a8:	c6 c0       	rjmp	.+396    	; 0x2436 <DIO_voidSetPinDirection+0x1ee>
			case 0 : CLR_BIT(DDRA,copy_u8pin); break;
    22aa:	aa e3       	ldi	r26, 0x3A	; 58
    22ac:	b0 e0       	ldi	r27, 0x00	; 0
    22ae:	ea e3       	ldi	r30, 0x3A	; 58
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	48 2f       	mov	r20, r24
    22b6:	8a 81       	ldd	r24, Y+2	; 0x02
    22b8:	28 2f       	mov	r18, r24
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	02 2e       	mov	r0, r18
    22c2:	02 c0       	rjmp	.+4      	; 0x22c8 <DIO_voidSetPinDirection+0x80>
    22c4:	88 0f       	add	r24, r24
    22c6:	99 1f       	adc	r25, r25
    22c8:	0a 94       	dec	r0
    22ca:	e2 f7       	brpl	.-8      	; 0x22c4 <DIO_voidSetPinDirection+0x7c>
    22cc:	80 95       	com	r24
    22ce:	84 23       	and	r24, r20
    22d0:	8c 93       	st	X, r24
    22d2:	b1 c0       	rjmp	.+354    	; 0x2436 <DIO_voidSetPinDirection+0x1ee>
			case 1 : CLR_BIT(DDRB,copy_u8pin); break;
    22d4:	a7 e3       	ldi	r26, 0x37	; 55
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	e7 e3       	ldi	r30, 0x37	; 55
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	48 2f       	mov	r20, r24
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	02 2e       	mov	r0, r18
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <DIO_voidSetPinDirection+0xaa>
    22ee:	88 0f       	add	r24, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	0a 94       	dec	r0
    22f4:	e2 f7       	brpl	.-8      	; 0x22ee <DIO_voidSetPinDirection+0xa6>
    22f6:	80 95       	com	r24
    22f8:	84 23       	and	r24, r20
    22fa:	8c 93       	st	X, r24
    22fc:	9c c0       	rjmp	.+312    	; 0x2436 <DIO_voidSetPinDirection+0x1ee>
			case 2 : CLR_BIT(DDRC,copy_u8pin); break;
    22fe:	a4 e3       	ldi	r26, 0x34	; 52
    2300:	b0 e0       	ldi	r27, 0x00	; 0
    2302:	e4 e3       	ldi	r30, 0x34	; 52
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	80 81       	ld	r24, Z
    2308:	48 2f       	mov	r20, r24
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	28 2f       	mov	r18, r24
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	02 2e       	mov	r0, r18
    2316:	02 c0       	rjmp	.+4      	; 0x231c <DIO_voidSetPinDirection+0xd4>
    2318:	88 0f       	add	r24, r24
    231a:	99 1f       	adc	r25, r25
    231c:	0a 94       	dec	r0
    231e:	e2 f7       	brpl	.-8      	; 0x2318 <DIO_voidSetPinDirection+0xd0>
    2320:	80 95       	com	r24
    2322:	84 23       	and	r24, r20
    2324:	8c 93       	st	X, r24
    2326:	87 c0       	rjmp	.+270    	; 0x2436 <DIO_voidSetPinDirection+0x1ee>
			case 3 : CLR_BIT(DDRD,copy_u8pin); break;
    2328:	a1 e3       	ldi	r26, 0x31	; 49
    232a:	b0 e0       	ldi	r27, 0x00	; 0
    232c:	e1 e3       	ldi	r30, 0x31	; 49
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	48 2f       	mov	r20, r24
    2334:	8a 81       	ldd	r24, Y+2	; 0x02
    2336:	28 2f       	mov	r18, r24
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	02 2e       	mov	r0, r18
    2340:	02 c0       	rjmp	.+4      	; 0x2346 <DIO_voidSetPinDirection+0xfe>
    2342:	88 0f       	add	r24, r24
    2344:	99 1f       	adc	r25, r25
    2346:	0a 94       	dec	r0
    2348:	e2 f7       	brpl	.-8      	; 0x2342 <DIO_voidSetPinDirection+0xfa>
    234a:	80 95       	com	r24
    234c:	84 23       	and	r24, r20
    234e:	8c 93       	st	X, r24
    2350:	72 c0       	rjmp	.+228    	; 0x2436 <DIO_voidSetPinDirection+0x1ee>
		}
	}
		
	else if (copy_u8Direction == 1 ){
    2352:	8b 81       	ldd	r24, Y+3	; 0x03
    2354:	81 30       	cpi	r24, 0x01	; 1
    2356:	09 f0       	breq	.+2      	; 0x235a <DIO_voidSetPinDirection+0x112>
    2358:	6e c0       	rjmp	.+220    	; 0x2436 <DIO_voidSetPinDirection+0x1ee>
		switch (copy_u8port){
    235a:	89 81       	ldd	r24, Y+1	; 0x01
    235c:	28 2f       	mov	r18, r24
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	3d 83       	std	Y+5, r19	; 0x05
    2362:	2c 83       	std	Y+4, r18	; 0x04
    2364:	8c 81       	ldd	r24, Y+4	; 0x04
    2366:	9d 81       	ldd	r25, Y+5	; 0x05
    2368:	81 30       	cpi	r24, 0x01	; 1
    236a:	91 05       	cpc	r25, r1
    236c:	49 f1       	breq	.+82     	; 0x23c0 <DIO_voidSetPinDirection+0x178>
    236e:	2c 81       	ldd	r18, Y+4	; 0x04
    2370:	3d 81       	ldd	r19, Y+5	; 0x05
    2372:	22 30       	cpi	r18, 0x02	; 2
    2374:	31 05       	cpc	r19, r1
    2376:	2c f4       	brge	.+10     	; 0x2382 <DIO_voidSetPinDirection+0x13a>
    2378:	8c 81       	ldd	r24, Y+4	; 0x04
    237a:	9d 81       	ldd	r25, Y+5	; 0x05
    237c:	00 97       	sbiw	r24, 0x00	; 0
    237e:	61 f0       	breq	.+24     	; 0x2398 <DIO_voidSetPinDirection+0x150>
    2380:	5a c0       	rjmp	.+180    	; 0x2436 <DIO_voidSetPinDirection+0x1ee>
    2382:	2c 81       	ldd	r18, Y+4	; 0x04
    2384:	3d 81       	ldd	r19, Y+5	; 0x05
    2386:	22 30       	cpi	r18, 0x02	; 2
    2388:	31 05       	cpc	r19, r1
    238a:	71 f1       	breq	.+92     	; 0x23e8 <DIO_voidSetPinDirection+0x1a0>
    238c:	8c 81       	ldd	r24, Y+4	; 0x04
    238e:	9d 81       	ldd	r25, Y+5	; 0x05
    2390:	83 30       	cpi	r24, 0x03	; 3
    2392:	91 05       	cpc	r25, r1
    2394:	e9 f1       	breq	.+122    	; 0x2410 <DIO_voidSetPinDirection+0x1c8>
    2396:	4f c0       	rjmp	.+158    	; 0x2436 <DIO_voidSetPinDirection+0x1ee>
			case 0 : SET_BIT(DDRA,copy_u8pin); break;
    2398:	aa e3       	ldi	r26, 0x3A	; 58
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	ea e3       	ldi	r30, 0x3A	; 58
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	48 2f       	mov	r20, r24
    23a4:	8a 81       	ldd	r24, Y+2	; 0x02
    23a6:	28 2f       	mov	r18, r24
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	02 2e       	mov	r0, r18
    23b0:	02 c0       	rjmp	.+4      	; 0x23b6 <DIO_voidSetPinDirection+0x16e>
    23b2:	88 0f       	add	r24, r24
    23b4:	99 1f       	adc	r25, r25
    23b6:	0a 94       	dec	r0
    23b8:	e2 f7       	brpl	.-8      	; 0x23b2 <DIO_voidSetPinDirection+0x16a>
    23ba:	84 2b       	or	r24, r20
    23bc:	8c 93       	st	X, r24
    23be:	3b c0       	rjmp	.+118    	; 0x2436 <DIO_voidSetPinDirection+0x1ee>
			case 1 : SET_BIT(DDRB,copy_u8pin); break;
    23c0:	a7 e3       	ldi	r26, 0x37	; 55
    23c2:	b0 e0       	ldi	r27, 0x00	; 0
    23c4:	e7 e3       	ldi	r30, 0x37	; 55
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	80 81       	ld	r24, Z
    23ca:	48 2f       	mov	r20, r24
    23cc:	8a 81       	ldd	r24, Y+2	; 0x02
    23ce:	28 2f       	mov	r18, r24
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	02 2e       	mov	r0, r18
    23d8:	02 c0       	rjmp	.+4      	; 0x23de <DIO_voidSetPinDirection+0x196>
    23da:	88 0f       	add	r24, r24
    23dc:	99 1f       	adc	r25, r25
    23de:	0a 94       	dec	r0
    23e0:	e2 f7       	brpl	.-8      	; 0x23da <DIO_voidSetPinDirection+0x192>
    23e2:	84 2b       	or	r24, r20
    23e4:	8c 93       	st	X, r24
    23e6:	27 c0       	rjmp	.+78     	; 0x2436 <DIO_voidSetPinDirection+0x1ee>
			case 2 : SET_BIT(DDRC,copy_u8pin); break;
    23e8:	a4 e3       	ldi	r26, 0x34	; 52
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	e4 e3       	ldi	r30, 0x34	; 52
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	48 2f       	mov	r20, r24
    23f4:	8a 81       	ldd	r24, Y+2	; 0x02
    23f6:	28 2f       	mov	r18, r24
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	02 2e       	mov	r0, r18
    2400:	02 c0       	rjmp	.+4      	; 0x2406 <DIO_voidSetPinDirection+0x1be>
    2402:	88 0f       	add	r24, r24
    2404:	99 1f       	adc	r25, r25
    2406:	0a 94       	dec	r0
    2408:	e2 f7       	brpl	.-8      	; 0x2402 <DIO_voidSetPinDirection+0x1ba>
    240a:	84 2b       	or	r24, r20
    240c:	8c 93       	st	X, r24
    240e:	13 c0       	rjmp	.+38     	; 0x2436 <DIO_voidSetPinDirection+0x1ee>
			case 3 : SET_BIT(DDRD,copy_u8pin); break;
    2410:	a1 e3       	ldi	r26, 0x31	; 49
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	e1 e3       	ldi	r30, 0x31	; 49
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	80 81       	ld	r24, Z
    241a:	48 2f       	mov	r20, r24
    241c:	8a 81       	ldd	r24, Y+2	; 0x02
    241e:	28 2f       	mov	r18, r24
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	02 2e       	mov	r0, r18
    2428:	02 c0       	rjmp	.+4      	; 0x242e <DIO_voidSetPinDirection+0x1e6>
    242a:	88 0f       	add	r24, r24
    242c:	99 1f       	adc	r25, r25
    242e:	0a 94       	dec	r0
    2430:	e2 f7       	brpl	.-8      	; 0x242a <DIO_voidSetPinDirection+0x1e2>
    2432:	84 2b       	or	r24, r20
    2434:	8c 93       	st	X, r24
		}
	}
		
}
    2436:	27 96       	adiw	r28, 0x07	; 7
    2438:	0f b6       	in	r0, 0x3f	; 63
    243a:	f8 94       	cli
    243c:	de bf       	out	0x3e, r29	; 62
    243e:	0f be       	out	0x3f, r0	; 63
    2440:	cd bf       	out	0x3d, r28	; 61
    2442:	cf 91       	pop	r28
    2444:	df 91       	pop	r29
    2446:	08 95       	ret

00002448 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 copy_u8port, u8 copy_u8pin, u8 copy_u8Value){
    2448:	df 93       	push	r29
    244a:	cf 93       	push	r28
    244c:	cd b7       	in	r28, 0x3d	; 61
    244e:	de b7       	in	r29, 0x3e	; 62
    2450:	27 97       	sbiw	r28, 0x07	; 7
    2452:	0f b6       	in	r0, 0x3f	; 63
    2454:	f8 94       	cli
    2456:	de bf       	out	0x3e, r29	; 62
    2458:	0f be       	out	0x3f, r0	; 63
    245a:	cd bf       	out	0x3d, r28	; 61
    245c:	89 83       	std	Y+1, r24	; 0x01
    245e:	6a 83       	std	Y+2, r22	; 0x02
    2460:	4b 83       	std	Y+3, r20	; 0x03
	
	if (copy_u8Value == 0 ){
    2462:	8b 81       	ldd	r24, Y+3	; 0x03
    2464:	88 23       	and	r24, r24
    2466:	09 f0       	breq	.+2      	; 0x246a <DIO_voidSetPinValue+0x22>
    2468:	74 c0       	rjmp	.+232    	; 0x2552 <DIO_voidSetPinValue+0x10a>
		switch (copy_u8port){
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	28 2f       	mov	r18, r24
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	3f 83       	std	Y+7, r19	; 0x07
    2472:	2e 83       	std	Y+6, r18	; 0x06
    2474:	8e 81       	ldd	r24, Y+6	; 0x06
    2476:	9f 81       	ldd	r25, Y+7	; 0x07
    2478:	81 30       	cpi	r24, 0x01	; 1
    247a:	91 05       	cpc	r25, r1
    247c:	59 f1       	breq	.+86     	; 0x24d4 <DIO_voidSetPinValue+0x8c>
    247e:	2e 81       	ldd	r18, Y+6	; 0x06
    2480:	3f 81       	ldd	r19, Y+7	; 0x07
    2482:	22 30       	cpi	r18, 0x02	; 2
    2484:	31 05       	cpc	r19, r1
    2486:	2c f4       	brge	.+10     	; 0x2492 <DIO_voidSetPinValue+0x4a>
    2488:	8e 81       	ldd	r24, Y+6	; 0x06
    248a:	9f 81       	ldd	r25, Y+7	; 0x07
    248c:	00 97       	sbiw	r24, 0x00	; 0
    248e:	69 f0       	breq	.+26     	; 0x24aa <DIO_voidSetPinValue+0x62>
    2490:	d2 c0       	rjmp	.+420    	; 0x2636 <DIO_voidSetPinValue+0x1ee>
    2492:	2e 81       	ldd	r18, Y+6	; 0x06
    2494:	3f 81       	ldd	r19, Y+7	; 0x07
    2496:	22 30       	cpi	r18, 0x02	; 2
    2498:	31 05       	cpc	r19, r1
    249a:	89 f1       	breq	.+98     	; 0x24fe <DIO_voidSetPinValue+0xb6>
    249c:	8e 81       	ldd	r24, Y+6	; 0x06
    249e:	9f 81       	ldd	r25, Y+7	; 0x07
    24a0:	83 30       	cpi	r24, 0x03	; 3
    24a2:	91 05       	cpc	r25, r1
    24a4:	09 f4       	brne	.+2      	; 0x24a8 <DIO_voidSetPinValue+0x60>
    24a6:	40 c0       	rjmp	.+128    	; 0x2528 <DIO_voidSetPinValue+0xe0>
    24a8:	c6 c0       	rjmp	.+396    	; 0x2636 <DIO_voidSetPinValue+0x1ee>
			case 0 : CLR_BIT(PORTA,copy_u8pin); break;
    24aa:	ab e3       	ldi	r26, 0x3B	; 59
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	eb e3       	ldi	r30, 0x3B	; 59
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	80 81       	ld	r24, Z
    24b4:	48 2f       	mov	r20, r24
    24b6:	8a 81       	ldd	r24, Y+2	; 0x02
    24b8:	28 2f       	mov	r18, r24
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	02 2e       	mov	r0, r18
    24c2:	02 c0       	rjmp	.+4      	; 0x24c8 <DIO_voidSetPinValue+0x80>
    24c4:	88 0f       	add	r24, r24
    24c6:	99 1f       	adc	r25, r25
    24c8:	0a 94       	dec	r0
    24ca:	e2 f7       	brpl	.-8      	; 0x24c4 <DIO_voidSetPinValue+0x7c>
    24cc:	80 95       	com	r24
    24ce:	84 23       	and	r24, r20
    24d0:	8c 93       	st	X, r24
    24d2:	b1 c0       	rjmp	.+354    	; 0x2636 <DIO_voidSetPinValue+0x1ee>
			case 1 : CLR_BIT(PORTB,copy_u8pin); break;
    24d4:	a8 e3       	ldi	r26, 0x38	; 56
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	e8 e3       	ldi	r30, 0x38	; 56
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	48 2f       	mov	r20, r24
    24e0:	8a 81       	ldd	r24, Y+2	; 0x02
    24e2:	28 2f       	mov	r18, r24
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	02 2e       	mov	r0, r18
    24ec:	02 c0       	rjmp	.+4      	; 0x24f2 <DIO_voidSetPinValue+0xaa>
    24ee:	88 0f       	add	r24, r24
    24f0:	99 1f       	adc	r25, r25
    24f2:	0a 94       	dec	r0
    24f4:	e2 f7       	brpl	.-8      	; 0x24ee <DIO_voidSetPinValue+0xa6>
    24f6:	80 95       	com	r24
    24f8:	84 23       	and	r24, r20
    24fa:	8c 93       	st	X, r24
    24fc:	9c c0       	rjmp	.+312    	; 0x2636 <DIO_voidSetPinValue+0x1ee>
			case 2 : CLR_BIT(PORTC,copy_u8pin); break;
    24fe:	a5 e3       	ldi	r26, 0x35	; 53
    2500:	b0 e0       	ldi	r27, 0x00	; 0
    2502:	e5 e3       	ldi	r30, 0x35	; 53
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
    2508:	48 2f       	mov	r20, r24
    250a:	8a 81       	ldd	r24, Y+2	; 0x02
    250c:	28 2f       	mov	r18, r24
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	02 2e       	mov	r0, r18
    2516:	02 c0       	rjmp	.+4      	; 0x251c <DIO_voidSetPinValue+0xd4>
    2518:	88 0f       	add	r24, r24
    251a:	99 1f       	adc	r25, r25
    251c:	0a 94       	dec	r0
    251e:	e2 f7       	brpl	.-8      	; 0x2518 <DIO_voidSetPinValue+0xd0>
    2520:	80 95       	com	r24
    2522:	84 23       	and	r24, r20
    2524:	8c 93       	st	X, r24
    2526:	87 c0       	rjmp	.+270    	; 0x2636 <DIO_voidSetPinValue+0x1ee>
			case 3 : CLR_BIT(PORTD,copy_u8pin); break;
    2528:	a2 e3       	ldi	r26, 0x32	; 50
    252a:	b0 e0       	ldi	r27, 0x00	; 0
    252c:	e2 e3       	ldi	r30, 0x32	; 50
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	80 81       	ld	r24, Z
    2532:	48 2f       	mov	r20, r24
    2534:	8a 81       	ldd	r24, Y+2	; 0x02
    2536:	28 2f       	mov	r18, r24
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	02 2e       	mov	r0, r18
    2540:	02 c0       	rjmp	.+4      	; 0x2546 <DIO_voidSetPinValue+0xfe>
    2542:	88 0f       	add	r24, r24
    2544:	99 1f       	adc	r25, r25
    2546:	0a 94       	dec	r0
    2548:	e2 f7       	brpl	.-8      	; 0x2542 <DIO_voidSetPinValue+0xfa>
    254a:	80 95       	com	r24
    254c:	84 23       	and	r24, r20
    254e:	8c 93       	st	X, r24
    2550:	72 c0       	rjmp	.+228    	; 0x2636 <DIO_voidSetPinValue+0x1ee>
		}
	}
		
	else if (copy_u8Value == 1 ){
    2552:	8b 81       	ldd	r24, Y+3	; 0x03
    2554:	81 30       	cpi	r24, 0x01	; 1
    2556:	09 f0       	breq	.+2      	; 0x255a <DIO_voidSetPinValue+0x112>
    2558:	6e c0       	rjmp	.+220    	; 0x2636 <DIO_voidSetPinValue+0x1ee>
		switch (copy_u8port){
    255a:	89 81       	ldd	r24, Y+1	; 0x01
    255c:	28 2f       	mov	r18, r24
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	3d 83       	std	Y+5, r19	; 0x05
    2562:	2c 83       	std	Y+4, r18	; 0x04
    2564:	8c 81       	ldd	r24, Y+4	; 0x04
    2566:	9d 81       	ldd	r25, Y+5	; 0x05
    2568:	81 30       	cpi	r24, 0x01	; 1
    256a:	91 05       	cpc	r25, r1
    256c:	49 f1       	breq	.+82     	; 0x25c0 <DIO_voidSetPinValue+0x178>
    256e:	2c 81       	ldd	r18, Y+4	; 0x04
    2570:	3d 81       	ldd	r19, Y+5	; 0x05
    2572:	22 30       	cpi	r18, 0x02	; 2
    2574:	31 05       	cpc	r19, r1
    2576:	2c f4       	brge	.+10     	; 0x2582 <DIO_voidSetPinValue+0x13a>
    2578:	8c 81       	ldd	r24, Y+4	; 0x04
    257a:	9d 81       	ldd	r25, Y+5	; 0x05
    257c:	00 97       	sbiw	r24, 0x00	; 0
    257e:	61 f0       	breq	.+24     	; 0x2598 <DIO_voidSetPinValue+0x150>
    2580:	5a c0       	rjmp	.+180    	; 0x2636 <DIO_voidSetPinValue+0x1ee>
    2582:	2c 81       	ldd	r18, Y+4	; 0x04
    2584:	3d 81       	ldd	r19, Y+5	; 0x05
    2586:	22 30       	cpi	r18, 0x02	; 2
    2588:	31 05       	cpc	r19, r1
    258a:	71 f1       	breq	.+92     	; 0x25e8 <DIO_voidSetPinValue+0x1a0>
    258c:	8c 81       	ldd	r24, Y+4	; 0x04
    258e:	9d 81       	ldd	r25, Y+5	; 0x05
    2590:	83 30       	cpi	r24, 0x03	; 3
    2592:	91 05       	cpc	r25, r1
    2594:	e9 f1       	breq	.+122    	; 0x2610 <DIO_voidSetPinValue+0x1c8>
    2596:	4f c0       	rjmp	.+158    	; 0x2636 <DIO_voidSetPinValue+0x1ee>
			case 0 : SET_BIT(PORTA,copy_u8pin); break;
    2598:	ab e3       	ldi	r26, 0x3B	; 59
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	eb e3       	ldi	r30, 0x3B	; 59
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 81       	ld	r24, Z
    25a2:	48 2f       	mov	r20, r24
    25a4:	8a 81       	ldd	r24, Y+2	; 0x02
    25a6:	28 2f       	mov	r18, r24
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	02 2e       	mov	r0, r18
    25b0:	02 c0       	rjmp	.+4      	; 0x25b6 <DIO_voidSetPinValue+0x16e>
    25b2:	88 0f       	add	r24, r24
    25b4:	99 1f       	adc	r25, r25
    25b6:	0a 94       	dec	r0
    25b8:	e2 f7       	brpl	.-8      	; 0x25b2 <DIO_voidSetPinValue+0x16a>
    25ba:	84 2b       	or	r24, r20
    25bc:	8c 93       	st	X, r24
    25be:	3b c0       	rjmp	.+118    	; 0x2636 <DIO_voidSetPinValue+0x1ee>
			case 1 : SET_BIT(PORTB,copy_u8pin); break;
    25c0:	a8 e3       	ldi	r26, 0x38	; 56
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	e8 e3       	ldi	r30, 0x38	; 56
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	48 2f       	mov	r20, r24
    25cc:	8a 81       	ldd	r24, Y+2	; 0x02
    25ce:	28 2f       	mov	r18, r24
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	02 2e       	mov	r0, r18
    25d8:	02 c0       	rjmp	.+4      	; 0x25de <DIO_voidSetPinValue+0x196>
    25da:	88 0f       	add	r24, r24
    25dc:	99 1f       	adc	r25, r25
    25de:	0a 94       	dec	r0
    25e0:	e2 f7       	brpl	.-8      	; 0x25da <DIO_voidSetPinValue+0x192>
    25e2:	84 2b       	or	r24, r20
    25e4:	8c 93       	st	X, r24
    25e6:	27 c0       	rjmp	.+78     	; 0x2636 <DIO_voidSetPinValue+0x1ee>
			case 2 : SET_BIT(PORTC,copy_u8pin); break;
    25e8:	a5 e3       	ldi	r26, 0x35	; 53
    25ea:	b0 e0       	ldi	r27, 0x00	; 0
    25ec:	e5 e3       	ldi	r30, 0x35	; 53
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	80 81       	ld	r24, Z
    25f2:	48 2f       	mov	r20, r24
    25f4:	8a 81       	ldd	r24, Y+2	; 0x02
    25f6:	28 2f       	mov	r18, r24
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	02 2e       	mov	r0, r18
    2600:	02 c0       	rjmp	.+4      	; 0x2606 <DIO_voidSetPinValue+0x1be>
    2602:	88 0f       	add	r24, r24
    2604:	99 1f       	adc	r25, r25
    2606:	0a 94       	dec	r0
    2608:	e2 f7       	brpl	.-8      	; 0x2602 <DIO_voidSetPinValue+0x1ba>
    260a:	84 2b       	or	r24, r20
    260c:	8c 93       	st	X, r24
    260e:	13 c0       	rjmp	.+38     	; 0x2636 <DIO_voidSetPinValue+0x1ee>
			case 3 : SET_BIT(PORTD,copy_u8pin); break;
    2610:	a2 e3       	ldi	r26, 0x32	; 50
    2612:	b0 e0       	ldi	r27, 0x00	; 0
    2614:	e2 e3       	ldi	r30, 0x32	; 50
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	80 81       	ld	r24, Z
    261a:	48 2f       	mov	r20, r24
    261c:	8a 81       	ldd	r24, Y+2	; 0x02
    261e:	28 2f       	mov	r18, r24
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	02 2e       	mov	r0, r18
    2628:	02 c0       	rjmp	.+4      	; 0x262e <DIO_voidSetPinValue+0x1e6>
    262a:	88 0f       	add	r24, r24
    262c:	99 1f       	adc	r25, r25
    262e:	0a 94       	dec	r0
    2630:	e2 f7       	brpl	.-8      	; 0x262a <DIO_voidSetPinValue+0x1e2>
    2632:	84 2b       	or	r24, r20
    2634:	8c 93       	st	X, r24
		}
	}

}
    2636:	27 96       	adiw	r28, 0x07	; 7
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	f8 94       	cli
    263c:	de bf       	out	0x3e, r29	; 62
    263e:	0f be       	out	0x3f, r0	; 63
    2640:	cd bf       	out	0x3d, r28	; 61
    2642:	cf 91       	pop	r28
    2644:	df 91       	pop	r29
    2646:	08 95       	ret

00002648 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 copy_u8port, u8 copy_u8pin){
    2648:	df 93       	push	r29
    264a:	cf 93       	push	r28
    264c:	00 d0       	rcall	.+0      	; 0x264e <DIO_u8GetPinValue+0x6>
    264e:	00 d0       	rcall	.+0      	; 0x2650 <DIO_u8GetPinValue+0x8>
    2650:	00 d0       	rcall	.+0      	; 0x2652 <DIO_u8GetPinValue+0xa>
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
    2656:	89 83       	std	Y+1, r24	; 0x01
    2658:	6a 83       	std	Y+2, r22	; 0x02
	
	switch (copy_u8port){
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	28 2f       	mov	r18, r24
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	3d 83       	std	Y+5, r19	; 0x05
    2662:	2c 83       	std	Y+4, r18	; 0x04
    2664:	4c 81       	ldd	r20, Y+4	; 0x04
    2666:	5d 81       	ldd	r21, Y+5	; 0x05
    2668:	41 30       	cpi	r20, 0x01	; 1
    266a:	51 05       	cpc	r21, r1
    266c:	49 f1       	breq	.+82     	; 0x26c0 <DIO_u8GetPinValue+0x78>
    266e:	8c 81       	ldd	r24, Y+4	; 0x04
    2670:	9d 81       	ldd	r25, Y+5	; 0x05
    2672:	82 30       	cpi	r24, 0x02	; 2
    2674:	91 05       	cpc	r25, r1
    2676:	34 f4       	brge	.+12     	; 0x2684 <DIO_u8GetPinValue+0x3c>
    2678:	2c 81       	ldd	r18, Y+4	; 0x04
    267a:	3d 81       	ldd	r19, Y+5	; 0x05
    267c:	21 15       	cp	r18, r1
    267e:	31 05       	cpc	r19, r1
    2680:	61 f0       	breq	.+24     	; 0x269a <DIO_u8GetPinValue+0x52>
    2682:	57 c0       	rjmp	.+174    	; 0x2732 <DIO_u8GetPinValue+0xea>
    2684:	4c 81       	ldd	r20, Y+4	; 0x04
    2686:	5d 81       	ldd	r21, Y+5	; 0x05
    2688:	42 30       	cpi	r20, 0x02	; 2
    268a:	51 05       	cpc	r21, r1
    268c:	61 f1       	breq	.+88     	; 0x26e6 <DIO_u8GetPinValue+0x9e>
    268e:	8c 81       	ldd	r24, Y+4	; 0x04
    2690:	9d 81       	ldd	r25, Y+5	; 0x05
    2692:	83 30       	cpi	r24, 0x03	; 3
    2694:	91 05       	cpc	r25, r1
    2696:	d1 f1       	breq	.+116    	; 0x270c <DIO_u8GetPinValue+0xc4>
    2698:	4c c0       	rjmp	.+152    	; 0x2732 <DIO_u8GetPinValue+0xea>
		case 0 : return GET_BIT(PINA,copy_u8pin); break;
    269a:	e9 e3       	ldi	r30, 0x39	; 57
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	80 81       	ld	r24, Z
    26a0:	28 2f       	mov	r18, r24
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	8a 81       	ldd	r24, Y+2	; 0x02
    26a6:	88 2f       	mov	r24, r24
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	a9 01       	movw	r20, r18
    26ac:	02 c0       	rjmp	.+4      	; 0x26b2 <DIO_u8GetPinValue+0x6a>
    26ae:	55 95       	asr	r21
    26b0:	47 95       	ror	r20
    26b2:	8a 95       	dec	r24
    26b4:	e2 f7       	brpl	.-8      	; 0x26ae <DIO_u8GetPinValue+0x66>
    26b6:	ca 01       	movw	r24, r20
    26b8:	58 2f       	mov	r21, r24
    26ba:	51 70       	andi	r21, 0x01	; 1
    26bc:	5b 83       	std	Y+3, r21	; 0x03
    26be:	3a c0       	rjmp	.+116    	; 0x2734 <DIO_u8GetPinValue+0xec>
		case 1 : return GET_BIT(PINB,copy_u8pin); break;
    26c0:	e6 e3       	ldi	r30, 0x36	; 54
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	80 81       	ld	r24, Z
    26c6:	28 2f       	mov	r18, r24
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	8a 81       	ldd	r24, Y+2	; 0x02
    26cc:	88 2f       	mov	r24, r24
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	a9 01       	movw	r20, r18
    26d2:	02 c0       	rjmp	.+4      	; 0x26d8 <DIO_u8GetPinValue+0x90>
    26d4:	55 95       	asr	r21
    26d6:	47 95       	ror	r20
    26d8:	8a 95       	dec	r24
    26da:	e2 f7       	brpl	.-8      	; 0x26d4 <DIO_u8GetPinValue+0x8c>
    26dc:	ca 01       	movw	r24, r20
    26de:	58 2f       	mov	r21, r24
    26e0:	51 70       	andi	r21, 0x01	; 1
    26e2:	5b 83       	std	Y+3, r21	; 0x03
    26e4:	27 c0       	rjmp	.+78     	; 0x2734 <DIO_u8GetPinValue+0xec>
		case 2 : return GET_BIT(PINC,copy_u8pin); break;
    26e6:	e3 e3       	ldi	r30, 0x33	; 51
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	80 81       	ld	r24, Z
    26ec:	28 2f       	mov	r18, r24
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	8a 81       	ldd	r24, Y+2	; 0x02
    26f2:	88 2f       	mov	r24, r24
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	a9 01       	movw	r20, r18
    26f8:	02 c0       	rjmp	.+4      	; 0x26fe <DIO_u8GetPinValue+0xb6>
    26fa:	55 95       	asr	r21
    26fc:	47 95       	ror	r20
    26fe:	8a 95       	dec	r24
    2700:	e2 f7       	brpl	.-8      	; 0x26fa <DIO_u8GetPinValue+0xb2>
    2702:	ca 01       	movw	r24, r20
    2704:	58 2f       	mov	r21, r24
    2706:	51 70       	andi	r21, 0x01	; 1
    2708:	5b 83       	std	Y+3, r21	; 0x03
    270a:	14 c0       	rjmp	.+40     	; 0x2734 <DIO_u8GetPinValue+0xec>
		case 3 : return GET_BIT(PIND,copy_u8pin); break;
    270c:	e0 e3       	ldi	r30, 0x30	; 48
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	80 81       	ld	r24, Z
    2712:	28 2f       	mov	r18, r24
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	8a 81       	ldd	r24, Y+2	; 0x02
    2718:	88 2f       	mov	r24, r24
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	a9 01       	movw	r20, r18
    271e:	02 c0       	rjmp	.+4      	; 0x2724 <DIO_u8GetPinValue+0xdc>
    2720:	55 95       	asr	r21
    2722:	47 95       	ror	r20
    2724:	8a 95       	dec	r24
    2726:	e2 f7       	brpl	.-8      	; 0x2720 <DIO_u8GetPinValue+0xd8>
    2728:	ca 01       	movw	r24, r20
    272a:	58 2f       	mov	r21, r24
    272c:	51 70       	andi	r21, 0x01	; 1
    272e:	5b 83       	std	Y+3, r21	; 0x03
    2730:	01 c0       	rjmp	.+2      	; 0x2734 <DIO_u8GetPinValue+0xec>
    2732:	02 c0       	rjmp	.+4      	; 0x2738 <DIO_u8GetPinValue+0xf0>
	}
	
}
    2734:	8b 81       	ldd	r24, Y+3	; 0x03
    2736:	8e 83       	std	Y+6, r24	; 0x06
    2738:	8e 81       	ldd	r24, Y+6	; 0x06
    273a:	26 96       	adiw	r28, 0x06	; 6
    273c:	0f b6       	in	r0, 0x3f	; 63
    273e:	f8 94       	cli
    2740:	de bf       	out	0x3e, r29	; 62
    2742:	0f be       	out	0x3f, r0	; 63
    2744:	cd bf       	out	0x3d, r28	; 61
    2746:	cf 91       	pop	r28
    2748:	df 91       	pop	r29
    274a:	08 95       	ret

0000274c <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 copy_u8port, u8 copy_u8Direction){
    274c:	df 93       	push	r29
    274e:	cf 93       	push	r28
    2750:	00 d0       	rcall	.+0      	; 0x2752 <DIO_voidSetPortDirection+0x6>
    2752:	00 d0       	rcall	.+0      	; 0x2754 <DIO_voidSetPortDirection+0x8>
    2754:	cd b7       	in	r28, 0x3d	; 61
    2756:	de b7       	in	r29, 0x3e	; 62
    2758:	89 83       	std	Y+1, r24	; 0x01
    275a:	6a 83       	std	Y+2, r22	; 0x02
	
	switch (copy_u8port){
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	28 2f       	mov	r18, r24
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	3c 83       	std	Y+4, r19	; 0x04
    2764:	2b 83       	std	Y+3, r18	; 0x03
    2766:	8b 81       	ldd	r24, Y+3	; 0x03
    2768:	9c 81       	ldd	r25, Y+4	; 0x04
    276a:	81 30       	cpi	r24, 0x01	; 1
    276c:	91 05       	cpc	r25, r1
    276e:	d1 f0       	breq	.+52     	; 0x27a4 <DIO_voidSetPortDirection+0x58>
    2770:	2b 81       	ldd	r18, Y+3	; 0x03
    2772:	3c 81       	ldd	r19, Y+4	; 0x04
    2774:	22 30       	cpi	r18, 0x02	; 2
    2776:	31 05       	cpc	r19, r1
    2778:	2c f4       	brge	.+10     	; 0x2784 <DIO_voidSetPortDirection+0x38>
    277a:	8b 81       	ldd	r24, Y+3	; 0x03
    277c:	9c 81       	ldd	r25, Y+4	; 0x04
    277e:	00 97       	sbiw	r24, 0x00	; 0
    2780:	61 f0       	breq	.+24     	; 0x279a <DIO_voidSetPortDirection+0x4e>
    2782:	1e c0       	rjmp	.+60     	; 0x27c0 <DIO_voidSetPortDirection+0x74>
    2784:	2b 81       	ldd	r18, Y+3	; 0x03
    2786:	3c 81       	ldd	r19, Y+4	; 0x04
    2788:	22 30       	cpi	r18, 0x02	; 2
    278a:	31 05       	cpc	r19, r1
    278c:	81 f0       	breq	.+32     	; 0x27ae <DIO_voidSetPortDirection+0x62>
    278e:	8b 81       	ldd	r24, Y+3	; 0x03
    2790:	9c 81       	ldd	r25, Y+4	; 0x04
    2792:	83 30       	cpi	r24, 0x03	; 3
    2794:	91 05       	cpc	r25, r1
    2796:	81 f0       	breq	.+32     	; 0x27b8 <DIO_voidSetPortDirection+0x6c>
    2798:	13 c0       	rjmp	.+38     	; 0x27c0 <DIO_voidSetPortDirection+0x74>
		case 0 : DDRA = copy_u8Direction; break;
    279a:	ea e3       	ldi	r30, 0x3A	; 58
    279c:	f0 e0       	ldi	r31, 0x00	; 0
    279e:	8a 81       	ldd	r24, Y+2	; 0x02
    27a0:	80 83       	st	Z, r24
    27a2:	0e c0       	rjmp	.+28     	; 0x27c0 <DIO_voidSetPortDirection+0x74>
		case 1 : DDRB = copy_u8Direction; break;
    27a4:	e7 e3       	ldi	r30, 0x37	; 55
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	8a 81       	ldd	r24, Y+2	; 0x02
    27aa:	80 83       	st	Z, r24
    27ac:	09 c0       	rjmp	.+18     	; 0x27c0 <DIO_voidSetPortDirection+0x74>
		case 2 : DDRC = copy_u8Direction; break;
    27ae:	e4 e3       	ldi	r30, 0x34	; 52
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	8a 81       	ldd	r24, Y+2	; 0x02
    27b4:	80 83       	st	Z, r24
    27b6:	04 c0       	rjmp	.+8      	; 0x27c0 <DIO_voidSetPortDirection+0x74>
		case 3 : DDRD = copy_u8Direction; break;
    27b8:	e1 e3       	ldi	r30, 0x31	; 49
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	8a 81       	ldd	r24, Y+2	; 0x02
    27be:	80 83       	st	Z, r24
	}

}
    27c0:	0f 90       	pop	r0
    27c2:	0f 90       	pop	r0
    27c4:	0f 90       	pop	r0
    27c6:	0f 90       	pop	r0
    27c8:	cf 91       	pop	r28
    27ca:	df 91       	pop	r29
    27cc:	08 95       	ret

000027ce <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 copy_u8port, u8 copy_u8Value){
    27ce:	df 93       	push	r29
    27d0:	cf 93       	push	r28
    27d2:	00 d0       	rcall	.+0      	; 0x27d4 <DIO_voidSetPortValue+0x6>
    27d4:	00 d0       	rcall	.+0      	; 0x27d6 <DIO_voidSetPortValue+0x8>
    27d6:	cd b7       	in	r28, 0x3d	; 61
    27d8:	de b7       	in	r29, 0x3e	; 62
    27da:	89 83       	std	Y+1, r24	; 0x01
    27dc:	6a 83       	std	Y+2, r22	; 0x02
	
	switch (copy_u8port){
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	28 2f       	mov	r18, r24
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	3c 83       	std	Y+4, r19	; 0x04
    27e6:	2b 83       	std	Y+3, r18	; 0x03
    27e8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ea:	9c 81       	ldd	r25, Y+4	; 0x04
    27ec:	81 30       	cpi	r24, 0x01	; 1
    27ee:	91 05       	cpc	r25, r1
    27f0:	d1 f0       	breq	.+52     	; 0x2826 <DIO_voidSetPortValue+0x58>
    27f2:	2b 81       	ldd	r18, Y+3	; 0x03
    27f4:	3c 81       	ldd	r19, Y+4	; 0x04
    27f6:	22 30       	cpi	r18, 0x02	; 2
    27f8:	31 05       	cpc	r19, r1
    27fa:	2c f4       	brge	.+10     	; 0x2806 <DIO_voidSetPortValue+0x38>
    27fc:	8b 81       	ldd	r24, Y+3	; 0x03
    27fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2800:	00 97       	sbiw	r24, 0x00	; 0
    2802:	61 f0       	breq	.+24     	; 0x281c <DIO_voidSetPortValue+0x4e>
    2804:	1e c0       	rjmp	.+60     	; 0x2842 <DIO_voidSetPortValue+0x74>
    2806:	2b 81       	ldd	r18, Y+3	; 0x03
    2808:	3c 81       	ldd	r19, Y+4	; 0x04
    280a:	22 30       	cpi	r18, 0x02	; 2
    280c:	31 05       	cpc	r19, r1
    280e:	81 f0       	breq	.+32     	; 0x2830 <DIO_voidSetPortValue+0x62>
    2810:	8b 81       	ldd	r24, Y+3	; 0x03
    2812:	9c 81       	ldd	r25, Y+4	; 0x04
    2814:	83 30       	cpi	r24, 0x03	; 3
    2816:	91 05       	cpc	r25, r1
    2818:	81 f0       	breq	.+32     	; 0x283a <DIO_voidSetPortValue+0x6c>
    281a:	13 c0       	rjmp	.+38     	; 0x2842 <DIO_voidSetPortValue+0x74>
		case 0 : PORTA = copy_u8Value; break;
    281c:	eb e3       	ldi	r30, 0x3B	; 59
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	8a 81       	ldd	r24, Y+2	; 0x02
    2822:	80 83       	st	Z, r24
    2824:	0e c0       	rjmp	.+28     	; 0x2842 <DIO_voidSetPortValue+0x74>
		case 1 : PORTB = copy_u8Value; break;
    2826:	e8 e3       	ldi	r30, 0x38	; 56
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	8a 81       	ldd	r24, Y+2	; 0x02
    282c:	80 83       	st	Z, r24
    282e:	09 c0       	rjmp	.+18     	; 0x2842 <DIO_voidSetPortValue+0x74>
		case 2 : PORTC = copy_u8Value; break;
    2830:	e5 e3       	ldi	r30, 0x35	; 53
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	8a 81       	ldd	r24, Y+2	; 0x02
    2836:	80 83       	st	Z, r24
    2838:	04 c0       	rjmp	.+8      	; 0x2842 <DIO_voidSetPortValue+0x74>
		case 3 : PORTD = copy_u8Value; break;
    283a:	e2 e3       	ldi	r30, 0x32	; 50
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	8a 81       	ldd	r24, Y+2	; 0x02
    2840:	80 83       	st	Z, r24
	}
}
    2842:	0f 90       	pop	r0
    2844:	0f 90       	pop	r0
    2846:	0f 90       	pop	r0
    2848:	0f 90       	pop	r0
    284a:	cf 91       	pop	r28
    284c:	df 91       	pop	r29
    284e:	08 95       	ret

00002850 <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue(u8 copy_u8port,u8 copy_u8pin){
    2850:	df 93       	push	r29
    2852:	cf 93       	push	r28
    2854:	00 d0       	rcall	.+0      	; 0x2856 <DIO_voidTogglePinValue+0x6>
    2856:	00 d0       	rcall	.+0      	; 0x2858 <DIO_voidTogglePinValue+0x8>
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
    285c:	89 83       	std	Y+1, r24	; 0x01
    285e:	6a 83       	std	Y+2, r22	; 0x02
	
	switch (copy_u8port){
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	28 2f       	mov	r18, r24
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	3c 83       	std	Y+4, r19	; 0x04
    2868:	2b 83       	std	Y+3, r18	; 0x03
    286a:	8b 81       	ldd	r24, Y+3	; 0x03
    286c:	9c 81       	ldd	r25, Y+4	; 0x04
    286e:	81 30       	cpi	r24, 0x01	; 1
    2870:	91 05       	cpc	r25, r1
    2872:	49 f1       	breq	.+82     	; 0x28c6 <DIO_voidTogglePinValue+0x76>
    2874:	2b 81       	ldd	r18, Y+3	; 0x03
    2876:	3c 81       	ldd	r19, Y+4	; 0x04
    2878:	22 30       	cpi	r18, 0x02	; 2
    287a:	31 05       	cpc	r19, r1
    287c:	2c f4       	brge	.+10     	; 0x2888 <DIO_voidTogglePinValue+0x38>
    287e:	8b 81       	ldd	r24, Y+3	; 0x03
    2880:	9c 81       	ldd	r25, Y+4	; 0x04
    2882:	00 97       	sbiw	r24, 0x00	; 0
    2884:	61 f0       	breq	.+24     	; 0x289e <DIO_voidTogglePinValue+0x4e>
    2886:	5a c0       	rjmp	.+180    	; 0x293c <DIO_voidTogglePinValue+0xec>
    2888:	2b 81       	ldd	r18, Y+3	; 0x03
    288a:	3c 81       	ldd	r19, Y+4	; 0x04
    288c:	22 30       	cpi	r18, 0x02	; 2
    288e:	31 05       	cpc	r19, r1
    2890:	71 f1       	breq	.+92     	; 0x28ee <DIO_voidTogglePinValue+0x9e>
    2892:	8b 81       	ldd	r24, Y+3	; 0x03
    2894:	9c 81       	ldd	r25, Y+4	; 0x04
    2896:	83 30       	cpi	r24, 0x03	; 3
    2898:	91 05       	cpc	r25, r1
    289a:	e9 f1       	breq	.+122    	; 0x2916 <DIO_voidTogglePinValue+0xc6>
    289c:	4f c0       	rjmp	.+158    	; 0x293c <DIO_voidTogglePinValue+0xec>
		case 0 : TOG_BIT(PORTA,copy_u8pin); break;
    289e:	ab e3       	ldi	r26, 0x3B	; 59
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	eb e3       	ldi	r30, 0x3B	; 59
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	48 2f       	mov	r20, r24
    28aa:	8a 81       	ldd	r24, Y+2	; 0x02
    28ac:	28 2f       	mov	r18, r24
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	02 2e       	mov	r0, r18
    28b6:	02 c0       	rjmp	.+4      	; 0x28bc <DIO_voidTogglePinValue+0x6c>
    28b8:	88 0f       	add	r24, r24
    28ba:	99 1f       	adc	r25, r25
    28bc:	0a 94       	dec	r0
    28be:	e2 f7       	brpl	.-8      	; 0x28b8 <DIO_voidTogglePinValue+0x68>
    28c0:	84 27       	eor	r24, r20
    28c2:	8c 93       	st	X, r24
    28c4:	3b c0       	rjmp	.+118    	; 0x293c <DIO_voidTogglePinValue+0xec>
		case 1 : TOG_BIT(PORTB,copy_u8pin); break;
    28c6:	a8 e3       	ldi	r26, 0x38	; 56
    28c8:	b0 e0       	ldi	r27, 0x00	; 0
    28ca:	e8 e3       	ldi	r30, 0x38	; 56
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	80 81       	ld	r24, Z
    28d0:	48 2f       	mov	r20, r24
    28d2:	8a 81       	ldd	r24, Y+2	; 0x02
    28d4:	28 2f       	mov	r18, r24
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	02 2e       	mov	r0, r18
    28de:	02 c0       	rjmp	.+4      	; 0x28e4 <DIO_voidTogglePinValue+0x94>
    28e0:	88 0f       	add	r24, r24
    28e2:	99 1f       	adc	r25, r25
    28e4:	0a 94       	dec	r0
    28e6:	e2 f7       	brpl	.-8      	; 0x28e0 <DIO_voidTogglePinValue+0x90>
    28e8:	84 27       	eor	r24, r20
    28ea:	8c 93       	st	X, r24
    28ec:	27 c0       	rjmp	.+78     	; 0x293c <DIO_voidTogglePinValue+0xec>
		case 2 : TOG_BIT(PORTC,copy_u8pin); break;
    28ee:	a5 e3       	ldi	r26, 0x35	; 53
    28f0:	b0 e0       	ldi	r27, 0x00	; 0
    28f2:	e5 e3       	ldi	r30, 0x35	; 53
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	80 81       	ld	r24, Z
    28f8:	48 2f       	mov	r20, r24
    28fa:	8a 81       	ldd	r24, Y+2	; 0x02
    28fc:	28 2f       	mov	r18, r24
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	02 2e       	mov	r0, r18
    2906:	02 c0       	rjmp	.+4      	; 0x290c <DIO_voidTogglePinValue+0xbc>
    2908:	88 0f       	add	r24, r24
    290a:	99 1f       	adc	r25, r25
    290c:	0a 94       	dec	r0
    290e:	e2 f7       	brpl	.-8      	; 0x2908 <DIO_voidTogglePinValue+0xb8>
    2910:	84 27       	eor	r24, r20
    2912:	8c 93       	st	X, r24
    2914:	13 c0       	rjmp	.+38     	; 0x293c <DIO_voidTogglePinValue+0xec>
		case 3 : TOG_BIT(PORTD,copy_u8pin); break;
    2916:	a2 e3       	ldi	r26, 0x32	; 50
    2918:	b0 e0       	ldi	r27, 0x00	; 0
    291a:	e2 e3       	ldi	r30, 0x32	; 50
    291c:	f0 e0       	ldi	r31, 0x00	; 0
    291e:	80 81       	ld	r24, Z
    2920:	48 2f       	mov	r20, r24
    2922:	8a 81       	ldd	r24, Y+2	; 0x02
    2924:	28 2f       	mov	r18, r24
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	02 2e       	mov	r0, r18
    292e:	02 c0       	rjmp	.+4      	; 0x2934 <DIO_voidTogglePinValue+0xe4>
    2930:	88 0f       	add	r24, r24
    2932:	99 1f       	adc	r25, r25
    2934:	0a 94       	dec	r0
    2936:	e2 f7       	brpl	.-8      	; 0x2930 <DIO_voidTogglePinValue+0xe0>
    2938:	84 27       	eor	r24, r20
    293a:	8c 93       	st	X, r24
	}
	
}
    293c:	0f 90       	pop	r0
    293e:	0f 90       	pop	r0
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
    2944:	cf 91       	pop	r28
    2946:	df 91       	pop	r29
    2948:	08 95       	ret

0000294a <ADC_voidInit>:
static void (*ADC_CONV_END)(void);

extern G_u8Check;

void ADC_voidInit (void)
{
    294a:	df 93       	push	r29
    294c:	cf 93       	push	r28
    294e:	cd b7       	in	r28, 0x3d	; 61
    2950:	de b7       	in	r29, 0x3e	; 62
	/* Select Vref = AVCC = 2.56V */
	SET_BIT(ADMUX , REFS1);
    2952:	a7 e2       	ldi	r26, 0x27	; 39
    2954:	b0 e0       	ldi	r27, 0x00	; 0
    2956:	e7 e2       	ldi	r30, 0x27	; 39
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	80 81       	ld	r24, Z
    295c:	80 68       	ori	r24, 0x80	; 128
    295e:	8c 93       	st	X, r24
	SET_BIT(ADMUX , REFS0);
    2960:	a7 e2       	ldi	r26, 0x27	; 39
    2962:	b0 e0       	ldi	r27, 0x00	; 0
    2964:	e7 e2       	ldi	r30, 0x27	; 39
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	80 81       	ld	r24, Z
    296a:	80 64       	ori	r24, 0x40	; 64
    296c:	8c 93       	st	X, r24
	/* 	2- Select Right Adjust*/
	CLR_BIT(ADMUX , ADLAR);
    296e:	a7 e2       	ldi	r26, 0x27	; 39
    2970:	b0 e0       	ldi	r27, 0x00	; 0
    2972:	e7 e2       	ldi	r30, 0x27	; 39
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	8f 7d       	andi	r24, 0xDF	; 223
    297a:	8c 93       	st	X, r24
	/* 	3- Disable AutoTrigger Enable*/
	CLR_BIT(ADCSRA , ADATE);
    297c:	a6 e2       	ldi	r26, 0x26	; 38
    297e:	b0 e0       	ldi	r27, 0x00	; 0
    2980:	e6 e2       	ldi	r30, 0x26	; 38
    2982:	f0 e0       	ldi	r31, 0x00	; 0
    2984:	80 81       	ld	r24, Z
    2986:	8f 7d       	andi	r24, 0xDF	; 223
    2988:	8c 93       	st	X, r24
	/* 	4- select CLK 'From 50 KHZ to 200 KHZ'---> Input CLK = 8 MHZ
	====> So We will select CLK / 64 */
	SET_BIT(ADCSRA , ADPS2);
    298a:	a6 e2       	ldi	r26, 0x26	; 38
    298c:	b0 e0       	ldi	r27, 0x00	; 0
    298e:	e6 e2       	ldi	r30, 0x26	; 38
    2990:	f0 e0       	ldi	r31, 0x00	; 0
    2992:	80 81       	ld	r24, Z
    2994:	84 60       	ori	r24, 0x04	; 4
    2996:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADPS1);
    2998:	a6 e2       	ldi	r26, 0x26	; 38
    299a:	b0 e0       	ldi	r27, 0x00	; 0
    299c:	e6 e2       	ldi	r30, 0x26	; 38
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	80 81       	ld	r24, Z
    29a2:	82 60       	ori	r24, 0x02	; 2
    29a4:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA , ADPS0);
    29a6:	a6 e2       	ldi	r26, 0x26	; 38
    29a8:	b0 e0       	ldi	r27, 0x00	; 0
    29aa:	e6 e2       	ldi	r30, 0x26	; 38
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	80 81       	ld	r24, Z
    29b0:	8e 7f       	andi	r24, 0xFE	; 254
    29b2:	8c 93       	st	X, r24
	/* 	1- Enable ADC*/
	SET_BIT(ADCSRA , ADEN);
    29b4:	a6 e2       	ldi	r26, 0x26	; 38
    29b6:	b0 e0       	ldi	r27, 0x00	; 0
    29b8:	e6 e2       	ldi	r30, 0x26	; 38
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	80 81       	ld	r24, Z
    29be:	80 68       	ori	r24, 0x80	; 128
    29c0:	8c 93       	st	X, r24
}
    29c2:	cf 91       	pop	r28
    29c4:	df 91       	pop	r29
    29c6:	08 95       	ret

000029c8 <ADC_u16GetDigitalValue>:

u16  ADC_u16GetDigitalValue(u8 Copy_u8ChannelNum)
{
    29c8:	df 93       	push	r29
    29ca:	cf 93       	push	r28
    29cc:	00 d0       	rcall	.+0      	; 0x29ce <ADC_u16GetDigitalValue+0x6>
    29ce:	0f 92       	push	r0
    29d0:	cd b7       	in	r28, 0x3d	; 61
    29d2:	de b7       	in	r29, 0x3e	; 62
    29d4:	8b 83       	std	Y+3, r24	; 0x03
	G_u8Check = 0 ;
    29d6:	10 92 5a 02 	sts	0x025A, r1
    29da:	10 92 59 02 	sts	0x0259, r1
	u16 Local_u16ADCDigitalValue ;
	/*Clear MUX4......0*/
	ADMUX &= 0b11100000 ;
    29de:	a7 e2       	ldi	r26, 0x27	; 39
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	e7 e2       	ldi	r30, 0x27	; 39
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 81       	ld	r24, Z
    29e8:	80 7e       	andi	r24, 0xE0	; 224
    29ea:	8c 93       	st	X, r24
	/*Select Channel*/
	ADMUX |= Copy_u8ChannelNum ;
    29ec:	a7 e2       	ldi	r26, 0x27	; 39
    29ee:	b0 e0       	ldi	r27, 0x00	; 0
    29f0:	e7 e2       	ldi	r30, 0x27	; 39
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	90 81       	ld	r25, Z
    29f6:	8b 81       	ldd	r24, Y+3	; 0x03
    29f8:	89 2b       	or	r24, r25
    29fa:	8c 93       	st	X, r24
	/*Start conversion*/
	SET_BIT(ADCSRA , ADSC);
    29fc:	a6 e2       	ldi	r26, 0x26	; 38
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
    2a00:	e6 e2       	ldi	r30, 0x26	; 38
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
    2a06:	80 64       	ori	r24, 0x40	; 64
    2a08:	8c 93       	st	X, r24
	/*Wait flag = 1*/
	while (GET_BIT(ADCSRA , ADIF) == 0  && G_u8Check == 0);
    2a0a:	e6 e2       	ldi	r30, 0x26	; 38
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	80 81       	ld	r24, Z
    2a10:	82 95       	swap	r24
    2a12:	8f 70       	andi	r24, 0x0F	; 15
    2a14:	88 2f       	mov	r24, r24
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	81 70       	andi	r24, 0x01	; 1
    2a1a:	90 70       	andi	r25, 0x00	; 0
    2a1c:	00 97       	sbiw	r24, 0x00	; 0
    2a1e:	31 f4       	brne	.+12     	; 0x2a2c <ADC_u16GetDigitalValue+0x64>
    2a20:	80 91 59 02 	lds	r24, 0x0259
    2a24:	90 91 5a 02 	lds	r25, 0x025A
    2a28:	00 97       	sbiw	r24, 0x00	; 0
    2a2a:	79 f3       	breq	.-34     	; 0x2a0a <ADC_u16GetDigitalValue+0x42>
	/*Clear flag*/
	SET_BIT(ADCSRA , ADIF);
    2a2c:	a6 e2       	ldi	r26, 0x26	; 38
    2a2e:	b0 e0       	ldi	r27, 0x00	; 0
    2a30:	e6 e2       	ldi	r30, 0x26	; 38
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	80 81       	ld	r24, Z
    2a36:	80 61       	ori	r24, 0x10	; 16
    2a38:	8c 93       	st	X, r24
	/* Read the digital value from ADC_REG ==> "High & Low" */
	Local_u16ADCDigitalValue = ADC_REG ;
    2a3a:	e4 e2       	ldi	r30, 0x24	; 36
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	80 81       	ld	r24, Z
    2a40:	91 81       	ldd	r25, Z+1	; 0x01
    2a42:	9a 83       	std	Y+2, r25	; 0x02
    2a44:	89 83       	std	Y+1, r24	; 0x01
	return Local_u16ADCDigitalValue ;
    2a46:	89 81       	ldd	r24, Y+1	; 0x01
    2a48:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2a4a:	0f 90       	pop	r0
    2a4c:	0f 90       	pop	r0
    2a4e:	0f 90       	pop	r0
    2a50:	cf 91       	pop	r28
    2a52:	df 91       	pop	r29
    2a54:	08 95       	ret

00002a56 <ADC_voidADCInt>:


void ADC_voidADCInt()
{
    2a56:	df 93       	push	r29
    2a58:	cf 93       	push	r28
    2a5a:	cd b7       	in	r28, 0x3d	; 61
    2a5c:	de b7       	in	r29, 0x3e	; 62
#if ADC_INT == ENABLE
	SET_BIT(ADCSRA, ADIE);
    2a5e:	a6 e2       	ldi	r26, 0x26	; 38
    2a60:	b0 e0       	ldi	r27, 0x00	; 0
    2a62:	e6 e2       	ldi	r30, 0x26	; 38
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	80 81       	ld	r24, Z
    2a68:	88 60       	ori	r24, 0x08	; 8
    2a6a:	8c 93       	st	X, r24
#elif ADC_INT == DISABLE
	CLR_BIT(ADCSRA, ADIE);
#endif
}
    2a6c:	cf 91       	pop	r28
    2a6e:	df 91       	pop	r29
    2a70:	08 95       	ret

00002a72 <ADC_voidADCIsDone>:

void ADC_voidADCIsDone()
{
    2a72:	df 93       	push	r29
    2a74:	cf 93       	push	r28
    2a76:	cd b7       	in	r28, 0x3d	; 61
    2a78:	de b7       	in	r29, 0x3e	; 62
	while( GET_BIT(ADCSRA, ADIF) == 0);
    2a7a:	e6 e2       	ldi	r30, 0x26	; 38
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	80 81       	ld	r24, Z
    2a80:	82 95       	swap	r24
    2a82:	8f 70       	andi	r24, 0x0F	; 15
    2a84:	88 2f       	mov	r24, r24
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	81 70       	andi	r24, 0x01	; 1
    2a8a:	90 70       	andi	r25, 0x00	; 0
    2a8c:	00 97       	sbiw	r24, 0x00	; 0
    2a8e:	a9 f3       	breq	.-22     	; 0x2a7a <ADC_voidADCIsDone+0x8>
	SET_BIT(ADCSRA, ADIF);
    2a90:	a6 e2       	ldi	r26, 0x26	; 38
    2a92:	b0 e0       	ldi	r27, 0x00	; 0
    2a94:	e6 e2       	ldi	r30, 0x26	; 38
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	80 81       	ld	r24, Z
    2a9a:	80 61       	ori	r24, 0x10	; 16
    2a9c:	8c 93       	st	X, r24
}
    2a9e:	cf 91       	pop	r28
    2aa0:	df 91       	pop	r29
    2aa2:	08 95       	ret

00002aa4 <ADC_voidADCSetCallBack>:

void ADC_voidADCSetCallBack ( void (*copy_ADCEndConv) (void))
{
    2aa4:	df 93       	push	r29
    2aa6:	cf 93       	push	r28
    2aa8:	00 d0       	rcall	.+0      	; 0x2aaa <ADC_voidADCSetCallBack+0x6>
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
    2aae:	9a 83       	std	Y+2, r25	; 0x02
    2ab0:	89 83       	std	Y+1, r24	; 0x01
	ADC_CONV_END = copy_ADCEndConv;
    2ab2:	89 81       	ldd	r24, Y+1	; 0x01
    2ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab6:	90 93 4d 02 	sts	0x024D, r25
    2aba:	80 93 4c 02 	sts	0x024C, r24
}
    2abe:	0f 90       	pop	r0
    2ac0:	0f 90       	pop	r0
    2ac2:	cf 91       	pop	r28
    2ac4:	df 91       	pop	r29
    2ac6:	08 95       	ret

00002ac8 <ISR>:

ISR(ADC_vect)
{
    2ac8:	df 93       	push	r29
    2aca:	cf 93       	push	r28
    2acc:	00 d0       	rcall	.+0      	; 0x2ace <ISR+0x6>
    2ace:	00 d0       	rcall	.+0      	; 0x2ad0 <ISR+0x8>
    2ad0:	cd b7       	in	r28, 0x3d	; 61
    2ad2:	de b7       	in	r29, 0x3e	; 62
    2ad4:	9a 83       	std	Y+2, r25	; 0x02
    2ad6:	89 83       	std	Y+1, r24	; 0x01
	ADC_CONV_END();
    2ad8:	e0 91 4c 02 	lds	r30, 0x024C
    2adc:	f0 91 4d 02 	lds	r31, 0x024D
    2ae0:	09 95       	icall
}
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	0f 90       	pop	r0
    2ae8:	0f 90       	pop	r0
    2aea:	cf 91       	pop	r28
    2aec:	df 91       	pop	r29
    2aee:	08 95       	ret

00002af0 <TIMER1_voidFPWM>:
#include <avr/interrupt.h>
#include "../../MCAL/DIO/DIO_Interface.h"
#include "SERVOMOTOR_Interface.h"

void TIMER1_voidFPWM(void)
{
    2af0:	df 93       	push	r29
    2af2:	cf 93       	push	r28
    2af4:	cd b7       	in	r28, 0x3d	; 61
    2af6:	de b7       	in	r29, 0x3e	; 62
	/* SELECT FAST PWM */
	CLR_BIT(TCCR1A, WGM10);
    2af8:	af e4       	ldi	r26, 0x4F	; 79
    2afa:	b0 e0       	ldi	r27, 0x00	; 0
    2afc:	ef e4       	ldi	r30, 0x4F	; 79
    2afe:	f0 e0       	ldi	r31, 0x00	; 0
    2b00:	80 81       	ld	r24, Z
    2b02:	8e 7f       	andi	r24, 0xFE	; 254
    2b04:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
    2b06:	af e4       	ldi	r26, 0x4F	; 79
    2b08:	b0 e0       	ldi	r27, 0x00	; 0
    2b0a:	ef e4       	ldi	r30, 0x4F	; 79
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	80 81       	ld	r24, Z
    2b10:	82 60       	ori	r24, 0x02	; 2
    2b12:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
    2b14:	ae e4       	ldi	r26, 0x4E	; 78
    2b16:	b0 e0       	ldi	r27, 0x00	; 0
    2b18:	ee e4       	ldi	r30, 0x4E	; 78
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	80 81       	ld	r24, Z
    2b1e:	88 60       	ori	r24, 0x08	; 8
    2b20:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM13);
    2b22:	ae e4       	ldi	r26, 0x4E	; 78
    2b24:	b0 e0       	ldi	r27, 0x00	; 0
    2b26:	ee e4       	ldi	r30, 0x4E	; 78
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	80 81       	ld	r24, Z
    2b2c:	80 61       	ori	r24, 0x10	; 16
    2b2e:	8c 93       	st	X, r24

	/* CLEAR OC1A */
	CLR_BIT(TCCR1A, COM1A0);
    2b30:	af e4       	ldi	r26, 0x4F	; 79
    2b32:	b0 e0       	ldi	r27, 0x00	; 0
    2b34:	ef e4       	ldi	r30, 0x4F	; 79
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	80 81       	ld	r24, Z
    2b3a:	8f 7b       	andi	r24, 0xBF	; 191
    2b3c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1A1);
    2b3e:	af e4       	ldi	r26, 0x4F	; 79
    2b40:	b0 e0       	ldi	r27, 0x00	; 0
    2b42:	ef e4       	ldi	r30, 0x4F	; 79
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	80 81       	ld	r24, Z
    2b48:	80 68       	ori	r24, 0x80	; 128
    2b4a:	8c 93       	st	X, r24

	/* ICR1 */
	ICR1 = 19999;
    2b4c:	e6 e4       	ldi	r30, 0x46	; 70
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	8f e1       	ldi	r24, 0x1F	; 31
    2b52:	9e e4       	ldi	r25, 0x4E	; 78
    2b54:	91 83       	std	Z+1, r25	; 0x01
    2b56:	80 83       	st	Z, r24

	/* CLK/8 */
	CLR_BIT(TCCR1B, CS10);
    2b58:	ae e4       	ldi	r26, 0x4E	; 78
    2b5a:	b0 e0       	ldi	r27, 0x00	; 0
    2b5c:	ee e4       	ldi	r30, 0x4E	; 78
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	80 81       	ld	r24, Z
    2b62:	8e 7f       	andi	r24, 0xFE	; 254
    2b64:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS11);
    2b66:	ae e4       	ldi	r26, 0x4E	; 78
    2b68:	b0 e0       	ldi	r27, 0x00	; 0
    2b6a:	ee e4       	ldi	r30, 0x4E	; 78
    2b6c:	f0 e0       	ldi	r31, 0x00	; 0
    2b6e:	80 81       	ld	r24, Z
    2b70:	82 60       	ori	r24, 0x02	; 2
    2b72:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    2b74:	ae e4       	ldi	r26, 0x4E	; 78
    2b76:	b0 e0       	ldi	r27, 0x00	; 0
    2b78:	ee e4       	ldi	r30, 0x4E	; 78
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	80 81       	ld	r24, Z
    2b7e:	8b 7f       	andi	r24, 0xFB	; 251
    2b80:	8c 93       	st	X, r24
	DIO_voidSetPinDirection(3,5,1);
    2b82:	83 e0       	ldi	r24, 0x03	; 3
    2b84:	65 e0       	ldi	r22, 0x05	; 5
    2b86:	41 e0       	ldi	r20, 0x01	; 1
    2b88:	0e 94 24 11 	call	0x2248	; 0x2248 <DIO_voidSetPinDirection>

}
    2b8c:	cf 91       	pop	r28
    2b8e:	df 91       	pop	r29
    2b90:	08 95       	ret

00002b92 <SERVO_voidSetAngle>:

void SERVO_voidSetAngle(u8 copy_u8Angle)
{
    2b92:	df 93       	push	r29
    2b94:	cf 93       	push	r28
    2b96:	0f 92       	push	r0
    2b98:	cd b7       	in	r28, 0x3d	; 61
    2b9a:	de b7       	in	r29, 0x3e	; 62
    2b9c:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = ((50* copy_u8Angle)+8991)/9;
    2b9e:	ea e4       	ldi	r30, 0x4A	; 74
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	89 81       	ldd	r24, Y+1	; 0x01
    2ba4:	28 2f       	mov	r18, r24
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	82 e3       	ldi	r24, 0x32	; 50
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	ac 01       	movw	r20, r24
    2bae:	24 9f       	mul	r18, r20
    2bb0:	c0 01       	movw	r24, r0
    2bb2:	25 9f       	mul	r18, r21
    2bb4:	90 0d       	add	r25, r0
    2bb6:	34 9f       	mul	r19, r20
    2bb8:	90 0d       	add	r25, r0
    2bba:	11 24       	eor	r1, r1
    2bbc:	81 5e       	subi	r24, 0xE1	; 225
    2bbe:	9c 4d       	sbci	r25, 0xDC	; 220
    2bc0:	29 e0       	ldi	r18, 0x09	; 9
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	b9 01       	movw	r22, r18
    2bc6:	0e 94 c9 23 	call	0x4792	; 0x4792 <__divmodhi4>
    2bca:	cb 01       	movw	r24, r22
    2bcc:	91 83       	std	Z+1, r25	; 0x01
    2bce:	80 83       	st	Z, r24
}
    2bd0:	0f 90       	pop	r0
    2bd2:	cf 91       	pop	r28
    2bd4:	df 91       	pop	r29
    2bd6:	08 95       	ret

00002bd8 <LM35_TempSensor_u8ReadTemp>:
#include "LM35_Interface.h"

extern G_u8Target;

u8 LM35_TempSensor_u8ReadTemp(void)
{
    2bd8:	df 93       	push	r29
    2bda:	cf 93       	push	r28
    2bdc:	00 d0       	rcall	.+0      	; 0x2bde <LM35_TempSensor_u8ReadTemp+0x6>
    2bde:	0f 92       	push	r0
    2be0:	cd b7       	in	r28, 0x3d	; 61
    2be2:	de b7       	in	r29, 0x3e	; 62

//	Declare the value of tempreture value & ADC Value
	u8 L_u8Temp = 0;
    2be4:	1b 82       	std	Y+3, r1	; 0x03
	u16 L_u16ADCvalue;

	G_u8Target =TARGET_LM;
    2be6:	87 e0       	ldi	r24, 0x07	; 7
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	90 93 53 02 	sts	0x0253, r25
    2bee:	80 93 52 02 	sts	0x0252, r24
	/*
     *  get the digital value of the sensor Analog reading
	 *  that sensor on channel 0
 	 */
	L_u16ADCvalue = ADC_u16GetDigitalValue(LM35_CHANNEL_ID);
    2bf2:	82 e0       	ldi	r24, 0x02	; 2
    2bf4:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <ADC_u16GetDigitalValue>
    2bf8:	9a 83       	std	Y+2, r25	; 0x02
    2bfa:	89 83       	std	Y+1, r24	; 0x01
 *	   " / ADC_MAXIMUM_VALUE * SENSOR_MAX_VOLT_VALUE"   This step scales the voltage value down to a fractional value between 0 and 1, representing the relative position within the full range.

 *      the entire result is cast back to u8, which truncates the fractional part of the value and keeps only the integer part.
 */
//	temp_value = (u8)(((u32) adc_value * SENSOR_MAX_TEMPERATURE * ADC_REF_VOLT_VALUE) / (ADC_MAXIMUM_VALUE * SENSOR_MAX_VOLT_VALUE));
	L_u8Temp = L_u16ADCvalue * 0.25;
    2bfc:	89 81       	ldd	r24, Y+1	; 0x01
    2bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    2c00:	cc 01       	movw	r24, r24
    2c02:	a0 e0       	ldi	r26, 0x00	; 0
    2c04:	b0 e0       	ldi	r27, 0x00	; 0
    2c06:	bc 01       	movw	r22, r24
    2c08:	cd 01       	movw	r24, r26
    2c0a:	0e 94 92 06 	call	0xd24	; 0xd24 <__floatunsisf>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	bc 01       	movw	r22, r24
    2c14:	cd 01       	movw	r24, r26
    2c16:	20 e0       	ldi	r18, 0x00	; 0
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	40 e8       	ldi	r20, 0x80	; 128
    2c1c:	5e e3       	ldi	r21, 0x3E	; 62
    2c1e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    2c22:	dc 01       	movw	r26, r24
    2c24:	cb 01       	movw	r24, r22
    2c26:	bc 01       	movw	r22, r24
    2c28:	cd 01       	movw	r24, r26
    2c2a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2c2e:	dc 01       	movw	r26, r24
    2c30:	cb 01       	movw	r24, r22
    2c32:	8b 83       	std	Y+3, r24	; 0x03

	return L_u8Temp;
    2c34:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2c36:	0f 90       	pop	r0
    2c38:	0f 90       	pop	r0
    2c3a:	0f 90       	pop	r0
    2c3c:	cf 91       	pop	r28
    2c3e:	df 91       	pop	r29
    2c40:	08 95       	ret

00002c42 <LDR_readint>:
#include "LDR_Interface.h"

extern G_u8Target;

u16 LDR_readint(void)
{
    2c42:	2f 92       	push	r2
    2c44:	3f 92       	push	r3
    2c46:	4f 92       	push	r4
    2c48:	5f 92       	push	r5
    2c4a:	6f 92       	push	r6
    2c4c:	7f 92       	push	r7
    2c4e:	8f 92       	push	r8
    2c50:	9f 92       	push	r9
    2c52:	af 92       	push	r10
    2c54:	bf 92       	push	r11
    2c56:	cf 92       	push	r12
    2c58:	df 92       	push	r13
    2c5a:	ef 92       	push	r14
    2c5c:	ff 92       	push	r15
    2c5e:	0f 93       	push	r16
    2c60:	1f 93       	push	r17
    2c62:	df 93       	push	r29
    2c64:	cf 93       	push	r28
    2c66:	cd b7       	in	r28, 0x3d	; 61
    2c68:	de b7       	in	r29, 0x3e	; 62
    2c6a:	c2 55       	subi	r28, 0x52	; 82
    2c6c:	d0 40       	sbci	r29, 0x00	; 0
    2c6e:	0f b6       	in	r0, 0x3f	; 63
    2c70:	f8 94       	cli
    2c72:	de bf       	out	0x3e, r29	; 62
    2c74:	0f be       	out	0x3f, r0	; 63
    2c76:	cd bf       	out	0x3d, r28	; 61
	//	Declare the value of LDR value & ADC Value
	u16 L_u16LDRvalue, L_u16ADCValue = 0;
    2c78:	1a 82       	std	Y+2, r1	; 0x02
    2c7a:	19 82       	std	Y+1, r1	; 0x01
	/*
     *  get the digital value of the sensor Analog reading
	 *  that sensor on channel 1
 	 */
	G_u8Target = TARGET_LDR;
    2c7c:	88 e0       	ldi	r24, 0x08	; 8
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	90 93 53 02 	sts	0x0253, r25
    2c84:	80 93 52 02 	sts	0x0252, r24
	L_u16ADCValue = ADC_u16GetDigitalValue(SENSOR_CHANNEL_ID);
    2c88:	83 e0       	ldi	r24, 0x03	; 3
    2c8a:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <ADC_u16GetDigitalValue>
    2c8e:	9a 83       	std	Y+2, r25	; 0x02
    2c90:	89 83       	std	Y+1, r24	; 0x01
     *  " * ADC_REF_VOLT_VALUE multiplies " This operation converts the scaled ADC reading into a voltage value.
     * /(ADC_MAXIMUM_VALUE * SENSOR_MAX_VOLT_VALUE) This step scales the voltage value down to a fractional value between 0 and 1.
     * "u16" This is done because the LDR value is likely being represented as a 16-bit integer.
     */

     L_u16LDRvalue = (u16)(((u64)L_u16ADCValue*SENSOR_MAX_INTENSITY*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    2c92:	89 81       	ldd	r24, Y+1	; 0x01
    2c94:	9a 81       	ldd	r25, Y+2	; 0x02
    2c96:	8c 01       	movw	r16, r24
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	40 e0       	ldi	r20, 0x00	; 0
    2c9e:	50 e0       	ldi	r21, 0x00	; 0
    2ca0:	60 e0       	ldi	r22, 0x00	; 0
    2ca2:	70 e0       	ldi	r23, 0x00	; 0
    2ca4:	0d 83       	std	Y+5, r16	; 0x05
    2ca6:	1e 83       	std	Y+6, r17	; 0x06
    2ca8:	2f 83       	std	Y+7, r18	; 0x07
    2caa:	38 87       	std	Y+8, r19	; 0x08
    2cac:	49 87       	std	Y+9, r20	; 0x09
    2cae:	5a 87       	std	Y+10, r21	; 0x0a
    2cb0:	6b 87       	std	Y+11, r22	; 0x0b
    2cb2:	7c 87       	std	Y+12, r23	; 0x0c
    2cb4:	ad 80       	ldd	r10, Y+5	; 0x05
    2cb6:	be 80       	ldd	r11, Y+6	; 0x06
    2cb8:	cf 80       	ldd	r12, Y+7	; 0x07
    2cba:	d8 84       	ldd	r13, Y+8	; 0x08
    2cbc:	e9 84       	ldd	r14, Y+9	; 0x09
    2cbe:	fa 84       	ldd	r15, Y+10	; 0x0a
    2cc0:	0b 85       	ldd	r16, Y+11	; 0x0b
    2cc2:	1c 85       	ldd	r17, Y+12	; 0x0c
    2cc4:	2a 2d       	mov	r18, r10
    2cc6:	3b 2d       	mov	r19, r11
    2cc8:	4c 2d       	mov	r20, r12
    2cca:	5d 2d       	mov	r21, r13
    2ccc:	6e 2d       	mov	r22, r14
    2cce:	7f 2d       	mov	r23, r15
    2cd0:	80 2f       	mov	r24, r16
    2cd2:	91 2f       	mov	r25, r17
    2cd4:	02 e0       	ldi	r16, 0x02	; 2
    2cd6:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    2cda:	2d 87       	std	Y+13, r18	; 0x0d
    2cdc:	3e 87       	std	Y+14, r19	; 0x0e
    2cde:	4f 87       	std	Y+15, r20	; 0x0f
    2ce0:	58 8b       	std	Y+16, r21	; 0x10
    2ce2:	69 8b       	std	Y+17, r22	; 0x11
    2ce4:	7a 8b       	std	Y+18, r23	; 0x12
    2ce6:	8b 8b       	std	Y+19, r24	; 0x13
    2ce8:	9c 8b       	std	Y+20, r25	; 0x14
    2cea:	2d 85       	ldd	r18, Y+13	; 0x0d
    2cec:	3e 85       	ldd	r19, Y+14	; 0x0e
    2cee:	4f 85       	ldd	r20, Y+15	; 0x0f
    2cf0:	58 89       	ldd	r21, Y+16	; 0x10
    2cf2:	69 89       	ldd	r22, Y+17	; 0x11
    2cf4:	7a 89       	ldd	r23, Y+18	; 0x12
    2cf6:	8b 89       	ldd	r24, Y+19	; 0x13
    2cf8:	9c 89       	ldd	r25, Y+20	; 0x14
    2cfa:	05 e0       	ldi	r16, 0x05	; 5
    2cfc:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    2d00:	2d 8b       	std	Y+21, r18	; 0x15
    2d02:	3e 8b       	std	Y+22, r19	; 0x16
    2d04:	4f 8b       	std	Y+23, r20	; 0x17
    2d06:	58 8f       	std	Y+24, r21	; 0x18
    2d08:	69 8f       	std	Y+25, r22	; 0x19
    2d0a:	7a 8f       	std	Y+26, r23	; 0x1a
    2d0c:	8b 8f       	std	Y+27, r24	; 0x1b
    2d0e:	9c 8f       	std	Y+28, r25	; 0x1c
    2d10:	1d 89       	ldd	r17, Y+21	; 0x15
    2d12:	2d 85       	ldd	r18, Y+13	; 0x0d
    2d14:	12 1b       	sub	r17, r18
    2d16:	1d 8f       	std	Y+29, r17	; 0x1d
    2d18:	31 e0       	ldi	r19, 0x01	; 1
    2d1a:	3d a3       	std	Y+37, r19	; 0x25
    2d1c:	4d 8d       	ldd	r20, Y+29	; 0x1d
    2d1e:	5d 89       	ldd	r21, Y+21	; 0x15
    2d20:	54 17       	cp	r21, r20
    2d22:	08 f0       	brcs	.+2      	; 0x2d26 <LDR_readint+0xe4>
    2d24:	1d a2       	std	Y+37, r1	; 0x25
    2d26:	6e 89       	ldd	r22, Y+22	; 0x16
    2d28:	7e 85       	ldd	r23, Y+14	; 0x0e
    2d2a:	67 1b       	sub	r22, r23
    2d2c:	6e 8f       	std	Y+30, r22	; 0x1e
    2d2e:	81 e0       	ldi	r24, 0x01	; 1
    2d30:	8e a3       	std	Y+38, r24	; 0x26
    2d32:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d34:	0e 89       	ldd	r16, Y+22	; 0x16
    2d36:	09 17       	cp	r16, r25
    2d38:	08 f0       	brcs	.+2      	; 0x2d3c <LDR_readint+0xfa>
    2d3a:	1e a2       	std	Y+38, r1	; 0x26
    2d3c:	1e 8d       	ldd	r17, Y+30	; 0x1e
    2d3e:	2d a1       	ldd	r18, Y+37	; 0x25
    2d40:	12 1b       	sub	r17, r18
    2d42:	1f a3       	std	Y+39, r17	; 0x27
    2d44:	31 e0       	ldi	r19, 0x01	; 1
    2d46:	38 a7       	std	Y+40, r19	; 0x28
    2d48:	4f a1       	ldd	r20, Y+39	; 0x27
    2d4a:	5e 8d       	ldd	r21, Y+30	; 0x1e
    2d4c:	54 17       	cp	r21, r20
    2d4e:	08 f0       	brcs	.+2      	; 0x2d52 <LDR_readint+0x110>
    2d50:	18 a6       	std	Y+40, r1	; 0x28
    2d52:	6e a1       	ldd	r22, Y+38	; 0x26
    2d54:	78 a5       	ldd	r23, Y+40	; 0x28
    2d56:	67 2b       	or	r22, r23
    2d58:	6e a3       	std	Y+38, r22	; 0x26
    2d5a:	8f a1       	ldd	r24, Y+39	; 0x27
    2d5c:	8e 8f       	std	Y+30, r24	; 0x1e
    2d5e:	9f 89       	ldd	r25, Y+23	; 0x17
    2d60:	0f 85       	ldd	r16, Y+15	; 0x0f
    2d62:	90 1b       	sub	r25, r16
    2d64:	9f 8f       	std	Y+31, r25	; 0x1f
    2d66:	11 e0       	ldi	r17, 0x01	; 1
    2d68:	19 a7       	std	Y+41, r17	; 0x29
    2d6a:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2d6c:	3f 89       	ldd	r19, Y+23	; 0x17
    2d6e:	32 17       	cp	r19, r18
    2d70:	08 f0       	brcs	.+2      	; 0x2d74 <LDR_readint+0x132>
    2d72:	19 a6       	std	Y+41, r1	; 0x29
    2d74:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2d76:	5e a1       	ldd	r21, Y+38	; 0x26
    2d78:	45 1b       	sub	r20, r21
    2d7a:	4a a7       	std	Y+42, r20	; 0x2a
    2d7c:	61 e0       	ldi	r22, 0x01	; 1
    2d7e:	6b a7       	std	Y+43, r22	; 0x2b
    2d80:	7a a5       	ldd	r23, Y+42	; 0x2a
    2d82:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d84:	87 17       	cp	r24, r23
    2d86:	08 f0       	brcs	.+2      	; 0x2d8a <LDR_readint+0x148>
    2d88:	1b a6       	std	Y+43, r1	; 0x2b
    2d8a:	99 a5       	ldd	r25, Y+41	; 0x29
    2d8c:	0b a5       	ldd	r16, Y+43	; 0x2b
    2d8e:	90 2b       	or	r25, r16
    2d90:	99 a7       	std	Y+41, r25	; 0x29
    2d92:	1a a5       	ldd	r17, Y+42	; 0x2a
    2d94:	1f 8f       	std	Y+31, r17	; 0x1f
    2d96:	28 8d       	ldd	r18, Y+24	; 0x18
    2d98:	38 89       	ldd	r19, Y+16	; 0x10
    2d9a:	23 1b       	sub	r18, r19
    2d9c:	28 a3       	std	Y+32, r18	; 0x20
    2d9e:	41 e0       	ldi	r20, 0x01	; 1
    2da0:	4c a7       	std	Y+44, r20	; 0x2c
    2da2:	58 a1       	ldd	r21, Y+32	; 0x20
    2da4:	68 8d       	ldd	r22, Y+24	; 0x18
    2da6:	65 17       	cp	r22, r21
    2da8:	08 f0       	brcs	.+2      	; 0x2dac <LDR_readint+0x16a>
    2daa:	1c a6       	std	Y+44, r1	; 0x2c
    2dac:	78 a1       	ldd	r23, Y+32	; 0x20
    2dae:	89 a5       	ldd	r24, Y+41	; 0x29
    2db0:	78 1b       	sub	r23, r24
    2db2:	7d a7       	std	Y+45, r23	; 0x2d
    2db4:	91 e0       	ldi	r25, 0x01	; 1
    2db6:	9e a7       	std	Y+46, r25	; 0x2e
    2db8:	0d a5       	ldd	r16, Y+45	; 0x2d
    2dba:	18 a1       	ldd	r17, Y+32	; 0x20
    2dbc:	10 17       	cp	r17, r16
    2dbe:	08 f0       	brcs	.+2      	; 0x2dc2 <LDR_readint+0x180>
    2dc0:	1e a6       	std	Y+46, r1	; 0x2e
    2dc2:	2c a5       	ldd	r18, Y+44	; 0x2c
    2dc4:	3e a5       	ldd	r19, Y+46	; 0x2e
    2dc6:	23 2b       	or	r18, r19
    2dc8:	2c a7       	std	Y+44, r18	; 0x2c
    2dca:	4d a5       	ldd	r20, Y+45	; 0x2d
    2dcc:	48 a3       	std	Y+32, r20	; 0x20
    2dce:	59 8d       	ldd	r21, Y+25	; 0x19
    2dd0:	69 89       	ldd	r22, Y+17	; 0x11
    2dd2:	56 1b       	sub	r21, r22
    2dd4:	59 a3       	std	Y+33, r21	; 0x21
    2dd6:	71 e0       	ldi	r23, 0x01	; 1
    2dd8:	7f a7       	std	Y+47, r23	; 0x2f
    2dda:	89 a1       	ldd	r24, Y+33	; 0x21
    2ddc:	99 8d       	ldd	r25, Y+25	; 0x19
    2dde:	98 17       	cp	r25, r24
    2de0:	08 f0       	brcs	.+2      	; 0x2de4 <LDR_readint+0x1a2>
    2de2:	1f a6       	std	Y+47, r1	; 0x2f
    2de4:	09 a1       	ldd	r16, Y+33	; 0x21
    2de6:	1c a5       	ldd	r17, Y+44	; 0x2c
    2de8:	01 1b       	sub	r16, r17
    2dea:	08 ab       	std	Y+48, r16	; 0x30
    2dec:	21 e0       	ldi	r18, 0x01	; 1
    2dee:	29 ab       	std	Y+49, r18	; 0x31
    2df0:	38 a9       	ldd	r19, Y+48	; 0x30
    2df2:	49 a1       	ldd	r20, Y+33	; 0x21
    2df4:	43 17       	cp	r20, r19
    2df6:	08 f0       	brcs	.+2      	; 0x2dfa <LDR_readint+0x1b8>
    2df8:	19 aa       	std	Y+49, r1	; 0x31
    2dfa:	5f a5       	ldd	r21, Y+47	; 0x2f
    2dfc:	69 a9       	ldd	r22, Y+49	; 0x31
    2dfe:	56 2b       	or	r21, r22
    2e00:	5f a7       	std	Y+47, r21	; 0x2f
    2e02:	78 a9       	ldd	r23, Y+48	; 0x30
    2e04:	79 a3       	std	Y+33, r23	; 0x21
    2e06:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e08:	9a 89       	ldd	r25, Y+18	; 0x12
    2e0a:	89 1b       	sub	r24, r25
    2e0c:	8a a3       	std	Y+34, r24	; 0x22
    2e0e:	01 e0       	ldi	r16, 0x01	; 1
    2e10:	0a ab       	std	Y+50, r16	; 0x32
    2e12:	1a a1       	ldd	r17, Y+34	; 0x22
    2e14:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2e16:	21 17       	cp	r18, r17
    2e18:	08 f0       	brcs	.+2      	; 0x2e1c <LDR_readint+0x1da>
    2e1a:	1a aa       	std	Y+50, r1	; 0x32
    2e1c:	3a a1       	ldd	r19, Y+34	; 0x22
    2e1e:	4f a5       	ldd	r20, Y+47	; 0x2f
    2e20:	34 1b       	sub	r19, r20
    2e22:	3b ab       	std	Y+51, r19	; 0x33
    2e24:	51 e0       	ldi	r21, 0x01	; 1
    2e26:	5c ab       	std	Y+52, r21	; 0x34
    2e28:	6b a9       	ldd	r22, Y+51	; 0x33
    2e2a:	7a a1       	ldd	r23, Y+34	; 0x22
    2e2c:	76 17       	cp	r23, r22
    2e2e:	08 f0       	brcs	.+2      	; 0x2e32 <LDR_readint+0x1f0>
    2e30:	1c aa       	std	Y+52, r1	; 0x34
    2e32:	8a a9       	ldd	r24, Y+50	; 0x32
    2e34:	9c a9       	ldd	r25, Y+52	; 0x34
    2e36:	89 2b       	or	r24, r25
    2e38:	8a ab       	std	Y+50, r24	; 0x32
    2e3a:	0b a9       	ldd	r16, Y+51	; 0x33
    2e3c:	0a a3       	std	Y+34, r16	; 0x22
    2e3e:	1b 8d       	ldd	r17, Y+27	; 0x1b
    2e40:	2b 89       	ldd	r18, Y+19	; 0x13
    2e42:	12 1b       	sub	r17, r18
    2e44:	1b a3       	std	Y+35, r17	; 0x23
    2e46:	31 e0       	ldi	r19, 0x01	; 1
    2e48:	3d ab       	std	Y+53, r19	; 0x35
    2e4a:	4b a1       	ldd	r20, Y+35	; 0x23
    2e4c:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2e4e:	54 17       	cp	r21, r20
    2e50:	08 f0       	brcs	.+2      	; 0x2e54 <LDR_readint+0x212>
    2e52:	1d aa       	std	Y+53, r1	; 0x35
    2e54:	6b a1       	ldd	r22, Y+35	; 0x23
    2e56:	7a a9       	ldd	r23, Y+50	; 0x32
    2e58:	67 1b       	sub	r22, r23
    2e5a:	6e ab       	std	Y+54, r22	; 0x36
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
    2e5e:	8f ab       	std	Y+55, r24	; 0x37
    2e60:	9e a9       	ldd	r25, Y+54	; 0x36
    2e62:	0b a1       	ldd	r16, Y+35	; 0x23
    2e64:	09 17       	cp	r16, r25
    2e66:	08 f0       	brcs	.+2      	; 0x2e6a <LDR_readint+0x228>
    2e68:	1f aa       	std	Y+55, r1	; 0x37
    2e6a:	1d a9       	ldd	r17, Y+53	; 0x35
    2e6c:	2f a9       	ldd	r18, Y+55	; 0x37
    2e6e:	12 2b       	or	r17, r18
    2e70:	1d ab       	std	Y+53, r17	; 0x35
    2e72:	3e a9       	ldd	r19, Y+54	; 0x36
    2e74:	3b a3       	std	Y+35, r19	; 0x23
    2e76:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2e78:	5c 89       	ldd	r21, Y+20	; 0x14
    2e7a:	45 1b       	sub	r20, r21
    2e7c:	4c a3       	std	Y+36, r20	; 0x24
    2e7e:	8c a1       	ldd	r24, Y+36	; 0x24
    2e80:	6d a9       	ldd	r22, Y+53	; 0x35
    2e82:	86 1b       	sub	r24, r22
    2e84:	8c a3       	std	Y+36, r24	; 0x24
    2e86:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2e88:	7d 8b       	std	Y+21, r23	; 0x15
    2e8a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e8c:	8e 8b       	std	Y+22, r24	; 0x16
    2e8e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2e90:	9f 8b       	std	Y+23, r25	; 0x17
    2e92:	08 a1       	ldd	r16, Y+32	; 0x20
    2e94:	08 8f       	std	Y+24, r16	; 0x18
    2e96:	19 a1       	ldd	r17, Y+33	; 0x21
    2e98:	19 8f       	std	Y+25, r17	; 0x19
    2e9a:	2a a1       	ldd	r18, Y+34	; 0x22
    2e9c:	2a 8f       	std	Y+26, r18	; 0x1a
    2e9e:	3b a1       	ldd	r19, Y+35	; 0x23
    2ea0:	3b 8f       	std	Y+27, r19	; 0x1b
    2ea2:	4c a1       	ldd	r20, Y+36	; 0x24
    2ea4:	4c 8f       	std	Y+28, r20	; 0x1c
    2ea6:	5d 89       	ldd	r21, Y+21	; 0x15
    2ea8:	6d 81       	ldd	r22, Y+5	; 0x05
    2eaa:	56 0f       	add	r21, r22
    2eac:	58 af       	std	Y+56, r21	; 0x38
    2eae:	71 e0       	ldi	r23, 0x01	; 1
    2eb0:	21 96       	adiw	r28, 0x01	; 1
    2eb2:	7f af       	std	Y+63, r23	; 0x3f
    2eb4:	21 97       	sbiw	r28, 0x01	; 1
    2eb6:	88 ad       	ldd	r24, Y+56	; 0x38
    2eb8:	9d 89       	ldd	r25, Y+21	; 0x15
    2eba:	89 17       	cp	r24, r25
    2ebc:	18 f0       	brcs	.+6      	; 0x2ec4 <LDR_readint+0x282>
    2ebe:	21 96       	adiw	r28, 0x01	; 1
    2ec0:	1f ae       	std	Y+63, r1	; 0x3f
    2ec2:	21 97       	sbiw	r28, 0x01	; 1
    2ec4:	0e 89       	ldd	r16, Y+22	; 0x16
    2ec6:	1e 81       	ldd	r17, Y+6	; 0x06
    2ec8:	01 0f       	add	r16, r17
    2eca:	09 af       	std	Y+57, r16	; 0x39
    2ecc:	21 e0       	ldi	r18, 0x01	; 1
    2ece:	22 96       	adiw	r28, 0x02	; 2
    2ed0:	2f af       	std	Y+63, r18	; 0x3f
    2ed2:	22 97       	sbiw	r28, 0x02	; 2
    2ed4:	39 ad       	ldd	r19, Y+57	; 0x39
    2ed6:	4e 89       	ldd	r20, Y+22	; 0x16
    2ed8:	34 17       	cp	r19, r20
    2eda:	18 f0       	brcs	.+6      	; 0x2ee2 <LDR_readint+0x2a0>
    2edc:	22 96       	adiw	r28, 0x02	; 2
    2ede:	1f ae       	std	Y+63, r1	; 0x3f
    2ee0:	22 97       	sbiw	r28, 0x02	; 2
    2ee2:	21 96       	adiw	r28, 0x01	; 1
    2ee4:	5f ad       	ldd	r21, Y+63	; 0x3f
    2ee6:	21 97       	sbiw	r28, 0x01	; 1
    2ee8:	69 ad       	ldd	r22, Y+57	; 0x39
    2eea:	56 0f       	add	r21, r22
    2eec:	23 96       	adiw	r28, 0x03	; 3
    2eee:	5f af       	std	Y+63, r21	; 0x3f
    2ef0:	23 97       	sbiw	r28, 0x03	; 3
    2ef2:	71 e0       	ldi	r23, 0x01	; 1
    2ef4:	24 96       	adiw	r28, 0x04	; 4
    2ef6:	7f af       	std	Y+63, r23	; 0x3f
    2ef8:	24 97       	sbiw	r28, 0x04	; 4
    2efa:	23 96       	adiw	r28, 0x03	; 3
    2efc:	8f ad       	ldd	r24, Y+63	; 0x3f
    2efe:	23 97       	sbiw	r28, 0x03	; 3
    2f00:	99 ad       	ldd	r25, Y+57	; 0x39
    2f02:	89 17       	cp	r24, r25
    2f04:	18 f0       	brcs	.+6      	; 0x2f0c <LDR_readint+0x2ca>
    2f06:	24 96       	adiw	r28, 0x04	; 4
    2f08:	1f ae       	std	Y+63, r1	; 0x3f
    2f0a:	24 97       	sbiw	r28, 0x04	; 4
    2f0c:	22 96       	adiw	r28, 0x02	; 2
    2f0e:	0f ad       	ldd	r16, Y+63	; 0x3f
    2f10:	22 97       	sbiw	r28, 0x02	; 2
    2f12:	24 96       	adiw	r28, 0x04	; 4
    2f14:	1f ad       	ldd	r17, Y+63	; 0x3f
    2f16:	24 97       	sbiw	r28, 0x04	; 4
    2f18:	01 2b       	or	r16, r17
    2f1a:	22 96       	adiw	r28, 0x02	; 2
    2f1c:	0f af       	std	Y+63, r16	; 0x3f
    2f1e:	22 97       	sbiw	r28, 0x02	; 2
    2f20:	23 96       	adiw	r28, 0x03	; 3
    2f22:	2f ad       	ldd	r18, Y+63	; 0x3f
    2f24:	23 97       	sbiw	r28, 0x03	; 3
    2f26:	29 af       	std	Y+57, r18	; 0x39
    2f28:	3f 89       	ldd	r19, Y+23	; 0x17
    2f2a:	4f 81       	ldd	r20, Y+7	; 0x07
    2f2c:	34 0f       	add	r19, r20
    2f2e:	3a af       	std	Y+58, r19	; 0x3a
    2f30:	51 e0       	ldi	r21, 0x01	; 1
    2f32:	25 96       	adiw	r28, 0x05	; 5
    2f34:	5f af       	std	Y+63, r21	; 0x3f
    2f36:	25 97       	sbiw	r28, 0x05	; 5
    2f38:	6a ad       	ldd	r22, Y+58	; 0x3a
    2f3a:	7f 89       	ldd	r23, Y+23	; 0x17
    2f3c:	67 17       	cp	r22, r23
    2f3e:	18 f0       	brcs	.+6      	; 0x2f46 <LDR_readint+0x304>
    2f40:	25 96       	adiw	r28, 0x05	; 5
    2f42:	1f ae       	std	Y+63, r1	; 0x3f
    2f44:	25 97       	sbiw	r28, 0x05	; 5
    2f46:	22 96       	adiw	r28, 0x02	; 2
    2f48:	8f ad       	ldd	r24, Y+63	; 0x3f
    2f4a:	22 97       	sbiw	r28, 0x02	; 2
    2f4c:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f4e:	89 0f       	add	r24, r25
    2f50:	26 96       	adiw	r28, 0x06	; 6
    2f52:	8f af       	std	Y+63, r24	; 0x3f
    2f54:	26 97       	sbiw	r28, 0x06	; 6
    2f56:	01 e0       	ldi	r16, 0x01	; 1
    2f58:	27 96       	adiw	r28, 0x07	; 7
    2f5a:	0f af       	std	Y+63, r16	; 0x3f
    2f5c:	27 97       	sbiw	r28, 0x07	; 7
    2f5e:	26 96       	adiw	r28, 0x06	; 6
    2f60:	1f ad       	ldd	r17, Y+63	; 0x3f
    2f62:	26 97       	sbiw	r28, 0x06	; 6
    2f64:	2a ad       	ldd	r18, Y+58	; 0x3a
    2f66:	12 17       	cp	r17, r18
    2f68:	18 f0       	brcs	.+6      	; 0x2f70 <LDR_readint+0x32e>
    2f6a:	27 96       	adiw	r28, 0x07	; 7
    2f6c:	1f ae       	std	Y+63, r1	; 0x3f
    2f6e:	27 97       	sbiw	r28, 0x07	; 7
    2f70:	25 96       	adiw	r28, 0x05	; 5
    2f72:	3f ad       	ldd	r19, Y+63	; 0x3f
    2f74:	25 97       	sbiw	r28, 0x05	; 5
    2f76:	27 96       	adiw	r28, 0x07	; 7
    2f78:	4f ad       	ldd	r20, Y+63	; 0x3f
    2f7a:	27 97       	sbiw	r28, 0x07	; 7
    2f7c:	34 2b       	or	r19, r20
    2f7e:	25 96       	adiw	r28, 0x05	; 5
    2f80:	3f af       	std	Y+63, r19	; 0x3f
    2f82:	25 97       	sbiw	r28, 0x05	; 5
    2f84:	26 96       	adiw	r28, 0x06	; 6
    2f86:	5f ad       	ldd	r21, Y+63	; 0x3f
    2f88:	26 97       	sbiw	r28, 0x06	; 6
    2f8a:	5a af       	std	Y+58, r21	; 0x3a
    2f8c:	68 8d       	ldd	r22, Y+24	; 0x18
    2f8e:	78 85       	ldd	r23, Y+8	; 0x08
    2f90:	67 0f       	add	r22, r23
    2f92:	6b af       	std	Y+59, r22	; 0x3b
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	28 96       	adiw	r28, 0x08	; 8
    2f98:	8f af       	std	Y+63, r24	; 0x3f
    2f9a:	28 97       	sbiw	r28, 0x08	; 8
    2f9c:	9b ad       	ldd	r25, Y+59	; 0x3b
    2f9e:	08 8d       	ldd	r16, Y+24	; 0x18
    2fa0:	90 17       	cp	r25, r16
    2fa2:	18 f0       	brcs	.+6      	; 0x2faa <LDR_readint+0x368>
    2fa4:	28 96       	adiw	r28, 0x08	; 8
    2fa6:	1f ae       	std	Y+63, r1	; 0x3f
    2fa8:	28 97       	sbiw	r28, 0x08	; 8
    2faa:	25 96       	adiw	r28, 0x05	; 5
    2fac:	1f ad       	ldd	r17, Y+63	; 0x3f
    2fae:	25 97       	sbiw	r28, 0x05	; 5
    2fb0:	2b ad       	ldd	r18, Y+59	; 0x3b
    2fb2:	12 0f       	add	r17, r18
    2fb4:	29 96       	adiw	r28, 0x09	; 9
    2fb6:	1f af       	std	Y+63, r17	; 0x3f
    2fb8:	29 97       	sbiw	r28, 0x09	; 9
    2fba:	31 e0       	ldi	r19, 0x01	; 1
    2fbc:	2a 96       	adiw	r28, 0x0a	; 10
    2fbe:	3f af       	std	Y+63, r19	; 0x3f
    2fc0:	2a 97       	sbiw	r28, 0x0a	; 10
    2fc2:	29 96       	adiw	r28, 0x09	; 9
    2fc4:	4f ad       	ldd	r20, Y+63	; 0x3f
    2fc6:	29 97       	sbiw	r28, 0x09	; 9
    2fc8:	5b ad       	ldd	r21, Y+59	; 0x3b
    2fca:	45 17       	cp	r20, r21
    2fcc:	18 f0       	brcs	.+6      	; 0x2fd4 <LDR_readint+0x392>
    2fce:	2a 96       	adiw	r28, 0x0a	; 10
    2fd0:	1f ae       	std	Y+63, r1	; 0x3f
    2fd2:	2a 97       	sbiw	r28, 0x0a	; 10
    2fd4:	28 96       	adiw	r28, 0x08	; 8
    2fd6:	6f ad       	ldd	r22, Y+63	; 0x3f
    2fd8:	28 97       	sbiw	r28, 0x08	; 8
    2fda:	2a 96       	adiw	r28, 0x0a	; 10
    2fdc:	7f ad       	ldd	r23, Y+63	; 0x3f
    2fde:	2a 97       	sbiw	r28, 0x0a	; 10
    2fe0:	67 2b       	or	r22, r23
    2fe2:	28 96       	adiw	r28, 0x08	; 8
    2fe4:	6f af       	std	Y+63, r22	; 0x3f
    2fe6:	28 97       	sbiw	r28, 0x08	; 8
    2fe8:	29 96       	adiw	r28, 0x09	; 9
    2fea:	8f ad       	ldd	r24, Y+63	; 0x3f
    2fec:	29 97       	sbiw	r28, 0x09	; 9
    2fee:	8b af       	std	Y+59, r24	; 0x3b
    2ff0:	99 8d       	ldd	r25, Y+25	; 0x19
    2ff2:	09 85       	ldd	r16, Y+9	; 0x09
    2ff4:	90 0f       	add	r25, r16
    2ff6:	9c af       	std	Y+60, r25	; 0x3c
    2ff8:	11 e0       	ldi	r17, 0x01	; 1
    2ffa:	2b 96       	adiw	r28, 0x0b	; 11
    2ffc:	1f af       	std	Y+63, r17	; 0x3f
    2ffe:	2b 97       	sbiw	r28, 0x0b	; 11
    3000:	2c ad       	ldd	r18, Y+60	; 0x3c
    3002:	39 8d       	ldd	r19, Y+25	; 0x19
    3004:	23 17       	cp	r18, r19
    3006:	18 f0       	brcs	.+6      	; 0x300e <LDR_readint+0x3cc>
    3008:	2b 96       	adiw	r28, 0x0b	; 11
    300a:	1f ae       	std	Y+63, r1	; 0x3f
    300c:	2b 97       	sbiw	r28, 0x0b	; 11
    300e:	28 96       	adiw	r28, 0x08	; 8
    3010:	4f ad       	ldd	r20, Y+63	; 0x3f
    3012:	28 97       	sbiw	r28, 0x08	; 8
    3014:	5c ad       	ldd	r21, Y+60	; 0x3c
    3016:	45 0f       	add	r20, r21
    3018:	2c 96       	adiw	r28, 0x0c	; 12
    301a:	4f af       	std	Y+63, r20	; 0x3f
    301c:	2c 97       	sbiw	r28, 0x0c	; 12
    301e:	61 e0       	ldi	r22, 0x01	; 1
    3020:	2d 96       	adiw	r28, 0x0d	; 13
    3022:	6f af       	std	Y+63, r22	; 0x3f
    3024:	2d 97       	sbiw	r28, 0x0d	; 13
    3026:	2c 96       	adiw	r28, 0x0c	; 12
    3028:	7f ad       	ldd	r23, Y+63	; 0x3f
    302a:	2c 97       	sbiw	r28, 0x0c	; 12
    302c:	8c ad       	ldd	r24, Y+60	; 0x3c
    302e:	78 17       	cp	r23, r24
    3030:	18 f0       	brcs	.+6      	; 0x3038 <LDR_readint+0x3f6>
    3032:	2d 96       	adiw	r28, 0x0d	; 13
    3034:	1f ae       	std	Y+63, r1	; 0x3f
    3036:	2d 97       	sbiw	r28, 0x0d	; 13
    3038:	2b 96       	adiw	r28, 0x0b	; 11
    303a:	9f ad       	ldd	r25, Y+63	; 0x3f
    303c:	2b 97       	sbiw	r28, 0x0b	; 11
    303e:	2d 96       	adiw	r28, 0x0d	; 13
    3040:	0f ad       	ldd	r16, Y+63	; 0x3f
    3042:	2d 97       	sbiw	r28, 0x0d	; 13
    3044:	90 2b       	or	r25, r16
    3046:	2b 96       	adiw	r28, 0x0b	; 11
    3048:	9f af       	std	Y+63, r25	; 0x3f
    304a:	2b 97       	sbiw	r28, 0x0b	; 11
    304c:	2c 96       	adiw	r28, 0x0c	; 12
    304e:	1f ad       	ldd	r17, Y+63	; 0x3f
    3050:	2c 97       	sbiw	r28, 0x0c	; 12
    3052:	1c af       	std	Y+60, r17	; 0x3c
    3054:	2a 8d       	ldd	r18, Y+26	; 0x1a
    3056:	3a 85       	ldd	r19, Y+10	; 0x0a
    3058:	23 0f       	add	r18, r19
    305a:	2d af       	std	Y+61, r18	; 0x3d
    305c:	41 e0       	ldi	r20, 0x01	; 1
    305e:	2e 96       	adiw	r28, 0x0e	; 14
    3060:	4f af       	std	Y+63, r20	; 0x3f
    3062:	2e 97       	sbiw	r28, 0x0e	; 14
    3064:	5d ad       	ldd	r21, Y+61	; 0x3d
    3066:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3068:	56 17       	cp	r21, r22
    306a:	18 f0       	brcs	.+6      	; 0x3072 <LDR_readint+0x430>
    306c:	2e 96       	adiw	r28, 0x0e	; 14
    306e:	1f ae       	std	Y+63, r1	; 0x3f
    3070:	2e 97       	sbiw	r28, 0x0e	; 14
    3072:	2b 96       	adiw	r28, 0x0b	; 11
    3074:	7f ad       	ldd	r23, Y+63	; 0x3f
    3076:	2b 97       	sbiw	r28, 0x0b	; 11
    3078:	8d ad       	ldd	r24, Y+61	; 0x3d
    307a:	78 0f       	add	r23, r24
    307c:	2f 96       	adiw	r28, 0x0f	; 15
    307e:	7f af       	std	Y+63, r23	; 0x3f
    3080:	2f 97       	sbiw	r28, 0x0f	; 15
    3082:	91 e0       	ldi	r25, 0x01	; 1
    3084:	60 96       	adiw	r28, 0x10	; 16
    3086:	9f af       	std	Y+63, r25	; 0x3f
    3088:	60 97       	sbiw	r28, 0x10	; 16
    308a:	2f 96       	adiw	r28, 0x0f	; 15
    308c:	0f ad       	ldd	r16, Y+63	; 0x3f
    308e:	2f 97       	sbiw	r28, 0x0f	; 15
    3090:	1d ad       	ldd	r17, Y+61	; 0x3d
    3092:	01 17       	cp	r16, r17
    3094:	18 f0       	brcs	.+6      	; 0x309c <LDR_readint+0x45a>
    3096:	60 96       	adiw	r28, 0x10	; 16
    3098:	1f ae       	std	Y+63, r1	; 0x3f
    309a:	60 97       	sbiw	r28, 0x10	; 16
    309c:	2e 96       	adiw	r28, 0x0e	; 14
    309e:	2f ad       	ldd	r18, Y+63	; 0x3f
    30a0:	2e 97       	sbiw	r28, 0x0e	; 14
    30a2:	60 96       	adiw	r28, 0x10	; 16
    30a4:	3f ad       	ldd	r19, Y+63	; 0x3f
    30a6:	60 97       	sbiw	r28, 0x10	; 16
    30a8:	23 2b       	or	r18, r19
    30aa:	2e 96       	adiw	r28, 0x0e	; 14
    30ac:	2f af       	std	Y+63, r18	; 0x3f
    30ae:	2e 97       	sbiw	r28, 0x0e	; 14
    30b0:	2f 96       	adiw	r28, 0x0f	; 15
    30b2:	4f ad       	ldd	r20, Y+63	; 0x3f
    30b4:	2f 97       	sbiw	r28, 0x0f	; 15
    30b6:	4d af       	std	Y+61, r20	; 0x3d
    30b8:	5b 8d       	ldd	r21, Y+27	; 0x1b
    30ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    30bc:	56 0f       	add	r21, r22
    30be:	5e af       	std	Y+62, r21	; 0x3e
    30c0:	71 e0       	ldi	r23, 0x01	; 1
    30c2:	61 96       	adiw	r28, 0x11	; 17
    30c4:	7f af       	std	Y+63, r23	; 0x3f
    30c6:	61 97       	sbiw	r28, 0x11	; 17
    30c8:	8e ad       	ldd	r24, Y+62	; 0x3e
    30ca:	9b 8d       	ldd	r25, Y+27	; 0x1b
    30cc:	89 17       	cp	r24, r25
    30ce:	18 f0       	brcs	.+6      	; 0x30d6 <LDR_readint+0x494>
    30d0:	61 96       	adiw	r28, 0x11	; 17
    30d2:	1f ae       	std	Y+63, r1	; 0x3f
    30d4:	61 97       	sbiw	r28, 0x11	; 17
    30d6:	2e 96       	adiw	r28, 0x0e	; 14
    30d8:	0f ad       	ldd	r16, Y+63	; 0x3f
    30da:	2e 97       	sbiw	r28, 0x0e	; 14
    30dc:	1e ad       	ldd	r17, Y+62	; 0x3e
    30de:	01 0f       	add	r16, r17
    30e0:	62 96       	adiw	r28, 0x12	; 18
    30e2:	0f af       	std	Y+63, r16	; 0x3f
    30e4:	62 97       	sbiw	r28, 0x12	; 18
    30e6:	21 e0       	ldi	r18, 0x01	; 1
    30e8:	63 96       	adiw	r28, 0x13	; 19
    30ea:	2f af       	std	Y+63, r18	; 0x3f
    30ec:	63 97       	sbiw	r28, 0x13	; 19
    30ee:	62 96       	adiw	r28, 0x12	; 18
    30f0:	3f ad       	ldd	r19, Y+63	; 0x3f
    30f2:	62 97       	sbiw	r28, 0x12	; 18
    30f4:	4e ad       	ldd	r20, Y+62	; 0x3e
    30f6:	34 17       	cp	r19, r20
    30f8:	18 f0       	brcs	.+6      	; 0x3100 <LDR_readint+0x4be>
    30fa:	63 96       	adiw	r28, 0x13	; 19
    30fc:	1f ae       	std	Y+63, r1	; 0x3f
    30fe:	63 97       	sbiw	r28, 0x13	; 19
    3100:	61 96       	adiw	r28, 0x11	; 17
    3102:	5f ad       	ldd	r21, Y+63	; 0x3f
    3104:	61 97       	sbiw	r28, 0x11	; 17
    3106:	63 96       	adiw	r28, 0x13	; 19
    3108:	6f ad       	ldd	r22, Y+63	; 0x3f
    310a:	63 97       	sbiw	r28, 0x13	; 19
    310c:	56 2b       	or	r21, r22
    310e:	61 96       	adiw	r28, 0x11	; 17
    3110:	5f af       	std	Y+63, r21	; 0x3f
    3112:	61 97       	sbiw	r28, 0x11	; 17
    3114:	62 96       	adiw	r28, 0x12	; 18
    3116:	7f ad       	ldd	r23, Y+63	; 0x3f
    3118:	62 97       	sbiw	r28, 0x12	; 18
    311a:	7e af       	std	Y+62, r23	; 0x3e
    311c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    311e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3120:	89 0f       	add	r24, r25
    3122:	8f af       	std	Y+63, r24	; 0x3f
    3124:	61 96       	adiw	r28, 0x11	; 17
    3126:	8f ad       	ldd	r24, Y+63	; 0x3f
    3128:	61 97       	sbiw	r28, 0x11	; 17
    312a:	0f ad       	ldd	r16, Y+63	; 0x3f
    312c:	80 0f       	add	r24, r16
    312e:	8f af       	std	Y+63, r24	; 0x3f
    3130:	18 ad       	ldd	r17, Y+56	; 0x38
    3132:	1d 8b       	std	Y+21, r17	; 0x15
    3134:	29 ad       	ldd	r18, Y+57	; 0x39
    3136:	2e 8b       	std	Y+22, r18	; 0x16
    3138:	3a ad       	ldd	r19, Y+58	; 0x3a
    313a:	3f 8b       	std	Y+23, r19	; 0x17
    313c:	4b ad       	ldd	r20, Y+59	; 0x3b
    313e:	48 8f       	std	Y+24, r20	; 0x18
    3140:	5c ad       	ldd	r21, Y+60	; 0x3c
    3142:	59 8f       	std	Y+25, r21	; 0x19
    3144:	6d ad       	ldd	r22, Y+61	; 0x3d
    3146:	6a 8f       	std	Y+26, r22	; 0x1a
    3148:	7e ad       	ldd	r23, Y+62	; 0x3e
    314a:	7b 8f       	std	Y+27, r23	; 0x1b
    314c:	8f ad       	ldd	r24, Y+63	; 0x3f
    314e:	8c 8f       	std	Y+28, r24	; 0x1c
    3150:	2d 89       	ldd	r18, Y+21	; 0x15
    3152:	3e 89       	ldd	r19, Y+22	; 0x16
    3154:	4f 89       	ldd	r20, Y+23	; 0x17
    3156:	58 8d       	ldd	r21, Y+24	; 0x18
    3158:	69 8d       	ldd	r22, Y+25	; 0x19
    315a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    315c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    315e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3160:	03 e0       	ldi	r16, 0x03	; 3
    3162:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    3166:	22 2e       	mov	r2, r18
    3168:	33 2e       	mov	r3, r19
    316a:	44 2e       	mov	r4, r20
    316c:	55 2e       	mov	r5, r21
    316e:	66 2e       	mov	r6, r22
    3170:	77 2e       	mov	r7, r23
    3172:	88 2e       	mov	r8, r24
    3174:	99 2e       	mov	r9, r25
    3176:	a2 2c       	mov	r10, r2
    3178:	b3 2c       	mov	r11, r3
    317a:	c4 2c       	mov	r12, r4
    317c:	d5 2c       	mov	r13, r5
    317e:	e6 2c       	mov	r14, r6
    3180:	f7 2c       	mov	r15, r7
    3182:	08 2d       	mov	r16, r8
    3184:	19 2d       	mov	r17, r9
    3186:	2a 2d       	mov	r18, r10
    3188:	3b 2d       	mov	r19, r11
    318a:	4c 2d       	mov	r20, r12
    318c:	5d 2d       	mov	r21, r13
    318e:	6e 2d       	mov	r22, r14
    3190:	7f 2d       	mov	r23, r15
    3192:	80 2f       	mov	r24, r16
    3194:	91 2f       	mov	r25, r17
    3196:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__floatundisf>
    319a:	dc 01       	movw	r26, r24
    319c:	cb 01       	movw	r24, r22
    319e:	bc 01       	movw	r22, r24
    31a0:	cd 01       	movw	r24, r26
    31a2:	2a e0       	ldi	r18, 0x0A	; 10
    31a4:	37 ed       	ldi	r19, 0xD7	; 215
    31a6:	43 e2       	ldi	r20, 0x23	; 35
    31a8:	50 e4       	ldi	r21, 0x40	; 64
    31aa:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    31ae:	dc 01       	movw	r26, r24
    31b0:	cb 01       	movw	r24, r22
    31b2:	bc 01       	movw	r22, r24
    31b4:	cd 01       	movw	r24, r26
    31b6:	20 e0       	ldi	r18, 0x00	; 0
    31b8:	30 ed       	ldi	r19, 0xD0	; 208
    31ba:	4f e3       	ldi	r20, 0x3F	; 63
    31bc:	55 e4       	ldi	r21, 0x45	; 69
    31be:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divsf3>
    31c2:	dc 01       	movw	r26, r24
    31c4:	cb 01       	movw	r24, r22
    31c6:	bc 01       	movw	r22, r24
    31c8:	cd 01       	movw	r24, r26
    31ca:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    31ce:	dc 01       	movw	r26, r24
    31d0:	cb 01       	movw	r24, r22
    31d2:	9c 83       	std	Y+4, r25	; 0x04
    31d4:	8b 83       	std	Y+3, r24	; 0x03
	return L_u16LDRvalue;
    31d6:	8b 81       	ldd	r24, Y+3	; 0x03
    31d8:	9c 81       	ldd	r25, Y+4	; 0x04
}
    31da:	ce 5a       	subi	r28, 0xAE	; 174
    31dc:	df 4f       	sbci	r29, 0xFF	; 255
    31de:	0f b6       	in	r0, 0x3f	; 63
    31e0:	f8 94       	cli
    31e2:	de bf       	out	0x3e, r29	; 62
    31e4:	0f be       	out	0x3f, r0	; 63
    31e6:	cd bf       	out	0x3d, r28	; 61
    31e8:	cf 91       	pop	r28
    31ea:	df 91       	pop	r29
    31ec:	1f 91       	pop	r17
    31ee:	0f 91       	pop	r16
    31f0:	ff 90       	pop	r15
    31f2:	ef 90       	pop	r14
    31f4:	df 90       	pop	r13
    31f6:	cf 90       	pop	r12
    31f8:	bf 90       	pop	r11
    31fa:	af 90       	pop	r10
    31fc:	9f 90       	pop	r9
    31fe:	8f 90       	pop	r8
    3200:	7f 90       	pop	r7
    3202:	6f 90       	pop	r6
    3204:	5f 90       	pop	r5
    3206:	4f 90       	pop	r4
    3208:	3f 90       	pop	r3
    320a:	2f 90       	pop	r2
    320c:	08 95       	ret

0000320e <LCD_voidInit>:
#include "LCD_Interface.h"



void LCD_voidInit()
{
    320e:	df 93       	push	r29
    3210:	cf 93       	push	r28
    3212:	cd b7       	in	r28, 0x3d	; 61
    3214:	de b7       	in	r29, 0x3e	; 62
    3216:	e8 97       	sbiw	r28, 0x38	; 56
    3218:	0f b6       	in	r0, 0x3f	; 63
    321a:	f8 94       	cli
    321c:	de bf       	out	0x3e, r29	; 62
    321e:	0f be       	out	0x3f, r0	; 63
    3220:	cd bf       	out	0x3d, r28	; 61
	/* SET DATA PORT OUTPUT */
	DIO_voidSetPortDirection(LCD_DATA_PORT, 0xFF);
    3222:	82 e0       	ldi	r24, 0x02	; 2
    3224:	6f ef       	ldi	r22, 0xFF	; 255
    3226:	0e 94 a6 13 	call	0x274c	; 0x274c <DIO_voidSetPortDirection>
	
	/* SET PINS OF CONTROL OUTPUT */
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, RS, DIO_OUTPUT);
    322a:	83 e0       	ldi	r24, 0x03	; 3
    322c:	60 e0       	ldi	r22, 0x00	; 0
    322e:	41 e0       	ldi	r20, 0x01	; 1
    3230:	0e 94 24 11 	call	0x2248	; 0x2248 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, RW, DIO_OUTPUT);
    3234:	83 e0       	ldi	r24, 0x03	; 3
    3236:	61 e0       	ldi	r22, 0x01	; 1
    3238:	41 e0       	ldi	r20, 0x01	; 1
    323a:	0e 94 24 11 	call	0x2248	; 0x2248 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, EN, DIO_OUTPUT);
    323e:	83 e0       	ldi	r24, 0x03	; 3
    3240:	62 e0       	ldi	r22, 0x02	; 2
    3242:	41 e0       	ldi	r20, 0x01	; 1
    3244:	0e 94 24 11 	call	0x2248	; 0x2248 <DIO_voidSetPinDirection>
    3248:	80 e0       	ldi	r24, 0x00	; 0
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	a0 ef       	ldi	r26, 0xF0	; 240
    324e:	b1 e4       	ldi	r27, 0x41	; 65
    3250:	8d ab       	std	Y+53, r24	; 0x35
    3252:	9e ab       	std	Y+54, r25	; 0x36
    3254:	af ab       	std	Y+55, r26	; 0x37
    3256:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3258:	6d a9       	ldd	r22, Y+53	; 0x35
    325a:	7e a9       	ldd	r23, Y+54	; 0x36
    325c:	8f a9       	ldd	r24, Y+55	; 0x37
    325e:	98 ad       	ldd	r25, Y+56	; 0x38
    3260:	20 e0       	ldi	r18, 0x00	; 0
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	4a ef       	ldi	r20, 0xFA	; 250
    3266:	54 e4       	ldi	r21, 0x44	; 68
    3268:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	89 ab       	std	Y+49, r24	; 0x31
    3272:	9a ab       	std	Y+50, r25	; 0x32
    3274:	ab ab       	std	Y+51, r26	; 0x33
    3276:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3278:	69 a9       	ldd	r22, Y+49	; 0x31
    327a:	7a a9       	ldd	r23, Y+50	; 0x32
    327c:	8b a9       	ldd	r24, Y+51	; 0x33
    327e:	9c a9       	ldd	r25, Y+52	; 0x34
    3280:	20 e0       	ldi	r18, 0x00	; 0
    3282:	30 e0       	ldi	r19, 0x00	; 0
    3284:	40 e8       	ldi	r20, 0x80	; 128
    3286:	5f e3       	ldi	r21, 0x3F	; 63
    3288:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    328c:	88 23       	and	r24, r24
    328e:	2c f4       	brge	.+10     	; 0x329a <LCD_voidInit+0x8c>
		__ticks = 1;
    3290:	81 e0       	ldi	r24, 0x01	; 1
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	98 ab       	std	Y+48, r25	; 0x30
    3296:	8f a7       	std	Y+47, r24	; 0x2f
    3298:	3f c0       	rjmp	.+126    	; 0x3318 <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    329a:	69 a9       	ldd	r22, Y+49	; 0x31
    329c:	7a a9       	ldd	r23, Y+50	; 0x32
    329e:	8b a9       	ldd	r24, Y+51	; 0x33
    32a0:	9c a9       	ldd	r25, Y+52	; 0x34
    32a2:	20 e0       	ldi	r18, 0x00	; 0
    32a4:	3f ef       	ldi	r19, 0xFF	; 255
    32a6:	4f e7       	ldi	r20, 0x7F	; 127
    32a8:	57 e4       	ldi	r21, 0x47	; 71
    32aa:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    32ae:	18 16       	cp	r1, r24
    32b0:	4c f5       	brge	.+82     	; 0x3304 <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32b2:	6d a9       	ldd	r22, Y+53	; 0x35
    32b4:	7e a9       	ldd	r23, Y+54	; 0x36
    32b6:	8f a9       	ldd	r24, Y+55	; 0x37
    32b8:	98 ad       	ldd	r25, Y+56	; 0x38
    32ba:	20 e0       	ldi	r18, 0x00	; 0
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	40 e2       	ldi	r20, 0x20	; 32
    32c0:	51 e4       	ldi	r21, 0x41	; 65
    32c2:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    32c6:	dc 01       	movw	r26, r24
    32c8:	cb 01       	movw	r24, r22
    32ca:	bc 01       	movw	r22, r24
    32cc:	cd 01       	movw	r24, r26
    32ce:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    32d2:	dc 01       	movw	r26, r24
    32d4:	cb 01       	movw	r24, r22
    32d6:	98 ab       	std	Y+48, r25	; 0x30
    32d8:	8f a7       	std	Y+47, r24	; 0x2f
    32da:	0f c0       	rjmp	.+30     	; 0x32fa <LCD_voidInit+0xec>
    32dc:	88 ec       	ldi	r24, 0xC8	; 200
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	9e a7       	std	Y+46, r25	; 0x2e
    32e2:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    32e4:	8d a5       	ldd	r24, Y+45	; 0x2d
    32e6:	9e a5       	ldd	r25, Y+46	; 0x2e
    32e8:	01 97       	sbiw	r24, 0x01	; 1
    32ea:	f1 f7       	brne	.-4      	; 0x32e8 <LCD_voidInit+0xda>
    32ec:	9e a7       	std	Y+46, r25	; 0x2e
    32ee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    32f2:	98 a9       	ldd	r25, Y+48	; 0x30
    32f4:	01 97       	sbiw	r24, 0x01	; 1
    32f6:	98 ab       	std	Y+48, r25	; 0x30
    32f8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    32fc:	98 a9       	ldd	r25, Y+48	; 0x30
    32fe:	00 97       	sbiw	r24, 0x00	; 0
    3300:	69 f7       	brne	.-38     	; 0x32dc <LCD_voidInit+0xce>
    3302:	14 c0       	rjmp	.+40     	; 0x332c <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3304:	69 a9       	ldd	r22, Y+49	; 0x31
    3306:	7a a9       	ldd	r23, Y+50	; 0x32
    3308:	8b a9       	ldd	r24, Y+51	; 0x33
    330a:	9c a9       	ldd	r25, Y+52	; 0x34
    330c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3310:	dc 01       	movw	r26, r24
    3312:	cb 01       	movw	r24, r22
    3314:	98 ab       	std	Y+48, r25	; 0x30
    3316:	8f a7       	std	Y+47, r24	; 0x2f
    3318:	8f a5       	ldd	r24, Y+47	; 0x2f
    331a:	98 a9       	ldd	r25, Y+48	; 0x30
    331c:	9c a7       	std	Y+44, r25	; 0x2c
    331e:	8b a7       	std	Y+43, r24	; 0x2b
    3320:	8b a5       	ldd	r24, Y+43	; 0x2b
    3322:	9c a5       	ldd	r25, Y+44	; 0x2c
    3324:	01 97       	sbiw	r24, 0x01	; 1
    3326:	f1 f7       	brne	.-4      	; 0x3324 <LCD_voidInit+0x116>
    3328:	9c a7       	std	Y+44, r25	; 0x2c
    332a:	8b a7       	std	Y+43, r24	; 0x2b
	
	/* WAIT 30ms AFTER VDD RISES TO 4.5V */
	_delay_ms(30);
	
	/* FUNCTION SET */
	LCD_voidSendCommand (LCD_FUNC_SET);
    332c:	88 e3       	ldi	r24, 0x38	; 56
    332e:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <LCD_voidSendCommand>
    3332:	80 e0       	ldi	r24, 0x00	; 0
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	a0 e8       	ldi	r26, 0x80	; 128
    3338:	bf e3       	ldi	r27, 0x3F	; 63
    333a:	8f a3       	std	Y+39, r24	; 0x27
    333c:	98 a7       	std	Y+40, r25	; 0x28
    333e:	a9 a7       	std	Y+41, r26	; 0x29
    3340:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3342:	6f a1       	ldd	r22, Y+39	; 0x27
    3344:	78 a5       	ldd	r23, Y+40	; 0x28
    3346:	89 a5       	ldd	r24, Y+41	; 0x29
    3348:	9a a5       	ldd	r25, Y+42	; 0x2a
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	4a ef       	ldi	r20, 0xFA	; 250
    3350:	54 e4       	ldi	r21, 0x44	; 68
    3352:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    3356:	dc 01       	movw	r26, r24
    3358:	cb 01       	movw	r24, r22
    335a:	8b a3       	std	Y+35, r24	; 0x23
    335c:	9c a3       	std	Y+36, r25	; 0x24
    335e:	ad a3       	std	Y+37, r26	; 0x25
    3360:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3362:	6b a1       	ldd	r22, Y+35	; 0x23
    3364:	7c a1       	ldd	r23, Y+36	; 0x24
    3366:	8d a1       	ldd	r24, Y+37	; 0x25
    3368:	9e a1       	ldd	r25, Y+38	; 0x26
    336a:	20 e0       	ldi	r18, 0x00	; 0
    336c:	30 e0       	ldi	r19, 0x00	; 0
    336e:	40 e8       	ldi	r20, 0x80	; 128
    3370:	5f e3       	ldi	r21, 0x3F	; 63
    3372:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    3376:	88 23       	and	r24, r24
    3378:	2c f4       	brge	.+10     	; 0x3384 <LCD_voidInit+0x176>
		__ticks = 1;
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	9a a3       	std	Y+34, r25	; 0x22
    3380:	89 a3       	std	Y+33, r24	; 0x21
    3382:	3f c0       	rjmp	.+126    	; 0x3402 <LCD_voidInit+0x1f4>
	else if (__tmp > 65535)
    3384:	6b a1       	ldd	r22, Y+35	; 0x23
    3386:	7c a1       	ldd	r23, Y+36	; 0x24
    3388:	8d a1       	ldd	r24, Y+37	; 0x25
    338a:	9e a1       	ldd	r25, Y+38	; 0x26
    338c:	20 e0       	ldi	r18, 0x00	; 0
    338e:	3f ef       	ldi	r19, 0xFF	; 255
    3390:	4f e7       	ldi	r20, 0x7F	; 127
    3392:	57 e4       	ldi	r21, 0x47	; 71
    3394:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    3398:	18 16       	cp	r1, r24
    339a:	4c f5       	brge	.+82     	; 0x33ee <LCD_voidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    339c:	6f a1       	ldd	r22, Y+39	; 0x27
    339e:	78 a5       	ldd	r23, Y+40	; 0x28
    33a0:	89 a5       	ldd	r24, Y+41	; 0x29
    33a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    33a4:	20 e0       	ldi	r18, 0x00	; 0
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	40 e2       	ldi	r20, 0x20	; 32
    33aa:	51 e4       	ldi	r21, 0x41	; 65
    33ac:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    33b0:	dc 01       	movw	r26, r24
    33b2:	cb 01       	movw	r24, r22
    33b4:	bc 01       	movw	r22, r24
    33b6:	cd 01       	movw	r24, r26
    33b8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    33bc:	dc 01       	movw	r26, r24
    33be:	cb 01       	movw	r24, r22
    33c0:	9a a3       	std	Y+34, r25	; 0x22
    33c2:	89 a3       	std	Y+33, r24	; 0x21
    33c4:	0f c0       	rjmp	.+30     	; 0x33e4 <LCD_voidInit+0x1d6>
    33c6:	88 ec       	ldi	r24, 0xC8	; 200
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	98 a3       	std	Y+32, r25	; 0x20
    33cc:	8f 8f       	std	Y+31, r24	; 0x1f
    33ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33d0:	98 a1       	ldd	r25, Y+32	; 0x20
    33d2:	01 97       	sbiw	r24, 0x01	; 1
    33d4:	f1 f7       	brne	.-4      	; 0x33d2 <LCD_voidInit+0x1c4>
    33d6:	98 a3       	std	Y+32, r25	; 0x20
    33d8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33da:	89 a1       	ldd	r24, Y+33	; 0x21
    33dc:	9a a1       	ldd	r25, Y+34	; 0x22
    33de:	01 97       	sbiw	r24, 0x01	; 1
    33e0:	9a a3       	std	Y+34, r25	; 0x22
    33e2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e4:	89 a1       	ldd	r24, Y+33	; 0x21
    33e6:	9a a1       	ldd	r25, Y+34	; 0x22
    33e8:	00 97       	sbiw	r24, 0x00	; 0
    33ea:	69 f7       	brne	.-38     	; 0x33c6 <LCD_voidInit+0x1b8>
    33ec:	14 c0       	rjmp	.+40     	; 0x3416 <LCD_voidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ee:	6b a1       	ldd	r22, Y+35	; 0x23
    33f0:	7c a1       	ldd	r23, Y+36	; 0x24
    33f2:	8d a1       	ldd	r24, Y+37	; 0x25
    33f4:	9e a1       	ldd	r25, Y+38	; 0x26
    33f6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	9a a3       	std	Y+34, r25	; 0x22
    3400:	89 a3       	std	Y+33, r24	; 0x21
    3402:	89 a1       	ldd	r24, Y+33	; 0x21
    3404:	9a a1       	ldd	r25, Y+34	; 0x22
    3406:	9e 8f       	std	Y+30, r25	; 0x1e
    3408:	8d 8f       	std	Y+29, r24	; 0x1d
    340a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    340c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    340e:	01 97       	sbiw	r24, 0x01	; 1
    3410:	f1 f7       	brne	.-4      	; 0x340e <LCD_voidInit+0x200>
    3412:	9e 8f       	std	Y+30, r25	; 0x1e
    3414:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	
	/* DISPLAY ON/OFF */
	LCD_voidSendCommand (LCD_ONOF);
    3416:	8f e0       	ldi	r24, 0x0F	; 15
    3418:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <LCD_voidSendCommand>
    341c:	80 e0       	ldi	r24, 0x00	; 0
    341e:	90 e0       	ldi	r25, 0x00	; 0
    3420:	a0 e8       	ldi	r26, 0x80	; 128
    3422:	bf e3       	ldi	r27, 0x3F	; 63
    3424:	89 8f       	std	Y+25, r24	; 0x19
    3426:	9a 8f       	std	Y+26, r25	; 0x1a
    3428:	ab 8f       	std	Y+27, r26	; 0x1b
    342a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    342c:	69 8d       	ldd	r22, Y+25	; 0x19
    342e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3430:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3432:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3434:	20 e0       	ldi	r18, 0x00	; 0
    3436:	30 e0       	ldi	r19, 0x00	; 0
    3438:	4a ef       	ldi	r20, 0xFA	; 250
    343a:	54 e4       	ldi	r21, 0x44	; 68
    343c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    3440:	dc 01       	movw	r26, r24
    3442:	cb 01       	movw	r24, r22
    3444:	8d 8b       	std	Y+21, r24	; 0x15
    3446:	9e 8b       	std	Y+22, r25	; 0x16
    3448:	af 8b       	std	Y+23, r26	; 0x17
    344a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    344c:	6d 89       	ldd	r22, Y+21	; 0x15
    344e:	7e 89       	ldd	r23, Y+22	; 0x16
    3450:	8f 89       	ldd	r24, Y+23	; 0x17
    3452:	98 8d       	ldd	r25, Y+24	; 0x18
    3454:	20 e0       	ldi	r18, 0x00	; 0
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	40 e8       	ldi	r20, 0x80	; 128
    345a:	5f e3       	ldi	r21, 0x3F	; 63
    345c:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    3460:	88 23       	and	r24, r24
    3462:	2c f4       	brge	.+10     	; 0x346e <LCD_voidInit+0x260>
		__ticks = 1;
    3464:	81 e0       	ldi	r24, 0x01	; 1
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	9c 8b       	std	Y+20, r25	; 0x14
    346a:	8b 8b       	std	Y+19, r24	; 0x13
    346c:	3f c0       	rjmp	.+126    	; 0x34ec <LCD_voidInit+0x2de>
	else if (__tmp > 65535)
    346e:	6d 89       	ldd	r22, Y+21	; 0x15
    3470:	7e 89       	ldd	r23, Y+22	; 0x16
    3472:	8f 89       	ldd	r24, Y+23	; 0x17
    3474:	98 8d       	ldd	r25, Y+24	; 0x18
    3476:	20 e0       	ldi	r18, 0x00	; 0
    3478:	3f ef       	ldi	r19, 0xFF	; 255
    347a:	4f e7       	ldi	r20, 0x7F	; 127
    347c:	57 e4       	ldi	r21, 0x47	; 71
    347e:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    3482:	18 16       	cp	r1, r24
    3484:	4c f5       	brge	.+82     	; 0x34d8 <LCD_voidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3486:	69 8d       	ldd	r22, Y+25	; 0x19
    3488:	7a 8d       	ldd	r23, Y+26	; 0x1a
    348a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    348c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    348e:	20 e0       	ldi	r18, 0x00	; 0
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	40 e2       	ldi	r20, 0x20	; 32
    3494:	51 e4       	ldi	r21, 0x41	; 65
    3496:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    349a:	dc 01       	movw	r26, r24
    349c:	cb 01       	movw	r24, r22
    349e:	bc 01       	movw	r22, r24
    34a0:	cd 01       	movw	r24, r26
    34a2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    34a6:	dc 01       	movw	r26, r24
    34a8:	cb 01       	movw	r24, r22
    34aa:	9c 8b       	std	Y+20, r25	; 0x14
    34ac:	8b 8b       	std	Y+19, r24	; 0x13
    34ae:	0f c0       	rjmp	.+30     	; 0x34ce <LCD_voidInit+0x2c0>
    34b0:	88 ec       	ldi	r24, 0xC8	; 200
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	9a 8b       	std	Y+18, r25	; 0x12
    34b6:	89 8b       	std	Y+17, r24	; 0x11
    34b8:	89 89       	ldd	r24, Y+17	; 0x11
    34ba:	9a 89       	ldd	r25, Y+18	; 0x12
    34bc:	01 97       	sbiw	r24, 0x01	; 1
    34be:	f1 f7       	brne	.-4      	; 0x34bc <LCD_voidInit+0x2ae>
    34c0:	9a 8b       	std	Y+18, r25	; 0x12
    34c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34c4:	8b 89       	ldd	r24, Y+19	; 0x13
    34c6:	9c 89       	ldd	r25, Y+20	; 0x14
    34c8:	01 97       	sbiw	r24, 0x01	; 1
    34ca:	9c 8b       	std	Y+20, r25	; 0x14
    34cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ce:	8b 89       	ldd	r24, Y+19	; 0x13
    34d0:	9c 89       	ldd	r25, Y+20	; 0x14
    34d2:	00 97       	sbiw	r24, 0x00	; 0
    34d4:	69 f7       	brne	.-38     	; 0x34b0 <LCD_voidInit+0x2a2>
    34d6:	14 c0       	rjmp	.+40     	; 0x3500 <LCD_voidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34d8:	6d 89       	ldd	r22, Y+21	; 0x15
    34da:	7e 89       	ldd	r23, Y+22	; 0x16
    34dc:	8f 89       	ldd	r24, Y+23	; 0x17
    34de:	98 8d       	ldd	r25, Y+24	; 0x18
    34e0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    34e4:	dc 01       	movw	r26, r24
    34e6:	cb 01       	movw	r24, r22
    34e8:	9c 8b       	std	Y+20, r25	; 0x14
    34ea:	8b 8b       	std	Y+19, r24	; 0x13
    34ec:	8b 89       	ldd	r24, Y+19	; 0x13
    34ee:	9c 89       	ldd	r25, Y+20	; 0x14
    34f0:	98 8b       	std	Y+16, r25	; 0x10
    34f2:	8f 87       	std	Y+15, r24	; 0x0f
    34f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    34f6:	98 89       	ldd	r25, Y+16	; 0x10
    34f8:	01 97       	sbiw	r24, 0x01	; 1
    34fa:	f1 f7       	brne	.-4      	; 0x34f8 <LCD_voidInit+0x2ea>
    34fc:	98 8b       	std	Y+16, r25	; 0x10
    34fe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	
	/* DISPLAY CLEAR */
	LCD_voidSendCommand (LCD_CLEAR);
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <LCD_voidSendCommand>
    3506:	80 e0       	ldi	r24, 0x00	; 0
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	a0 e0       	ldi	r26, 0x00	; 0
    350c:	b0 e4       	ldi	r27, 0x40	; 64
    350e:	8b 87       	std	Y+11, r24	; 0x0b
    3510:	9c 87       	std	Y+12, r25	; 0x0c
    3512:	ad 87       	std	Y+13, r26	; 0x0d
    3514:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3516:	6b 85       	ldd	r22, Y+11	; 0x0b
    3518:	7c 85       	ldd	r23, Y+12	; 0x0c
    351a:	8d 85       	ldd	r24, Y+13	; 0x0d
    351c:	9e 85       	ldd	r25, Y+14	; 0x0e
    351e:	20 e0       	ldi	r18, 0x00	; 0
    3520:	30 e0       	ldi	r19, 0x00	; 0
    3522:	4a ef       	ldi	r20, 0xFA	; 250
    3524:	54 e4       	ldi	r21, 0x44	; 68
    3526:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    352a:	dc 01       	movw	r26, r24
    352c:	cb 01       	movw	r24, r22
    352e:	8f 83       	std	Y+7, r24	; 0x07
    3530:	98 87       	std	Y+8, r25	; 0x08
    3532:	a9 87       	std	Y+9, r26	; 0x09
    3534:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3536:	6f 81       	ldd	r22, Y+7	; 0x07
    3538:	78 85       	ldd	r23, Y+8	; 0x08
    353a:	89 85       	ldd	r24, Y+9	; 0x09
    353c:	9a 85       	ldd	r25, Y+10	; 0x0a
    353e:	20 e0       	ldi	r18, 0x00	; 0
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	40 e8       	ldi	r20, 0x80	; 128
    3544:	5f e3       	ldi	r21, 0x3F	; 63
    3546:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    354a:	88 23       	and	r24, r24
    354c:	2c f4       	brge	.+10     	; 0x3558 <LCD_voidInit+0x34a>
		__ticks = 1;
    354e:	81 e0       	ldi	r24, 0x01	; 1
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	9e 83       	std	Y+6, r25	; 0x06
    3554:	8d 83       	std	Y+5, r24	; 0x05
    3556:	3f c0       	rjmp	.+126    	; 0x35d6 <LCD_voidInit+0x3c8>
	else if (__tmp > 65535)
    3558:	6f 81       	ldd	r22, Y+7	; 0x07
    355a:	78 85       	ldd	r23, Y+8	; 0x08
    355c:	89 85       	ldd	r24, Y+9	; 0x09
    355e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3560:	20 e0       	ldi	r18, 0x00	; 0
    3562:	3f ef       	ldi	r19, 0xFF	; 255
    3564:	4f e7       	ldi	r20, 0x7F	; 127
    3566:	57 e4       	ldi	r21, 0x47	; 71
    3568:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    356c:	18 16       	cp	r1, r24
    356e:	4c f5       	brge	.+82     	; 0x35c2 <LCD_voidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3570:	6b 85       	ldd	r22, Y+11	; 0x0b
    3572:	7c 85       	ldd	r23, Y+12	; 0x0c
    3574:	8d 85       	ldd	r24, Y+13	; 0x0d
    3576:	9e 85       	ldd	r25, Y+14	; 0x0e
    3578:	20 e0       	ldi	r18, 0x00	; 0
    357a:	30 e0       	ldi	r19, 0x00	; 0
    357c:	40 e2       	ldi	r20, 0x20	; 32
    357e:	51 e4       	ldi	r21, 0x41	; 65
    3580:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    3584:	dc 01       	movw	r26, r24
    3586:	cb 01       	movw	r24, r22
    3588:	bc 01       	movw	r22, r24
    358a:	cd 01       	movw	r24, r26
    358c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3590:	dc 01       	movw	r26, r24
    3592:	cb 01       	movw	r24, r22
    3594:	9e 83       	std	Y+6, r25	; 0x06
    3596:	8d 83       	std	Y+5, r24	; 0x05
    3598:	0f c0       	rjmp	.+30     	; 0x35b8 <LCD_voidInit+0x3aa>
    359a:	88 ec       	ldi	r24, 0xC8	; 200
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	9c 83       	std	Y+4, r25	; 0x04
    35a0:	8b 83       	std	Y+3, r24	; 0x03
    35a2:	8b 81       	ldd	r24, Y+3	; 0x03
    35a4:	9c 81       	ldd	r25, Y+4	; 0x04
    35a6:	01 97       	sbiw	r24, 0x01	; 1
    35a8:	f1 f7       	brne	.-4      	; 0x35a6 <LCD_voidInit+0x398>
    35aa:	9c 83       	std	Y+4, r25	; 0x04
    35ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ae:	8d 81       	ldd	r24, Y+5	; 0x05
    35b0:	9e 81       	ldd	r25, Y+6	; 0x06
    35b2:	01 97       	sbiw	r24, 0x01	; 1
    35b4:	9e 83       	std	Y+6, r25	; 0x06
    35b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35b8:	8d 81       	ldd	r24, Y+5	; 0x05
    35ba:	9e 81       	ldd	r25, Y+6	; 0x06
    35bc:	00 97       	sbiw	r24, 0x00	; 0
    35be:	69 f7       	brne	.-38     	; 0x359a <LCD_voidInit+0x38c>
    35c0:	14 c0       	rjmp	.+40     	; 0x35ea <LCD_voidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35c2:	6f 81       	ldd	r22, Y+7	; 0x07
    35c4:	78 85       	ldd	r23, Y+8	; 0x08
    35c6:	89 85       	ldd	r24, Y+9	; 0x09
    35c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ca:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    35ce:	dc 01       	movw	r26, r24
    35d0:	cb 01       	movw	r24, r22
    35d2:	9e 83       	std	Y+6, r25	; 0x06
    35d4:	8d 83       	std	Y+5, r24	; 0x05
    35d6:	8d 81       	ldd	r24, Y+5	; 0x05
    35d8:	9e 81       	ldd	r25, Y+6	; 0x06
    35da:	9a 83       	std	Y+2, r25	; 0x02
    35dc:	89 83       	std	Y+1, r24	; 0x01
    35de:	89 81       	ldd	r24, Y+1	; 0x01
    35e0:	9a 81       	ldd	r25, Y+2	; 0x02
    35e2:	01 97       	sbiw	r24, 0x01	; 1
    35e4:	f1 f7       	brne	.-4      	; 0x35e2 <LCD_voidInit+0x3d4>
    35e6:	9a 83       	std	Y+2, r25	; 0x02
    35e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    35ea:	e8 96       	adiw	r28, 0x38	; 56
    35ec:	0f b6       	in	r0, 0x3f	; 63
    35ee:	f8 94       	cli
    35f0:	de bf       	out	0x3e, r29	; 62
    35f2:	0f be       	out	0x3f, r0	; 63
    35f4:	cd bf       	out	0x3d, r28	; 61
    35f6:	cf 91       	pop	r28
    35f8:	df 91       	pop	r29
    35fa:	08 95       	ret

000035fc <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 Copy_U8Command)
{
    35fc:	df 93       	push	r29
    35fe:	cf 93       	push	r28
    3600:	cd b7       	in	r28, 0x3d	; 61
    3602:	de b7       	in	r29, 0x3e	; 62
    3604:	2f 97       	sbiw	r28, 0x0f	; 15
    3606:	0f b6       	in	r0, 0x3f	; 63
    3608:	f8 94       	cli
    360a:	de bf       	out	0x3e, r29	; 62
    360c:	0f be       	out	0x3f, r0	; 63
    360e:	cd bf       	out	0x3d, r28	; 61
    3610:	8f 87       	std	Y+15, r24	; 0x0f
	/* RS = 0 */
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RS, DIO_LOW);
    3612:	83 e0       	ldi	r24, 0x03	; 3
    3614:	60 e0       	ldi	r22, 0x00	; 0
    3616:	40 e0       	ldi	r20, 0x00	; 0
    3618:	0e 94 24 12 	call	0x2448	; 0x2448 <DIO_voidSetPinValue>
	/* RW = 0 */
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RW, DIO_LOW);
    361c:	83 e0       	ldi	r24, 0x03	; 3
    361e:	61 e0       	ldi	r22, 0x01	; 1
    3620:	40 e0       	ldi	r20, 0x00	; 0
    3622:	0e 94 24 12 	call	0x2448	; 0x2448 <DIO_voidSetPinValue>
	/* PUT THE COMMAND ON DATA PINS */
	DIO_voidSetPortValue(LCD_DATA_PORT, Copy_U8Command);
    3626:	82 e0       	ldi	r24, 0x02	; 2
    3628:	6f 85       	ldd	r22, Y+15	; 0x0f
    362a:	0e 94 e7 13 	call	0x27ce	; 0x27ce <DIO_voidSetPortValue>
	/* E = 1 */
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_HIGH);
    362e:	83 e0       	ldi	r24, 0x03	; 3
    3630:	62 e0       	ldi	r22, 0x02	; 2
    3632:	41 e0       	ldi	r20, 0x01	; 1
    3634:	0e 94 24 12 	call	0x2448	; 0x2448 <DIO_voidSetPinValue>
    3638:	80 e0       	ldi	r24, 0x00	; 0
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	a0 e0       	ldi	r26, 0x00	; 0
    363e:	b0 e4       	ldi	r27, 0x40	; 64
    3640:	8b 87       	std	Y+11, r24	; 0x0b
    3642:	9c 87       	std	Y+12, r25	; 0x0c
    3644:	ad 87       	std	Y+13, r26	; 0x0d
    3646:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3648:	6b 85       	ldd	r22, Y+11	; 0x0b
    364a:	7c 85       	ldd	r23, Y+12	; 0x0c
    364c:	8d 85       	ldd	r24, Y+13	; 0x0d
    364e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3650:	20 e0       	ldi	r18, 0x00	; 0
    3652:	30 e0       	ldi	r19, 0x00	; 0
    3654:	4a ef       	ldi	r20, 0xFA	; 250
    3656:	54 e4       	ldi	r21, 0x44	; 68
    3658:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    365c:	dc 01       	movw	r26, r24
    365e:	cb 01       	movw	r24, r22
    3660:	8f 83       	std	Y+7, r24	; 0x07
    3662:	98 87       	std	Y+8, r25	; 0x08
    3664:	a9 87       	std	Y+9, r26	; 0x09
    3666:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3668:	6f 81       	ldd	r22, Y+7	; 0x07
    366a:	78 85       	ldd	r23, Y+8	; 0x08
    366c:	89 85       	ldd	r24, Y+9	; 0x09
    366e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3670:	20 e0       	ldi	r18, 0x00	; 0
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	40 e8       	ldi	r20, 0x80	; 128
    3676:	5f e3       	ldi	r21, 0x3F	; 63
    3678:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    367c:	88 23       	and	r24, r24
    367e:	2c f4       	brge	.+10     	; 0x368a <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    3680:	81 e0       	ldi	r24, 0x01	; 1
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	9e 83       	std	Y+6, r25	; 0x06
    3686:	8d 83       	std	Y+5, r24	; 0x05
    3688:	3f c0       	rjmp	.+126    	; 0x3708 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    368a:	6f 81       	ldd	r22, Y+7	; 0x07
    368c:	78 85       	ldd	r23, Y+8	; 0x08
    368e:	89 85       	ldd	r24, Y+9	; 0x09
    3690:	9a 85       	ldd	r25, Y+10	; 0x0a
    3692:	20 e0       	ldi	r18, 0x00	; 0
    3694:	3f ef       	ldi	r19, 0xFF	; 255
    3696:	4f e7       	ldi	r20, 0x7F	; 127
    3698:	57 e4       	ldi	r21, 0x47	; 71
    369a:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    369e:	18 16       	cp	r1, r24
    36a0:	4c f5       	brge	.+82     	; 0x36f4 <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    36a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    36a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    36a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    36aa:	20 e0       	ldi	r18, 0x00	; 0
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	40 e2       	ldi	r20, 0x20	; 32
    36b0:	51 e4       	ldi	r21, 0x41	; 65
    36b2:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    36b6:	dc 01       	movw	r26, r24
    36b8:	cb 01       	movw	r24, r22
    36ba:	bc 01       	movw	r22, r24
    36bc:	cd 01       	movw	r24, r26
    36be:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    36c2:	dc 01       	movw	r26, r24
    36c4:	cb 01       	movw	r24, r22
    36c6:	9e 83       	std	Y+6, r25	; 0x06
    36c8:	8d 83       	std	Y+5, r24	; 0x05
    36ca:	0f c0       	rjmp	.+30     	; 0x36ea <LCD_voidSendCommand+0xee>
    36cc:	88 ec       	ldi	r24, 0xC8	; 200
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	9c 83       	std	Y+4, r25	; 0x04
    36d2:	8b 83       	std	Y+3, r24	; 0x03
    36d4:	8b 81       	ldd	r24, Y+3	; 0x03
    36d6:	9c 81       	ldd	r25, Y+4	; 0x04
    36d8:	01 97       	sbiw	r24, 0x01	; 1
    36da:	f1 f7       	brne	.-4      	; 0x36d8 <LCD_voidSendCommand+0xdc>
    36dc:	9c 83       	std	Y+4, r25	; 0x04
    36de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36e0:	8d 81       	ldd	r24, Y+5	; 0x05
    36e2:	9e 81       	ldd	r25, Y+6	; 0x06
    36e4:	01 97       	sbiw	r24, 0x01	; 1
    36e6:	9e 83       	std	Y+6, r25	; 0x06
    36e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ea:	8d 81       	ldd	r24, Y+5	; 0x05
    36ec:	9e 81       	ldd	r25, Y+6	; 0x06
    36ee:	00 97       	sbiw	r24, 0x00	; 0
    36f0:	69 f7       	brne	.-38     	; 0x36cc <LCD_voidSendCommand+0xd0>
    36f2:	14 c0       	rjmp	.+40     	; 0x371c <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36f4:	6f 81       	ldd	r22, Y+7	; 0x07
    36f6:	78 85       	ldd	r23, Y+8	; 0x08
    36f8:	89 85       	ldd	r24, Y+9	; 0x09
    36fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    36fc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3700:	dc 01       	movw	r26, r24
    3702:	cb 01       	movw	r24, r22
    3704:	9e 83       	std	Y+6, r25	; 0x06
    3706:	8d 83       	std	Y+5, r24	; 0x05
    3708:	8d 81       	ldd	r24, Y+5	; 0x05
    370a:	9e 81       	ldd	r25, Y+6	; 0x06
    370c:	9a 83       	std	Y+2, r25	; 0x02
    370e:	89 83       	std	Y+1, r24	; 0x01
    3710:	89 81       	ldd	r24, Y+1	; 0x01
    3712:	9a 81       	ldd	r25, Y+2	; 0x02
    3714:	01 97       	sbiw	r24, 0x01	; 1
    3716:	f1 f7       	brne	.-4      	; 0x3714 <LCD_voidSendCommand+0x118>
    3718:	9a 83       	std	Y+2, r25	; 0x02
    371a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/* E = 0 */
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_LOW);
    371c:	83 e0       	ldi	r24, 0x03	; 3
    371e:	62 e0       	ldi	r22, 0x02	; 2
    3720:	40 e0       	ldi	r20, 0x00	; 0
    3722:	0e 94 24 12 	call	0x2448	; 0x2448 <DIO_voidSetPinValue>

}
    3726:	2f 96       	adiw	r28, 0x0f	; 15
    3728:	0f b6       	in	r0, 0x3f	; 63
    372a:	f8 94       	cli
    372c:	de bf       	out	0x3e, r29	; 62
    372e:	0f be       	out	0x3f, r0	; 63
    3730:	cd bf       	out	0x3d, r28	; 61
    3732:	cf 91       	pop	r28
    3734:	df 91       	pop	r29
    3736:	08 95       	ret

00003738 <LCD_voidSendChar>:

void LCD_voidSendChar (u8 Copy_U8Data)
{
    3738:	df 93       	push	r29
    373a:	cf 93       	push	r28
    373c:	cd b7       	in	r28, 0x3d	; 61
    373e:	de b7       	in	r29, 0x3e	; 62
    3740:	2f 97       	sbiw	r28, 0x0f	; 15
    3742:	0f b6       	in	r0, 0x3f	; 63
    3744:	f8 94       	cli
    3746:	de bf       	out	0x3e, r29	; 62
    3748:	0f be       	out	0x3f, r0	; 63
    374a:	cd bf       	out	0x3d, r28	; 61
    374c:	8f 87       	std	Y+15, r24	; 0x0f
	/* RS = 1 */
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RS, DIO_HIGH);
    374e:	83 e0       	ldi	r24, 0x03	; 3
    3750:	60 e0       	ldi	r22, 0x00	; 0
    3752:	41 e0       	ldi	r20, 0x01	; 1
    3754:	0e 94 24 12 	call	0x2448	; 0x2448 <DIO_voidSetPinValue>
    /* RW = 0 */
    DIO_voidSetPinValue(LCD_CONTROL_PORT, RW, DIO_LOW);
    3758:	83 e0       	ldi	r24, 0x03	; 3
    375a:	61 e0       	ldi	r22, 0x01	; 1
    375c:	40 e0       	ldi	r20, 0x00	; 0
    375e:	0e 94 24 12 	call	0x2448	; 0x2448 <DIO_voidSetPinValue>
    /* PUT THE COMMAND ON DATA PINS */
    DIO_voidSetPortValue(LCD_DATA_PORT, Copy_U8Data);
    3762:	82 e0       	ldi	r24, 0x02	; 2
    3764:	6f 85       	ldd	r22, Y+15	; 0x0f
    3766:	0e 94 e7 13 	call	0x27ce	; 0x27ce <DIO_voidSetPortValue>
    /* E = 1 */
    DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_HIGH);
    376a:	83 e0       	ldi	r24, 0x03	; 3
    376c:	62 e0       	ldi	r22, 0x02	; 2
    376e:	41 e0       	ldi	r20, 0x01	; 1
    3770:	0e 94 24 12 	call	0x2448	; 0x2448 <DIO_voidSetPinValue>
    3774:	80 e0       	ldi	r24, 0x00	; 0
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	a0 e0       	ldi	r26, 0x00	; 0
    377a:	b0 e4       	ldi	r27, 0x40	; 64
    377c:	8b 87       	std	Y+11, r24	; 0x0b
    377e:	9c 87       	std	Y+12, r25	; 0x0c
    3780:	ad 87       	std	Y+13, r26	; 0x0d
    3782:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3784:	6b 85       	ldd	r22, Y+11	; 0x0b
    3786:	7c 85       	ldd	r23, Y+12	; 0x0c
    3788:	8d 85       	ldd	r24, Y+13	; 0x0d
    378a:	9e 85       	ldd	r25, Y+14	; 0x0e
    378c:	20 e0       	ldi	r18, 0x00	; 0
    378e:	30 e0       	ldi	r19, 0x00	; 0
    3790:	4a ef       	ldi	r20, 0xFA	; 250
    3792:	54 e4       	ldi	r21, 0x44	; 68
    3794:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    3798:	dc 01       	movw	r26, r24
    379a:	cb 01       	movw	r24, r22
    379c:	8f 83       	std	Y+7, r24	; 0x07
    379e:	98 87       	std	Y+8, r25	; 0x08
    37a0:	a9 87       	std	Y+9, r26	; 0x09
    37a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37a4:	6f 81       	ldd	r22, Y+7	; 0x07
    37a6:	78 85       	ldd	r23, Y+8	; 0x08
    37a8:	89 85       	ldd	r24, Y+9	; 0x09
    37aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    37ac:	20 e0       	ldi	r18, 0x00	; 0
    37ae:	30 e0       	ldi	r19, 0x00	; 0
    37b0:	40 e8       	ldi	r20, 0x80	; 128
    37b2:	5f e3       	ldi	r21, 0x3F	; 63
    37b4:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    37b8:	88 23       	and	r24, r24
    37ba:	2c f4       	brge	.+10     	; 0x37c6 <LCD_voidSendChar+0x8e>
		__ticks = 1;
    37bc:	81 e0       	ldi	r24, 0x01	; 1
    37be:	90 e0       	ldi	r25, 0x00	; 0
    37c0:	9e 83       	std	Y+6, r25	; 0x06
    37c2:	8d 83       	std	Y+5, r24	; 0x05
    37c4:	3f c0       	rjmp	.+126    	; 0x3844 <LCD_voidSendChar+0x10c>
	else if (__tmp > 65535)
    37c6:	6f 81       	ldd	r22, Y+7	; 0x07
    37c8:	78 85       	ldd	r23, Y+8	; 0x08
    37ca:	89 85       	ldd	r24, Y+9	; 0x09
    37cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    37ce:	20 e0       	ldi	r18, 0x00	; 0
    37d0:	3f ef       	ldi	r19, 0xFF	; 255
    37d2:	4f e7       	ldi	r20, 0x7F	; 127
    37d4:	57 e4       	ldi	r21, 0x47	; 71
    37d6:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    37da:	18 16       	cp	r1, r24
    37dc:	4c f5       	brge	.+82     	; 0x3830 <LCD_voidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37de:	6b 85       	ldd	r22, Y+11	; 0x0b
    37e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    37e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    37e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    37e6:	20 e0       	ldi	r18, 0x00	; 0
    37e8:	30 e0       	ldi	r19, 0x00	; 0
    37ea:	40 e2       	ldi	r20, 0x20	; 32
    37ec:	51 e4       	ldi	r21, 0x41	; 65
    37ee:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    37f2:	dc 01       	movw	r26, r24
    37f4:	cb 01       	movw	r24, r22
    37f6:	bc 01       	movw	r22, r24
    37f8:	cd 01       	movw	r24, r26
    37fa:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    37fe:	dc 01       	movw	r26, r24
    3800:	cb 01       	movw	r24, r22
    3802:	9e 83       	std	Y+6, r25	; 0x06
    3804:	8d 83       	std	Y+5, r24	; 0x05
    3806:	0f c0       	rjmp	.+30     	; 0x3826 <LCD_voidSendChar+0xee>
    3808:	88 ec       	ldi	r24, 0xC8	; 200
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	9c 83       	std	Y+4, r25	; 0x04
    380e:	8b 83       	std	Y+3, r24	; 0x03
    3810:	8b 81       	ldd	r24, Y+3	; 0x03
    3812:	9c 81       	ldd	r25, Y+4	; 0x04
    3814:	01 97       	sbiw	r24, 0x01	; 1
    3816:	f1 f7       	brne	.-4      	; 0x3814 <LCD_voidSendChar+0xdc>
    3818:	9c 83       	std	Y+4, r25	; 0x04
    381a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    381c:	8d 81       	ldd	r24, Y+5	; 0x05
    381e:	9e 81       	ldd	r25, Y+6	; 0x06
    3820:	01 97       	sbiw	r24, 0x01	; 1
    3822:	9e 83       	std	Y+6, r25	; 0x06
    3824:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3826:	8d 81       	ldd	r24, Y+5	; 0x05
    3828:	9e 81       	ldd	r25, Y+6	; 0x06
    382a:	00 97       	sbiw	r24, 0x00	; 0
    382c:	69 f7       	brne	.-38     	; 0x3808 <LCD_voidSendChar+0xd0>
    382e:	14 c0       	rjmp	.+40     	; 0x3858 <LCD_voidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3830:	6f 81       	ldd	r22, Y+7	; 0x07
    3832:	78 85       	ldd	r23, Y+8	; 0x08
    3834:	89 85       	ldd	r24, Y+9	; 0x09
    3836:	9a 85       	ldd	r25, Y+10	; 0x0a
    3838:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    383c:	dc 01       	movw	r26, r24
    383e:	cb 01       	movw	r24, r22
    3840:	9e 83       	std	Y+6, r25	; 0x06
    3842:	8d 83       	std	Y+5, r24	; 0x05
    3844:	8d 81       	ldd	r24, Y+5	; 0x05
    3846:	9e 81       	ldd	r25, Y+6	; 0x06
    3848:	9a 83       	std	Y+2, r25	; 0x02
    384a:	89 83       	std	Y+1, r24	; 0x01
    384c:	89 81       	ldd	r24, Y+1	; 0x01
    384e:	9a 81       	ldd	r25, Y+2	; 0x02
    3850:	01 97       	sbiw	r24, 0x01	; 1
    3852:	f1 f7       	brne	.-4      	; 0x3850 <LCD_voidSendChar+0x118>
    3854:	9a 83       	std	Y+2, r25	; 0x02
    3856:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    /* E = 0 */
    DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_LOW);
    3858:	83 e0       	ldi	r24, 0x03	; 3
    385a:	62 e0       	ldi	r22, 0x02	; 2
    385c:	40 e0       	ldi	r20, 0x00	; 0
    385e:	0e 94 24 12 	call	0x2448	; 0x2448 <DIO_voidSetPinValue>
}
    3862:	2f 96       	adiw	r28, 0x0f	; 15
    3864:	0f b6       	in	r0, 0x3f	; 63
    3866:	f8 94       	cli
    3868:	de bf       	out	0x3e, r29	; 62
    386a:	0f be       	out	0x3f, r0	; 63
    386c:	cd bf       	out	0x3d, r28	; 61
    386e:	cf 91       	pop	r28
    3870:	df 91       	pop	r29
    3872:	08 95       	ret

00003874 <LCD_voidSendString>:

void LCD_voidSendString (u8 *Copy_U8String)
{
    3874:	df 93       	push	r29
    3876:	cf 93       	push	r28
    3878:	00 d0       	rcall	.+0      	; 0x387a <LCD_voidSendString+0x6>
    387a:	0f 92       	push	r0
    387c:	cd b7       	in	r28, 0x3d	; 61
    387e:	de b7       	in	r29, 0x3e	; 62
    3880:	9b 83       	std	Y+3, r25	; 0x03
    3882:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8Counter ;
	for (Local_U8Counter = 0 ; Copy_U8String[Local_U8Counter] != '\0' ; Local_U8Counter++)
    3884:	19 82       	std	Y+1, r1	; 0x01
    3886:	0e c0       	rjmp	.+28     	; 0x38a4 <LCD_voidSendString+0x30>
	{
		LCD_voidSendChar(Copy_U8String[Local_U8Counter]);
    3888:	89 81       	ldd	r24, Y+1	; 0x01
    388a:	28 2f       	mov	r18, r24
    388c:	30 e0       	ldi	r19, 0x00	; 0
    388e:	8a 81       	ldd	r24, Y+2	; 0x02
    3890:	9b 81       	ldd	r25, Y+3	; 0x03
    3892:	fc 01       	movw	r30, r24
    3894:	e2 0f       	add	r30, r18
    3896:	f3 1f       	adc	r31, r19
    3898:	80 81       	ld	r24, Z
    389a:	0e 94 9c 1b 	call	0x3738	; 0x3738 <LCD_voidSendChar>
}

void LCD_voidSendString (u8 *Copy_U8String)
{
	u8 Local_U8Counter ;
	for (Local_U8Counter = 0 ; Copy_U8String[Local_U8Counter] != '\0' ; Local_U8Counter++)
    389e:	89 81       	ldd	r24, Y+1	; 0x01
    38a0:	8f 5f       	subi	r24, 0xFF	; 255
    38a2:	89 83       	std	Y+1, r24	; 0x01
    38a4:	89 81       	ldd	r24, Y+1	; 0x01
    38a6:	28 2f       	mov	r18, r24
    38a8:	30 e0       	ldi	r19, 0x00	; 0
    38aa:	8a 81       	ldd	r24, Y+2	; 0x02
    38ac:	9b 81       	ldd	r25, Y+3	; 0x03
    38ae:	fc 01       	movw	r30, r24
    38b0:	e2 0f       	add	r30, r18
    38b2:	f3 1f       	adc	r31, r19
    38b4:	80 81       	ld	r24, Z
    38b6:	88 23       	and	r24, r24
    38b8:	39 f7       	brne	.-50     	; 0x3888 <LCD_voidSendString+0x14>
	{
		LCD_voidSendChar(Copy_U8String[Local_U8Counter]);
	}
		
}
    38ba:	0f 90       	pop	r0
    38bc:	0f 90       	pop	r0
    38be:	0f 90       	pop	r0
    38c0:	cf 91       	pop	r28
    38c2:	df 91       	pop	r29
    38c4:	08 95       	ret

000038c6 <LCD_voidSetLocation>:
void LCD_voidSetLocation (u8 Copy_U8LineNum , u8 Copy_U8CharNum)
{
    38c6:	df 93       	push	r29
    38c8:	cf 93       	push	r28
    38ca:	00 d0       	rcall	.+0      	; 0x38cc <LCD_voidSetLocation+0x6>
    38cc:	00 d0       	rcall	.+0      	; 0x38ce <LCD_voidSetLocation+0x8>
    38ce:	cd b7       	in	r28, 0x3d	; 61
    38d0:	de b7       	in	r29, 0x3e	; 62
    38d2:	89 83       	std	Y+1, r24	; 0x01
    38d4:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_U8LineNum)
    38d6:	89 81       	ldd	r24, Y+1	; 0x01
    38d8:	28 2f       	mov	r18, r24
    38da:	30 e0       	ldi	r19, 0x00	; 0
    38dc:	3c 83       	std	Y+4, r19	; 0x04
    38de:	2b 83       	std	Y+3, r18	; 0x03
    38e0:	8b 81       	ldd	r24, Y+3	; 0x03
    38e2:	9c 81       	ldd	r25, Y+4	; 0x04
    38e4:	81 30       	cpi	r24, 0x01	; 1
    38e6:	91 05       	cpc	r25, r1
    38e8:	31 f0       	breq	.+12     	; 0x38f6 <LCD_voidSetLocation+0x30>
    38ea:	2b 81       	ldd	r18, Y+3	; 0x03
    38ec:	3c 81       	ldd	r19, Y+4	; 0x04
    38ee:	22 30       	cpi	r18, 0x02	; 2
    38f0:	31 05       	cpc	r19, r1
    38f2:	31 f0       	breq	.+12     	; 0x3900 <LCD_voidSetLocation+0x3a>
    38f4:	09 c0       	rjmp	.+18     	; 0x3908 <LCD_voidSetLocation+0x42>
	{
		case LCD_U8_LINE1 : LCD_voidSendCommand(0x80+Copy_U8CharNum); break ;
    38f6:	8a 81       	ldd	r24, Y+2	; 0x02
    38f8:	80 58       	subi	r24, 0x80	; 128
    38fa:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <LCD_voidSendCommand>
    38fe:	04 c0       	rjmp	.+8      	; 0x3908 <LCD_voidSetLocation+0x42>
		
		case LCD_U8_LINE2 : LCD_voidSendCommand(0xc0+Copy_U8CharNum); break ;
    3900:	8a 81       	ldd	r24, Y+2	; 0x02
    3902:	80 54       	subi	r24, 0x40	; 64
    3904:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <LCD_voidSendCommand>
	}
}
    3908:	0f 90       	pop	r0
    390a:	0f 90       	pop	r0
    390c:	0f 90       	pop	r0
    390e:	0f 90       	pop	r0
    3910:	cf 91       	pop	r28
    3912:	df 91       	pop	r29
    3914:	08 95       	ret

00003916 <LCD_voidSendNumber>:

void LCD_voidSendNumber(u32 Copy_u32Number)
{
    3916:	df 93       	push	r29
    3918:	cf 93       	push	r28
    391a:	cd b7       	in	r28, 0x3d	; 61
    391c:	de b7       	in	r29, 0x3e	; 62
    391e:	2c 97       	sbiw	r28, 0x0c	; 12
    3920:	0f b6       	in	r0, 0x3f	; 63
    3922:	f8 94       	cli
    3924:	de bf       	out	0x3e, r29	; 62
    3926:	0f be       	out	0x3f, r0	; 63
    3928:	cd bf       	out	0x3d, r28	; 61
    392a:	69 87       	std	Y+9, r22	; 0x09
    392c:	7a 87       	std	Y+10, r23	; 0x0a
    392e:	8b 87       	std	Y+11, r24	; 0x0b
    3930:	9c 87       	std	Y+12, r25	; 0x0c
	u32 Local_u32Counter=1 , Local_u32Digit=0;
    3932:	81 e0       	ldi	r24, 0x01	; 1
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	a0 e0       	ldi	r26, 0x00	; 0
    3938:	b0 e0       	ldi	r27, 0x00	; 0
    393a:	8d 83       	std	Y+5, r24	; 0x05
    393c:	9e 83       	std	Y+6, r25	; 0x06
    393e:	af 83       	std	Y+7, r26	; 0x07
    3940:	b8 87       	std	Y+8, r27	; 0x08
    3942:	19 82       	std	Y+1, r1	; 0x01
    3944:	1a 82       	std	Y+2, r1	; 0x02
    3946:	1b 82       	std	Y+3, r1	; 0x03
    3948:	1c 82       	std	Y+4, r1	; 0x04

	if (Copy_u32Number == 0)
    394a:	89 85       	ldd	r24, Y+9	; 0x09
    394c:	9a 85       	ldd	r25, Y+10	; 0x0a
    394e:	ab 85       	ldd	r26, Y+11	; 0x0b
    3950:	bc 85       	ldd	r27, Y+12	; 0x0c
    3952:	00 97       	sbiw	r24, 0x00	; 0
    3954:	a1 05       	cpc	r26, r1
    3956:	b1 05       	cpc	r27, r1
    3958:	b1 f4       	brne	.+44     	; 0x3986 <LCD_voidSendNumber+0x70>
		LCD_voidSendChar('0');
    395a:	80 e3       	ldi	r24, 0x30	; 48
    395c:	0e 94 9c 1b 	call	0x3738	; 0x3738 <LCD_voidSendChar>
    3960:	7a c0       	rjmp	.+244    	; 0x3a56 <LCD_voidSendNumber+0x140>
	else
	{
		while (Copy_u32Number/Local_u32Counter != 0)
		{
			Local_u32Counter *= 10;
    3962:	8d 81       	ldd	r24, Y+5	; 0x05
    3964:	9e 81       	ldd	r25, Y+6	; 0x06
    3966:	af 81       	ldd	r26, Y+7	; 0x07
    3968:	b8 85       	ldd	r27, Y+8	; 0x08
    396a:	2a e0       	ldi	r18, 0x0A	; 10
    396c:	30 e0       	ldi	r19, 0x00	; 0
    396e:	40 e0       	ldi	r20, 0x00	; 0
    3970:	50 e0       	ldi	r21, 0x00	; 0
    3972:	bc 01       	movw	r22, r24
    3974:	cd 01       	movw	r24, r26
    3976:	0e 94 aa 23 	call	0x4754	; 0x4754 <__mulsi3>
    397a:	dc 01       	movw	r26, r24
    397c:	cb 01       	movw	r24, r22
    397e:	8d 83       	std	Y+5, r24	; 0x05
    3980:	9e 83       	std	Y+6, r25	; 0x06
    3982:	af 83       	std	Y+7, r26	; 0x07
    3984:	b8 87       	std	Y+8, r27	; 0x08

	if (Copy_u32Number == 0)
		LCD_voidSendChar('0');
	else
	{
		while (Copy_u32Number/Local_u32Counter != 0)
    3986:	89 85       	ldd	r24, Y+9	; 0x09
    3988:	9a 85       	ldd	r25, Y+10	; 0x0a
    398a:	ab 85       	ldd	r26, Y+11	; 0x0b
    398c:	bc 85       	ldd	r27, Y+12	; 0x0c
    398e:	2d 81       	ldd	r18, Y+5	; 0x05
    3990:	3e 81       	ldd	r19, Y+6	; 0x06
    3992:	4f 81       	ldd	r20, Y+7	; 0x07
    3994:	58 85       	ldd	r21, Y+8	; 0x08
    3996:	bc 01       	movw	r22, r24
    3998:	cd 01       	movw	r24, r26
    399a:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <__udivmodsi4>
    399e:	da 01       	movw	r26, r20
    39a0:	c9 01       	movw	r24, r18
    39a2:	00 97       	sbiw	r24, 0x00	; 0
    39a4:	a1 05       	cpc	r26, r1
    39a6:	b1 05       	cpc	r27, r1
    39a8:	e1 f6       	brne	.-72     	; 0x3962 <LCD_voidSendNumber+0x4c>
		{
			Local_u32Counter *= 10;
		}
		Local_u32Counter /=10;
    39aa:	8d 81       	ldd	r24, Y+5	; 0x05
    39ac:	9e 81       	ldd	r25, Y+6	; 0x06
    39ae:	af 81       	ldd	r26, Y+7	; 0x07
    39b0:	b8 85       	ldd	r27, Y+8	; 0x08
    39b2:	2a e0       	ldi	r18, 0x0A	; 10
    39b4:	30 e0       	ldi	r19, 0x00	; 0
    39b6:	40 e0       	ldi	r20, 0x00	; 0
    39b8:	50 e0       	ldi	r21, 0x00	; 0
    39ba:	bc 01       	movw	r22, r24
    39bc:	cd 01       	movw	r24, r26
    39be:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <__udivmodsi4>
    39c2:	da 01       	movw	r26, r20
    39c4:	c9 01       	movw	r24, r18
    39c6:	8d 83       	std	Y+5, r24	; 0x05
    39c8:	9e 83       	std	Y+6, r25	; 0x06
    39ca:	af 83       	std	Y+7, r26	; 0x07
    39cc:	b8 87       	std	Y+8, r27	; 0x08
    39ce:	3a c0       	rjmp	.+116    	; 0x3a44 <LCD_voidSendNumber+0x12e>

		while (Local_u32Counter != 0)
		{
			Local_u32Digit = Copy_u32Number/Local_u32Counter;
    39d0:	89 85       	ldd	r24, Y+9	; 0x09
    39d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    39d4:	ab 85       	ldd	r26, Y+11	; 0x0b
    39d6:	bc 85       	ldd	r27, Y+12	; 0x0c
    39d8:	2d 81       	ldd	r18, Y+5	; 0x05
    39da:	3e 81       	ldd	r19, Y+6	; 0x06
    39dc:	4f 81       	ldd	r20, Y+7	; 0x07
    39de:	58 85       	ldd	r21, Y+8	; 0x08
    39e0:	bc 01       	movw	r22, r24
    39e2:	cd 01       	movw	r24, r26
    39e4:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <__udivmodsi4>
    39e8:	da 01       	movw	r26, r20
    39ea:	c9 01       	movw	r24, r18
    39ec:	89 83       	std	Y+1, r24	; 0x01
    39ee:	9a 83       	std	Y+2, r25	; 0x02
    39f0:	ab 83       	std	Y+3, r26	; 0x03
    39f2:	bc 83       	std	Y+4, r27	; 0x04

			LCD_voidSendChar(Local_u32Digit + '0');
    39f4:	89 81       	ldd	r24, Y+1	; 0x01
    39f6:	80 5d       	subi	r24, 0xD0	; 208
    39f8:	0e 94 9c 1b 	call	0x3738	; 0x3738 <LCD_voidSendChar>

			Copy_u32Number = Copy_u32Number%Local_u32Counter;
    39fc:	89 85       	ldd	r24, Y+9	; 0x09
    39fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a00:	ab 85       	ldd	r26, Y+11	; 0x0b
    3a02:	bc 85       	ldd	r27, Y+12	; 0x0c
    3a04:	2d 81       	ldd	r18, Y+5	; 0x05
    3a06:	3e 81       	ldd	r19, Y+6	; 0x06
    3a08:	4f 81       	ldd	r20, Y+7	; 0x07
    3a0a:	58 85       	ldd	r21, Y+8	; 0x08
    3a0c:	bc 01       	movw	r22, r24
    3a0e:	cd 01       	movw	r24, r26
    3a10:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <__udivmodsi4>
    3a14:	dc 01       	movw	r26, r24
    3a16:	cb 01       	movw	r24, r22
    3a18:	89 87       	std	Y+9, r24	; 0x09
    3a1a:	9a 87       	std	Y+10, r25	; 0x0a
    3a1c:	ab 87       	std	Y+11, r26	; 0x0b
    3a1e:	bc 87       	std	Y+12, r27	; 0x0c

			Local_u32Counter /= 10;
    3a20:	8d 81       	ldd	r24, Y+5	; 0x05
    3a22:	9e 81       	ldd	r25, Y+6	; 0x06
    3a24:	af 81       	ldd	r26, Y+7	; 0x07
    3a26:	b8 85       	ldd	r27, Y+8	; 0x08
    3a28:	2a e0       	ldi	r18, 0x0A	; 10
    3a2a:	30 e0       	ldi	r19, 0x00	; 0
    3a2c:	40 e0       	ldi	r20, 0x00	; 0
    3a2e:	50 e0       	ldi	r21, 0x00	; 0
    3a30:	bc 01       	movw	r22, r24
    3a32:	cd 01       	movw	r24, r26
    3a34:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <__udivmodsi4>
    3a38:	da 01       	movw	r26, r20
    3a3a:	c9 01       	movw	r24, r18
    3a3c:	8d 83       	std	Y+5, r24	; 0x05
    3a3e:	9e 83       	std	Y+6, r25	; 0x06
    3a40:	af 83       	std	Y+7, r26	; 0x07
    3a42:	b8 87       	std	Y+8, r27	; 0x08
		{
			Local_u32Counter *= 10;
		}
		Local_u32Counter /=10;

		while (Local_u32Counter != 0)
    3a44:	8d 81       	ldd	r24, Y+5	; 0x05
    3a46:	9e 81       	ldd	r25, Y+6	; 0x06
    3a48:	af 81       	ldd	r26, Y+7	; 0x07
    3a4a:	b8 85       	ldd	r27, Y+8	; 0x08
    3a4c:	00 97       	sbiw	r24, 0x00	; 0
    3a4e:	a1 05       	cpc	r26, r1
    3a50:	b1 05       	cpc	r27, r1
    3a52:	09 f0       	breq	.+2      	; 0x3a56 <LCD_voidSendNumber+0x140>
    3a54:	bd cf       	rjmp	.-134    	; 0x39d0 <LCD_voidSendNumber+0xba>
			Copy_u32Number = Copy_u32Number%Local_u32Counter;

			Local_u32Counter /= 10;
		}
	}
}
    3a56:	2c 96       	adiw	r28, 0x0c	; 12
    3a58:	0f b6       	in	r0, 0x3f	; 63
    3a5a:	f8 94       	cli
    3a5c:	de bf       	out	0x3e, r29	; 62
    3a5e:	0f be       	out	0x3f, r0	; 63
    3a60:	cd bf       	out	0x3d, r28	; 61
    3a62:	cf 91       	pop	r28
    3a64:	df 91       	pop	r29
    3a66:	08 95       	ret

00003a68 <HKP_voidInit>:

u8 Row[4] = {HKP_R1_PIN, HKP_R2_PIN, HKP_R3_PIN, HKP_R4_PIN};
u8 Col[4] = {HKP_C1_PIN, HKP_C2_PIN, HKP_C3_PIN, HKP_C4_PIN};
u8 Keys[4][4] = HKP_KEYS;

void HKP_voidInit(void){
    3a68:	df 93       	push	r29
    3a6a:	cf 93       	push	r28
    3a6c:	cd b7       	in	r28, 0x3d	; 61
    3a6e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDirection(HKP_PORT,0b00001111);
    3a70:	81 e0       	ldi	r24, 0x01	; 1
    3a72:	6f e0       	ldi	r22, 0x0F	; 15
    3a74:	0e 94 a6 13 	call	0x274c	; 0x274c <DIO_voidSetPortDirection>
	DIO_voidSetPortValue(HKP_PORT,HKP_KEY_NOT_PRESSED);
    3a78:	81 e0       	ldi	r24, 0x01	; 1
    3a7a:	6f ef       	ldi	r22, 0xFF	; 255
    3a7c:	0e 94 e7 13 	call	0x27ce	; 0x27ce <DIO_voidSetPortValue>
}
    3a80:	cf 91       	pop	r28
    3a82:	df 91       	pop	r29
    3a84:	08 95       	ret

00003a86 <HKP_u8GetKeyValue>:

u8 HKP_u8GetKeyValue(void) {
    3a86:	df 93       	push	r29
    3a88:	cf 93       	push	r28
    3a8a:	cd b7       	in	r28, 0x3d	; 61
    3a8c:	de b7       	in	r29, 0x3e	; 62
    3a8e:	61 97       	sbiw	r28, 0x11	; 17
    3a90:	0f b6       	in	r0, 0x3f	; 63
    3a92:	f8 94       	cli
    3a94:	de bf       	out	0x3e, r29	; 62
    3a96:	0f be       	out	0x3f, r0	; 63
    3a98:	cd bf       	out	0x3d, r28	; 61
    u8 Local_u8RowsCounter, Local_u8ColsCounter;

    for (Local_u8RowsCounter = 0; Local_u8RowsCounter < 4; Local_u8RowsCounter++) {  // Change condition to < instead of <=
    3a9a:	18 8a       	std	Y+16, r1	; 0x10
    3a9c:	c4 c0       	rjmp	.+392    	; 0x3c26 <HKP_u8GetKeyValue+0x1a0>

        DIO_voidSetPinValue(HKP_PORT, Row[Local_u8RowsCounter], DIO_LOW);
    3a9e:	88 89       	ldd	r24, Y+16	; 0x10
    3aa0:	88 2f       	mov	r24, r24
    3aa2:	90 e0       	ldi	r25, 0x00	; 0
    3aa4:	fc 01       	movw	r30, r24
    3aa6:	e1 5f       	subi	r30, 0xF1	; 241
    3aa8:	fd 4f       	sbci	r31, 0xFD	; 253
    3aaa:	90 81       	ld	r25, Z
    3aac:	81 e0       	ldi	r24, 0x01	; 1
    3aae:	69 2f       	mov	r22, r25
    3ab0:	40 e0       	ldi	r20, 0x00	; 0
    3ab2:	0e 94 24 12 	call	0x2448	; 0x2448 <DIO_voidSetPinValue>

        for (Local_u8ColsCounter = 0; Local_u8ColsCounter < 4; Local_u8ColsCounter++) {  // Change condition to < instead of <=
    3ab6:	1f 86       	std	Y+15, r1	; 0x0f
    3ab8:	a3 c0       	rjmp	.+326    	; 0x3c00 <HKP_u8GetKeyValue+0x17a>
            if (DIO_u8GetPinValue(HKP_PORT, Col[Local_u8ColsCounter]) == 0) {
    3aba:	8f 85       	ldd	r24, Y+15	; 0x0f
    3abc:	88 2f       	mov	r24, r24
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	fc 01       	movw	r30, r24
    3ac2:	ed 5e       	subi	r30, 0xED	; 237
    3ac4:	fd 4f       	sbci	r31, 0xFD	; 253
    3ac6:	90 81       	ld	r25, Z
    3ac8:	81 e0       	ldi	r24, 0x01	; 1
    3aca:	69 2f       	mov	r22, r25
    3acc:	0e 94 24 13 	call	0x2648	; 0x2648 <DIO_u8GetPinValue>
    3ad0:	88 23       	and	r24, r24
    3ad2:	09 f0       	breq	.+2      	; 0x3ad6 <HKP_u8GetKeyValue+0x50>
    3ad4:	92 c0       	rjmp	.+292    	; 0x3bfa <HKP_u8GetKeyValue+0x174>
    3ad6:	80 e0       	ldi	r24, 0x00	; 0
    3ad8:	90 e0       	ldi	r25, 0x00	; 0
    3ada:	a0 ea       	ldi	r26, 0xA0	; 160
    3adc:	b1 e4       	ldi	r27, 0x41	; 65
    3ade:	8b 87       	std	Y+11, r24	; 0x0b
    3ae0:	9c 87       	std	Y+12, r25	; 0x0c
    3ae2:	ad 87       	std	Y+13, r26	; 0x0d
    3ae4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ae6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ae8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3aea:	8d 85       	ldd	r24, Y+13	; 0x0d
    3aec:	9e 85       	ldd	r25, Y+14	; 0x0e
    3aee:	20 e0       	ldi	r18, 0x00	; 0
    3af0:	30 e0       	ldi	r19, 0x00	; 0
    3af2:	4a ef       	ldi	r20, 0xFA	; 250
    3af4:	54 e4       	ldi	r21, 0x44	; 68
    3af6:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    3afa:	dc 01       	movw	r26, r24
    3afc:	cb 01       	movw	r24, r22
    3afe:	8f 83       	std	Y+7, r24	; 0x07
    3b00:	98 87       	std	Y+8, r25	; 0x08
    3b02:	a9 87       	std	Y+9, r26	; 0x09
    3b04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b06:	6f 81       	ldd	r22, Y+7	; 0x07
    3b08:	78 85       	ldd	r23, Y+8	; 0x08
    3b0a:	89 85       	ldd	r24, Y+9	; 0x09
    3b0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b0e:	20 e0       	ldi	r18, 0x00	; 0
    3b10:	30 e0       	ldi	r19, 0x00	; 0
    3b12:	40 e8       	ldi	r20, 0x80	; 128
    3b14:	5f e3       	ldi	r21, 0x3F	; 63
    3b16:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    3b1a:	88 23       	and	r24, r24
    3b1c:	2c f4       	brge	.+10     	; 0x3b28 <HKP_u8GetKeyValue+0xa2>
		__ticks = 1;
    3b1e:	81 e0       	ldi	r24, 0x01	; 1
    3b20:	90 e0       	ldi	r25, 0x00	; 0
    3b22:	9e 83       	std	Y+6, r25	; 0x06
    3b24:	8d 83       	std	Y+5, r24	; 0x05
    3b26:	3f c0       	rjmp	.+126    	; 0x3ba6 <HKP_u8GetKeyValue+0x120>
	else if (__tmp > 65535)
    3b28:	6f 81       	ldd	r22, Y+7	; 0x07
    3b2a:	78 85       	ldd	r23, Y+8	; 0x08
    3b2c:	89 85       	ldd	r24, Y+9	; 0x09
    3b2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b30:	20 e0       	ldi	r18, 0x00	; 0
    3b32:	3f ef       	ldi	r19, 0xFF	; 255
    3b34:	4f e7       	ldi	r20, 0x7F	; 127
    3b36:	57 e4       	ldi	r21, 0x47	; 71
    3b38:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    3b3c:	18 16       	cp	r1, r24
    3b3e:	4c f5       	brge	.+82     	; 0x3b92 <HKP_u8GetKeyValue+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b40:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b42:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b44:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b46:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b48:	20 e0       	ldi	r18, 0x00	; 0
    3b4a:	30 e0       	ldi	r19, 0x00	; 0
    3b4c:	40 e2       	ldi	r20, 0x20	; 32
    3b4e:	51 e4       	ldi	r21, 0x41	; 65
    3b50:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    3b54:	dc 01       	movw	r26, r24
    3b56:	cb 01       	movw	r24, r22
    3b58:	bc 01       	movw	r22, r24
    3b5a:	cd 01       	movw	r24, r26
    3b5c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3b60:	dc 01       	movw	r26, r24
    3b62:	cb 01       	movw	r24, r22
    3b64:	9e 83       	std	Y+6, r25	; 0x06
    3b66:	8d 83       	std	Y+5, r24	; 0x05
    3b68:	0f c0       	rjmp	.+30     	; 0x3b88 <HKP_u8GetKeyValue+0x102>
    3b6a:	88 ec       	ldi	r24, 0xC8	; 200
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	9c 83       	std	Y+4, r25	; 0x04
    3b70:	8b 83       	std	Y+3, r24	; 0x03
    3b72:	8b 81       	ldd	r24, Y+3	; 0x03
    3b74:	9c 81       	ldd	r25, Y+4	; 0x04
    3b76:	01 97       	sbiw	r24, 0x01	; 1
    3b78:	f1 f7       	brne	.-4      	; 0x3b76 <HKP_u8GetKeyValue+0xf0>
    3b7a:	9c 83       	std	Y+4, r25	; 0x04
    3b7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b80:	9e 81       	ldd	r25, Y+6	; 0x06
    3b82:	01 97       	sbiw	r24, 0x01	; 1
    3b84:	9e 83       	std	Y+6, r25	; 0x06
    3b86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b88:	8d 81       	ldd	r24, Y+5	; 0x05
    3b8a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b8c:	00 97       	sbiw	r24, 0x00	; 0
    3b8e:	69 f7       	brne	.-38     	; 0x3b6a <HKP_u8GetKeyValue+0xe4>
    3b90:	14 c0       	rjmp	.+40     	; 0x3bba <HKP_u8GetKeyValue+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b92:	6f 81       	ldd	r22, Y+7	; 0x07
    3b94:	78 85       	ldd	r23, Y+8	; 0x08
    3b96:	89 85       	ldd	r24, Y+9	; 0x09
    3b98:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b9a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3b9e:	dc 01       	movw	r26, r24
    3ba0:	cb 01       	movw	r24, r22
    3ba2:	9e 83       	std	Y+6, r25	; 0x06
    3ba4:	8d 83       	std	Y+5, r24	; 0x05
    3ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    3baa:	9a 83       	std	Y+2, r25	; 0x02
    3bac:	89 83       	std	Y+1, r24	; 0x01
    3bae:	89 81       	ldd	r24, Y+1	; 0x01
    3bb0:	9a 81       	ldd	r25, Y+2	; 0x02
    3bb2:	01 97       	sbiw	r24, 0x01	; 1
    3bb4:	f1 f7       	brne	.-4      	; 0x3bb2 <HKP_u8GetKeyValue+0x12c>
    3bb6:	9a 83       	std	Y+2, r25	; 0x02
    3bb8:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(20);
                while (DIO_u8GetPinValue(HKP_PORT, Col[Local_u8ColsCounter]) == 0) {
    3bba:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bbc:	88 2f       	mov	r24, r24
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	fc 01       	movw	r30, r24
    3bc2:	ed 5e       	subi	r30, 0xED	; 237
    3bc4:	fd 4f       	sbci	r31, 0xFD	; 253
    3bc6:	90 81       	ld	r25, Z
    3bc8:	81 e0       	ldi	r24, 0x01	; 1
    3bca:	69 2f       	mov	r22, r25
    3bcc:	0e 94 24 13 	call	0x2648	; 0x2648 <DIO_u8GetPinValue>
    3bd0:	88 23       	and	r24, r24
    3bd2:	99 f3       	breq	.-26     	; 0x3bba <HKP_u8GetKeyValue+0x134>
                    /*Do Nothing*/
                }
                return Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    3bd4:	88 89       	ldd	r24, Y+16	; 0x10
    3bd6:	48 2f       	mov	r20, r24
    3bd8:	50 e0       	ldi	r21, 0x00	; 0
    3bda:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bdc:	28 2f       	mov	r18, r24
    3bde:	30 e0       	ldi	r19, 0x00	; 0
    3be0:	ca 01       	movw	r24, r20
    3be2:	88 0f       	add	r24, r24
    3be4:	99 1f       	adc	r25, r25
    3be6:	88 0f       	add	r24, r24
    3be8:	99 1f       	adc	r25, r25
    3bea:	82 0f       	add	r24, r18
    3bec:	93 1f       	adc	r25, r19
    3bee:	fc 01       	movw	r30, r24
    3bf0:	e9 5e       	subi	r30, 0xE9	; 233
    3bf2:	fd 4f       	sbci	r31, 0xFD	; 253
    3bf4:	80 81       	ld	r24, Z
    3bf6:	89 8b       	std	Y+17, r24	; 0x11
    3bf8:	1c c0       	rjmp	.+56     	; 0x3c32 <HKP_u8GetKeyValue+0x1ac>

    for (Local_u8RowsCounter = 0; Local_u8RowsCounter < 4; Local_u8RowsCounter++) {  // Change condition to < instead of <=

        DIO_voidSetPinValue(HKP_PORT, Row[Local_u8RowsCounter], DIO_LOW);

        for (Local_u8ColsCounter = 0; Local_u8ColsCounter < 4; Local_u8ColsCounter++) {  // Change condition to < instead of <=
    3bfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bfc:	8f 5f       	subi	r24, 0xFF	; 255
    3bfe:	8f 87       	std	Y+15, r24	; 0x0f
    3c00:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c02:	84 30       	cpi	r24, 0x04	; 4
    3c04:	08 f4       	brcc	.+2      	; 0x3c08 <HKP_u8GetKeyValue+0x182>
    3c06:	59 cf       	rjmp	.-334    	; 0x3aba <HKP_u8GetKeyValue+0x34>
                    /*Do Nothing*/
                }
                return Keys[Local_u8RowsCounter][Local_u8ColsCounter];
            }
        }
        DIO_voidSetPinValue(HKP_PORT, Row[Local_u8RowsCounter], DIO_HIGH);
    3c08:	88 89       	ldd	r24, Y+16	; 0x10
    3c0a:	88 2f       	mov	r24, r24
    3c0c:	90 e0       	ldi	r25, 0x00	; 0
    3c0e:	fc 01       	movw	r30, r24
    3c10:	e1 5f       	subi	r30, 0xF1	; 241
    3c12:	fd 4f       	sbci	r31, 0xFD	; 253
    3c14:	90 81       	ld	r25, Z
    3c16:	81 e0       	ldi	r24, 0x01	; 1
    3c18:	69 2f       	mov	r22, r25
    3c1a:	41 e0       	ldi	r20, 0x01	; 1
    3c1c:	0e 94 24 12 	call	0x2448	; 0x2448 <DIO_voidSetPinValue>
}

u8 HKP_u8GetKeyValue(void) {
    u8 Local_u8RowsCounter, Local_u8ColsCounter;

    for (Local_u8RowsCounter = 0; Local_u8RowsCounter < 4; Local_u8RowsCounter++) {  // Change condition to < instead of <=
    3c20:	88 89       	ldd	r24, Y+16	; 0x10
    3c22:	8f 5f       	subi	r24, 0xFF	; 255
    3c24:	88 8b       	std	Y+16, r24	; 0x10
    3c26:	88 89       	ldd	r24, Y+16	; 0x10
    3c28:	84 30       	cpi	r24, 0x04	; 4
    3c2a:	08 f4       	brcc	.+2      	; 0x3c2e <HKP_u8GetKeyValue+0x1a8>
    3c2c:	38 cf       	rjmp	.-400    	; 0x3a9e <HKP_u8GetKeyValue+0x18>
                return Keys[Local_u8RowsCounter][Local_u8ColsCounter];
            }
        }
        DIO_voidSetPinValue(HKP_PORT, Row[Local_u8RowsCounter], DIO_HIGH);
    }
    return HKP_KEY_NOT_PRESSED;
    3c2e:	8f ef       	ldi	r24, 0xFF	; 255
    3c30:	89 8b       	std	Y+17, r24	; 0x11
    3c32:	89 89       	ldd	r24, Y+17	; 0x11
}
    3c34:	61 96       	adiw	r28, 0x11	; 17
    3c36:	0f b6       	in	r0, 0x3f	; 63
    3c38:	f8 94       	cli
    3c3a:	de bf       	out	0x3e, r29	; 62
    3c3c:	0f be       	out	0x3f, r0	; 63
    3c3e:	cd bf       	out	0x3d, r28	; 61
    3c40:	cf 91       	pop	r28
    3c42:	df 91       	pop	r29
    3c44:	08 95       	ret

00003c46 <DCMOTOR_voidInit>:
#include"DCMOTOR_Interface.h"



void DCMOTOR_voidInit(void)
{
    3c46:	df 93       	push	r29
    3c48:	cf 93       	push	r28
    3c4a:	cd b7       	in	r28, 0x3d	; 61
    3c4c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DCMOTOR_PORT,DCMOTOR_PIN1,DIO_OUTPUT);
    3c4e:	83 e0       	ldi	r24, 0x03	; 3
    3c50:	66 e0       	ldi	r22, 0x06	; 6
    3c52:	41 e0       	ldi	r20, 0x01	; 1
    3c54:	0e 94 24 11 	call	0x2248	; 0x2248 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DCMOTOR_PORT,DCMOTOR_PIN2,DIO_OUTPUT);
    3c58:	83 e0       	ldi	r24, 0x03	; 3
    3c5a:	67 e0       	ldi	r22, 0x07	; 7
    3c5c:	41 e0       	ldi	r20, 0x01	; 1
    3c5e:	0e 94 24 11 	call	0x2248	; 0x2248 <DIO_voidSetPinDirection>
}
    3c62:	cf 91       	pop	r28
    3c64:	df 91       	pop	r29
    3c66:	08 95       	ret

00003c68 <DCMOTOR_voidRotateCW>:
void DCMOTOR_voidRotateCW(void)
{
    3c68:	df 93       	push	r29
    3c6a:	cf 93       	push	r28
    3c6c:	cd b7       	in	r28, 0x3d	; 61
    3c6e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DCMOTOR_PORT,DCMOTOR_PIN1,DIO_HIGH);   //A
    3c70:	83 e0       	ldi	r24, 0x03	; 3
    3c72:	66 e0       	ldi	r22, 0x06	; 6
    3c74:	41 e0       	ldi	r20, 0x01	; 1
    3c76:	0e 94 24 12 	call	0x2448	; 0x2448 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DCMOTOR_PORT,DCMOTOR_PIN2,DIO_LOW);    //B
    3c7a:	83 e0       	ldi	r24, 0x03	; 3
    3c7c:	67 e0       	ldi	r22, 0x07	; 7
    3c7e:	40 e0       	ldi	r20, 0x00	; 0
    3c80:	0e 94 24 12 	call	0x2448	; 0x2448 <DIO_voidSetPinValue>
}
    3c84:	cf 91       	pop	r28
    3c86:	df 91       	pop	r29
    3c88:	08 95       	ret

00003c8a <DCMOTOR_voidRotateCCW>:
void DCMOTOR_voidRotateCCW(void)
{
    3c8a:	df 93       	push	r29
    3c8c:	cf 93       	push	r28
    3c8e:	cd b7       	in	r28, 0x3d	; 61
    3c90:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DCMOTOR_PORT,DCMOTOR_PIN1,DIO_LOW);   //A
    3c92:	83 e0       	ldi	r24, 0x03	; 3
    3c94:	66 e0       	ldi	r22, 0x06	; 6
    3c96:	40 e0       	ldi	r20, 0x00	; 0
    3c98:	0e 94 24 12 	call	0x2448	; 0x2448 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DCMOTOR_PORT,DCMOTOR_PIN2,DIO_HIGH);  //B
    3c9c:	83 e0       	ldi	r24, 0x03	; 3
    3c9e:	67 e0       	ldi	r22, 0x07	; 7
    3ca0:	41 e0       	ldi	r20, 0x01	; 1
    3ca2:	0e 94 24 12 	call	0x2448	; 0x2448 <DIO_voidSetPinValue>
}
    3ca6:	cf 91       	pop	r28
    3ca8:	df 91       	pop	r29
    3caa:	08 95       	ret

00003cac <DCMOTOR_voidStop>:
void DCMOTOR_voidStop(void)
{
    3cac:	df 93       	push	r29
    3cae:	cf 93       	push	r28
    3cb0:	cd b7       	in	r28, 0x3d	; 61
    3cb2:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DCMOTOR_PORT,DCMOTOR_PIN1,DIO_LOW);  //A
    3cb4:	83 e0       	ldi	r24, 0x03	; 3
    3cb6:	66 e0       	ldi	r22, 0x06	; 6
    3cb8:	40 e0       	ldi	r20, 0x00	; 0
    3cba:	0e 94 24 12 	call	0x2448	; 0x2448 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DCMOTOR_PORT,DCMOTOR_PIN2,DIO_LOW);  //B
    3cbe:	83 e0       	ldi	r24, 0x03	; 3
    3cc0:	67 e0       	ldi	r22, 0x07	; 7
    3cc2:	40 e0       	ldi	r20, 0x00	; 0
    3cc4:	0e 94 24 12 	call	0x2448	; 0x2448 <DIO_voidSetPinValue>
}
    3cc8:	cf 91       	pop	r28
    3cca:	df 91       	pop	r29
    3ccc:	08 95       	ret

00003cce <APP_voidAppInit>:

extern u16 G_u16PasswordSave;


void APP_voidAppInit()
{
    3cce:	df 93       	push	r29
    3cd0:	cf 93       	push	r28
    3cd2:	cd b7       	in	r28, 0x3d	; 61
    3cd4:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_PORTA, DIO_PIN0, DIO_INPUT);
    3cd6:	80 e0       	ldi	r24, 0x00	; 0
    3cd8:	60 e0       	ldi	r22, 0x00	; 0
    3cda:	40 e0       	ldi	r20, 0x00	; 0
    3cdc:	0e 94 24 11 	call	0x2248	; 0x2248 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTA, DIO_PIN1, DIO_INPUT);
    3ce0:	80 e0       	ldi	r24, 0x00	; 0
    3ce2:	61 e0       	ldi	r22, 0x01	; 1
    3ce4:	40 e0       	ldi	r20, 0x00	; 0
    3ce6:	0e 94 24 11 	call	0x2248	; 0x2248 <DIO_voidSetPinDirection>

	DIO_voidSetPinValue(DIO_PORTA, DIO_PIN0, DIO_HIGH);
    3cea:	80 e0       	ldi	r24, 0x00	; 0
    3cec:	60 e0       	ldi	r22, 0x00	; 0
    3cee:	41 e0       	ldi	r20, 0x01	; 1
    3cf0:	0e 94 24 12 	call	0x2448	; 0x2448 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTA, DIO_PIN1, DIO_HIGH);
    3cf4:	80 e0       	ldi	r24, 0x00	; 0
    3cf6:	61 e0       	ldi	r22, 0x01	; 1
    3cf8:	41 e0       	ldi	r20, 0x01	; 1
    3cfa:	0e 94 24 12 	call	0x2448	; 0x2448 <DIO_voidSetPinValue>

	DIO_voidSetPinDirection(DIO_PORTA, LED_1, DIO_OUTPUT);
    3cfe:	80 e0       	ldi	r24, 0x00	; 0
    3d00:	65 e0       	ldi	r22, 0x05	; 5
    3d02:	41 e0       	ldi	r20, 0x01	; 1
    3d04:	0e 94 24 11 	call	0x2248	; 0x2248 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTA, LED_2, DIO_OUTPUT);
    3d08:	80 e0       	ldi	r24, 0x00	; 0
    3d0a:	66 e0       	ldi	r22, 0x06	; 6
    3d0c:	41 e0       	ldi	r20, 0x01	; 1
    3d0e:	0e 94 24 11 	call	0x2248	; 0x2248 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTA, LED_3, DIO_OUTPUT);
    3d12:	80 e0       	ldi	r24, 0x00	; 0
    3d14:	67 e0       	ldi	r22, 0x07	; 7
    3d16:	41 e0       	ldi	r20, 0x01	; 1
    3d18:	0e 94 24 11 	call	0x2248	; 0x2248 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(DIO_PORTD, FAN_PIN, DIO_OUTPUT);
    3d1c:	83 e0       	ldi	r24, 0x03	; 3
    3d1e:	63 e0       	ldi	r22, 0x03	; 3
    3d20:	41 e0       	ldi	r20, 0x01	; 1
    3d22:	0e 94 24 11 	call	0x2248	; 0x2248 <DIO_voidSetPinDirection>

	TIMER1_voidFPWM();
    3d26:	0e 94 78 15 	call	0x2af0	; 0x2af0 <TIMER1_voidFPWM>

	ADC_voidInit();
    3d2a:	0e 94 a5 14 	call	0x294a	; 0x294a <ADC_voidInit>

    //ADC_voidADCSetCallBack(control);

	ADC_voidADCInt();
    3d2e:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <ADC_voidADCInt>

	//EXTI_voidGIE();

	HKP_voidInit();
    3d32:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <HKP_voidInit>
	LCD_voidInit();
    3d36:	0e 94 07 19 	call	0x320e	; 0x320e <LCD_voidInit>

	DCMOTOR_voidInit();
    3d3a:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <DCMOTOR_voidInit>
}
    3d3e:	cf 91       	pop	r28
    3d40:	df 91       	pop	r29
    3d42:	08 95       	ret

00003d44 <APP_voidAppLocked>:

void APP_voidAppLocked()
{
    3d44:	df 93       	push	r29
    3d46:	cf 93       	push	r28
    3d48:	cd b7       	in	r28, 0x3d	; 61
    3d4a:	de b7       	in	r29, 0x3e	; 62
    3d4c:	2e 97       	sbiw	r28, 0x0e	; 14
    3d4e:	0f b6       	in	r0, 0x3f	; 63
    3d50:	f8 94       	cli
    3d52:	de bf       	out	0x3e, r29	; 62
    3d54:	0f be       	out	0x3f, r0	; 63
    3d56:	cd bf       	out	0x3d, r28	; 61
	DCMOTOR_voidStop();
    3d58:	0e 94 56 1e 	call	0x3cac	; 0x3cac <DCMOTOR_voidStop>
	SERVO_voidSetAngle(0);
    3d5c:	80 e0       	ldi	r24, 0x00	; 0
    3d5e:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <SERVO_voidSetAngle>

	DIO_voidSetPinValue(DIO_PORTD, FAN_PIN, DIO_LOW);
    3d62:	83 e0       	ldi	r24, 0x03	; 3
    3d64:	63 e0       	ldi	r22, 0x03	; 3
    3d66:	40 e0       	ldi	r20, 0x00	; 0
    3d68:	0e 94 24 12 	call	0x2448	; 0x2448 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(DIO_PORTA, LED_1, DIO_LOW);
    3d6c:	80 e0       	ldi	r24, 0x00	; 0
    3d6e:	65 e0       	ldi	r22, 0x05	; 5
    3d70:	40 e0       	ldi	r20, 0x00	; 0
    3d72:	0e 94 24 12 	call	0x2448	; 0x2448 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTA, LED_2, DIO_LOW);
    3d76:	80 e0       	ldi	r24, 0x00	; 0
    3d78:	66 e0       	ldi	r22, 0x06	; 6
    3d7a:	40 e0       	ldi	r20, 0x00	; 0
    3d7c:	0e 94 24 12 	call	0x2448	; 0x2448 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTA, LED_3, DIO_LOW);
    3d80:	80 e0       	ldi	r24, 0x00	; 0
    3d82:	67 e0       	ldi	r22, 0x07	; 7
    3d84:	40 e0       	ldi	r20, 0x00	; 0
    3d86:	0e 94 24 12 	call	0x2448	; 0x2448 <DIO_voidSetPinValue>

	G_u16PasswordSave = 0 ;
    3d8a:	10 92 5b 02 	sts	0x025B, r1
    3d8e:	10 92 5a 02 	sts	0x025A, r1
	G_u8LCDCursor = 0;
    3d92:	10 92 50 02 	sts	0x0250, r1
	G_u8Positioner =  LOCKED;
    3d96:	10 92 51 02 	sts	0x0251, r1
	LCD_voidSendCommand(LCD_CLEAR);
    3d9a:	81 e0       	ldi	r24, 0x01	; 1
    3d9c:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <LCD_voidSendCommand>
    3da0:	80 e0       	ldi	r24, 0x00	; 0
    3da2:	90 e0       	ldi	r25, 0x00	; 0
    3da4:	a0 e0       	ldi	r26, 0x00	; 0
    3da6:	b0 e4       	ldi	r27, 0x40	; 64
    3da8:	8b 87       	std	Y+11, r24	; 0x0b
    3daa:	9c 87       	std	Y+12, r25	; 0x0c
    3dac:	ad 87       	std	Y+13, r26	; 0x0d
    3dae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3db0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3db2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3db4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3db6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3db8:	20 e0       	ldi	r18, 0x00	; 0
    3dba:	30 e0       	ldi	r19, 0x00	; 0
    3dbc:	4a ef       	ldi	r20, 0xFA	; 250
    3dbe:	54 e4       	ldi	r21, 0x44	; 68
    3dc0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    3dc4:	dc 01       	movw	r26, r24
    3dc6:	cb 01       	movw	r24, r22
    3dc8:	8f 83       	std	Y+7, r24	; 0x07
    3dca:	98 87       	std	Y+8, r25	; 0x08
    3dcc:	a9 87       	std	Y+9, r26	; 0x09
    3dce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dd0:	6f 81       	ldd	r22, Y+7	; 0x07
    3dd2:	78 85       	ldd	r23, Y+8	; 0x08
    3dd4:	89 85       	ldd	r24, Y+9	; 0x09
    3dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dd8:	20 e0       	ldi	r18, 0x00	; 0
    3dda:	30 e0       	ldi	r19, 0x00	; 0
    3ddc:	40 e8       	ldi	r20, 0x80	; 128
    3dde:	5f e3       	ldi	r21, 0x3F	; 63
    3de0:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    3de4:	88 23       	and	r24, r24
    3de6:	2c f4       	brge	.+10     	; 0x3df2 <APP_voidAppLocked+0xae>
		__ticks = 1;
    3de8:	81 e0       	ldi	r24, 0x01	; 1
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	9e 83       	std	Y+6, r25	; 0x06
    3dee:	8d 83       	std	Y+5, r24	; 0x05
    3df0:	3f c0       	rjmp	.+126    	; 0x3e70 <APP_voidAppLocked+0x12c>
	else if (__tmp > 65535)
    3df2:	6f 81       	ldd	r22, Y+7	; 0x07
    3df4:	78 85       	ldd	r23, Y+8	; 0x08
    3df6:	89 85       	ldd	r24, Y+9	; 0x09
    3df8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dfa:	20 e0       	ldi	r18, 0x00	; 0
    3dfc:	3f ef       	ldi	r19, 0xFF	; 255
    3dfe:	4f e7       	ldi	r20, 0x7F	; 127
    3e00:	57 e4       	ldi	r21, 0x47	; 71
    3e02:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    3e06:	18 16       	cp	r1, r24
    3e08:	4c f5       	brge	.+82     	; 0x3e5c <APP_voidAppLocked+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e10:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e12:	20 e0       	ldi	r18, 0x00	; 0
    3e14:	30 e0       	ldi	r19, 0x00	; 0
    3e16:	40 e2       	ldi	r20, 0x20	; 32
    3e18:	51 e4       	ldi	r21, 0x41	; 65
    3e1a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    3e1e:	dc 01       	movw	r26, r24
    3e20:	cb 01       	movw	r24, r22
    3e22:	bc 01       	movw	r22, r24
    3e24:	cd 01       	movw	r24, r26
    3e26:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3e2a:	dc 01       	movw	r26, r24
    3e2c:	cb 01       	movw	r24, r22
    3e2e:	9e 83       	std	Y+6, r25	; 0x06
    3e30:	8d 83       	std	Y+5, r24	; 0x05
    3e32:	0f c0       	rjmp	.+30     	; 0x3e52 <APP_voidAppLocked+0x10e>
    3e34:	88 ec       	ldi	r24, 0xC8	; 200
    3e36:	90 e0       	ldi	r25, 0x00	; 0
    3e38:	9c 83       	std	Y+4, r25	; 0x04
    3e3a:	8b 83       	std	Y+3, r24	; 0x03
    3e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e40:	01 97       	sbiw	r24, 0x01	; 1
    3e42:	f1 f7       	brne	.-4      	; 0x3e40 <APP_voidAppLocked+0xfc>
    3e44:	9c 83       	std	Y+4, r25	; 0x04
    3e46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e48:	8d 81       	ldd	r24, Y+5	; 0x05
    3e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e4c:	01 97       	sbiw	r24, 0x01	; 1
    3e4e:	9e 83       	std	Y+6, r25	; 0x06
    3e50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e52:	8d 81       	ldd	r24, Y+5	; 0x05
    3e54:	9e 81       	ldd	r25, Y+6	; 0x06
    3e56:	00 97       	sbiw	r24, 0x00	; 0
    3e58:	69 f7       	brne	.-38     	; 0x3e34 <APP_voidAppLocked+0xf0>
    3e5a:	14 c0       	rjmp	.+40     	; 0x3e84 <APP_voidAppLocked+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e5c:	6f 81       	ldd	r22, Y+7	; 0x07
    3e5e:	78 85       	ldd	r23, Y+8	; 0x08
    3e60:	89 85       	ldd	r24, Y+9	; 0x09
    3e62:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e64:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3e68:	dc 01       	movw	r26, r24
    3e6a:	cb 01       	movw	r24, r22
    3e6c:	9e 83       	std	Y+6, r25	; 0x06
    3e6e:	8d 83       	std	Y+5, r24	; 0x05
    3e70:	8d 81       	ldd	r24, Y+5	; 0x05
    3e72:	9e 81       	ldd	r25, Y+6	; 0x06
    3e74:	9a 83       	std	Y+2, r25	; 0x02
    3e76:	89 83       	std	Y+1, r24	; 0x01
    3e78:	89 81       	ldd	r24, Y+1	; 0x01
    3e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e7c:	01 97       	sbiw	r24, 0x01	; 1
    3e7e:	f1 f7       	brne	.-4      	; 0x3e7c <APP_voidAppLocked+0x138>
    3e80:	9a 83       	std	Y+2, r25	; 0x02
    3e82:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidSetLocation(LCD_U8_LINE1,0);
    3e84:	81 e0       	ldi	r24, 0x01	; 1
    3e86:	60 e0       	ldi	r22, 0x00	; 0
    3e88:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_voidSetLocation>
	LCD_voidSendString("Enter Anything");
    3e8c:	80 e6       	ldi	r24, 0x60	; 96
    3e8e:	90 e0       	ldi	r25, 0x00	; 0
    3e90:	0e 94 3a 1c 	call	0x3874	; 0x3874 <LCD_voidSendString>
	LCD_voidSetLocation(LCD_U8_LINE2,0);
    3e94:	82 e0       	ldi	r24, 0x02	; 2
    3e96:	60 e0       	ldi	r22, 0x00	; 0
    3e98:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_voidSetLocation>
	LCD_voidSendString("to Enter Pass");
    3e9c:	8f e6       	ldi	r24, 0x6F	; 111
    3e9e:	90 e0       	ldi	r25, 0x00	; 0
    3ea0:	0e 94 3a 1c 	call	0x3874	; 0x3874 <LCD_voidSendString>
    3ea4:	04 c0       	rjmp	.+8      	; 0x3eae <APP_voidAppLocked+0x16a>

	while (G_u8HKPReturn == HKP_KEY_NOT_PRESSED)
	{
		G_u8HKPReturn = HKP_u8GetKeyValue();
    3ea6:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <HKP_u8GetKeyValue>
    3eaa:	80 93 55 02 	sts	0x0255, r24
	LCD_voidSetLocation(LCD_U8_LINE1,0);
	LCD_voidSendString("Enter Anything");
	LCD_voidSetLocation(LCD_U8_LINE2,0);
	LCD_voidSendString("to Enter Pass");

	while (G_u8HKPReturn == HKP_KEY_NOT_PRESSED)
    3eae:	80 91 55 02 	lds	r24, 0x0255
    3eb2:	8f 3f       	cpi	r24, 0xFF	; 255
    3eb4:	c1 f3       	breq	.-16     	; 0x3ea6 <APP_voidAppLocked+0x162>
	{
		G_u8HKPReturn = HKP_u8GetKeyValue();
	}
}
    3eb6:	2e 96       	adiw	r28, 0x0e	; 14
    3eb8:	0f b6       	in	r0, 0x3f	; 63
    3eba:	f8 94       	cli
    3ebc:	de bf       	out	0x3e, r29	; 62
    3ebe:	0f be       	out	0x3f, r0	; 63
    3ec0:	cd bf       	out	0x3d, r28	; 61
    3ec2:	cf 91       	pop	r28
    3ec4:	df 91       	pop	r29
    3ec6:	08 95       	ret

00003ec8 <APP_voidAppUnlocked>:

void APP_voidAppUnlocked(void)
{
    3ec8:	df 93       	push	r29
    3eca:	cf 93       	push	r28
    3ecc:	cd b7       	in	r28, 0x3d	; 61
    3ece:	de b7       	in	r29, 0x3e	; 62
    3ed0:	6c 97       	sbiw	r28, 0x1c	; 28
    3ed2:	0f b6       	in	r0, 0x3f	; 63
    3ed4:	f8 94       	cli
    3ed6:	de bf       	out	0x3e, r29	; 62
    3ed8:	0f be       	out	0x3f, r0	; 63
    3eda:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCommand(LCD_CLEAR);
    3edc:	81 e0       	ldi	r24, 0x01	; 1
    3ede:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <LCD_voidSendCommand>
    3ee2:	80 e0       	ldi	r24, 0x00	; 0
    3ee4:	90 e0       	ldi	r25, 0x00	; 0
    3ee6:	a0 e0       	ldi	r26, 0x00	; 0
    3ee8:	b0 e4       	ldi	r27, 0x40	; 64
    3eea:	89 8f       	std	Y+25, r24	; 0x19
    3eec:	9a 8f       	std	Y+26, r25	; 0x1a
    3eee:	ab 8f       	std	Y+27, r26	; 0x1b
    3ef0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ef2:	69 8d       	ldd	r22, Y+25	; 0x19
    3ef4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ef6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ef8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3efa:	20 e0       	ldi	r18, 0x00	; 0
    3efc:	30 e0       	ldi	r19, 0x00	; 0
    3efe:	4a ef       	ldi	r20, 0xFA	; 250
    3f00:	54 e4       	ldi	r21, 0x44	; 68
    3f02:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    3f06:	dc 01       	movw	r26, r24
    3f08:	cb 01       	movw	r24, r22
    3f0a:	8d 8b       	std	Y+21, r24	; 0x15
    3f0c:	9e 8b       	std	Y+22, r25	; 0x16
    3f0e:	af 8b       	std	Y+23, r26	; 0x17
    3f10:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3f12:	6d 89       	ldd	r22, Y+21	; 0x15
    3f14:	7e 89       	ldd	r23, Y+22	; 0x16
    3f16:	8f 89       	ldd	r24, Y+23	; 0x17
    3f18:	98 8d       	ldd	r25, Y+24	; 0x18
    3f1a:	20 e0       	ldi	r18, 0x00	; 0
    3f1c:	30 e0       	ldi	r19, 0x00	; 0
    3f1e:	40 e8       	ldi	r20, 0x80	; 128
    3f20:	5f e3       	ldi	r21, 0x3F	; 63
    3f22:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    3f26:	88 23       	and	r24, r24
    3f28:	2c f4       	brge	.+10     	; 0x3f34 <APP_voidAppUnlocked+0x6c>
		__ticks = 1;
    3f2a:	81 e0       	ldi	r24, 0x01	; 1
    3f2c:	90 e0       	ldi	r25, 0x00	; 0
    3f2e:	9c 8b       	std	Y+20, r25	; 0x14
    3f30:	8b 8b       	std	Y+19, r24	; 0x13
    3f32:	3f c0       	rjmp	.+126    	; 0x3fb2 <APP_voidAppUnlocked+0xea>
	else if (__tmp > 65535)
    3f34:	6d 89       	ldd	r22, Y+21	; 0x15
    3f36:	7e 89       	ldd	r23, Y+22	; 0x16
    3f38:	8f 89       	ldd	r24, Y+23	; 0x17
    3f3a:	98 8d       	ldd	r25, Y+24	; 0x18
    3f3c:	20 e0       	ldi	r18, 0x00	; 0
    3f3e:	3f ef       	ldi	r19, 0xFF	; 255
    3f40:	4f e7       	ldi	r20, 0x7F	; 127
    3f42:	57 e4       	ldi	r21, 0x47	; 71
    3f44:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    3f48:	18 16       	cp	r1, r24
    3f4a:	4c f5       	brge	.+82     	; 0x3f9e <APP_voidAppUnlocked+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f4c:	69 8d       	ldd	r22, Y+25	; 0x19
    3f4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f54:	20 e0       	ldi	r18, 0x00	; 0
    3f56:	30 e0       	ldi	r19, 0x00	; 0
    3f58:	40 e2       	ldi	r20, 0x20	; 32
    3f5a:	51 e4       	ldi	r21, 0x41	; 65
    3f5c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    3f60:	dc 01       	movw	r26, r24
    3f62:	cb 01       	movw	r24, r22
    3f64:	bc 01       	movw	r22, r24
    3f66:	cd 01       	movw	r24, r26
    3f68:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3f6c:	dc 01       	movw	r26, r24
    3f6e:	cb 01       	movw	r24, r22
    3f70:	9c 8b       	std	Y+20, r25	; 0x14
    3f72:	8b 8b       	std	Y+19, r24	; 0x13
    3f74:	0f c0       	rjmp	.+30     	; 0x3f94 <APP_voidAppUnlocked+0xcc>
    3f76:	88 ec       	ldi	r24, 0xC8	; 200
    3f78:	90 e0       	ldi	r25, 0x00	; 0
    3f7a:	9a 8b       	std	Y+18, r25	; 0x12
    3f7c:	89 8b       	std	Y+17, r24	; 0x11
    3f7e:	89 89       	ldd	r24, Y+17	; 0x11
    3f80:	9a 89       	ldd	r25, Y+18	; 0x12
    3f82:	01 97       	sbiw	r24, 0x01	; 1
    3f84:	f1 f7       	brne	.-4      	; 0x3f82 <APP_voidAppUnlocked+0xba>
    3f86:	9a 8b       	std	Y+18, r25	; 0x12
    3f88:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f8a:	8b 89       	ldd	r24, Y+19	; 0x13
    3f8c:	9c 89       	ldd	r25, Y+20	; 0x14
    3f8e:	01 97       	sbiw	r24, 0x01	; 1
    3f90:	9c 8b       	std	Y+20, r25	; 0x14
    3f92:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f94:	8b 89       	ldd	r24, Y+19	; 0x13
    3f96:	9c 89       	ldd	r25, Y+20	; 0x14
    3f98:	00 97       	sbiw	r24, 0x00	; 0
    3f9a:	69 f7       	brne	.-38     	; 0x3f76 <APP_voidAppUnlocked+0xae>
    3f9c:	14 c0       	rjmp	.+40     	; 0x3fc6 <APP_voidAppUnlocked+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f9e:	6d 89       	ldd	r22, Y+21	; 0x15
    3fa0:	7e 89       	ldd	r23, Y+22	; 0x16
    3fa2:	8f 89       	ldd	r24, Y+23	; 0x17
    3fa4:	98 8d       	ldd	r25, Y+24	; 0x18
    3fa6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3faa:	dc 01       	movw	r26, r24
    3fac:	cb 01       	movw	r24, r22
    3fae:	9c 8b       	std	Y+20, r25	; 0x14
    3fb0:	8b 8b       	std	Y+19, r24	; 0x13
    3fb2:	8b 89       	ldd	r24, Y+19	; 0x13
    3fb4:	9c 89       	ldd	r25, Y+20	; 0x14
    3fb6:	98 8b       	std	Y+16, r25	; 0x10
    3fb8:	8f 87       	std	Y+15, r24	; 0x0f
    3fba:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fbc:	98 89       	ldd	r25, Y+16	; 0x10
    3fbe:	01 97       	sbiw	r24, 0x01	; 1
    3fc0:	f1 f7       	brne	.-4      	; 0x3fbe <APP_voidAppUnlocked+0xf6>
    3fc2:	98 8b       	std	Y+16, r25	; 0x10
    3fc4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_voidSetLocation(LCD_U8_LINE1,0);
    3fc6:	81 e0       	ldi	r24, 0x01	; 1
    3fc8:	60 e0       	ldi	r22, 0x00	; 0
    3fca:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_voidSetLocation>
	LCD_voidSendString("Door Opened");
    3fce:	8d e7       	ldi	r24, 0x7D	; 125
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	0e 94 3a 1c 	call	0x3874	; 0x3874 <LCD_voidSendString>

	SERVO_voidSetAngle(90);
    3fd6:	8a e5       	ldi	r24, 0x5A	; 90
    3fd8:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <SERVO_voidSetAngle>
	G_u16PasswordSave = 0 ;
    3fdc:	10 92 5b 02 	sts	0x025B, r1
    3fe0:	10 92 5a 02 	sts	0x025A, r1
	G_u8LCDCursor = 0;
    3fe4:	10 92 50 02 	sts	0x0250, r1
	G_u8Counter = 0;
    3fe8:	10 92 58 02 	sts	0x0258, r1
    3fec:	10 92 57 02 	sts	0x0257, r1
	G_u8Positioner = UNLOCKED;
    3ff0:	81 e0       	ldi	r24, 0x01	; 1
    3ff2:	80 93 51 02 	sts	0x0251, r24

	LCD_voidSetLocation(LCD_U8_LINE2,0);
    3ff6:	82 e0       	ldi	r24, 0x02	; 2
    3ff8:	60 e0       	ldi	r22, 0x00	; 0
    3ffa:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_voidSetLocation>
	LCD_voidSendString("Press C to exit");
    3ffe:	89 e8       	ldi	r24, 0x89	; 137
    4000:	90 e0       	ldi	r25, 0x00	; 0
    4002:	0e 94 3a 1c 	call	0x3874	; 0x3874 <LCD_voidSendString>
	LCD_voidSendNumber(G_u8Positioner);
    4006:	80 91 51 02 	lds	r24, 0x0251
    400a:	88 2f       	mov	r24, r24
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	a0 e0       	ldi	r26, 0x00	; 0
    4010:	b0 e0       	ldi	r27, 0x00	; 0
    4012:	bc 01       	movw	r22, r24
    4014:	cd 01       	movw	r24, r26
    4016:	0e 94 8b 1c 	call	0x3916	; 0x3916 <LCD_voidSendNumber>
    401a:	80 e0       	ldi	r24, 0x00	; 0
    401c:	90 e0       	ldi	r25, 0x00	; 0
    401e:	aa e7       	ldi	r26, 0x7A	; 122
    4020:	b4 e4       	ldi	r27, 0x44	; 68
    4022:	8b 87       	std	Y+11, r24	; 0x0b
    4024:	9c 87       	std	Y+12, r25	; 0x0c
    4026:	ad 87       	std	Y+13, r26	; 0x0d
    4028:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    402a:	6b 85       	ldd	r22, Y+11	; 0x0b
    402c:	7c 85       	ldd	r23, Y+12	; 0x0c
    402e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4030:	9e 85       	ldd	r25, Y+14	; 0x0e
    4032:	20 e0       	ldi	r18, 0x00	; 0
    4034:	30 e0       	ldi	r19, 0x00	; 0
    4036:	4a ef       	ldi	r20, 0xFA	; 250
    4038:	54 e4       	ldi	r21, 0x44	; 68
    403a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    403e:	dc 01       	movw	r26, r24
    4040:	cb 01       	movw	r24, r22
    4042:	8f 83       	std	Y+7, r24	; 0x07
    4044:	98 87       	std	Y+8, r25	; 0x08
    4046:	a9 87       	std	Y+9, r26	; 0x09
    4048:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    404a:	6f 81       	ldd	r22, Y+7	; 0x07
    404c:	78 85       	ldd	r23, Y+8	; 0x08
    404e:	89 85       	ldd	r24, Y+9	; 0x09
    4050:	9a 85       	ldd	r25, Y+10	; 0x0a
    4052:	20 e0       	ldi	r18, 0x00	; 0
    4054:	30 e0       	ldi	r19, 0x00	; 0
    4056:	40 e8       	ldi	r20, 0x80	; 128
    4058:	5f e3       	ldi	r21, 0x3F	; 63
    405a:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    405e:	88 23       	and	r24, r24
    4060:	2c f4       	brge	.+10     	; 0x406c <APP_voidAppUnlocked+0x1a4>
		__ticks = 1;
    4062:	81 e0       	ldi	r24, 0x01	; 1
    4064:	90 e0       	ldi	r25, 0x00	; 0
    4066:	9e 83       	std	Y+6, r25	; 0x06
    4068:	8d 83       	std	Y+5, r24	; 0x05
    406a:	3f c0       	rjmp	.+126    	; 0x40ea <APP_voidAppUnlocked+0x222>
	else if (__tmp > 65535)
    406c:	6f 81       	ldd	r22, Y+7	; 0x07
    406e:	78 85       	ldd	r23, Y+8	; 0x08
    4070:	89 85       	ldd	r24, Y+9	; 0x09
    4072:	9a 85       	ldd	r25, Y+10	; 0x0a
    4074:	20 e0       	ldi	r18, 0x00	; 0
    4076:	3f ef       	ldi	r19, 0xFF	; 255
    4078:	4f e7       	ldi	r20, 0x7F	; 127
    407a:	57 e4       	ldi	r21, 0x47	; 71
    407c:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    4080:	18 16       	cp	r1, r24
    4082:	4c f5       	brge	.+82     	; 0x40d6 <APP_voidAppUnlocked+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4084:	6b 85       	ldd	r22, Y+11	; 0x0b
    4086:	7c 85       	ldd	r23, Y+12	; 0x0c
    4088:	8d 85       	ldd	r24, Y+13	; 0x0d
    408a:	9e 85       	ldd	r25, Y+14	; 0x0e
    408c:	20 e0       	ldi	r18, 0x00	; 0
    408e:	30 e0       	ldi	r19, 0x00	; 0
    4090:	40 e2       	ldi	r20, 0x20	; 32
    4092:	51 e4       	ldi	r21, 0x41	; 65
    4094:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4098:	dc 01       	movw	r26, r24
    409a:	cb 01       	movw	r24, r22
    409c:	bc 01       	movw	r22, r24
    409e:	cd 01       	movw	r24, r26
    40a0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    40a4:	dc 01       	movw	r26, r24
    40a6:	cb 01       	movw	r24, r22
    40a8:	9e 83       	std	Y+6, r25	; 0x06
    40aa:	8d 83       	std	Y+5, r24	; 0x05
    40ac:	0f c0       	rjmp	.+30     	; 0x40cc <APP_voidAppUnlocked+0x204>
    40ae:	88 ec       	ldi	r24, 0xC8	; 200
    40b0:	90 e0       	ldi	r25, 0x00	; 0
    40b2:	9c 83       	std	Y+4, r25	; 0x04
    40b4:	8b 83       	std	Y+3, r24	; 0x03
    40b6:	8b 81       	ldd	r24, Y+3	; 0x03
    40b8:	9c 81       	ldd	r25, Y+4	; 0x04
    40ba:	01 97       	sbiw	r24, 0x01	; 1
    40bc:	f1 f7       	brne	.-4      	; 0x40ba <APP_voidAppUnlocked+0x1f2>
    40be:	9c 83       	std	Y+4, r25	; 0x04
    40c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40c2:	8d 81       	ldd	r24, Y+5	; 0x05
    40c4:	9e 81       	ldd	r25, Y+6	; 0x06
    40c6:	01 97       	sbiw	r24, 0x01	; 1
    40c8:	9e 83       	std	Y+6, r25	; 0x06
    40ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40cc:	8d 81       	ldd	r24, Y+5	; 0x05
    40ce:	9e 81       	ldd	r25, Y+6	; 0x06
    40d0:	00 97       	sbiw	r24, 0x00	; 0
    40d2:	69 f7       	brne	.-38     	; 0x40ae <APP_voidAppUnlocked+0x1e6>
    40d4:	14 c0       	rjmp	.+40     	; 0x40fe <APP_voidAppUnlocked+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40d6:	6f 81       	ldd	r22, Y+7	; 0x07
    40d8:	78 85       	ldd	r23, Y+8	; 0x08
    40da:	89 85       	ldd	r24, Y+9	; 0x09
    40dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    40de:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    40e2:	dc 01       	movw	r26, r24
    40e4:	cb 01       	movw	r24, r22
    40e6:	9e 83       	std	Y+6, r25	; 0x06
    40e8:	8d 83       	std	Y+5, r24	; 0x05
    40ea:	8d 81       	ldd	r24, Y+5	; 0x05
    40ec:	9e 81       	ldd	r25, Y+6	; 0x06
    40ee:	9a 83       	std	Y+2, r25	; 0x02
    40f0:	89 83       	std	Y+1, r24	; 0x01
    40f2:	89 81       	ldd	r24, Y+1	; 0x01
    40f4:	9a 81       	ldd	r25, Y+2	; 0x02
    40f6:	01 97       	sbiw	r24, 0x01	; 1
    40f8:	f1 f7       	brne	.-4      	; 0x40f6 <APP_voidAppUnlocked+0x22e>
    40fa:	9a 83       	std	Y+2, r25	; 0x02
    40fc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_voidSetLocation(LCD_U8_LINE1,0);
    40fe:	81 e0       	ldi	r24, 0x01	; 1
    4100:	60 e0       	ldi	r22, 0x00	; 0
    4102:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_voidSetLocation>
	LCD_voidSendString("Welcome, Sir.");
    4106:	89 e9       	ldi	r24, 0x99	; 153
    4108:	90 e0       	ldi	r25, 0x00	; 0
    410a:	0e 94 3a 1c 	call	0x3874	; 0x3874 <LCD_voidSendString>
}
    410e:	6c 96       	adiw	r28, 0x1c	; 28
    4110:	0f b6       	in	r0, 0x3f	; 63
    4112:	f8 94       	cli
    4114:	de bf       	out	0x3e, r29	; 62
    4116:	0f be       	out	0x3f, r0	; 63
    4118:	cd bf       	out	0x3d, r28	; 61
    411a:	cf 91       	pop	r28
    411c:	df 91       	pop	r29
    411e:	08 95       	ret

00004120 <APP_voidTakePassword>:


void APP_voidTakePassword(void)
{
    4120:	df 93       	push	r29
    4122:	cf 93       	push	r28
    4124:	cd b7       	in	r28, 0x3d	; 61
    4126:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSetLocation(LCD_U8_LINE2, G_u8LCDCursor);
    4128:	90 91 50 02 	lds	r25, 0x0250
    412c:	82 e0       	ldi	r24, 0x02	; 2
    412e:	69 2f       	mov	r22, r25
    4130:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_voidSetLocation>
	LCD_voidSendChar(48 + G_u8HKPReturn);
    4134:	80 91 55 02 	lds	r24, 0x0255
    4138:	80 5d       	subi	r24, 0xD0	; 208
    413a:	0e 94 9c 1b 	call	0x3738	; 0x3738 <LCD_voidSendChar>
	G_u16PasswordSave = (G_u16PasswordSave*10) + G_u8HKPReturn;
    413e:	80 91 5a 02 	lds	r24, 0x025A
    4142:	90 91 5b 02 	lds	r25, 0x025B
    4146:	9c 01       	movw	r18, r24
    4148:	22 0f       	add	r18, r18
    414a:	33 1f       	adc	r19, r19
    414c:	c9 01       	movw	r24, r18
    414e:	88 0f       	add	r24, r24
    4150:	99 1f       	adc	r25, r25
    4152:	88 0f       	add	r24, r24
    4154:	99 1f       	adc	r25, r25
    4156:	28 0f       	add	r18, r24
    4158:	39 1f       	adc	r19, r25
    415a:	80 91 55 02 	lds	r24, 0x0255
    415e:	88 2f       	mov	r24, r24
    4160:	90 e0       	ldi	r25, 0x00	; 0
    4162:	82 0f       	add	r24, r18
    4164:	93 1f       	adc	r25, r19
    4166:	90 93 5b 02 	sts	0x025B, r25
    416a:	80 93 5a 02 	sts	0x025A, r24
	G_u8LCDCursor ++;
    416e:	80 91 50 02 	lds	r24, 0x0250
    4172:	8f 5f       	subi	r24, 0xFF	; 255
    4174:	80 93 50 02 	sts	0x0250, r24
}
    4178:	cf 91       	pop	r28
    417a:	df 91       	pop	r29
    417c:	08 95       	ret

0000417e <APP_ControlMotor>:


void APP_ControlMotor(void)
{
    417e:	df 93       	push	r29
    4180:	cf 93       	push	r28
    4182:	cd b7       	in	r28, 0x3d	; 61
    4184:	de b7       	in	r29, 0x3e	; 62
	if (G_u8Positioner == UNLOCKED)
    4186:	80 91 51 02 	lds	r24, 0x0251
    418a:	81 30       	cpi	r24, 0x01	; 1
    418c:	09 f0       	breq	.+2      	; 0x4190 <APP_ControlMotor+0x12>
    418e:	53 c0       	rjmp	.+166    	; 0x4236 <APP_ControlMotor+0xb8>
	{
		if ( (!DIO_u8GetPinValue(DIO_PORTA,DIO_PIN0)) && (!DIO_u8GetPinValue(DIO_PORTA,DIO_PIN1)) )
    4190:	80 e0       	ldi	r24, 0x00	; 0
    4192:	60 e0       	ldi	r22, 0x00	; 0
    4194:	0e 94 24 13 	call	0x2648	; 0x2648 <DIO_u8GetPinValue>
    4198:	88 23       	and	r24, r24
    419a:	79 f4       	brne	.+30     	; 0x41ba <APP_ControlMotor+0x3c>
    419c:	80 e0       	ldi	r24, 0x00	; 0
    419e:	61 e0       	ldi	r22, 0x01	; 1
    41a0:	0e 94 24 13 	call	0x2648	; 0x2648 <DIO_u8GetPinValue>
    41a4:	88 23       	and	r24, r24
    41a6:	49 f4       	brne	.+18     	; 0x41ba <APP_ControlMotor+0x3c>
		{
			G_u8MotorState = MOTOR_ERROR;
    41a8:	86 e0       	ldi	r24, 0x06	; 6
    41aa:	90 e0       	ldi	r25, 0x00	; 0
    41ac:	90 93 59 02 	sts	0x0259, r25
    41b0:	80 93 58 02 	sts	0x0258, r24
			DCMOTOR_voidStop();
    41b4:	0e 94 56 1e 	call	0x3cac	; 0x3cac <DCMOTOR_voidStop>
    41b8:	3e c0       	rjmp	.+124    	; 0x4236 <APP_ControlMotor+0xb8>
		}

		else if (DIO_u8GetPinValue(DIO_PORTA,DIO_PIN0) && (!DIO_u8GetPinValue(DIO_PORTA,DIO_PIN1)) )
    41ba:	80 e0       	ldi	r24, 0x00	; 0
    41bc:	60 e0       	ldi	r22, 0x00	; 0
    41be:	0e 94 24 13 	call	0x2648	; 0x2648 <DIO_u8GetPinValue>
    41c2:	88 23       	and	r24, r24
    41c4:	79 f0       	breq	.+30     	; 0x41e4 <APP_ControlMotor+0x66>
    41c6:	80 e0       	ldi	r24, 0x00	; 0
    41c8:	61 e0       	ldi	r22, 0x01	; 1
    41ca:	0e 94 24 13 	call	0x2648	; 0x2648 <DIO_u8GetPinValue>
    41ce:	88 23       	and	r24, r24
    41d0:	49 f4       	brne	.+18     	; 0x41e4 <APP_ControlMotor+0x66>
		{
			G_u8MotorState = MOTOR_CW;
    41d2:	83 e0       	ldi	r24, 0x03	; 3
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	90 93 59 02 	sts	0x0259, r25
    41da:	80 93 58 02 	sts	0x0258, r24
			DCMOTOR_voidRotateCW();
    41de:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <DCMOTOR_voidRotateCW>
    41e2:	29 c0       	rjmp	.+82     	; 0x4236 <APP_ControlMotor+0xb8>
		}

		else if (DIO_u8GetPinValue(DIO_PORTA,DIO_PIN1) && (!DIO_u8GetPinValue(DIO_PORTA,DIO_PIN0)) )
    41e4:	80 e0       	ldi	r24, 0x00	; 0
    41e6:	61 e0       	ldi	r22, 0x01	; 1
    41e8:	0e 94 24 13 	call	0x2648	; 0x2648 <DIO_u8GetPinValue>
    41ec:	88 23       	and	r24, r24
    41ee:	79 f0       	breq	.+30     	; 0x420e <APP_ControlMotor+0x90>
    41f0:	80 e0       	ldi	r24, 0x00	; 0
    41f2:	60 e0       	ldi	r22, 0x00	; 0
    41f4:	0e 94 24 13 	call	0x2648	; 0x2648 <DIO_u8GetPinValue>
    41f8:	88 23       	and	r24, r24
    41fa:	49 f4       	brne	.+18     	; 0x420e <APP_ControlMotor+0x90>
		{
			G_u8MotorState = MOTOR_CCW;
    41fc:	84 e0       	ldi	r24, 0x04	; 4
    41fe:	90 e0       	ldi	r25, 0x00	; 0
    4200:	90 93 59 02 	sts	0x0259, r25
    4204:	80 93 58 02 	sts	0x0258, r24
			DCMOTOR_voidRotateCCW();
    4208:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <DCMOTOR_voidRotateCCW>
    420c:	14 c0       	rjmp	.+40     	; 0x4236 <APP_ControlMotor+0xb8>
		}

		else if ( (DIO_u8GetPinValue(DIO_PORTA,DIO_PIN0)) && (DIO_u8GetPinValue(DIO_PORTA,DIO_PIN1)) )
    420e:	80 e0       	ldi	r24, 0x00	; 0
    4210:	60 e0       	ldi	r22, 0x00	; 0
    4212:	0e 94 24 13 	call	0x2648	; 0x2648 <DIO_u8GetPinValue>
    4216:	88 23       	and	r24, r24
    4218:	71 f0       	breq	.+28     	; 0x4236 <APP_ControlMotor+0xb8>
    421a:	80 e0       	ldi	r24, 0x00	; 0
    421c:	61 e0       	ldi	r22, 0x01	; 1
    421e:	0e 94 24 13 	call	0x2648	; 0x2648 <DIO_u8GetPinValue>
    4222:	88 23       	and	r24, r24
    4224:	41 f0       	breq	.+16     	; 0x4236 <APP_ControlMotor+0xb8>
		{
			G_u8MotorState = MOTOR_STOP;
    4226:	85 e0       	ldi	r24, 0x05	; 5
    4228:	90 e0       	ldi	r25, 0x00	; 0
    422a:	90 93 59 02 	sts	0x0259, r25
    422e:	80 93 58 02 	sts	0x0258, r24
			DCMOTOR_voidStop();
    4232:	0e 94 56 1e 	call	0x3cac	; 0x3cac <DCMOTOR_voidStop>
		}
	}
}
    4236:	cf 91       	pop	r28
    4238:	df 91       	pop	r29
    423a:	08 95       	ret

0000423c <APP_ReadSensors>:



void APP_ReadSensors(void)
{
    423c:	df 93       	push	r29
    423e:	cf 93       	push	r28
    4240:	cd b7       	in	r28, 0x3d	; 61
    4242:	de b7       	in	r29, 0x3e	; 62
	if (G_u8Positioner == UNLOCKED)
    4244:	80 91 51 02 	lds	r24, 0x0251
    4248:	81 30       	cpi	r24, 0x01	; 1
    424a:	71 f4       	brne	.+28     	; 0x4268 <APP_ReadSensors+0x2c>
	{
		G_u8Temperature = LM35_TempSensor_u8ReadTemp();
    424c:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <LM35_TempSensor_u8ReadTemp>
    4250:	88 2f       	mov	r24, r24
    4252:	90 e0       	ldi	r25, 0x00	; 0
    4254:	90 93 57 02 	sts	0x0257, r25
    4258:	80 93 56 02 	sts	0x0256, r24

		G_u16Intensity	= LDR_readint();
    425c:	0e 94 21 16 	call	0x2c42	; 0x2c42 <LDR_readint>
    4260:	90 93 54 02 	sts	0x0254, r25
    4264:	80 93 53 02 	sts	0x0253, r24
	}
}
    4268:	cf 91       	pop	r28
    426a:	df 91       	pop	r29
    426c:	08 95       	ret

0000426e <APP_Control>:

void APP_Control(void)
{
    426e:	df 93       	push	r29
    4270:	cf 93       	push	r28
    4272:	cd b7       	in	r28, 0x3d	; 61
    4274:	de b7       	in	r29, 0x3e	; 62
	if (G_u8Positioner == UNLOCKED)
    4276:	80 91 51 02 	lds	r24, 0x0251
    427a:	81 30       	cpi	r24, 0x01	; 1
    427c:	c9 f5       	brne	.+114    	; 0x42f0 <APP_Control+0x82>
	{
		if (G_u8Temperature > 30)
    427e:	80 91 56 02 	lds	r24, 0x0256
    4282:	90 91 57 02 	lds	r25, 0x0257
    4286:	8f 31       	cpi	r24, 0x1F	; 31
    4288:	91 05       	cpc	r25, r1
    428a:	34 f0       	brlt	.+12     	; 0x4298 <APP_Control+0x2a>
		{
			DIO_voidSetPinValue(DIO_PORTD, FAN_PIN, DIO_HIGH);
    428c:	83 e0       	ldi	r24, 0x03	; 3
    428e:	63 e0       	ldi	r22, 0x03	; 3
    4290:	41 e0       	ldi	r20, 0x01	; 1
    4292:	0e 94 24 12 	call	0x2448	; 0x2448 <DIO_voidSetPinValue>
    4296:	05 c0       	rjmp	.+10     	; 0x42a2 <APP_Control+0x34>
		}
		else
		{
			DIO_voidSetPinValue(DIO_PORTD, FAN_PIN, DIO_LOW);
    4298:	83 e0       	ldi	r24, 0x03	; 3
    429a:	63 e0       	ldi	r22, 0x03	; 3
    429c:	40 e0       	ldi	r20, 0x00	; 0
    429e:	0e 94 24 12 	call	0x2448	; 0x2448 <DIO_voidSetPinValue>
		}

		if (G_u16Intensity > 600)
    42a2:	80 91 53 02 	lds	r24, 0x0253
    42a6:	90 91 54 02 	lds	r25, 0x0254
    42aa:	22 e0       	ldi	r18, 0x02	; 2
    42ac:	89 35       	cpi	r24, 0x59	; 89
    42ae:	92 07       	cpc	r25, r18
    42b0:	84 f0       	brlt	.+32     	; 0x42d2 <APP_Control+0x64>
		{
			DIO_voidSetPinValue(DIO_PORTA, LED_1, DIO_HIGH);
    42b2:	80 e0       	ldi	r24, 0x00	; 0
    42b4:	65 e0       	ldi	r22, 0x05	; 5
    42b6:	41 e0       	ldi	r20, 0x01	; 1
    42b8:	0e 94 24 12 	call	0x2448	; 0x2448 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTA, LED_2, DIO_HIGH);
    42bc:	80 e0       	ldi	r24, 0x00	; 0
    42be:	66 e0       	ldi	r22, 0x06	; 6
    42c0:	41 e0       	ldi	r20, 0x01	; 1
    42c2:	0e 94 24 12 	call	0x2448	; 0x2448 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTA, LED_3, DIO_HIGH);
    42c6:	80 e0       	ldi	r24, 0x00	; 0
    42c8:	67 e0       	ldi	r22, 0x07	; 7
    42ca:	41 e0       	ldi	r20, 0x01	; 1
    42cc:	0e 94 24 12 	call	0x2448	; 0x2448 <DIO_voidSetPinValue>
    42d0:	0f c0       	rjmp	.+30     	; 0x42f0 <APP_Control+0x82>

		}
		else
		{
			DIO_voidSetPinValue(DIO_PORTA, LED_1, DIO_LOW);
    42d2:	80 e0       	ldi	r24, 0x00	; 0
    42d4:	65 e0       	ldi	r22, 0x05	; 5
    42d6:	40 e0       	ldi	r20, 0x00	; 0
    42d8:	0e 94 24 12 	call	0x2448	; 0x2448 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTA, LED_2, DIO_LOW);
    42dc:	80 e0       	ldi	r24, 0x00	; 0
    42de:	66 e0       	ldi	r22, 0x06	; 6
    42e0:	40 e0       	ldi	r20, 0x00	; 0
    42e2:	0e 94 24 12 	call	0x2448	; 0x2448 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTA, LED_3, DIO_LOW);
    42e6:	80 e0       	ldi	r24, 0x00	; 0
    42e8:	67 e0       	ldi	r22, 0x07	; 7
    42ea:	40 e0       	ldi	r20, 0x00	; 0
    42ec:	0e 94 24 12 	call	0x2448	; 0x2448 <DIO_voidSetPinValue>
		}
	}
}
    42f0:	cf 91       	pop	r28
    42f2:	df 91       	pop	r29
    42f4:	08 95       	ret

000042f6 <main>:
u16 G_u16PasswordSave,  G_u16Intensity;



int main ()
{
    42f6:	df 93       	push	r29
    42f8:	cf 93       	push	r28
    42fa:	cd b7       	in	r28, 0x3d	; 61
    42fc:	de b7       	in	r29, 0x3e	; 62
    42fe:	aa 97       	sbiw	r28, 0x2a	; 42
    4300:	0f b6       	in	r0, 0x3f	; 63
    4302:	f8 94       	cli
    4304:	de bf       	out	0x3e, r29	; 62
    4306:	0f be       	out	0x3f, r0	; 63
    4308:	cd bf       	out	0x3d, r28	; 61
    G_u16PasswordSave = 0;
    430a:	10 92 5b 02 	sts	0x025B, r1
    430e:	10 92 5a 02 	sts	0x025A, r1
    G_u8HKPReturn = HKP_KEY_NOT_PRESSED , G_u8Positioner =  LOCKED ;
    4312:	8f ef       	ldi	r24, 0xFF	; 255
    4314:	80 93 55 02 	sts	0x0255, r24
    4318:	10 92 51 02 	sts	0x0251, r1
    G_u8LCDCursor = 0;
    431c:	10 92 50 02 	sts	0x0250, r1
    APP_voidAppInit();
    4320:	0e 94 67 1e 	call	0x3cce	; 0x3cce <APP_voidAppInit>

    while(1)
    {
    		APP_voidAppLocked();
    4324:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <APP_voidAppLocked>

    		if (G_u8HKPReturn !=HKP_KEY_NOT_PRESSED)
    4328:	80 91 55 02 	lds	r24, 0x0255
    432c:	8f 3f       	cpi	r24, 0xFF	; 255
    432e:	d1 f3       	breq	.-12     	; 0x4324 <main+0x2e>
    		{
    			G_u8Positioner = PASSWORD;
    4330:	82 e0       	ldi	r24, 0x02	; 2
    4332:	80 93 51 02 	sts	0x0251, r24
    			LCD_voidSendCommand(LCD_CLEAR);
    4336:	81 e0       	ldi	r24, 0x01	; 1
    4338:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <LCD_voidSendCommand>
    433c:	80 e0       	ldi	r24, 0x00	; 0
    433e:	90 e0       	ldi	r25, 0x00	; 0
    4340:	a0 e0       	ldi	r26, 0x00	; 0
    4342:	b0 e4       	ldi	r27, 0x40	; 64
    4344:	8f a3       	std	Y+39, r24	; 0x27
    4346:	98 a7       	std	Y+40, r25	; 0x28
    4348:	a9 a7       	std	Y+41, r26	; 0x29
    434a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    434c:	6f a1       	ldd	r22, Y+39	; 0x27
    434e:	78 a5       	ldd	r23, Y+40	; 0x28
    4350:	89 a5       	ldd	r24, Y+41	; 0x29
    4352:	9a a5       	ldd	r25, Y+42	; 0x2a
    4354:	20 e0       	ldi	r18, 0x00	; 0
    4356:	30 e0       	ldi	r19, 0x00	; 0
    4358:	4a ef       	ldi	r20, 0xFA	; 250
    435a:	54 e4       	ldi	r21, 0x44	; 68
    435c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4360:	dc 01       	movw	r26, r24
    4362:	cb 01       	movw	r24, r22
    4364:	8b a3       	std	Y+35, r24	; 0x23
    4366:	9c a3       	std	Y+36, r25	; 0x24
    4368:	ad a3       	std	Y+37, r26	; 0x25
    436a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    436c:	6b a1       	ldd	r22, Y+35	; 0x23
    436e:	7c a1       	ldd	r23, Y+36	; 0x24
    4370:	8d a1       	ldd	r24, Y+37	; 0x25
    4372:	9e a1       	ldd	r25, Y+38	; 0x26
    4374:	20 e0       	ldi	r18, 0x00	; 0
    4376:	30 e0       	ldi	r19, 0x00	; 0
    4378:	40 e8       	ldi	r20, 0x80	; 128
    437a:	5f e3       	ldi	r21, 0x3F	; 63
    437c:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    4380:	88 23       	and	r24, r24
    4382:	2c f4       	brge	.+10     	; 0x438e <main+0x98>
		__ticks = 1;
    4384:	81 e0       	ldi	r24, 0x01	; 1
    4386:	90 e0       	ldi	r25, 0x00	; 0
    4388:	9a a3       	std	Y+34, r25	; 0x22
    438a:	89 a3       	std	Y+33, r24	; 0x21
    438c:	3f c0       	rjmp	.+126    	; 0x440c <main+0x116>
	else if (__tmp > 65535)
    438e:	6b a1       	ldd	r22, Y+35	; 0x23
    4390:	7c a1       	ldd	r23, Y+36	; 0x24
    4392:	8d a1       	ldd	r24, Y+37	; 0x25
    4394:	9e a1       	ldd	r25, Y+38	; 0x26
    4396:	20 e0       	ldi	r18, 0x00	; 0
    4398:	3f ef       	ldi	r19, 0xFF	; 255
    439a:	4f e7       	ldi	r20, 0x7F	; 127
    439c:	57 e4       	ldi	r21, 0x47	; 71
    439e:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    43a2:	18 16       	cp	r1, r24
    43a4:	4c f5       	brge	.+82     	; 0x43f8 <main+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43a6:	6f a1       	ldd	r22, Y+39	; 0x27
    43a8:	78 a5       	ldd	r23, Y+40	; 0x28
    43aa:	89 a5       	ldd	r24, Y+41	; 0x29
    43ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    43ae:	20 e0       	ldi	r18, 0x00	; 0
    43b0:	30 e0       	ldi	r19, 0x00	; 0
    43b2:	40 e2       	ldi	r20, 0x20	; 32
    43b4:	51 e4       	ldi	r21, 0x41	; 65
    43b6:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    43ba:	dc 01       	movw	r26, r24
    43bc:	cb 01       	movw	r24, r22
    43be:	bc 01       	movw	r22, r24
    43c0:	cd 01       	movw	r24, r26
    43c2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    43c6:	dc 01       	movw	r26, r24
    43c8:	cb 01       	movw	r24, r22
    43ca:	9a a3       	std	Y+34, r25	; 0x22
    43cc:	89 a3       	std	Y+33, r24	; 0x21
    43ce:	0f c0       	rjmp	.+30     	; 0x43ee <main+0xf8>
    43d0:	88 ec       	ldi	r24, 0xC8	; 200
    43d2:	90 e0       	ldi	r25, 0x00	; 0
    43d4:	98 a3       	std	Y+32, r25	; 0x20
    43d6:	8f 8f       	std	Y+31, r24	; 0x1f
    43d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    43da:	98 a1       	ldd	r25, Y+32	; 0x20
    43dc:	01 97       	sbiw	r24, 0x01	; 1
    43de:	f1 f7       	brne	.-4      	; 0x43dc <main+0xe6>
    43e0:	98 a3       	std	Y+32, r25	; 0x20
    43e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43e4:	89 a1       	ldd	r24, Y+33	; 0x21
    43e6:	9a a1       	ldd	r25, Y+34	; 0x22
    43e8:	01 97       	sbiw	r24, 0x01	; 1
    43ea:	9a a3       	std	Y+34, r25	; 0x22
    43ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43ee:	89 a1       	ldd	r24, Y+33	; 0x21
    43f0:	9a a1       	ldd	r25, Y+34	; 0x22
    43f2:	00 97       	sbiw	r24, 0x00	; 0
    43f4:	69 f7       	brne	.-38     	; 0x43d0 <main+0xda>
    43f6:	14 c0       	rjmp	.+40     	; 0x4420 <main+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43f8:	6b a1       	ldd	r22, Y+35	; 0x23
    43fa:	7c a1       	ldd	r23, Y+36	; 0x24
    43fc:	8d a1       	ldd	r24, Y+37	; 0x25
    43fe:	9e a1       	ldd	r25, Y+38	; 0x26
    4400:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4404:	dc 01       	movw	r26, r24
    4406:	cb 01       	movw	r24, r22
    4408:	9a a3       	std	Y+34, r25	; 0x22
    440a:	89 a3       	std	Y+33, r24	; 0x21
    440c:	89 a1       	ldd	r24, Y+33	; 0x21
    440e:	9a a1       	ldd	r25, Y+34	; 0x22
    4410:	9e 8f       	std	Y+30, r25	; 0x1e
    4412:	8d 8f       	std	Y+29, r24	; 0x1d
    4414:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4416:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4418:	01 97       	sbiw	r24, 0x01	; 1
    441a:	f1 f7       	brne	.-4      	; 0x4418 <main+0x122>
    441c:	9e 8f       	std	Y+30, r25	; 0x1e
    441e:	8d 8f       	std	Y+29, r24	; 0x1d
    			_delay_ms(2);
    			LCD_voidSendString("Press = to Enter");
    4420:	87 ea       	ldi	r24, 0xA7	; 167
    4422:	90 e0       	ldi	r25, 0x00	; 0
    4424:	0e 94 3a 1c 	call	0x3874	; 0x3874 <LCD_voidSendString>
    4428:	8c c1       	rjmp	.+792    	; 0x4742 <main+0x44c>
    			while (G_u8Positioner != LOCKED)
    			{
    				APP_ControlMotor();
    442a:	0e 94 bf 20 	call	0x417e	; 0x417e <APP_ControlMotor>

    				APP_ReadSensors();
    442e:	0e 94 1e 21 	call	0x423c	; 0x423c <APP_ReadSensors>

    				APP_Control();
    4432:	0e 94 37 21 	call	0x426e	; 0x426e <APP_Control>

    				G_u8HKPReturn = HKP_u8GetKeyValue();
    4436:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <HKP_u8GetKeyValue>
    443a:	80 93 55 02 	sts	0x0255, r24

    				if (G_u8HKPReturn !=HKP_KEY_NOT_PRESSED)
    443e:	80 91 55 02 	lds	r24, 0x0255
    4442:	8f 3f       	cpi	r24, 0xFF	; 255
    4444:	09 f4       	brne	.+2      	; 0x4448 <main+0x152>
    4446:	7d c1       	rjmp	.+762    	; 0x4742 <main+0x44c>
    				{
    					if (G_u8HKPReturn == '=')
    4448:	80 91 55 02 	lds	r24, 0x0255
    444c:	8d 33       	cpi	r24, 0x3D	; 61
    444e:	09 f0       	breq	.+2      	; 0x4452 <main+0x15c>
    4450:	0c c1       	rjmp	.+536    	; 0x466a <main+0x374>
    					{
    						if (G_u16PasswordSave ==  PASS) /*The Password Is Enterred Correctly*/
    4452:	80 91 5a 02 	lds	r24, 0x025A
    4456:	90 91 5b 02 	lds	r25, 0x025B
    445a:	24 e0       	ldi	r18, 0x04	; 4
    445c:	82 3d       	cpi	r24, 0xD2	; 210
    445e:	92 07       	cpc	r25, r18
    4460:	19 f4       	brne	.+6      	; 0x4468 <main+0x172>
    						{
    							APP_voidAppUnlocked();
    4462:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <APP_voidAppUnlocked>
    4466:	6d c1       	rjmp	.+730    	; 0x4742 <main+0x44c>
    						}
    						else	/*The Password is Enterred Wrong*/
    						{
    							LCD_voidSendCommand(LCD_CLEAR);
    4468:	81 e0       	ldi	r24, 0x01	; 1
    446a:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <LCD_voidSendCommand>
    446e:	80 e0       	ldi	r24, 0x00	; 0
    4470:	90 e0       	ldi	r25, 0x00	; 0
    4472:	a0 e0       	ldi	r26, 0x00	; 0
    4474:	b0 e4       	ldi	r27, 0x40	; 64
    4476:	89 8f       	std	Y+25, r24	; 0x19
    4478:	9a 8f       	std	Y+26, r25	; 0x1a
    447a:	ab 8f       	std	Y+27, r26	; 0x1b
    447c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    447e:	69 8d       	ldd	r22, Y+25	; 0x19
    4480:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4482:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4484:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4486:	20 e0       	ldi	r18, 0x00	; 0
    4488:	30 e0       	ldi	r19, 0x00	; 0
    448a:	4a ef       	ldi	r20, 0xFA	; 250
    448c:	54 e4       	ldi	r21, 0x44	; 68
    448e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4492:	dc 01       	movw	r26, r24
    4494:	cb 01       	movw	r24, r22
    4496:	8d 8b       	std	Y+21, r24	; 0x15
    4498:	9e 8b       	std	Y+22, r25	; 0x16
    449a:	af 8b       	std	Y+23, r26	; 0x17
    449c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    449e:	6d 89       	ldd	r22, Y+21	; 0x15
    44a0:	7e 89       	ldd	r23, Y+22	; 0x16
    44a2:	8f 89       	ldd	r24, Y+23	; 0x17
    44a4:	98 8d       	ldd	r25, Y+24	; 0x18
    44a6:	20 e0       	ldi	r18, 0x00	; 0
    44a8:	30 e0       	ldi	r19, 0x00	; 0
    44aa:	40 e8       	ldi	r20, 0x80	; 128
    44ac:	5f e3       	ldi	r21, 0x3F	; 63
    44ae:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    44b2:	88 23       	and	r24, r24
    44b4:	2c f4       	brge	.+10     	; 0x44c0 <main+0x1ca>
		__ticks = 1;
    44b6:	81 e0       	ldi	r24, 0x01	; 1
    44b8:	90 e0       	ldi	r25, 0x00	; 0
    44ba:	9c 8b       	std	Y+20, r25	; 0x14
    44bc:	8b 8b       	std	Y+19, r24	; 0x13
    44be:	3f c0       	rjmp	.+126    	; 0x453e <main+0x248>
	else if (__tmp > 65535)
    44c0:	6d 89       	ldd	r22, Y+21	; 0x15
    44c2:	7e 89       	ldd	r23, Y+22	; 0x16
    44c4:	8f 89       	ldd	r24, Y+23	; 0x17
    44c6:	98 8d       	ldd	r25, Y+24	; 0x18
    44c8:	20 e0       	ldi	r18, 0x00	; 0
    44ca:	3f ef       	ldi	r19, 0xFF	; 255
    44cc:	4f e7       	ldi	r20, 0x7F	; 127
    44ce:	57 e4       	ldi	r21, 0x47	; 71
    44d0:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    44d4:	18 16       	cp	r1, r24
    44d6:	4c f5       	brge	.+82     	; 0x452a <main+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44d8:	69 8d       	ldd	r22, Y+25	; 0x19
    44da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44e0:	20 e0       	ldi	r18, 0x00	; 0
    44e2:	30 e0       	ldi	r19, 0x00	; 0
    44e4:	40 e2       	ldi	r20, 0x20	; 32
    44e6:	51 e4       	ldi	r21, 0x41	; 65
    44e8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    44ec:	dc 01       	movw	r26, r24
    44ee:	cb 01       	movw	r24, r22
    44f0:	bc 01       	movw	r22, r24
    44f2:	cd 01       	movw	r24, r26
    44f4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    44f8:	dc 01       	movw	r26, r24
    44fa:	cb 01       	movw	r24, r22
    44fc:	9c 8b       	std	Y+20, r25	; 0x14
    44fe:	8b 8b       	std	Y+19, r24	; 0x13
    4500:	0f c0       	rjmp	.+30     	; 0x4520 <main+0x22a>
    4502:	88 ec       	ldi	r24, 0xC8	; 200
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	9a 8b       	std	Y+18, r25	; 0x12
    4508:	89 8b       	std	Y+17, r24	; 0x11
    450a:	89 89       	ldd	r24, Y+17	; 0x11
    450c:	9a 89       	ldd	r25, Y+18	; 0x12
    450e:	01 97       	sbiw	r24, 0x01	; 1
    4510:	f1 f7       	brne	.-4      	; 0x450e <main+0x218>
    4512:	9a 8b       	std	Y+18, r25	; 0x12
    4514:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4516:	8b 89       	ldd	r24, Y+19	; 0x13
    4518:	9c 89       	ldd	r25, Y+20	; 0x14
    451a:	01 97       	sbiw	r24, 0x01	; 1
    451c:	9c 8b       	std	Y+20, r25	; 0x14
    451e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4520:	8b 89       	ldd	r24, Y+19	; 0x13
    4522:	9c 89       	ldd	r25, Y+20	; 0x14
    4524:	00 97       	sbiw	r24, 0x00	; 0
    4526:	69 f7       	brne	.-38     	; 0x4502 <main+0x20c>
    4528:	14 c0       	rjmp	.+40     	; 0x4552 <main+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    452a:	6d 89       	ldd	r22, Y+21	; 0x15
    452c:	7e 89       	ldd	r23, Y+22	; 0x16
    452e:	8f 89       	ldd	r24, Y+23	; 0x17
    4530:	98 8d       	ldd	r25, Y+24	; 0x18
    4532:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4536:	dc 01       	movw	r26, r24
    4538:	cb 01       	movw	r24, r22
    453a:	9c 8b       	std	Y+20, r25	; 0x14
    453c:	8b 8b       	std	Y+19, r24	; 0x13
    453e:	8b 89       	ldd	r24, Y+19	; 0x13
    4540:	9c 89       	ldd	r25, Y+20	; 0x14
    4542:	98 8b       	std	Y+16, r25	; 0x10
    4544:	8f 87       	std	Y+15, r24	; 0x0f
    4546:	8f 85       	ldd	r24, Y+15	; 0x0f
    4548:	98 89       	ldd	r25, Y+16	; 0x10
    454a:	01 97       	sbiw	r24, 0x01	; 1
    454c:	f1 f7       	brne	.-4      	; 0x454a <main+0x254>
    454e:	98 8b       	std	Y+16, r25	; 0x10
    4550:	8f 87       	std	Y+15, r24	; 0x0f
    							_delay_ms(2);
    							LCD_voidSetLocation(LCD_U8_LINE1,0);
    4552:	81 e0       	ldi	r24, 0x01	; 1
    4554:	60 e0       	ldi	r22, 0x00	; 0
    4556:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_voidSetLocation>
    							LCD_voidSendString("Wrong Password");
    455a:	88 eb       	ldi	r24, 0xB8	; 184
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	0e 94 3a 1c 	call	0x3874	; 0x3874 <LCD_voidSendString>
    4562:	80 e0       	ldi	r24, 0x00	; 0
    4564:	90 e0       	ldi	r25, 0x00	; 0
    4566:	aa e7       	ldi	r26, 0x7A	; 122
    4568:	b4 e4       	ldi	r27, 0x44	; 68
    456a:	8b 87       	std	Y+11, r24	; 0x0b
    456c:	9c 87       	std	Y+12, r25	; 0x0c
    456e:	ad 87       	std	Y+13, r26	; 0x0d
    4570:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4572:	6b 85       	ldd	r22, Y+11	; 0x0b
    4574:	7c 85       	ldd	r23, Y+12	; 0x0c
    4576:	8d 85       	ldd	r24, Y+13	; 0x0d
    4578:	9e 85       	ldd	r25, Y+14	; 0x0e
    457a:	20 e0       	ldi	r18, 0x00	; 0
    457c:	30 e0       	ldi	r19, 0x00	; 0
    457e:	4a ef       	ldi	r20, 0xFA	; 250
    4580:	54 e4       	ldi	r21, 0x44	; 68
    4582:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4586:	dc 01       	movw	r26, r24
    4588:	cb 01       	movw	r24, r22
    458a:	8f 83       	std	Y+7, r24	; 0x07
    458c:	98 87       	std	Y+8, r25	; 0x08
    458e:	a9 87       	std	Y+9, r26	; 0x09
    4590:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4592:	6f 81       	ldd	r22, Y+7	; 0x07
    4594:	78 85       	ldd	r23, Y+8	; 0x08
    4596:	89 85       	ldd	r24, Y+9	; 0x09
    4598:	9a 85       	ldd	r25, Y+10	; 0x0a
    459a:	20 e0       	ldi	r18, 0x00	; 0
    459c:	30 e0       	ldi	r19, 0x00	; 0
    459e:	40 e8       	ldi	r20, 0x80	; 128
    45a0:	5f e3       	ldi	r21, 0x3F	; 63
    45a2:	0e 94 80 05 	call	0xb00	; 0xb00 <__ltsf2>
    45a6:	88 23       	and	r24, r24
    45a8:	2c f4       	brge	.+10     	; 0x45b4 <main+0x2be>
		__ticks = 1;
    45aa:	81 e0       	ldi	r24, 0x01	; 1
    45ac:	90 e0       	ldi	r25, 0x00	; 0
    45ae:	9e 83       	std	Y+6, r25	; 0x06
    45b0:	8d 83       	std	Y+5, r24	; 0x05
    45b2:	3f c0       	rjmp	.+126    	; 0x4632 <main+0x33c>
	else if (__tmp > 65535)
    45b4:	6f 81       	ldd	r22, Y+7	; 0x07
    45b6:	78 85       	ldd	r23, Y+8	; 0x08
    45b8:	89 85       	ldd	r24, Y+9	; 0x09
    45ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    45bc:	20 e0       	ldi	r18, 0x00	; 0
    45be:	3f ef       	ldi	r19, 0xFF	; 255
    45c0:	4f e7       	ldi	r20, 0x7F	; 127
    45c2:	57 e4       	ldi	r21, 0x47	; 71
    45c4:	0e 94 20 05 	call	0xa40	; 0xa40 <__gtsf2>
    45c8:	18 16       	cp	r1, r24
    45ca:	4c f5       	brge	.+82     	; 0x461e <main+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    45ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    45d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    45d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    45d4:	20 e0       	ldi	r18, 0x00	; 0
    45d6:	30 e0       	ldi	r19, 0x00	; 0
    45d8:	40 e2       	ldi	r20, 0x20	; 32
    45da:	51 e4       	ldi	r21, 0x41	; 65
    45dc:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    45e0:	dc 01       	movw	r26, r24
    45e2:	cb 01       	movw	r24, r22
    45e4:	bc 01       	movw	r22, r24
    45e6:	cd 01       	movw	r24, r26
    45e8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    45ec:	dc 01       	movw	r26, r24
    45ee:	cb 01       	movw	r24, r22
    45f0:	9e 83       	std	Y+6, r25	; 0x06
    45f2:	8d 83       	std	Y+5, r24	; 0x05
    45f4:	0f c0       	rjmp	.+30     	; 0x4614 <main+0x31e>
    45f6:	88 ec       	ldi	r24, 0xC8	; 200
    45f8:	90 e0       	ldi	r25, 0x00	; 0
    45fa:	9c 83       	std	Y+4, r25	; 0x04
    45fc:	8b 83       	std	Y+3, r24	; 0x03
    45fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4600:	9c 81       	ldd	r25, Y+4	; 0x04
    4602:	01 97       	sbiw	r24, 0x01	; 1
    4604:	f1 f7       	brne	.-4      	; 0x4602 <main+0x30c>
    4606:	9c 83       	std	Y+4, r25	; 0x04
    4608:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    460a:	8d 81       	ldd	r24, Y+5	; 0x05
    460c:	9e 81       	ldd	r25, Y+6	; 0x06
    460e:	01 97       	sbiw	r24, 0x01	; 1
    4610:	9e 83       	std	Y+6, r25	; 0x06
    4612:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4614:	8d 81       	ldd	r24, Y+5	; 0x05
    4616:	9e 81       	ldd	r25, Y+6	; 0x06
    4618:	00 97       	sbiw	r24, 0x00	; 0
    461a:	69 f7       	brne	.-38     	; 0x45f6 <main+0x300>
    461c:	14 c0       	rjmp	.+40     	; 0x4646 <main+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    461e:	6f 81       	ldd	r22, Y+7	; 0x07
    4620:	78 85       	ldd	r23, Y+8	; 0x08
    4622:	89 85       	ldd	r24, Y+9	; 0x09
    4624:	9a 85       	ldd	r25, Y+10	; 0x0a
    4626:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    462a:	dc 01       	movw	r26, r24
    462c:	cb 01       	movw	r24, r22
    462e:	9e 83       	std	Y+6, r25	; 0x06
    4630:	8d 83       	std	Y+5, r24	; 0x05
    4632:	8d 81       	ldd	r24, Y+5	; 0x05
    4634:	9e 81       	ldd	r25, Y+6	; 0x06
    4636:	9a 83       	std	Y+2, r25	; 0x02
    4638:	89 83       	std	Y+1, r24	; 0x01
    463a:	89 81       	ldd	r24, Y+1	; 0x01
    463c:	9a 81       	ldd	r25, Y+2	; 0x02
    463e:	01 97       	sbiw	r24, 0x01	; 1
    4640:	f1 f7       	brne	.-4      	; 0x463e <main+0x348>
    4642:	9a 83       	std	Y+2, r25	; 0x02
    4644:	89 83       	std	Y+1, r24	; 0x01
    							_delay_ms(1000);
    							LCD_voidSendCommand(LCD_CLEAR);
    4646:	81 e0       	ldi	r24, 0x01	; 1
    4648:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <LCD_voidSendCommand>
    							LCD_voidSetLocation(LCD_U8_LINE1,0);
    464c:	81 e0       	ldi	r24, 0x01	; 1
    464e:	60 e0       	ldi	r22, 0x00	; 0
    4650:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_voidSetLocation>
    							LCD_voidSendString("Try Again!");
    4654:	87 ec       	ldi	r24, 0xC7	; 199
    4656:	90 e0       	ldi	r25, 0x00	; 0
    4658:	0e 94 3a 1c 	call	0x3874	; 0x3874 <LCD_voidSendString>
    							G_u16PasswordSave = 0 ;
    465c:	10 92 5b 02 	sts	0x025B, r1
    4660:	10 92 5a 02 	sts	0x025A, r1
    						    G_u8LCDCursor = 0;
    4664:	10 92 50 02 	sts	0x0250, r1
    4668:	6c c0       	rjmp	.+216    	; 0x4742 <main+0x44c>
    						}
    					}
    					else if (G_u8HKPReturn == 'C') //Retruning to LOCKED Mode
    466a:	80 91 55 02 	lds	r24, 0x0255
    466e:	83 34       	cpi	r24, 0x43	; 67
    4670:	19 f4       	brne	.+6      	; 0x4678 <main+0x382>
    					{
    						APP_voidAppLocked();
    4672:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <APP_voidAppLocked>
    4676:	65 c0       	rjmp	.+202    	; 0x4742 <main+0x44c>
    					}
    					else if (G_u8HKPReturn >= 0 && G_u8HKPReturn <= 9) //Taking Numbers for password
    4678:	80 91 55 02 	lds	r24, 0x0255
    467c:	8a 30       	cpi	r24, 0x0A	; 10
    467e:	18 f4       	brcc	.+6      	; 0x4686 <main+0x390>
    					{
    						APP_voidTakePassword();
    4680:	0e 94 90 20 	call	0x4120	; 0x4120 <APP_voidTakePassword>
    4684:	5e c0       	rjmp	.+188    	; 0x4742 <main+0x44c>

    					}

    					else if ( G_u8HKPReturn == '+') /*Show/Hide Motor State*/
    4686:	80 91 55 02 	lds	r24, 0x0255
    468a:	8b 32       	cpi	r24, 0x2B	; 43
    468c:	71 f5       	brne	.+92     	; 0x46ea <main+0x3f4>
    					{
							if (G_u8MotorState == MOTOR_CW)
    468e:	80 91 58 02 	lds	r24, 0x0258
    4692:	83 30       	cpi	r24, 0x03	; 3
    4694:	41 f4       	brne	.+16     	; 0x46a6 <main+0x3b0>
							{
								LCD_voidSendCommand(LCD_CLEAR);
    4696:	81 e0       	ldi	r24, 0x01	; 1
    4698:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <LCD_voidSendCommand>
								LCD_voidSendString("ClockWise");
    469c:	82 ed       	ldi	r24, 0xD2	; 210
    469e:	90 e0       	ldi	r25, 0x00	; 0
    46a0:	0e 94 3a 1c 	call	0x3874	; 0x3874 <LCD_voidSendString>
    46a4:	0b c0       	rjmp	.+22     	; 0x46bc <main+0x3c6>
							}
							else if (G_u8MotorState == MOTOR_CCW)
    46a6:	80 91 58 02 	lds	r24, 0x0258
    46aa:	84 30       	cpi	r24, 0x04	; 4
    46ac:	39 f4       	brne	.+14     	; 0x46bc <main+0x3c6>
							{
								LCD_voidSendCommand(LCD_CLEAR);
    46ae:	81 e0       	ldi	r24, 0x01	; 1
    46b0:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <LCD_voidSendCommand>
								LCD_voidSendString("CounterClockWise");
    46b4:	8c ed       	ldi	r24, 0xDC	; 220
    46b6:	90 e0       	ldi	r25, 0x00	; 0
    46b8:	0e 94 3a 1c 	call	0x3874	; 0x3874 <LCD_voidSendString>
							}
							if (G_u8MotorState == MOTOR_ERROR)
    46bc:	80 91 58 02 	lds	r24, 0x0258
    46c0:	86 30       	cpi	r24, 0x06	; 6
    46c2:	39 f4       	brne	.+14     	; 0x46d2 <main+0x3dc>
							{
								LCD_voidSendCommand(LCD_CLEAR);
    46c4:	81 e0       	ldi	r24, 0x01	; 1
    46c6:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <LCD_voidSendCommand>
								LCD_voidSendString("Error");
    46ca:	8d ee       	ldi	r24, 0xED	; 237
    46cc:	90 e0       	ldi	r25, 0x00	; 0
    46ce:	0e 94 3a 1c 	call	0x3874	; 0x3874 <LCD_voidSendString>
							}
							if (G_u8MotorState == MOTOR_STOP)
    46d2:	80 91 58 02 	lds	r24, 0x0258
    46d6:	85 30       	cpi	r24, 0x05	; 5
    46d8:	a1 f5       	brne	.+104    	; 0x4742 <main+0x44c>
							{
								LCD_voidSendCommand(LCD_CLEAR);
    46da:	81 e0       	ldi	r24, 0x01	; 1
    46dc:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <LCD_voidSendCommand>
								LCD_voidSendString("Stop");
    46e0:	83 ef       	ldi	r24, 0xF3	; 243
    46e2:	90 e0       	ldi	r25, 0x00	; 0
    46e4:	0e 94 3a 1c 	call	0x3874	; 0x3874 <LCD_voidSendString>
    46e8:	2c c0       	rjmp	.+88     	; 0x4742 <main+0x44c>
							}
    					}
    					else if ( G_u8HKPReturn == '-')
    46ea:	80 91 55 02 	lds	r24, 0x0255
    46ee:	8d 32       	cpi	r24, 0x2D	; 45
    46f0:	41 f5       	brne	.+80     	; 0x4742 <main+0x44c>
    					{
    						LCD_voidSendCommand(LCD_CLEAR);
    46f2:	81 e0       	ldi	r24, 0x01	; 1
    46f4:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <LCD_voidSendCommand>
    						LCD_voidSetLocation(LCD_U8_LINE1,0);
    46f8:	81 e0       	ldi	r24, 0x01	; 1
    46fa:	60 e0       	ldi	r22, 0x00	; 0
    46fc:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_voidSetLocation>
    						LCD_voidSendString("Temp: ");
    4700:	88 ef       	ldi	r24, 0xF8	; 248
    4702:	90 e0       	ldi	r25, 0x00	; 0
    4704:	0e 94 3a 1c 	call	0x3874	; 0x3874 <LCD_voidSendString>
    						LCD_voidSendNumber(G_u8Temperature);
    4708:	80 91 56 02 	lds	r24, 0x0256
    470c:	88 2f       	mov	r24, r24
    470e:	90 e0       	ldi	r25, 0x00	; 0
    4710:	a0 e0       	ldi	r26, 0x00	; 0
    4712:	b0 e0       	ldi	r27, 0x00	; 0
    4714:	bc 01       	movw	r22, r24
    4716:	cd 01       	movw	r24, r26
    4718:	0e 94 8b 1c 	call	0x3916	; 0x3916 <LCD_voidSendNumber>

    						LCD_voidSetLocation(LCD_U8_LINE2,0);
    471c:	82 e0       	ldi	r24, 0x02	; 2
    471e:	60 e0       	ldi	r22, 0x00	; 0
    4720:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <LCD_voidSetLocation>
    						LCD_voidSendString("Light: ");
    4724:	8f ef       	ldi	r24, 0xFF	; 255
    4726:	90 e0       	ldi	r25, 0x00	; 0
    4728:	0e 94 3a 1c 	call	0x3874	; 0x3874 <LCD_voidSendString>
    						LCD_voidSendNumber(G_u16Intensity);
    472c:	80 91 53 02 	lds	r24, 0x0253
    4730:	90 91 54 02 	lds	r25, 0x0254
    4734:	cc 01       	movw	r24, r24
    4736:	a0 e0       	ldi	r26, 0x00	; 0
    4738:	b0 e0       	ldi	r27, 0x00	; 0
    473a:	bc 01       	movw	r22, r24
    473c:	cd 01       	movw	r24, r26
    473e:	0e 94 8b 1c 	call	0x3916	; 0x3916 <LCD_voidSendNumber>
    		{
    			G_u8Positioner = PASSWORD;
    			LCD_voidSendCommand(LCD_CLEAR);
    			_delay_ms(2);
    			LCD_voidSendString("Press = to Enter");
    			while (G_u8Positioner != LOCKED)
    4742:	80 91 51 02 	lds	r24, 0x0251
    4746:	88 23       	and	r24, r24
    4748:	09 f0       	breq	.+2      	; 0x474c <main+0x456>
    474a:	6f ce       	rjmp	.-802    	; 0x442a <main+0x134>
    						LCD_voidSendString("Light: ");
    						LCD_voidSendNumber(G_u16Intensity);
    					}
    				}
    			}
    			G_u8HKPReturn = HKP_KEY_NOT_PRESSED ;
    474c:	8f ef       	ldi	r24, 0xFF	; 255
    474e:	80 93 55 02 	sts	0x0255, r24
    4752:	e8 cd       	rjmp	.-1072   	; 0x4324 <main+0x2e>

00004754 <__mulsi3>:
    4754:	62 9f       	mul	r22, r18
    4756:	d0 01       	movw	r26, r0
    4758:	73 9f       	mul	r23, r19
    475a:	f0 01       	movw	r30, r0
    475c:	82 9f       	mul	r24, r18
    475e:	e0 0d       	add	r30, r0
    4760:	f1 1d       	adc	r31, r1
    4762:	64 9f       	mul	r22, r20
    4764:	e0 0d       	add	r30, r0
    4766:	f1 1d       	adc	r31, r1
    4768:	92 9f       	mul	r25, r18
    476a:	f0 0d       	add	r31, r0
    476c:	83 9f       	mul	r24, r19
    476e:	f0 0d       	add	r31, r0
    4770:	74 9f       	mul	r23, r20
    4772:	f0 0d       	add	r31, r0
    4774:	65 9f       	mul	r22, r21
    4776:	f0 0d       	add	r31, r0
    4778:	99 27       	eor	r25, r25
    477a:	72 9f       	mul	r23, r18
    477c:	b0 0d       	add	r27, r0
    477e:	e1 1d       	adc	r30, r1
    4780:	f9 1f       	adc	r31, r25
    4782:	63 9f       	mul	r22, r19
    4784:	b0 0d       	add	r27, r0
    4786:	e1 1d       	adc	r30, r1
    4788:	f9 1f       	adc	r31, r25
    478a:	bd 01       	movw	r22, r26
    478c:	cf 01       	movw	r24, r30
    478e:	11 24       	eor	r1, r1
    4790:	08 95       	ret

00004792 <__divmodhi4>:
    4792:	97 fb       	bst	r25, 7
    4794:	09 2e       	mov	r0, r25
    4796:	07 26       	eor	r0, r23
    4798:	0a d0       	rcall	.+20     	; 0x47ae <__divmodhi4_neg1>
    479a:	77 fd       	sbrc	r23, 7
    479c:	04 d0       	rcall	.+8      	; 0x47a6 <__divmodhi4_neg2>
    479e:	2e d0       	rcall	.+92     	; 0x47fc <__udivmodhi4>
    47a0:	06 d0       	rcall	.+12     	; 0x47ae <__divmodhi4_neg1>
    47a2:	00 20       	and	r0, r0
    47a4:	1a f4       	brpl	.+6      	; 0x47ac <__divmodhi4_exit>

000047a6 <__divmodhi4_neg2>:
    47a6:	70 95       	com	r23
    47a8:	61 95       	neg	r22
    47aa:	7f 4f       	sbci	r23, 0xFF	; 255

000047ac <__divmodhi4_exit>:
    47ac:	08 95       	ret

000047ae <__divmodhi4_neg1>:
    47ae:	f6 f7       	brtc	.-4      	; 0x47ac <__divmodhi4_exit>
    47b0:	90 95       	com	r25
    47b2:	81 95       	neg	r24
    47b4:	9f 4f       	sbci	r25, 0xFF	; 255
    47b6:	08 95       	ret

000047b8 <__udivmodsi4>:
    47b8:	a1 e2       	ldi	r26, 0x21	; 33
    47ba:	1a 2e       	mov	r1, r26
    47bc:	aa 1b       	sub	r26, r26
    47be:	bb 1b       	sub	r27, r27
    47c0:	fd 01       	movw	r30, r26
    47c2:	0d c0       	rjmp	.+26     	; 0x47de <__udivmodsi4_ep>

000047c4 <__udivmodsi4_loop>:
    47c4:	aa 1f       	adc	r26, r26
    47c6:	bb 1f       	adc	r27, r27
    47c8:	ee 1f       	adc	r30, r30
    47ca:	ff 1f       	adc	r31, r31
    47cc:	a2 17       	cp	r26, r18
    47ce:	b3 07       	cpc	r27, r19
    47d0:	e4 07       	cpc	r30, r20
    47d2:	f5 07       	cpc	r31, r21
    47d4:	20 f0       	brcs	.+8      	; 0x47de <__udivmodsi4_ep>
    47d6:	a2 1b       	sub	r26, r18
    47d8:	b3 0b       	sbc	r27, r19
    47da:	e4 0b       	sbc	r30, r20
    47dc:	f5 0b       	sbc	r31, r21

000047de <__udivmodsi4_ep>:
    47de:	66 1f       	adc	r22, r22
    47e0:	77 1f       	adc	r23, r23
    47e2:	88 1f       	adc	r24, r24
    47e4:	99 1f       	adc	r25, r25
    47e6:	1a 94       	dec	r1
    47e8:	69 f7       	brne	.-38     	; 0x47c4 <__udivmodsi4_loop>
    47ea:	60 95       	com	r22
    47ec:	70 95       	com	r23
    47ee:	80 95       	com	r24
    47f0:	90 95       	com	r25
    47f2:	9b 01       	movw	r18, r22
    47f4:	ac 01       	movw	r20, r24
    47f6:	bd 01       	movw	r22, r26
    47f8:	cf 01       	movw	r24, r30
    47fa:	08 95       	ret

000047fc <__udivmodhi4>:
    47fc:	aa 1b       	sub	r26, r26
    47fe:	bb 1b       	sub	r27, r27
    4800:	51 e1       	ldi	r21, 0x11	; 17
    4802:	07 c0       	rjmp	.+14     	; 0x4812 <__udivmodhi4_ep>

00004804 <__udivmodhi4_loop>:
    4804:	aa 1f       	adc	r26, r26
    4806:	bb 1f       	adc	r27, r27
    4808:	a6 17       	cp	r26, r22
    480a:	b7 07       	cpc	r27, r23
    480c:	10 f0       	brcs	.+4      	; 0x4812 <__udivmodhi4_ep>
    480e:	a6 1b       	sub	r26, r22
    4810:	b7 0b       	sbc	r27, r23

00004812 <__udivmodhi4_ep>:
    4812:	88 1f       	adc	r24, r24
    4814:	99 1f       	adc	r25, r25
    4816:	5a 95       	dec	r21
    4818:	a9 f7       	brne	.-22     	; 0x4804 <__udivmodhi4_loop>
    481a:	80 95       	com	r24
    481c:	90 95       	com	r25
    481e:	bc 01       	movw	r22, r24
    4820:	cd 01       	movw	r24, r26
    4822:	08 95       	ret

00004824 <__prologue_saves__>:
    4824:	2f 92       	push	r2
    4826:	3f 92       	push	r3
    4828:	4f 92       	push	r4
    482a:	5f 92       	push	r5
    482c:	6f 92       	push	r6
    482e:	7f 92       	push	r7
    4830:	8f 92       	push	r8
    4832:	9f 92       	push	r9
    4834:	af 92       	push	r10
    4836:	bf 92       	push	r11
    4838:	cf 92       	push	r12
    483a:	df 92       	push	r13
    483c:	ef 92       	push	r14
    483e:	ff 92       	push	r15
    4840:	0f 93       	push	r16
    4842:	1f 93       	push	r17
    4844:	cf 93       	push	r28
    4846:	df 93       	push	r29
    4848:	cd b7       	in	r28, 0x3d	; 61
    484a:	de b7       	in	r29, 0x3e	; 62
    484c:	ca 1b       	sub	r28, r26
    484e:	db 0b       	sbc	r29, r27
    4850:	0f b6       	in	r0, 0x3f	; 63
    4852:	f8 94       	cli
    4854:	de bf       	out	0x3e, r29	; 62
    4856:	0f be       	out	0x3f, r0	; 63
    4858:	cd bf       	out	0x3d, r28	; 61
    485a:	09 94       	ijmp

0000485c <__epilogue_restores__>:
    485c:	2a 88       	ldd	r2, Y+18	; 0x12
    485e:	39 88       	ldd	r3, Y+17	; 0x11
    4860:	48 88       	ldd	r4, Y+16	; 0x10
    4862:	5f 84       	ldd	r5, Y+15	; 0x0f
    4864:	6e 84       	ldd	r6, Y+14	; 0x0e
    4866:	7d 84       	ldd	r7, Y+13	; 0x0d
    4868:	8c 84       	ldd	r8, Y+12	; 0x0c
    486a:	9b 84       	ldd	r9, Y+11	; 0x0b
    486c:	aa 84       	ldd	r10, Y+10	; 0x0a
    486e:	b9 84       	ldd	r11, Y+9	; 0x09
    4870:	c8 84       	ldd	r12, Y+8	; 0x08
    4872:	df 80       	ldd	r13, Y+7	; 0x07
    4874:	ee 80       	ldd	r14, Y+6	; 0x06
    4876:	fd 80       	ldd	r15, Y+5	; 0x05
    4878:	0c 81       	ldd	r16, Y+4	; 0x04
    487a:	1b 81       	ldd	r17, Y+3	; 0x03
    487c:	aa 81       	ldd	r26, Y+2	; 0x02
    487e:	b9 81       	ldd	r27, Y+1	; 0x01
    4880:	ce 0f       	add	r28, r30
    4882:	d1 1d       	adc	r29, r1
    4884:	0f b6       	in	r0, 0x3f	; 63
    4886:	f8 94       	cli
    4888:	de bf       	out	0x3e, r29	; 62
    488a:	0f be       	out	0x3f, r0	; 63
    488c:	cd bf       	out	0x3d, r28	; 61
    488e:	ed 01       	movw	r28, r26
    4890:	08 95       	ret

00004892 <_exit>:
    4892:	f8 94       	cli

00004894 <__stop_program>:
    4894:	ff cf       	rjmp	.-2      	; 0x4894 <__stop_program>
